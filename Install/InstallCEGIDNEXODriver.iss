; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

;#define MyLibName "NEXOSale"
;#define MyExeName "PMS\NEXOSale"
#define MyAppName "PMS.CEGID.NEXO"
#define MyLibVersion GetFileVersion("..\Release\PMS.NEXOSALE.dll")
;#define MyDriverVersion GetFileVersion("..\NEXOD\BIN\PMS.CEGID.NEXO.dll")
#define MyDriverVersion GetDateTimeString('yyyy/mm/dd', '-', ':');
#define MyExeDir "..\Release\"
#define MyExeDelphiDir "..\NEXOD\Bin\"
#define MyCodeDir "..\NexoSaleTest\"
#define MyCodeDestDir ".\NexoSaleTest\"
#define MyInstallDir "..\Install\"
#define MySourceDir "..\NEXOSaleTest\"
#define MyAppPublisher "PMS"
#define MyRegistry "Software\PMS\NexoSale\"
#define MyRegistryKey "SettingsFileName"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{84982B21-D40A-4A13-A16C-07F08265A768}
AppName={#MyAppName}
AppVersion={#MyLibVersion}
AppVerName={#MyAppName}
AppPublisher={#MyAppPublisher}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
DisableDirPage=yes
OutputDir=..\Install
OutputBaseFilename=Install{#MyAppName}-v{#MyLibVersion}-v{#MyDriverVersion}

Compression=lzma
SolidCompression=yes

[Languages]
Name: "french"; MessagesFile: "compiler:Languages\French.isl"

[Dirs]
Name: "{userdocs}\{#MyAppName}"

[Files]
Source: "{#MyExeDir}PMS.NEXO.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MyExeDir}PMS.NEXO.xml"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MyExeDir}PMS.COMMON.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MyExeDir}PMS.COMMON.xml"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MyExeDir}Newtonsoft.Json.*"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MyExeDir}PMS.NEXOSALE.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MyExeDir}PMS.NEXOSALE.xml"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MyExeDir}NexoSaleTest.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MyExeDelphiDir}PMS.CEGID.NEXO.dll"; DestDir: "{app}"; Flags: ignoreversion

[Run]
Filename: {dotnet40}\Regasm.exe;    Parameters: "PMS.COMMON.dll /codebase"; WorkingDir: "{app}"; Flags: runhidden; StatusMsg: "Registering component PMS.COMMON"
Filename: {dotnet40}\Regasm.exe;    Parameters: "PMS.NEXO.dll /codebase"; WorkingDir: "{app}"; Flags: runhidden; StatusMsg: "Registering component PMS.NEXO"
Filename: {dotnet40}\Regasm.exe;    Parameters: "PMS.NEXOSALE.dll /codebase"; WorkingDir: "{app}"; Flags: runhidden; StatusMsg: "Registering component PMS.NEXOSALE"
; register the driver inside the Y2 system
Filename: {code:CPOSDllManagerDir}\CPOS_DllManager.exe;  Parameters: "-reg PMS.CEGID.NEXO.dll"; WorkingDir: "{app}"; Flags: runhidden runascurrentuser; StatusMsg: "Registering PMS.CEGID.NEXO driver";  Check: IsCPOSDllManagerPresent

[UninstallRun]
Filename: {dotnet40}\Regasm.exe;    Parameters: "PMS.COMMON.dll /unregister"; WorkingDir: "{app}"; Flags: runhidden; StatusMsg: "Unregistering component PMS.COMMON"
Filename: {dotnet40}\Regasm.exe;    Parameters: "PMS.NEXO.dll /unregister"; WorkingDir: "{app}"; Flags: runhidden; StatusMsg: "Unregistering component PMS.NEXO"
Filename: {dotnet40}\Regasm.exe;    Parameters: "PMS.NEXOSALE.dll /unregister"; WorkingDir: "{app}"; Flags: runhidden; StatusMsg: "Unregistering component PMS.NEXOSALE"
; unregister the driver from the Y2 system
Filename: {code:CPOSDllManagerDir}\CPOS_DllManager.exe;  Parameters: "-unreg PMS.CEGID.NEXO"; WorkingDir: "{app}"; Flags: runhidden; StatusMsg: "Unregistering PMS.CEGID.NEXO driver";  Check: IsCPOSDllManagerPresent

[Registry]
Root: HKCU; Subkey: "{#MyRegistry}"; ValueName: "{#MyRegistryKey}"; ValueType: string; ValueData: "{userdocs}\{#MyAppName}\"; Flags: createvalueifdoesntexist uninsdeletekey

[Code]
var
  DirFound: string;
 
function FindInDir(const dir: string; const file: string): boolean;
var
  search: string;
  FindRec: TFindRec;
begin
  result := false;
  search := dir + '\*';
  if FindFirst(search, FindRec) then
  begin
    try
      repeat
        // on oublie "." et ".."
        if (FindRec.Name <> '.') and (FindRec.Name <> '..') then
        begin
          // si c'est un répertoire alors on l'ouvre et on cherche dedans
          if 0 <> (FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY) then
          begin
            result := FindInDir(dir + '\' + FindRec.Name, file);
          end
          // sinon on regarde si on trouve le fichier cherché
          else 
          begin
            Log(dir + '\' + FindRec.Name);
            if 0 = CompareText(FindRec.Name, file) then
            begin
              // le fichier a été trouvé on va s'arrêter
              result := true;
              DirFound := dir;
            end;
          end;
        end;
      until (result) or (not FindNext(FindRec));
    finally
      FindClose(FindRec);
    end;
  end;
end;
 
function IsCPOSDllManagerPresent(): boolean;
var
	fdir: string;
	fname: string;
begin
  DirFound := '';
	fdir := ExpandConstant('{pf}\CEGID');
	fname := 'CPOS_DllManager'
  result := FindInDir(fdir, fname + '.exe');
  if not result then MsgBox(fname + ' hasn''t been not found in ' + fdir + ' and sub-directories. The driver could not be processed (registered/unregistered), please proceed manually.', mbError, MB_OK);
end;

function CPOSDllManagerDir(const Param: string): string;
begin
  result := DirFound;
end;

function HasCPOSDllManagerDirBeenFound(): boolean;
begin
  result := DirFound <> ''
end;