unit PMS_NEXO30_TLB;

// ************************************************************************ //
// AVERTISSEMENT
// -------
// Les types déclarés dans ce fichier ont été générés à partir de données lues
// depuis la bibliothèque de types. Si cette dernière (via une autre bibliothèque de types
// s'y référant) est explicitement ou indirectement ré-importée, ou la commande "Actualiser"
// de l'éditeur de bibliothèque de types est activée lors de la modification de la bibliothèque
// de types, le contenu de ce fichier sera régénéré et toutes les modifications
// manuellement apportées seront perdues.
// ************************************************************************ //

// $Rev: 98336 $
// Fichier généré le 07/06/2022 17:58:47 depuis la bibliothèque de types ci-dessous.

// ************************************************************************  //
// Biblio. types : C:\Users\philippe\Documents\Dev\NEXOSale\bin\PMS.NEXO30.tlb (1)
// LIBID : {2F879B40-73D6-3544-A1A1-9C5E20F39333}
// LCID : 0
// Fichier d'aide : 
// Chaîne d'aide : 
// DepndLst : 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
//   (2) v2.4 mscorlib, (C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.tlb)
//   (3) v6.1 PMS_COMMON, (C:\Users\philippe\Documents\Dev\NEXOSale\bin\PMS.COMMON.tlb)
// Bibliothèque de types parent :
//   (0) v1.4 PMS_NEXOSALE30, (C:\Users\philippe\Documents\Dev\NEXOSale\bin\PMS.NEXOSALE30.tlb)
// SYS_KIND: SYS_WIN64
// Errors:
//   Remarque : le symbole 'Type' a été renommé en 'type_'
//   Remarque : membre 'Class' de 'INexoItem' changé en 'Class_'
//   Remarque : membre 'Label' de 'INexoLabel' changé en 'Label_'
//   Remarque : paramètre 'Label' dans INexoCluster.SetLabel changé en 'Label_'
//   Remarque : paramètre 'Label' dans INexoCluster.UnsetLabel changé en 'Label_'
// ************************************************************************ //
{$TYPEDADDRESS OFF} // L'unité doit être compilée sans pointeur à type contrôlé.  
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}

interface

uses Winapi.Windows, mscorlib_TLB, PMS_COMMON_TLB, System.Classes, System.Variants, System.Win.StdVCL, Vcl.Graphics, Vcl.OleServer, 
Winapi.ActiveX;
  
// *********************************************************************//
// GUIDS déclarés dans la bibliothèque de types. Préfixes utilisés:        
//   Bibliothèques de types : LIBID_xxxx                                      
//   CoClasses              : CLASS_xxxx                                      
//   Interfaces DISP        : DIID_xxxx                                       
//   Interfaces Non-DISP    : IID_xxxx                                        
// *********************************************************************//
const
  // Versions mineure et majeure de la bibliothèque de types
  PMS_NEXO30MajorVersion = 4;
  PMS_NEXO30MinorVersion = 7;

  LIBID_PMS_NEXO30: TGUID = '{2F879B40-73D6-3544-A1A1-9C5E20F39333}';

  IID_IAuthenticatedDataType: TGUID = '{0103BFDC-32BC-4284-B2DB-9C428B641C21}';
  IID_IKEKType: TGUID = '{0F9468C5-8521-4795-B176-39E4CB0AA2A5}';
  IID_IKEKIdentifierType: TGUID = '{E393981D-4A03-4470-A652-42796C5A88EC}';
  IID_IDisplayResponseType: TGUID = '{2964AA38-522A-434B-855E-A7ADAF012210}';
  IID_IOutputResultType: TGUID = '{7CBD2144-EFAD-4664-B867-F8A8A378887D}';
  IID_IResponseType: TGUID = '{D7FA969F-A143-4CD9-95DF-364314075DBB}';
  IID_IDisplayRequestType: TGUID = '{CC90DF52-6903-474B-8D91-68F601FC87E6}';
  IID_IDisplayOutputType: TGUID = '{A9BD68A5-43C2-40D5-A66B-49989B155C71}';
  IID_IOutputContentType: TGUID = '{CB5B85B3-7B48-4926-B007-CB3467BC5B10}';
  IID_IPredefinedContentType: TGUID = '{745F8DDE-FAE5-4FA0-B921-DFAFF2D3B39F}';
  IID_IOutputTextType: TGUID = '{F9D4E60A-F87E-435F-8214-EA852C48338C}';
  IID_IOutputBarcodeType: TGUID = '{020FA7C1-5F33-48C9-BFD0-D8092E6A74F4}';
  IID_IMenuEntryType: TGUID = '{09EC084B-4A75-4536-8700-E5676EB15AF9}';
  IID_IAlgorithmIdentifier: TGUID = '{8A6317C0-4FF8-4BC1-98C5-D9A2F3708E2B}';
  IID_IParameterType: TGUID = '{70FE73F6-E5DA-4E62-A5B8-01109CEE7387}';
  IID_IKeyTransportType: TGUID = '{8F5666C4-AAC4-4568-A157-0865637377FC}';
  IID_IRecipientIdentifierType: TGUID = '{329B9102-F23E-4787-B431-CA045837AF6C}';
  IID_IIssuerAndSerialNumberType: TGUID = '{9D6D3284-81FA-41EA-9F7B-BEF880B68523}';
  IID_IRelativeDistinguishedNameType: TGUID = '{1D5912E4-7002-4C22-9068-A381B95A68C7}';
  IID_IEncapsulatedContentType: TGUID = '{69F327EE-CBFB-4D8D-8338-03D5E5926F0B}';
  IID_IDigestedDataType: TGUID = '{FF3454A9-51E5-468D-82BC-F06A926CAEAA}';
  IID_IEncryptedContentType: TGUID = '{FE53185F-A040-4543-BFEA-62AB2646E4B3}';
  IID_IEnvelopedDataType: TGUID = '{B07AB1AF-5E11-468F-AA32-574A45F3B00D}';
  IID_IIssuerType: TGUID = '{14E31B84-625C-48A2-BD9C-335B9BF09771}';
  IID_INamedKeyEncryptedDataType: TGUID = '{5E745556-663A-4A8A-B2C9-FE7235A60BE9}';
  IID_ISignedDataType: TGUID = '{7E13E64C-7695-4FBA-82A7-4E4237122C07}';
  IID_ISignerType: TGUID = '{F7C84837-871D-4278-84F1-6A0133FC8539}';
  IID_ISignerIdentifierType: TGUID = '{48F3EB08-A25F-40DF-88E1-6F08223EBFF3}';
  IID_IContentInformationType: TGUID = '{4CBD5240-95A1-4F0E-9662-D37A66AAF4A4}';
  IID_IAbortRequestType: TGUID = '{D93E3748-A956-4B97-89EE-CBA96B248C35}';
  IID_IMessageReferenceType: TGUID = '{E017D402-6316-4DD0-B8EF-894B1739382A}';
  IID_IAdminRequestType: TGUID = '{A3E8F8FE-23CB-440E-982A-8E37F565B0E9}';
  IID_IAdminResponseType: TGUID = '{12DD6E38-1996-429E-94A8-A0BEAFB692BD}';
  IID_IAllowedProductType: TGUID = '{DFB251C8-07CA-4E08-883C-882EFE14CF18}';
  IID_IAmountsReqType: TGUID = '{BDDBFF81-1429-4458-A291-32CCAB0A5C83}';
  IID_IAmountsRespType: TGUID = '{4761C08B-82B5-4920-890E-3327A3A5A658}';
  IID_IAreaSizeType: TGUID = '{6F8060AB-F530-4753-8FBD-404893852F36}';
  IID_IBalanceInquiryRequestType: TGUID = '{4C22034D-5458-4CF9-A909-B28942F5A5B7}';
  IID_IPaymentAccountReqType: TGUID = '{3C99F363-F01A-43D6-AADF-223DED9B6FEE}';
  IID_ITransactionIdentificationType: TGUID = '{661750DC-9762-485A-B70C-930F0DE1D0F0}';
  IID_IPaymentInstrumentDataType: TGUID = '{D2995B18-6B09-44AE-A401-75EA05C580B7}';
  IID_ICardDataType: TGUID = '{016C16FB-BC51-4303-B75F-6966323DE3CD}';
  IID_ISensitiveCardDataType: TGUID = '{8157B029-07A4-4390-93F9-5CD23C447FE7}';
  IID_ITrackDataType: TGUID = '{71C428AD-CB8C-41CD-AF4F-A4C218878653}';
  IID_IPaymentTokenType: TGUID = '{0C551044-F6E2-47A9-BCFA-6F6FB43A6CB7}';
  IID_ICustomerOrderType: TGUID = '{7FC6DEA0-7948-4482-B493-7E81E3CF1CC1}';
  IID_ICheckDataType: TGUID = '{7F1477F3-4D01-4034-952E-8093A94CB5F4}';
  IID_IMobileDataType: TGUID = '{D8BB76DF-9CD9-47FE-918B-156DE29214E7}';
  IID_IGeolocationType: TGUID = '{B6E87431-45BD-4D79-A606-7D9A0AD8D540}';
  IID_IGeographicCoordinatesType: TGUID = '{75A95F94-3D54-44B0-A5A7-F87DFAD484E6}';
  IID_IUTMCoordinatesType: TGUID = '{FC4DE13C-DAB4-44F7-AB26-2F00A02C28F3}';
  IID_ISensitiveMobileDataType: TGUID = '{D8B41024-8FDC-4851-BEDF-905F4F13F63D}';
  IID_ILoyaltyAccountReqType: TGUID = '{F7B69384-A00D-493F-BFAD-B7D82211788E}';
  IID_ILoyaltyAccountIDType: TGUID = '{AE0BA3F9-3C53-412B-A668-90BA7AE626E4}';
  IID_IBalanceInquiryResponseType: TGUID = '{3F09914B-781F-44B2-9EDD-A795E0D3D693}';
  IID_IPaymentAccountStatusType: TGUID = '{1448777E-7FC7-4432-8368-16C00291586C}';
  IID_IPaymentAcquirerDataType: TGUID = '{BAA66DE0-094E-4342-B50C-8F0BC39490C0}';
  IID_ILoyaltyAccountStatusType: TGUID = '{2418E103-B9AC-491E-B9C7-7DF036148C4B}';
  IID_ILoyaltyAccountType: TGUID = '{529438D2-90EA-42E1-B5E9-CFEBE746977D}';
  IID_IBatchRequestType: TGUID = '{0F0B4EF1-2596-45F9-A713-2A53BCFA5633}';
  IID_ITransactionToPerformType: TGUID = '{B3DF8448-8F7B-4A31-8A79-85603CA6A76C}';
  IID_ILoyaltyRequestType: TGUID = '{C29B3CAF-E468-4CBC-9E46-A9D723C5F649}';
  IID_ISaleDataType: TGUID = '{928037B8-9871-4F26-A6F1-D50D45FBDAC3}';
  IID_ISaleTerminalDataType: TGUID = '{F7F55843-9015-458D-B055-0004FA36EBCB}';
  IID_ISaleProfileType: TGUID = '{47553BC4-8B70-45BA-86BB-F1B46E3D2CA0}';
  IID_ISponsoredMerchantType: TGUID = '{2F3091A4-0DB4-4EA1-8220-93537FB58258}';
  IID_ISaleToIssuerDataType: TGUID = '{B8FD31FF-75C7-469B-916F-894CDFB09687}';
  IID_ILoyaltyTransactionType: TGUID = '{53FDFFF1-C31D-48A7-AFD4-24F67B9A1C3D}';
  IID_IOriginalPOITransactionType: TGUID = '{D775A0CB-DF82-4459-A11D-091B86B1A6BA}';
  IID_ITransactionConditionsType: TGUID = '{133DDFC1-383C-4E72-8B7C-F8B688901137}';
  IID_ISaleItemType: TGUID = '{B99F918F-A4AB-4D1C-AC75-B9D54223D68A}';
  IID_ILoyaltyDataType: TGUID = '{75D37DD2-A2BC-444C-8372-F6F822BD238F}';
  IID_ILoyaltyAmountType: TGUID = '{C4443224-2FA0-4E9F-8A74-43EADDDA34BC}';
  IID_IPaymentRequestType: TGUID = '{4909F2A0-ECE6-4938-81B2-AB9064D97565}';
  IID_IPaymentTransactionType: TGUID = '{96EE7CC1-908D-4D89-B345-91069EBF6B22}';
  IID_IPaymentDataType: TGUID = '{AF5206BF-B748-42AF-81D4-465BC2A070F2}';
  IID_IInstalmentType: TGUID = '{28A6109C-B874-475D-A715-02AD78C502A7}';
  IID_IReversalRequestType: TGUID = '{D26BADDF-73DF-40D4-9249-0ABD6EEF8583}';
  IID_IBatchResponseType: TGUID = '{D59DBEAC-5D3C-4FF2-8C31-C2A41FAF7D90}';
  IID_IPerformedTransactionType: TGUID = '{48B5F7E6-DFF7-4017-B07B-1A9C62FF8537}';
  IID_IPOIDataType: TGUID = '{A0BFA89E-5DF1-4E5B-B27B-099F66AFC393}';
  IID_IPaymentResultType: TGUID = '{051A8ECB-6F0C-4069-A1A6-D132C68704F7}';
  IID_ICurrencyConversionType: TGUID = '{4CA716EB-FE0B-4D07-B676-F6F12F86B8C3}';
  IID_IAmountType: TGUID = '{97C3AD17-3C4B-4D44-B028-356AD3F37752}';
  IID_ICapturedSignatureType: TGUID = '{CCB780A0-6CED-421C-975B-AF05CC625A8C}';
  IID_ISignaturePointType: TGUID = '{85E59F11-91ED-42FF-A9A5-C34D937AB3E8}';
  IID_ILoyaltyResultType: TGUID = '{F155AC4B-5C1D-4E45-AF77-C60C291E7E84}';
  IID_ILoyaltyAcquirerDataType: TGUID = '{35A1C2CE-4E6A-4857-80A1-8308EBD18F65}';
  IID_IRebatesType: TGUID = '{AC0FF447-76B9-48B3-ACA1-B701AF9CCA3A}';
  IID_ISaleItemRebateType: TGUID = '{F2B4CFF7-9A9B-4D5E-938B-8B7206A0ADA0}';
  IID_ICardAcquisitionRequestType: TGUID = '{5E0D8D67-C7C2-46E8-9DB2-8CD93766C483}';
  IID_ICardAcquisitionTransactionType: TGUID = '{CA286CA8-16EC-4983-80DA-94F7AB60BED2}';
  IID_ICardAcquisitionResponseType: TGUID = '{F77F3BDC-9594-434A-80C3-A58CF00131DE}';
  IID_ICardholderPINType: TGUID = '{04D615D7-5B0D-4E94-8A27-CF46FE90BBB3}';
  IID_ICardReaderAPDURequestType: TGUID = '{CF007910-C350-4607-A23B-91F05C4B6D0B}';
  IID_ICardReaderAPDUResponseType: TGUID = '{2DB25B97-BF82-435F-99A8-877FA2C29092}';
  IID_ICardReaderInitRequestType: TGUID = '{AD946B05-FC15-47BE-AA5E-09A7C25509AA}';
  IID_ICardReaderInitResponseType: TGUID = '{35B0DB41-B025-4778-B323-C24198ED8759}';
  IID_IICCResetDataType: TGUID = '{2D93D1AA-44C1-46CA-A390-2B19322D07B7}';
  IID_ICardReaderPowerOffRequestType: TGUID = '{6B383DD8-C8D5-44A9-98F1-D1C8F39BCCC0}';
  IID_ICardReaderPowerOffResponseType: TGUID = '{91322460-3578-4B03-9593-457F6C84F1C4}';
  IID_ICashHandlingDeviceType: TGUID = '{11C6588E-7F40-494D-AD60-CC497176CD26}';
  IID_ICoinsOrBillsType: TGUID = '{4FAE8FC8-7E75-4244-911F-BCDD67CE836A}';
  IID_IDiagnosisRequestType: TGUID = '{0F133523-DA58-43BC-8DF7-4B3E0AAB645D}';
  IID_IDiagnosisResponseType: TGUID = '{82FF8BB4-2464-41AE-B6CD-840EB1088FE4}';
  IID_IPOIStatusType: TGUID = '{F2E98977-D861-48B7-BB38-EF0A63F89266}';
  IID_IHostStatusType: TGUID = '{AE1AC4DC-DC78-4182-97BA-CA72AD7A7C40}';
  IID_IEnableServiceRequestType: TGUID = '{3070A5FD-C29D-445B-A59B-9CAD9B47A3A4}';
  IID_IEnableServiceResponseType: TGUID = '{D1A24F83-DDA3-42CA-90E7-896510211325}';
  IID_IEventNotificationType: TGUID = '{07E7CD95-DB29-4715-BA9D-5C2EAFC6794D}';
  IID_IGetTotalsRequestType: TGUID = '{889C8943-7330-4BB3-A49D-DAD06E0272C9}';
  IID_ITotalFilterType: TGUID = '{68213F0F-3150-4E28-8C6A-F5FAE854636E}';
  IID_IGetTotalsResponseType: TGUID = '{874A07DF-469B-4E98-B91E-E6B0B12720B8}';
  IID_ITransactionTotalsType: TGUID = '{68910793-5EA2-4309-9F4A-830C9451BC97}';
  IID_IPaymentTotalsType: TGUID = '{75D39E45-A5ED-4BA4-B7B3-5F477414D419}';
  IID_ILoyaltyTotalsType: TGUID = '{82C28D37-7499-46A7-B033-127D0B97C24C}';
  IID_IInputType: TGUID = '{FD31DF8B-72CA-49F1-A226-7A6F35FA712E}';
  IID_IInputDataType: TGUID = '{5C98539A-61A0-42FB-B997-894650DFFDAA}';
  IID_IInputRequestType: TGUID = '{1AD04AEF-FD79-4E1B-AC25-FA0756697193}';
  IID_IInputResponseType: TGUID = '{3D94CD95-987C-4FCF-A12E-6C78F0F39F58}';
  IID_IInputResultType: TGUID = '{3E961B38-E333-4C63-90EF-DE823DDD6EFC}';
  IID_IInputUpdateType: TGUID = '{5FEE78E4-19D3-469A-8289-E2C927788460}';
  IID_ILoginRequestType: TGUID = '{6C103E7C-CBAB-4ECF-BD7D-D3A3ED5CC617}';
  IID_ISaleSoftwareType: TGUID = '{4BD56095-E485-4DB0-A985-4FB160FC3415}';
  IID_ILoginResponseType: TGUID = '{511E650D-E483-4CD8-82D1-20CE93A4E2E4}';
  IID_IPOISystemDataType: TGUID = '{D6226E98-1E51-492E-904A-4D6AF6CB305A}';
  IID_IPOISoftwareType: TGUID = '{9968E83D-D609-4BD2-9904-3F5BF201EBFB}';
  IID_IPOITerminalDataType: TGUID = '{0E309C97-C517-4A5A-A6F3-6568CD60DEA0}';
  IID_IPOIProfileType: TGUID = '{7C6DB8C6-1F8C-4157-96FA-B3B22137D8DD}';
  IID_ILogoutRequestType: TGUID = '{C515784E-39AF-472C-B5D9-08D1653277AB}';
  IID_ILogoutResponseType: TGUID = '{849AB9F4-43D8-4DB5-B0A7-915D380AB89C}';
  IID_ILoyaltyResponseType: TGUID = '{A9653AC2-1361-4132-8725-F1F6784FCA85}';
  IID_IPaymentReceiptType: TGUID = '{748651C3-36D4-4549-89F9-289F4A5E4A78}';
  IID_IMessageHeaderType: TGUID = '{54DF973A-937C-4215-A6B2-D5D12C1E8437}';
  IID_IPaymentResponseType: TGUID = '{6E6C8F03-1795-40ED-9272-66215979B95D}';
  IID_IPINRequestType: TGUID = '{91C77CE3-2021-45AA-AF40-FB2AC5E74082}';
  IID_IPINResponseType: TGUID = '{2D042C76-B917-4CB4-A49A-75BCF03493BA}';
  IID_IPrintOutputType: TGUID = '{CD1A7CDC-2E94-4163-BBDE-184D575214C9}';
  IID_IPrintRequestType: TGUID = '{43C3875C-C57B-4111-955B-728C48157233}';
  IID_IPrintResponseType: TGUID = '{72BD5626-CCB3-46E9-96D6-B6BFA68B5368}';
  IID_IReconciliationRequestType: TGUID = '{7B016B80-F6C8-4997-8843-D1F23955BC46}';
  IID_IReconciliationResponseType: TGUID = '{C10C603C-DEED-4B39-86E9-2229287E3FD2}';
  IID_IRepeatedMessageResponseType: TGUID = '{10E09274-9BBB-4EB6-B76C-267DCD654668}';
  IID_IReversalResponseType: TGUID = '{6030420F-0FB4-4E08-81AB-CB51E516D81E}';
  IID_IStoredValueResponseType: TGUID = '{3BFA916A-B48C-4780-ACF9-A45A7CED5974}';
  IID_IStoredValueResultType: TGUID = '{BAC06B76-2D47-4812-9136-69EF1D9FC265}';
  IID_IStoredValueAccountStatusType: TGUID = '{9281C705-2DC0-4928-A78B-2A865FFBCAED}';
  IID_IStoredValueAccountIDType: TGUID = '{C38D5E21-2294-4D12-8D50-B986C77A69E5}';
  IID_ISoundContentType: TGUID = '{C1E19E70-7B28-4A45-B0F2-7BBD263896C1}';
  IID_ISoundRequestType: TGUID = '{6F65F431-0C07-4B3F-BA97-8EA228A0F3AC}';
  IID_ISoundResponseType: TGUID = '{9B29B4CC-C4F7-4C58-A2DE-C0DE7220AF5F}';
  IID_IStoredValueDataType: TGUID = '{1F0727A8-5984-4015-84FB-DFDAAC71544F}';
  IID_IStoredValueRequestType: TGUID = '{86F6A0DA-B826-4237-BE3F-71EF0CE09875}';
  IID_ITransmitRequestType: TGUID = '{2CF8A131-259D-47A7-972F-969D6D7D7972}';
  IID_ITransmitResponseType: TGUID = '{2E221958-BF24-43A8-B59C-27AA9A4AA026}';
  IID_ITransactionStatusRequestType: TGUID = '{43D0C839-89DE-4A04-9428-63225E18C431}';
  IID_ITransactionStatusResponseType: TGUID = '{7CC617FF-5F10-4377-BE88-0E282989B68C}';
  IID_ISaleToPOIRequest: TGUID = '{6C05F9CC-060B-462A-A69E-FBF3A639ADF3}';
  IID_ISaleToPOIResponse: TGUID = '{F08F50D4-DBE3-4B0A-B225-7345F109A9C1}';
  CLASS_AuthenticatedDataType: TGUID = '{28646416-C4AA-48C5-B28B-2D5181947B0F}';
  CLASS_KEKType: TGUID = '{08A62571-A400-43B2-A9EE-A173513EF720}';
  CLASS_KEKIdentifierType: TGUID = '{516737C0-3310-4934-A905-81342FBCE4EB}';
  CLASS_DisplayResponseType: TGUID = '{EE1B1E0D-E225-4750-B041-2539A50CEE50}';
  CLASS_OutputResultType: TGUID = '{E7956CB2-0D62-4B22-BFC7-EA38B9280456}';
  CLASS_ResponseType: TGUID = '{47D1B9F9-0C52-4BD6-9458-DA24AD917F06}';
  CLASS_DisplayRequestType: TGUID = '{A308C4A6-8505-4501-8B8B-B44B63A17CF1}';
  CLASS_DisplayOutputType: TGUID = '{87FAFE67-9CF5-413E-BA9B-7FDB3C32374E}';
  CLASS_OutputContentType: TGUID = '{B87F448A-2CB4-4171-B272-AF978F949966}';
  CLASS_PredefinedContentType: TGUID = '{00449753-C8CA-4978-A690-54C51C64D089}';
  CLASS_OutputTextType: TGUID = '{A087B937-1B39-48F9-B308-401F5919FBB3}';
  CLASS_OutputBarcodeType: TGUID = '{71FB941A-6C09-4016-97B0-AB627A5A3F53}';
  CLASS_MenuEntryType: TGUID = '{728C68BA-BB75-4586-86A4-DF0010B4B2E2}';
  CLASS_AlgorithmIdentifier: TGUID = '{1A35A15B-7388-44E8-A1A7-2A29E44A6CC1}';
  CLASS_ParameterType: TGUID = '{D340FEAA-3906-4B2C-851D-E81D5EAB5430}';
  CLASS_KeyTransportType: TGUID = '{DF9B3570-E450-4730-B452-883AC1676693}';
  CLASS_RecipientIdentifierType: TGUID = '{AC49851D-BEDF-496F-AEF3-1F4C9EAA215A}';
  CLASS_IssuerAndSerialNumberType: TGUID = '{0FD30A70-EDF3-43F9-A1A6-0B031F654939}';
  CLASS_RelativeDistinguishedNameType: TGUID = '{8B4F187B-8B85-48BC-BD90-1FF4A62EC667}';
  CLASS_EncapsulatedContentType: TGUID = '{DFF16153-671C-492F-BF87-D250E4C75E91}';
  CLASS_DigestedDataType: TGUID = '{15376923-39F5-435F-9380-9AA007EE6577}';
  CLASS_EncryptedContentType: TGUID = '{C1D9E1AD-2478-4AA4-8014-8B30EA8EA137}';
  CLASS_EnvelopedDataType: TGUID = '{869CAC65-845D-4D88-AE29-A7CD182223CB}';
  CLASS_IssuerType: TGUID = '{79B5F408-47EB-4DB6-B935-3C6182CBD2C2}';
  CLASS_NamedKeyEncryptedDataType: TGUID = '{A84F7228-29A8-48C1-B877-00B36C41B5D8}';
  CLASS_SignedDataType: TGUID = '{3756DF05-9928-499D-A0E1-A73B9630D0BF}';
  CLASS_SignerType: TGUID = '{32CB9436-8864-46A9-8B5B-AA90131A640E}';
  CLASS_SignerIdentifierType: TGUID = '{D415D18B-E1DD-4854-AEBB-1FA3CF8BD9B5}';
  CLASS_ContentInformationType: TGUID = '{DEC168FC-E932-4A0B-ABF9-098A02FFCC7B}';
  CLASS_AbortRequestType: TGUID = '{905E8A28-3E55-4652-83BB-13FCD6FFD5A1}';
  CLASS_MessageReferenceType: TGUID = '{A12F776A-4AF8-47FE-B1EE-892CA51D0BD6}';
  CLASS_AdminRequestType: TGUID = '{358CB852-7668-4832-8DB5-3DFC3F35E8A3}';
  CLASS_AdminResponseType: TGUID = '{7B879078-D31E-4F71-9AB5-4A8219C7A26B}';
  CLASS_AllowedProductType: TGUID = '{82768584-8B3B-42D7-8ED4-B8340263413A}';
  CLASS_AmountsReqType: TGUID = '{4270FE16-5ABE-4748-8A6A-71199B7A0472}';
  CLASS_AmountsRespType: TGUID = '{A728F52B-7E1B-4690-B356-B2F97996A5B1}';
  CLASS_AreaSizeType: TGUID = '{55C9FC5C-8556-474A-9BF1-E9B313EF69BE}';
  CLASS_BalanceInquiryRequestType: TGUID = '{C8D37FFC-6553-4C76-9996-3E331218918B}';
  CLASS_PaymentAccountReqType: TGUID = '{CA3594B7-7A71-43EC-9981-C4EF3F3F067E}';
  CLASS_TransactionIdentificationType: TGUID = '{EFEFD783-D2F4-4BB4-93B1-7F2BB6DE5356}';
  CLASS_PaymentInstrumentDataType: TGUID = '{7D4FE427-F10C-49B5-AFBC-94788F5109CC}';
  CLASS_CardDataType: TGUID = '{190E8474-0046-4C2D-BE65-53FEF71B5DE7}';
  CLASS_SensitiveCardDataType: TGUID = '{0626EC2B-5D39-4CF7-9802-4119EBAF3644}';
  CLASS_TrackDataType: TGUID = '{7454ED4A-28AC-4D00-866F-2682321EE152}';
  CLASS_PaymentTokenType: TGUID = '{62A5722B-B62E-409E-B9F5-2C254EC975D4}';
  CLASS_CustomerOrderType: TGUID = '{28560F11-3CA1-40F1-92C2-6D2D8BA4AAAE}';
  CLASS_CheckDataType: TGUID = '{733533D4-2DE5-45DA-BF7B-F09FC762EC85}';
  CLASS_MobileDataType: TGUID = '{9AF1EDC2-21F7-40CC-A122-71D3E15CE274}';
  CLASS_GeolocationType: TGUID = '{5CD7FD52-8D5E-4952-99D4-1F3F94951631}';
  CLASS_GeographicCoordinatesType: TGUID = '{1E274174-F5DB-49AE-AA66-CA76E49B29FB}';
  CLASS_UTMCoordinatesType: TGUID = '{915EBD9E-BF46-43B5-A76B-9FA458C166FD}';
  CLASS_SensitiveMobileDataType: TGUID = '{1AF1213E-261A-44CC-AABA-26FF345509C9}';
  CLASS_LoyaltyAccountReqType: TGUID = '{A2F070B5-9A72-4C36-9786-F2D005707722}';
  CLASS_LoyaltyAccountIDType: TGUID = '{2CE8E6B2-D8BE-4340-B748-13F70164C2B4}';
  CLASS_BalanceInquiryResponseType: TGUID = '{2AE94CF3-ED53-4DDB-8882-CAC1F4E77F78}';
  CLASS_PaymentAccountStatusType: TGUID = '{E09063AF-D46C-458D-9C11-10FC1F6F657D}';
  CLASS_PaymentAcquirerDataType: TGUID = '{95C7B57E-8AA7-44E8-90A5-EC7140E2898C}';
  CLASS_LoyaltyAccountStatusType: TGUID = '{B5D7727C-8589-4095-AEBE-5934E23552F0}';
  CLASS_LoyaltyAccountType: TGUID = '{81AF5EB9-4614-4943-889B-23B8B17869A4}';
  CLASS_BatchRequestType: TGUID = '{0D46AE76-D40A-456E-8A21-77243E0581D2}';
  CLASS_TransactionToPerformType: TGUID = '{C288B5AB-DE7B-4289-811F-21496AB20E6C}';
  CLASS_LoyaltyRequestType: TGUID = '{D60BB991-6947-4F24-A5FE-B07E8FDCE672}';
  CLASS_SaleDataType: TGUID = '{A3E5181F-9194-49CA-B499-2B9061F5CB41}';
  CLASS_SaleTerminalDataType: TGUID = '{27139DE6-16F6-4D9D-BF10-7944EEF25F7F}';
  CLASS_SaleProfileType: TGUID = '{958B94FB-D964-4B72-A489-3ED8F950B42F}';
  CLASS_SponsoredMerchantType: TGUID = '{92D035E7-3D41-4B9E-A71B-6ACD313B4967}';
  CLASS_SaleToIssuerDataType: TGUID = '{C0199C5E-B77E-4007-8EB6-049B7DC3407C}';
  CLASS_LoyaltyTransactionType: TGUID = '{0937874B-9F7E-4361-90B8-65B7B8C04FE3}';
  CLASS_OriginalPOITransactionType: TGUID = '{5CE43765-44B2-4CF9-B29C-1C7C57238BAC}';
  CLASS_TransactionConditionsType: TGUID = '{12A6B76E-40AE-4FA6-8EDC-3D52150F0659}';
  CLASS_SaleItemType: TGUID = '{C566969C-2DFD-48AE-B8C0-3781D79D04C8}';
  CLASS_LoyaltyDataType: TGUID = '{8A15A6C9-36F0-4335-A7C2-4BD9243F8E6B}';
  CLASS_LoyaltyAmountType: TGUID = '{8C5F1D6F-80BA-4B28-9A41-761A05929BDF}';
  CLASS_PaymentRequestType: TGUID = '{2B150721-AC31-4F17-AA09-5C8838999B85}';
  CLASS_PaymentTransactionType: TGUID = '{74C19F37-856A-4783-9808-54BF74D83F97}';
  CLASS_PaymentDataType: TGUID = '{A63C3ACF-4C35-45CE-9981-8FB3503CB546}';
  CLASS_InstalmentType: TGUID = '{09C9354E-3DEF-4C29-A0A0-6D205ACEE30A}';
  CLASS_ReversalRequestType: TGUID = '{F944B1EA-6FD9-4D17-839C-CFC484332FEB}';
  CLASS_BatchResponseType: TGUID = '{4B35C3AE-55FE-4FCA-B011-46EAECE97AAA}';
  CLASS_PerformedTransactionType: TGUID = '{6718E9AD-C0B7-468F-B75E-DB62C9D54865}';
  CLASS_POIDataType: TGUID = '{4C4503BB-A934-4073-9224-E7FAE806E78A}';
  CLASS_PaymentResultType: TGUID = '{BD78B755-B90A-4B11-AAE5-AAE63B4D8AC6}';
  CLASS_CurrencyConversionType: TGUID = '{DACB94A7-ABA7-4024-A7E5-43E2EDFD7B20}';
  CLASS_AmountType: TGUID = '{8317B1AE-9A95-428E-8B10-95D594D14500}';
  CLASS_CapturedSignatureType: TGUID = '{93626D7B-F68F-4BB1-9571-4866E2D3F8AC}';
  CLASS_SignaturePointType: TGUID = '{F0A5977D-701F-4EF4-A921-AB3EF715461A}';
  CLASS_LoyaltyResultType: TGUID = '{9B11CA14-4E50-48C7-9172-249C8687BAC2}';
  CLASS_LoyaltyAcquirerDataType: TGUID = '{CE14C38C-1683-4301-B247-2E38431590C6}';
  CLASS_RebatesType: TGUID = '{0CA27087-6697-4C61-9C6B-0D1A7F173FF8}';
  CLASS_SaleItemRebateType: TGUID = '{D3FF0725-BB91-477A-AA3A-C97366770EFC}';
  CLASS_CardAcquisitionRequestType: TGUID = '{5DE6D83F-FB6D-46EF-A3AF-B020B576DB51}';
  CLASS_CardAcquisitionTransactionType: TGUID = '{2B9C4A1E-873E-4C54-8F1B-1E6FEB7420AB}';
  CLASS_CardAcquisitionResponseType: TGUID = '{13791085-A5D5-49E2-A1AB-8096A82EE95D}';
  CLASS_CardholderPINType: TGUID = '{143C5F52-B786-45FB-AA7A-F3A6FC7659A3}';
  CLASS_CardReaderAPDURequestType: TGUID = '{594F705E-2B8B-4F0E-800F-81DC6E7C7EDE}';
  CLASS_CardReaderAPDUResponseType: TGUID = '{E2C68C05-2657-4ED1-9845-6C19DC6DE3E1}';
  CLASS_CardReaderInitRequestType: TGUID = '{09A90C59-6D6E-44E1-B498-D7FF2C2814C4}';
  CLASS_CardReaderInitResponseType: TGUID = '{EFA186CA-AF0A-4AD8-8DFA-4C726D8165A8}';
  CLASS_ICCResetDataType: TGUID = '{CDC092BF-1352-42E3-94D2-855DFC8B7A18}';
  CLASS_CardReaderPowerOffRequestType: TGUID = '{FC3B2037-8E8C-4D96-9D8B-6DF7D6343153}';
  CLASS_CardReaderPowerOffResponseType: TGUID = '{A41B51BD-E8F2-48B3-99C8-182F9370FF5E}';
  CLASS_CashHandlingDeviceType: TGUID = '{B1440D03-1E96-4CBA-8ED0-6F9EA0BF30C2}';
  CLASS_CoinsOrBillsType: TGUID = '{55FE03FA-3139-4183-A5B6-59F9F026E77E}';
  CLASS_DiagnosisRequestType: TGUID = '{F567A75A-C9D4-4E8C-BEFE-77D9359BEAF8}';
  CLASS_DiagnosisResponseType: TGUID = '{F2CBC94C-96D0-42BC-8ECB-E4800AB1F733}';
  CLASS_POIStatusType: TGUID = '{6C3ABA5D-F562-4077-B044-469058F26F84}';
  CLASS_HostStatusType: TGUID = '{89D1C886-CA0E-44EB-8C0C-B2728E42AC75}';
  CLASS_EnableServiceRequestType: TGUID = '{1DAF4B1E-2680-42D9-ABC0-46443601C98B}';
  CLASS_EnableServiceResponseType: TGUID = '{8F011CAC-1915-4EA7-B345-5A03F373D7B7}';
  CLASS_EventNotificationType: TGUID = '{4166AF0F-7CF8-4219-AD5A-4D8F5B14549D}';
  CLASS_GetTotalsRequestType: TGUID = '{39309A2B-C933-4460-BD6C-5BEF9B97C30C}';
  CLASS_TotalFilterType: TGUID = '{6D2B7AB7-89BF-4F02-94C4-A20F53A8799E}';
  CLASS_GetTotalsResponseType: TGUID = '{DA6DC8FD-4938-4E59-A209-E1C4B8664F80}';
  CLASS_TransactionTotalsType: TGUID = '{ED638B8B-06DB-48A3-A0CE-F03D909FF8F0}';
  CLASS_PaymentTotalsType: TGUID = '{C3B5CA7B-0753-4920-8280-4E5C3D8CCD00}';
  CLASS_LoyaltyTotalsType: TGUID = '{25821BE5-3516-454D-B3BC-5B9B9FF8C560}';
  CLASS_InputType: TGUID = '{96146C26-2484-44F8-A713-04A20AD6DD7E}';
  CLASS_InputDataType: TGUID = '{9289993D-222A-4E96-BC1A-0841C69B3407}';
  CLASS_InputRequestType: TGUID = '{8DA6DC94-3CD3-43D3-B35A-82603E7B5D32}';
  CLASS_InputResponseType: TGUID = '{82B48FCA-A323-409B-989B-94E377FEC1A3}';
  CLASS_InputResultType: TGUID = '{5DCA93D9-5421-4CC1-9BD5-CEB85546DFFC}';
  CLASS_InputUpdateType: TGUID = '{F4EBAFB1-F4C0-442F-9D63-19AC61510D36}';
  CLASS_LoginRequestType: TGUID = '{FA7FB978-3B3E-4A18-B93B-7C91D698909C}';
  CLASS_SaleSoftwareType: TGUID = '{3DE5BF2C-6B32-4A4B-941A-9DB467D10F77}';
  CLASS_LoginResponseType: TGUID = '{D6897AC7-E9D5-4B27-AB36-68A241739750}';
  CLASS_POISystemDataType: TGUID = '{AF18B2C5-E0C9-4F3B-A85B-FAE17FFAF51B}';
  CLASS_POISoftwareType: TGUID = '{03D4A88B-51D7-4ED7-831D-85B57B9B34A5}';
  CLASS_POITerminalDataType: TGUID = '{221DF620-627F-46FA-BAF9-8E82A3E33F9F}';
  CLASS_POIProfileType: TGUID = '{4CC8C298-6644-4213-9E3F-C9F89A374885}';
  CLASS_LogoutRequestType: TGUID = '{747F502D-3E68-4673-9A06-3AE3028C4613}';
  CLASS_LogoutResponseType: TGUID = '{BE706451-81DE-4221-B515-659F33CCA403}';
  CLASS_LoyaltyResponseType: TGUID = '{63497B02-8EBA-4AE0-B422-5B2ED5D03D05}';
  CLASS_PaymentReceiptType: TGUID = '{542EEFCD-9B08-4F84-A11B-7EC4856A9866}';
  CLASS_MessageHeaderType: TGUID = '{173BFCB3-D24A-44B7-A781-A82CDBC5013F}';
  CLASS_PaymentResponseType: TGUID = '{F80EEAB6-D0FD-47AC-A19E-02B0FE122476}';
  CLASS_PINRequestType: TGUID = '{0D1686A3-1A30-4183-9F5E-0F5A6171F1D6}';
  CLASS_PINResponseType: TGUID = '{522EBEE1-80F2-4D00-AA91-987CD573BD61}';
  CLASS_PrintOutputType: TGUID = '{14BC0BA4-0431-48BF-8F23-40EF18029CDF}';
  CLASS_PrintRequestType: TGUID = '{477C47A2-3E34-44C9-8AEF-764686CD522D}';
  CLASS_PrintResponseType: TGUID = '{8E023BD4-F9BA-4379-84A9-E70937D758DB}';
  CLASS_ReconciliationRequestType: TGUID = '{83273BDA-8E17-4DF6-8554-A72106D862E3}';
  CLASS_ReconciliationResponseType: TGUID = '{0A83C534-EE72-46C7-A09C-FCAF6C6E2F74}';
  CLASS_RepeatedMessageResponseType: TGUID = '{28236DA2-2DAB-4100-90B1-35DD280354BC}';
  CLASS_ReversalResponseType: TGUID = '{AD368C27-AA9E-43EF-B1A1-75290D6BA8BE}';
  CLASS_StoredValueResponseType: TGUID = '{9D162AF2-7D94-40EB-9140-DD944703086E}';
  CLASS_StoredValueResultType: TGUID = '{22390539-69CF-4936-B52A-792BC810E271}';
  CLASS_StoredValueAccountStatusType: TGUID = '{56DF3AB1-E7D4-4733-BE31-3159CE0B1F0D}';
  CLASS_StoredValueAccountIDType: TGUID = '{B6619CF6-F942-4892-A8C5-D3F36010DAA8}';
  CLASS_SoundContentType: TGUID = '{5A4C12AF-7232-4F4A-A1A5-C5244BCDC167}';
  CLASS_SoundRequestType: TGUID = '{AD356FAD-3640-4023-8B63-FE894933B47D}';
  CLASS_SoundResponseType: TGUID = '{497BADBB-676C-4D44-9154-3ADF6F623005}';
  CLASS_StoredValueDataType: TGUID = '{BCE979BF-F239-4CDC-8BDB-230FEC8C5269}';
  CLASS_StoredValueRequestType: TGUID = '{9DD217FB-3B58-4CEE-BCEE-4B202DA0B660}';
  CLASS_TransmitRequestType: TGUID = '{A39C4A30-98EC-4C4A-A751-F9628B4D195C}';
  CLASS_TransmitResponseType: TGUID = '{C4055E03-6958-49A8-AF20-C66180B37CDA}';
  CLASS_TransactionStatusRequestType: TGUID = '{56192132-115A-4FFE-8008-B857A5772F35}';
  CLASS_TransactionStatusResponseType: TGUID = '{A20A427F-5B46-47E3-997D-4C0451837BF5}';
  CLASS_SaleToPOIRequest: TGUID = '{59FF44DF-91E7-47D3-9F9B-C29AEBA66C46}';
  CLASS_SaleToPOIResponse: TGUID = '{AECDD426-7ACA-45C3-9B5E-BB43F1E61F11}';
  IID_INexoActivity: TGUID = '{1ADB3E04-8743-492B-94C5-4F973C27B951}';
  CLASS_NexoActivity: TGUID = '{0010366D-C2CC-4685-A52A-9716D59740F3}';
  IID__NexoMessage: TGUID = '{7DA4FB59-22EF-399D-B3B4-1E0397E4CCF5}';
  CLASS_NexoDictionaryOfMessages: TGUID = '{CFFFD93F-D383-37D7-9F96-CF33D3922B62}';
  IID__NexoPartner: TGUID = '{59BB3895-65B2-3942-940E-6DD04810656E}';
  IID__NexoEndPoint: TGUID = '{5339D5FB-D6F3-3710-B640-21CEF51B9F46}';
  CLASS_NexoListOfEndPoints: TGUID = '{F7A858FD-2EAD-3609-A020-0E8308893BAA}';
  CLASS_NexoDictionaryOfEndPoints: TGUID = '{D2855657-7933-3434-93A6-04C55A5422E7}';
  IID__NexoSession: TGUID = '{22FDEE0C-B93F-3CF0-A2A2-BA85F2288CED}';
  CLASS_NexoListOfSessions: TGUID = '{A1F903FC-C95F-3F64-AFC5-6CDC2EE6C90A}';
  CLASS_NexoDictionaryOfSessions: TGUID = '{0F0D1F8E-5AB0-34BA-9C46-425E2259F65F}';
  CLASS_NexoListOfNexoKeys: TGUID = '{B2663B3F-2BE5-322E-9A2A-ECC88BFE3061}';
  CLASS_NexoDictionaryOfNexoKeys: TGUID = '{6DA3B22D-DABC-3969-82FD-0BB78DFE41EB}';
  IID_INexoAnyMessage: TGUID = '{91849B50-192A-4811-8BFA-A506BD74E778}';
  CLASS_NexoListOfAnyMessages: TGUID = '{ADDC6AE5-7324-3CC0-832B-A55190DC1ADF}';
  CLASS_NexoDictionaryOfAnyMessages: TGUID = '{AE7DE66D-0F36-3C2B-B438-057099E5E0A5}';
  IID__NexoDelegates: TGUID = '{9D53AE2A-5E06-352F-A630-F76256357105}';
  CLASS_NexoAcceptedCommands: TGUID = '{AC077E14-6C6B-3EF5-B8D5-561BD6639621}';
  IID_INexoItem: TGUID = '{B7773C1A-8091-4B2A-A54E-74E686E5F91E}';
  CLASS_NexoItem: TGUID = '{390237C2-5337-4EBE-8B1E-E395611FEC82}';
  IID__NexoKey: TGUID = '{89CFED27-307C-3ADA-BBD6-40800D474F0F}';
  IID_INexoAdmin: TGUID = '{9A3C60DD-2D50-4515-9762-4632AA45BBC5}';
  IID_INexoObject: TGUID = '{70469D2A-4EFD-4023-82BB-7F6D382A5D83}';
  IID_INexoBalanceInquiry: TGUID = '{CDC42997-48E2-4D4A-9DD4-4CEBCA16652B}';
  CLASS_NexoBalanceInquiry: TGUID = '{1696448C-1139-4D01-9BFA-65BAD9952ED9}';
  IID_INexoBatch: TGUID = '{0AB85F76-922F-46EF-8DCB-A050E7030921}';
  CLASS_NexoBatch: TGUID = '{EBBB6BA9-552F-40AC-92E2-7CB239988CF8}';
  IID_INexoCardAcquisition: TGUID = '{85FADEEB-5156-405B-87EE-54D9AE22E316}';
  CLASS_NexoCardAcquisition: TGUID = '{041378C7-7530-40FF-865C-5B2F92661375}';
  IID_INexoCardReaderInit: TGUID = '{424AC59E-6B02-46F1-97AD-F4DAF1BEBDCE}';
  CLASS_NexoCardReaderInit: TGUID = '{0A1903C6-2989-4D33-AE3E-82ABDACD894F}';
  IID_INexoCardReaderAPDU: TGUID = '{CB4E4768-D56A-4105-B780-004E97929361}';
  CLASS_NexoCardReaderAPDU: TGUID = '{18285838-CA0F-41E9-A69A-CF217A99A3E3}';
  IID_INexoCardReaderPowerOFF: TGUID = '{70C8C7A9-62C2-4729-929C-8163614D09DA}';
  CLASS_NexoCardReaderPowerOFF: TGUID = '{A1BE7839-E928-45FA-8CD5-60B90C5F306B}';
  IID_INexoDeviceDisplay: TGUID = '{F6DC1D06-11C7-4814-9326-E68C4A9EBF4E}';
  CLASS_NexoDeviceDisplay: TGUID = '{B96EFC99-00D2-4AFD-9622-05C2983AB9AD}';
  IID_INexoDeviceInputUpdate: TGUID = '{529FFD3D-658C-49C5-85A3-66799AAA5E34}';
  CLASS_NexoDeviceInputUpdate: TGUID = '{64462157-3AE0-441D-B7E9-71B2B8892A66}';
  IID_INexoDeviceSound: TGUID = '{A3534554-E05D-4A11-BB41-88DEC0B20EE4}';
  CLASS_NexoDeviceSound: TGUID = '{8A01F960-7FC2-49C6-B512-37C246A4512C}';
  IID_INexoEnableService: TGUID = '{459D4296-691D-48D6-84E5-F9069D5B85D6}';
  CLASS_NexoEnableService: TGUID = '{BD5687D5-EF40-47B1-B599-EEFB31BBF532}';
  IID_INexoGetTotals: TGUID = '{ED6FDAD1-7D79-4DA6-8F4F-35BCAFADF772}';
  CLASS_NexoGetTotals: TGUID = '{6AC33EB7-F9DC-4BA9-968D-536CC95470AA}';
  IID_INexoLoyalty: TGUID = '{C69EE5BC-630A-4D1F-990B-0D0984E07F08}';
  CLASS_NexoLoyalty: TGUID = '{B1DB0498-3008-4E26-B04D-1833C36147A4}';
  IID_INexoPayment: TGUID = '{BD2E9B0D-1DE8-4D77-A974-0E6078206FAA}';
  CLASS_NexoPayment: TGUID = '{0843A59A-874F-432C-B9C8-BD72757D4979}';
  IID_INexoPIN: TGUID = '{877BE257-F158-4A4F-9646-6080B193749B}';
  CLASS_NexoPIN: TGUID = '{E86AFFEC-3811-41BD-87D5-EBF9B85A4FD0}';
  IID_INexoReconciliation: TGUID = '{7ADA4C0C-EEAD-4B53-8089-A8B7491D1FB6}';
  CLASS_NexoReconciliation: TGUID = '{C09916A4-9B04-4331-BB35-C845E17E6FD0}';
  IID_INexoStoredValue: TGUID = '{2F3C26FD-174D-45BC-86A4-981B953C6611}';
  CLASS_NexoStoredValue: TGUID = '{44CCE01A-FB6C-4C1F-912B-D46DED85B1BE}';
  IID_INexoTransmit: TGUID = '{8314ADA0-DD56-497D-9FFA-02A86CB305CA}';
  CLASS_NexoTransmit: TGUID = '{EF2554E1-71FD-45F0-9B44-40FBD13BA213}';
  IID_INexoAbort: TGUID = '{D71CE22F-0AA1-4792-9857-864A5E29A2BE}';
  CLASS_NexoAbort: TGUID = '{01101E72-06B5-47BA-B305-611BEEAF3AE4}';
  IID_INexoDiagnosis: TGUID = '{E8C62FFB-C292-4592-A538-8283E5807DA1}';
  CLASS_NexoDiagnosis: TGUID = '{5223C33A-11DD-4FE4-BA89-22A83A6390B7}';
  IID_INexoEvent: TGUID = '{389CD3D9-3950-4A61-B90E-BC9EB85E0008}';
  CLASS_NexoEvent: TGUID = '{C30F6D21-9370-494D-B7D8-8BE6A945AA07}';
  IID_INexoTransactionStatus: TGUID = '{18C58418-DF2D-4CF4-B394-7C055526C73A}';
  CLASS_NexoTransactionStatus: TGUID = '{A788EBE5-CF20-48BB-9E1E-2D9FF23BCE8A}';
  IID_INexoResponseType: TGUID = '{5987CC8F-70A4-4FB9-BCEA-71A706CA27C9}';
  CLASS_NexoResponseType: TGUID = '{9C9B6CF4-A8B9-4AC1-99EC-6B940F5B09E1}';
  IID_INexoDeviceInput: TGUID = '{2CD13AE4-4DF6-47EC-8487-0BBB017D37ED}';
  CLASS_NexoDeviceInput: TGUID = '{AD272143-7CBD-4C8B-A766-EEF8B28197C8}';
  IID_INexoDevicePrint: TGUID = '{F9BC46A7-AA77-4B4B-81CC-1348E2E4FABC}';
  CLASS_NexoDevicePrint: TGUID = '{C07B9790-C8C5-47C2-813C-C218F5545EF0}';
  IID_INexoLogin: TGUID = '{4B77D218-D00F-4C13-9652-F0E9E11F3BF3}';
  CLASS_NexoLogin: TGUID = '{FC9002AC-12F5-4611-8DBF-8ADAFFA39236}';
  IID_INexoLogout: TGUID = '{37A4DF49-8D4A-43E6-BAAB-FDFD7C550AB9}';
  CLASS_NexoLogout: TGUID = '{A1FC1414-000B-4684-94A3-8EE45CD223B1}';
  CLASS_NexoAdmin: TGUID = '{E663E917-6B46-4C38-9DDB-30AF8E955CF2}';
  CLASS_NexoObject: TGUID = '{667D198F-874E-457B-9641-C43933F336DB}';
  IID_INexoReversal: TGUID = '{DBC11F2F-A231-47BB-9CD1-0B36872B6BB4}';
  CLASS_NexoReversal: TGUID = '{9DF21BBA-CF43-497C-B0AD-54647E3D8918}';
  IID_INexoObjectToProcess: TGUID = '{4DA003CE-49BF-4831-83EB-3DAEA2072370}';
  CLASS_NexoObjectToProcess: TGUID = '{195F55CA-64B2-4E61-A1DB-9964557DE450}';
  IID_INexoTextString: TGUID = '{81DBF2A7-F56C-4316-A7DA-84A69DD10193}';
  CLASS_NexoTextString: TGUID = '{8F565B94-FC31-4938-BB9B-3628D74AA348}';
  IID_INexoBooleanType: TGUID = '{54927BBD-044C-4FF6-90B9-9EF4C97DF13E}';
  CLASS_NexoBoolean: TGUID = '{C9E4530A-BCB7-437D-B814-D3BF11026D07}';
  IID_INexoInteger: TGUID = '{D54E0EEC-3021-430A-958A-0CE8CBAF28CF}';
  CLASS_NexoInteger: TGUID = '{95B80346-5CA9-4F43-98E1-58B4A7C02736}';
  IID_INexoDecimal: TGUID = '{D6A6402E-7675-4B58-A192-1E5831A63308}';
  CLASS_NexoDecimal: TGUID = '{6B3992EA-EA2A-40CE-8D32-759442C3733F}';
  CLASS_NexoSimpleAmount: TGUID = '{7140D640-7DEF-48A8-8C51-F348849BB383}';
  IID_INexoLabel: TGUID = '{B1212D60-971B-4FB3-BE41-EC87DD743EFB}';
  CLASS_NexoLabel: TGUID = '{313ED1FA-F6E9-402D-803C-F6C2A97AEAB2}';
  IID_INexoEnumeration: TGUID = '{44DD3DF5-C824-4E2D-8727-9F1856EB8019}';
  CLASS_NexoEnumeration: TGUID = '{DCE824A5-EF4D-4DDF-9F28-ECC997E912B8}';
  IID_INexoCluster: TGUID = '{CF6E62CA-537D-4545-A336-673D288B6D58}';
  CLASS_NexoCluster: TGUID = '{8E5E348A-9E41-44B6-AA24-366B1E0BFAEF}';
  IID_INexoLengthDrivenTextString: TGUID = '{380807B4-5276-443B-A8E8-0D88A51199E8}';
  CLASS_NexoLengthDrivenTextString: TGUID = '{D9CF8D0F-FEBB-4FE8-A775-91C0BB6DBF3D}';
  IID_INexoDigitString: TGUID = '{4DEDF6AC-8EF9-41EC-92CD-51A2E7E5FC6F}';
  CLASS_NexoDigitString: TGUID = '{09364674-1CA8-4448-8099-35C44F32305E}';
  IID_INexoISOData: TGUID = '{342FE081-D5F0-475B-AEC6-6374979BBDC7}';
  CLASS_NexoISOCurrency3A: TGUID = '{D778424B-0BE8-4907-9998-FFBEE38A9D9D}';
  CLASS_NexoISOCountry3A: TGUID = '{969B3F3F-C827-4244-83AE-0CA5A56CB4DA}';
  CLASS_NexoISOLanguage2A: TGUID = '{6D548B98-DCA5-42B3-8D67-E2796A47AB40}';
  IID_INexoISODateTime: TGUID = '{6EA56916-0B9F-48D1-B726-1F26C1897724}';
  CLASS_NexoISODateTime: TGUID = '{91C85C90-6D2B-4762-88BE-B96A9C275DE9}';
  IID_INexoISODate: TGUID = '{880DF188-0670-419D-8E0D-2170D0D537C9}';
  CLASS_NexoISODate: TGUID = '{29E0D16F-F912-4176-BAFB-41A5444F4B10}';
  IID_INexoNonStringType: TGUID = '{C7CAA85A-2A0D-49A7-925A-48A122D76C30}';
  CLASS_NexoByteSequence: TGUID = '{5E5B89AB-BC0A-405D-8DDC-F35C4E92D9A6}';
  IID_INexoCurrency: TGUID = '{5F12D07E-EA73-4E87-98C6-DDD3A38888C8}';
  CLASS_NexoCurrency: TGUID = '{DE4FC2B3-900F-4128-8330-8881A0C36275}';
  CLASS_NexoCurrencyEUR: TGUID = '{64799C07-C801-4276-BF3A-E6AB89A691B3}';
  CLASS_NexoCurrencyUSD: TGUID = '{29167784-C41B-47FF-B1EF-DD855D277C35}';
  CLASS_NexoCurrencyGBP: TGUID = '{03861903-A788-40EF-82A1-27B39C2D57E8}';
  CLASS_NexoCurrencyCHF: TGUID = '{DE5411DE-BB56-478C-94CD-32E7CD95EC97}';
  IID__NexoMessageType: TGUID = '{9B63F343-CE34-348E-ADBB-ADF5FDC28172}';
  IID__NexoMessageClass: TGUID = '{5014AC46-3B6B-35D6-9EAB-308C612BE1BD}';
  IID__NexoMessageCategory: TGUID = '{56E803F5-FC60-381C-B78C-129D973A9A94}';
  IID__NexoTerminalEnvironment: TGUID = '{22389591-8FAC-3D5C-8696-7F02CE9D1A28}';
  IID__NexoSaleCapabilities: TGUID = '{27EE1457-9C5B-364B-A5B0-6F8DEA5DFD90}';
  IID__NexoProtocolVersion: TGUID = '{80FE31BB-AA27-3228-9E9F-ACCBC7BEC91E}';
  CLASS_NexoSupportedProtocolVersions: TGUID = '{EDCDA040-BEC8-30DC-A2D9-7D340E4FDD93}';
  IID__NexoID: TGUID = '{18471494-0F7D-3761-AA8A-4234DEEE46E0}';
  IID__NexoServiceID: TGUID = '{59B3973C-67DE-3226-950C-3F1AF7CA8CD9}';
  IID__NexoDeviceID: TGUID = '{71E7118B-B956-330C-8CF3-985FF48C8383}';
  IID__NexoPOIID: TGUID = '{054197A2-96CE-3280-A396-9A9647E69093}';
  IID__NexoSaleID: TGUID = '{42F36241-B65E-3279-8AB5-B0FDF51E2007}';
  IID__NexoOperatorLanguage: TGUID = '{E71BBF4C-00C1-3A08-8FA7-D6AC9B58C165}';
  IID__NexoResult: TGUID = '{4D8B2E36-3BE3-3AAE-820E-2AF11CA82E64}';
  IID__NexoErrorCondition: TGUID = '{3A6C71B5-A08C-315D-B127-D96E2E2EAC09}';
  IID__NexoAdditionalResponse: TGUID = '{B44411B6-3F45-333F-B166-1A295EED6A6C}';
  IID__NexoGlobalStatus: TGUID = '{3AC0D87E-F614-3958-AF82-0EDD3E6D9179}';
  IID__NexoCertificationCode: TGUID = '{02DB9CB2-8343-3689-AB49-DC0FB8415C72}';
  IID__NexoSoftwareVersion: TGUID = '{451A06B3-89A7-3712-9763-C753FC8885C3}';
  IID__NexoApplicationName: TGUID = '{9C672E07-5151-38F4-A42C-CEB77A05332B}';
  IID__NexoManufacturerID: TGUID = '{E49650FA-D915-3C41-8313-9A5A13A64420}';
  IID__NexoPOISerialNumber: TGUID = '{6681A893-77AF-3107-A6DA-DF729D6DB446}';
  IID__NexoOperatorID: TGUID = '{CD18F863-D50B-352D-B4A0-5E980F36021D}';
  IID__NexoDateTime: TGUID = '{8DF83577-AE20-31AB-B9C0-1F46E4CF327C}';
  IID__NexoInputCommand: TGUID = '{4E7620D8-37EE-3EF1-8219-5905E4C30D28}';
  IID__NexoEventToNotify: TGUID = '{F32A9C29-CEFF-3D25-9C49-F4350CA77ABB}';
  IID__NexoPaymentIntrumentType: TGUID = '{A7085E0D-4C4E-3492-9CD8-E5EEA1139AB4}';
  IID__NexoVersion: TGUID = '{765A7BDB-C986-34A3-A1F6-07606723E48D}';
  IID__NexoCurrentVersion: TGUID = '{912B7F67-674E-35E3-9F46-CCB8B8FA08A0}';
  IID_INexoRetailerClientHandle: TGUID = '{006465F7-6122-44C2-BBF1-166B483315E4}';
  CLASS_NexoRetailerClientHandle: TGUID = '{1AD62E2A-7807-46E1-B3E5-69ED82788C7E}';
  IID_INexoRetailerClient: TGUID = '{8B1988DB-F6AC-4B87-B874-62C58ED8E95F}';
  CLASS_NexoRetailerClient: TGUID = '{48D91DB7-8D55-4151-B04D-02985CFCF6DF}';
  IID_INexoRetailerClientSettings: TGUID = '{96259F3B-053E-45AF-B616-079CBC11690A}';
  CLASS_NexoRetailerClientSettings: TGUID = '{863D37D5-09A2-4E2B-A2D2-9C5C41017472}';
  IID_INexoRetailerClientConnectionSettings: TGUID = '{BFEFE83C-FA94-48DB-B7B9-9E1887CB6884}';
  CLASS_NexoRetailerClientConnectionSettings: TGUID = '{8005B572-3B32-429E-AE02-294C6522F5FE}';
  IID_INexoRetailerClientActivity: TGUID = '{BC3BD01B-95AA-4D4A-B2A1-3AB16231142D}';
  CLASS_NexoRetailerClientActivity: TGUID = '{6CEE4921-3084-40F3-A919-A8CF3D443A03}';
  IID_INexoRetailerServerActivity: TGUID = '{F71D22CA-428A-4B19-9412-05F8552EB8F2}';
  CLASS_NexoRetailerServerActivity: TGUID = '{E1E33479-DBC6-4537-80A0-E2F693CADF4A}';
  IID__NexoRetailerServerDatabaseConnection: TGUID = '{79C911BC-C8E4-341F-941F-73005D7CFC92}';
  IID__NexoRetailerServerDatabaseEndPoint: TGUID = '{34DA5861-39D5-35BB-B676-8F96880BB3EB}';
  IID__NexoRetailerServerDatabaseSale: TGUID = '{93971474-DEA7-3D4D-A112-61B672EE7B52}';
  IID__NexoRetailerServerDatabaseMessage: TGUID = '{144CF118-C521-3B94-89DA-D4739A0C91D2}';
  IID_INexoRetailerServerDatabaseSettings: TGUID = '{B46DBE4F-C3E3-41F8-BFE8-E10DBEF1988B}';
  CLASS_NexoRetailerServerDatabaseSettings: TGUID = '{A01C5551-4413-42D9-9612-048ACAE918B1}';
  IID__NexoRetailerServerDatabase: TGUID = '{23975521-A1F1-3C63-9519-BE95ECC5C8E2}';
  IID_INexoRetailerServerSettings: TGUID = '{0D584C15-C13E-4123-B6A6-57D27C7937D1}';
  CLASS_NexoRetailerServerSettings: TGUID = '{D2737F59-F4EE-4935-9C89-C45667C4D506}';
  CLASS_NexoMessage: TGUID = '{CE9E5642-AA03-392F-B407-B11F757D2828}';
  CLASS_NexoPartner: TGUID = '{9EFABDE5-406D-3804-BD2C-75CB10972F85}';
  CLASS_NexoEndPoint: TGUID = '{A72B8764-45F0-335D-8D68-6B796E072DC0}';
  CLASS_NexoSession: TGUID = '{272C6FD1-466E-3F9A-BF30-9F2F31572065}';
  CLASS_NexoDelegates: TGUID = '{9629971A-06C0-3F2F-86D9-DE9C133BF254}';
  CLASS_NexoKey: TGUID = '{2EBAED9B-452A-36B8-A135-3425969B9487}';
  CLASS_NexoMessageType: TGUID = '{14F44AFE-35E0-3583-A159-F51AE42C7974}';
  CLASS_NexoMessageClass: TGUID = '{766AEBFC-C2B5-3195-BE90-24A1541F8571}';
  CLASS_NexoMessageCategory: TGUID = '{E38641D5-E611-3F91-8FAB-590D50E95DAD}';
  CLASS_NexoTerminalEnvironment: TGUID = '{8723C5CD-1093-3E0D-91E5-9143DC203749}';
  CLASS_NexoSaleCapabilities: TGUID = '{9863FC65-12E4-3470-A38A-E356299D840E}';
  CLASS_NexoProtocolVersion: TGUID = '{5C766A20-206F-3D20-B4CC-89895203DD3B}';
  CLASS_NexoID: TGUID = '{350BBACF-C08A-3381-9364-5787CE480573}';
  CLASS_NexoServiceID: TGUID = '{2F44FC1D-A904-3DA9-BB93-144028FF77CE}';
  CLASS_NexoDeviceID: TGUID = '{6A6127F5-4C4D-3E21-AA0B-5387A1734E65}';
  CLASS_NexoPOIID: TGUID = '{F45E383B-05F4-31CA-8B28-EC8BC083F614}';
  CLASS_NexoSaleID: TGUID = '{0FE8E6F0-DCDE-342B-AFE2-84B143519016}';
  CLASS_NexoOperatorLanguage: TGUID = '{FC90FB79-F2B7-307D-8D62-ACF0E89C9812}';
  CLASS_NexoResult: TGUID = '{E48A7CDC-0974-3012-9518-0E397DB9E9AE}';
  CLASS_NexoErrorCondition: TGUID = '{583EB736-44CB-35BB-977B-6DF907188EA4}';
  CLASS_NexoAdditionalResponse: TGUID = '{D8ABBBC2-62F9-33CE-AFE7-2FD92253C6D3}';
  CLASS_NexoGlobalStatus: TGUID = '{0CD08FC0-1563-39FD-88DE-AD799609012A}';
  CLASS_NexoCertificationCode: TGUID = '{724830AC-20FC-353C-8690-958695ABF3C6}';
  CLASS_NexoSoftwareVersion: TGUID = '{10AC4C41-7809-3B44-BA22-B91A09C3FE6E}';
  CLASS_NexoApplicationName: TGUID = '{E972848F-9938-3A9F-80C6-DB8CEBEE2F55}';
  CLASS_NexoManufacturerID: TGUID = '{94453CAB-C1BA-3B18-8704-8A550FFA2613}';
  CLASS_NexoPOISerialNumber: TGUID = '{7C461616-C009-3339-8FD5-A7B43D7903F2}';
  CLASS_NexoOperatorID: TGUID = '{B7EF7DA2-0012-3BF2-AE9D-2D888B4A8713}';
  CLASS_NexoDateTime: TGUID = '{E006A441-EA2A-35E7-A6D6-CD3ECEAB6D5B}';
  CLASS_NexoInputCommand: TGUID = '{C60098B3-3FD8-3CFE-A6A8-410C604E9D3F}';
  CLASS_NexoEventToNotify: TGUID = '{9375C8EB-C7A8-37E2-9E1B-E40F0AE9C031}';
  CLASS_NexoPaymentIntrumentType: TGUID = '{18503BE0-8B33-380A-B129-1B23EEAEC988}';
  CLASS_NexoVersion: TGUID = '{018F4B79-F802-3F73-B3F8-5DE2574F4269}';
  CLASS_NexoCurrentVersion: TGUID = '{B2B36657-0878-3CB4-B3AB-005959E7AB6A}';
  CLASS_NexoRetailerServerDatabaseConnection: TGUID = '{B3BE9C30-2365-3F57-91F6-E91D06AD44BB}';
  CLASS_NexoRetailerServerDatabaseEndPoint: TGUID = '{D5B7F46B-6311-3F01-87C4-82A5B35336D4}';
  CLASS_NexoRetailerServerDatabaseSale: TGUID = '{1A5F80F3-FAB1-3154-9F69-375F0522F829}';
  CLASS_NexoRetailerServerDatabaseMessage: TGUID = '{E726AD02-A3BF-3CE9-8A02-991A58EDAD18}';
  CLASS_NexoRetailerServerDatabase: TGUID = '{40293999-BF46-3100-9547-28E16FE9254B}';

// *********************************************************************//
// Déclaration d'énumérations définies dans la bibliothèque de types                    
// *********************************************************************//
// Constantes pour enum AlgorithmEnumeration
type
  AlgorithmEnumeration = TOleEnum;
const
  AlgorithmEnumeration__none = $FFFFFFFE;
  AlgorithmEnumeration__begin = $FFFFFFFF;
  AlgorithmEnumeration_idretailcbcmac = $00000000;
  AlgorithmEnumeration_idretailcbcmacsha256 = $00000001;
  AlgorithmEnumeration_idukptwrap = $00000002;
  AlgorithmEnumeration_iddukptwrap = $00000003;
  AlgorithmEnumeration_desede3ecb = $00000004;
  AlgorithmEnumeration_desede3cbc = $00000005;
  AlgorithmEnumeration_idsha256 = $00000006;
  AlgorithmEnumeration_sha256WithRSAEncryption = $00000007;
  AlgorithmEnumeration_rsaEncryption = $00000008;
  AlgorithmEnumeration__end = $00000009;

// Constantes pour enum AttributeTypeEnumeration
type
  AttributeTypeEnumeration = TOleEnum;
const
  AttributeTypeEnumeration__none = $FFFFFFFE;
  AttributeTypeEnumeration__begin = $FFFFFFFF;
  AttributeTypeEnumeration_idatcommonName = $00000000;
  AttributeTypeEnumeration_idatlocalityName = $00000001;
  AttributeTypeEnumeration_idatorganizationName = $00000002;
  AttributeTypeEnumeration_idatorganizationalUnitName = $00000003;
  AttributeTypeEnumeration_idatcountryName = $00000004;
  AttributeTypeEnumeration__end = $00000005;

// Constantes pour enum ContentTypeEnumeration
type
  ContentTypeEnumeration = TOleEnum;
const
  ContentTypeEnumeration__none = $FFFFFFFE;
  ContentTypeEnumeration__begin = $FFFFFFFF;
  ContentTypeEnumeration_iddata = $00000000;
  ContentTypeEnumeration_idsignedData = $00000001;
  ContentTypeEnumeration_idenvelopedData = $00000002;
  ContentTypeEnumeration_iddigestedData = $00000003;
  ContentTypeEnumeration_idencryptedData = $00000004;
  ContentTypeEnumeration_idctauthData = $00000005;
  ContentTypeEnumeration__end = $00000006;

// Constantes pour enum VersionEnumeration
type
  VersionEnumeration = TOleEnum;
const
  VersionEnumeration__none = $FFFFFFFE;
  VersionEnumeration__begin = $FFFFFFFF;
  VersionEnumeration_v0 = $00000000;
  VersionEnumeration_v1 = $00000001;
  VersionEnumeration_v2 = $00000002;
  VersionEnumeration_v3 = $00000003;
  VersionEnumeration_v4 = $00000004;
  VersionEnumeration_v5 = $00000005;
  VersionEnumeration__end = $00000006;

// Constantes pour enum AccountTypeEnumeration
type
  AccountTypeEnumeration = TOleEnum;
const
  AccountTypeEnumeration__none = $FFFFFFFE;
  AccountTypeEnumeration__begin = $FFFFFFFF;
  AccountTypeEnumeration_Default = $00000000;
  AccountTypeEnumeration_Savings = $00000001;
  AccountTypeEnumeration_Checking = $00000002;
  AccountTypeEnumeration_CreditCard = $00000003;
  AccountTypeEnumeration_Universal = $00000004;
  AccountTypeEnumeration_Investment = $00000005;
  AccountTypeEnumeration_CardTotals = $00000006;
  AccountTypeEnumeration_EpurseCard = $00000007;
  AccountTypeEnumeration__end = $00000008;

// Constantes pour enum AlignmentEnumeration
type
  AlignmentEnumeration = TOleEnum;
const
  AlignmentEnumeration__none = $FFFFFFFE;
  AlignmentEnumeration__begin = $FFFFFFFF;
  AlignmentEnumeration_Left = $00000000;
  AlignmentEnumeration_Right = $00000001;
  AlignmentEnumeration_Centred = $00000002;
  AlignmentEnumeration_Justified = $00000003;
  AlignmentEnumeration__end = $00000004;

// Constantes pour enum AuthenticationMethodEnumeration
type
  AuthenticationMethodEnumeration = TOleEnum;
const
  AuthenticationMethodEnumeration__none = $FFFFFFFE;
  AuthenticationMethodEnumeration__begin = $FFFFFFFF;
  AuthenticationMethodEnumeration_Bypass = $00000000;
  AuthenticationMethodEnumeration_ManualVerification = $00000001;
  AuthenticationMethodEnumeration_MerchantAuthentication = $00000002;
  AuthenticationMethodEnumeration_OfflinePIN = $00000003;
  AuthenticationMethodEnumeration_OnLinePIN = $00000004;
  AuthenticationMethodEnumeration_PaperSignature = $00000005;
  AuthenticationMethodEnumeration_SecuredChannel = $00000006;
  AuthenticationMethodEnumeration_SecureCertificate = $00000007;
  AuthenticationMethodEnumeration_SecureNoCertificate = $00000008;
  AuthenticationMethodEnumeration_SignatureCapture = $00000009;
  AuthenticationMethodEnumeration_UnknownMethod = $0000000A;
  AuthenticationMethodEnumeration__end = $0000000B;

// Constantes pour enum BarcodeTypeEnumeration
type
  BarcodeTypeEnumeration = TOleEnum;
const
  BarcodeTypeEnumeration__none = $FFFFFFFE;
  BarcodeTypeEnumeration__begin = $FFFFFFFF;
  BarcodeTypeEnumeration_EAN8 = $00000000;
  BarcodeTypeEnumeration_EAN13 = $00000001;
  BarcodeTypeEnumeration_UPCA = $00000002;
  BarcodeTypeEnumeration_Code25 = $00000003;
  BarcodeTypeEnumeration_Code128 = $00000004;
  BarcodeTypeEnumeration_PDF417 = $00000005;
  BarcodeTypeEnumeration_QRCODE = $00000006;
  BarcodeTypeEnumeration__end = $00000007;

// Constantes pour enum CharacterHeightEnumeration
type
  CharacterHeightEnumeration = TOleEnum;
const
  CharacterHeightEnumeration__none = $FFFFFFFE;
  CharacterHeightEnumeration__begin = $FFFFFFFF;
  CharacterHeightEnumeration_SingleHeight = $00000000;
  CharacterHeightEnumeration_DoubleHeight = $00000001;
  CharacterHeightEnumeration_HalfHeight = $00000002;
  CharacterHeightEnumeration__end = $00000003;

// Constantes pour enum CharacterStyleEnumeration
type
  CharacterStyleEnumeration = TOleEnum;
const
  CharacterStyleEnumeration__none = $FFFFFFFE;
  CharacterStyleEnumeration__begin = $FFFFFFFF;
  CharacterStyleEnumeration_Normal = $00000000;
  CharacterStyleEnumeration_Bold = $00000001;
  CharacterStyleEnumeration_Italic = $00000002;
  CharacterStyleEnumeration_Underlined = $00000003;
  CharacterStyleEnumeration__end = $00000004;

// Constantes pour enum CharacterWidthEnumeration
type
  CharacterWidthEnumeration = TOleEnum;
const
  CharacterWidthEnumeration__none = $FFFFFFFE;
  CharacterWidthEnumeration__begin = $FFFFFFFF;
  CharacterWidthEnumeration_SingleWidth = $00000000;
  CharacterWidthEnumeration_DoubleWidth = $00000001;
  CharacterWidthEnumeration__end = $00000002;

// Constantes pour enum CheckTypeCodeEnumeration
type
  CheckTypeCodeEnumeration = TOleEnum;
const
  CheckTypeCodeEnumeration__none = $FFFFFFFE;
  CheckTypeCodeEnumeration__begin = $FFFFFFFF;
  CheckTypeCodeEnumeration_Personal = $00000000;
  CheckTypeCodeEnumeration_Company = $00000001;
  CheckTypeCodeEnumeration__end = $00000002;

// Constantes pour enum ColorEnumeration
type
  ColorEnumeration = TOleEnum;
const
  ColorEnumeration__none = $FFFFFFFE;
  ColorEnumeration__begin = $FFFFFFFF;
  ColorEnumeration_White = $00000000;
  ColorEnumeration_Black = $00000001;
  ColorEnumeration_Red = $00000002;
  ColorEnumeration_Green = $00000003;
  ColorEnumeration_Blue = $00000004;
  ColorEnumeration_Yellow = $00000005;
  ColorEnumeration_Magenta = $00000006;
  ColorEnumeration_Cyan = $00000007;
  ColorEnumeration__end = $00000008;

// Constantes pour enum CustomerOrderReqEnumeration
type
  CustomerOrderReqEnumeration = TOleEnum;
const
  CustomerOrderReqEnumeration__none = $FFFFFFFE;
  CustomerOrderReqEnumeration__begin = $FFFFFFFF;
  CustomerOrderReqEnumeration_Open = $00000000;
  CustomerOrderReqEnumeration_Closed = $00000001;
  CustomerOrderReqEnumeration_Both = $00000002;
  CustomerOrderReqEnumeration__end = $00000003;

// Constantes pour enum DeviceEnumeration
type
  DeviceEnumeration = TOleEnum;
const
  DeviceEnumeration__none = $FFFFFFFE;
  DeviceEnumeration__begin = $FFFFFFFF;
  DeviceEnumeration_CashierDisplay = $00000000;
  DeviceEnumeration_CustomerDisplay = $00000001;
  DeviceEnumeration_CashierInput = $00000002;
  DeviceEnumeration_CustomerInput = $00000003;
  DeviceEnumeration__end = $00000004;

// Constantes pour enum DocumentQualifierEnumeration
type
  DocumentQualifierEnumeration = TOleEnum;
const
  DocumentQualifierEnumeration__none = $FFFFFFFE;
  DocumentQualifierEnumeration__begin = $FFFFFFFF;
  DocumentQualifierEnumeration_SaleReceipt = $00000000;
  DocumentQualifierEnumeration_CashierReceipt = $00000001;
  DocumentQualifierEnumeration_CustomerReceipt = $00000002;
  DocumentQualifierEnumeration_Document = $00000003;
  DocumentQualifierEnumeration_Voucher = $00000004;
  DocumentQualifierEnumeration_Journal = $00000005;
  DocumentQualifierEnumeration__end = $00000006;

// Constantes pour enum EntryModeEnumeration
type
  EntryModeEnumeration = TOleEnum;
const
  EntryModeEnumeration__none = $FFFFFFFE;
  EntryModeEnumeration__begin = $FFFFFFFF;
  EntryModeEnumeration_RFID = $00000000;
  EntryModeEnumeration_Keyed = $00000001;
  EntryModeEnumeration_Manual = $00000002;
  EntryModeEnumeration_File = $00000003;
  EntryModeEnumeration_Scanned = $00000004;
  EntryModeEnumeration_MagStripe = $00000005;
  EntryModeEnumeration_ICC = $00000006;
  EntryModeEnumeration_SynchronousICC = $00000007;
  EntryModeEnumeration_Tapped = $00000008;
  EntryModeEnumeration_Contactless = $00000009;
  EntryModeEnumeration_Mobile = $0000000A;
  EntryModeEnumeration__end = $0000000B;

// Constantes pour enum ErrorConditionEnumeration
type
  ErrorConditionEnumeration = TOleEnum;
const
  ErrorConditionEnumeration__none = $FFFFFFFE;
  ErrorConditionEnumeration__begin = $FFFFFFFF;
  ErrorConditionEnumeration_Aborted = $00000000;
  ErrorConditionEnumeration_Busy = $00000001;
  ErrorConditionEnumeration_Cancel = $00000002;
  ErrorConditionEnumeration_DeviceOut = $00000003;
  ErrorConditionEnumeration_InsertedCard = $00000004;
  ErrorConditionEnumeration_InProgress = $00000005;
  ErrorConditionEnumeration_LoggedOut = $00000006;
  ErrorConditionEnumeration_MessageFormat = $00000007;
  ErrorConditionEnumeration_NotAllowed = $00000008;
  ErrorConditionEnumeration_NotFound = $00000009;
  ErrorConditionEnumeration_PaymentRestriction = $0000000A;
  ErrorConditionEnumeration_Refusal = $0000000B;
  ErrorConditionEnumeration_UnavailableDevice = $0000000C;
  ErrorConditionEnumeration_UnavailableService = $0000000D;
  ErrorConditionEnumeration_InvalidCard = $0000000E;
  ErrorConditionEnumeration_UnreachableHost = $0000000F;
  ErrorConditionEnumeration_WrongPIN = $00000010;
  ErrorConditionEnumeration__end = $00000011;

// Constantes pour enum EventToNotifyEnumeration
type
  EventToNotifyEnumeration = TOleEnum;
const
  EventToNotifyEnumeration__none = $FFFFFFFE;
  EventToNotifyEnumeration__begin = $FFFFFFFF;
  EventToNotifyEnumeration_BeginMaintenance = $00000000;
  EventToNotifyEnumeration_EndMaintenance = $00000001;
  EventToNotifyEnumeration_Shutdown = $00000002;
  EventToNotifyEnumeration_Initialised = $00000003;
  EventToNotifyEnumeration_OutOfOrder = $00000004;
  EventToNotifyEnumeration_Completed = $00000005;
  EventToNotifyEnumeration_Abort = $00000006;
  EventToNotifyEnumeration_SaleWakeUp = $00000007;
  EventToNotifyEnumeration_SaleAdmin = $00000008;
  EventToNotifyEnumeration_CustomerLanguage = $00000009;
  EventToNotifyEnumeration_KeyPressed = $0000000A;
  EventToNotifyEnumeration_SecurityAlarm = $0000000B;
  EventToNotifyEnumeration_StopAssistance = $0000000C;
  EventToNotifyEnumeration_CardInserted = $0000000D;
  EventToNotifyEnumeration_CardRemoved = $0000000E;
  EventToNotifyEnumeration_Reject = $0000000F;
  EventToNotifyEnumeration__end = $00000010;

// Constantes pour enum ForceEntryModeEnumeration
type
  ForceEntryModeEnumeration = TOleEnum;
const
  ForceEntryModeEnumeration__none = $FFFFFFFE;
  ForceEntryModeEnumeration__begin = $FFFFFFFF;
  ForceEntryModeEnumeration_RFID = $00000000;
  ForceEntryModeEnumeration_Keyed = $00000001;
  ForceEntryModeEnumeration_Manual = $00000002;
  ForceEntryModeEnumeration_File = $00000003;
  ForceEntryModeEnumeration_Scanned = $00000004;
  ForceEntryModeEnumeration_MagStripe = $00000005;
  ForceEntryModeEnumeration_ICC = $00000006;
  ForceEntryModeEnumeration_SynchronousICC = $00000007;
  ForceEntryModeEnumeration_Tapped = $00000008;
  ForceEntryModeEnumeration_Contactless = $00000009;
  ForceEntryModeEnumeration_CheckReader = $0000000A;
  ForceEntryModeEnumeration__end = $0000000B;

// Constantes pour enum GenericProfileEnumeration
type
  GenericProfileEnumeration = TOleEnum;
const
  GenericProfileEnumeration__none = $FFFFFFFE;
  GenericProfileEnumeration__begin = $FFFFFFFF;
  GenericProfileEnumeration_Basic = $00000000;
  GenericProfileEnumeration_Standard = $00000001;
  GenericProfileEnumeration_Extended = $00000002;
  GenericProfileEnumeration__end = $00000003;

// Constantes pour enum GlobalStatusEnumeration
type
  GlobalStatusEnumeration = TOleEnum;
const
  GlobalStatusEnumeration__none = $FFFFFFFE;
  GlobalStatusEnumeration__begin = $FFFFFFFF;
  GlobalStatusEnumeration_OK = $00000000;
  GlobalStatusEnumeration_Busy = $00000001;
  GlobalStatusEnumeration_Maintenance = $00000002;
  GlobalStatusEnumeration_Unreachable = $00000003;
  GlobalStatusEnumeration__end = $00000004;

// Constantes pour enum IdentificationSupportEnumeration
type
  IdentificationSupportEnumeration = TOleEnum;
const
  IdentificationSupportEnumeration__none = $FFFFFFFE;
  IdentificationSupportEnumeration__begin = $FFFFFFFF;
  IdentificationSupportEnumeration_NoCard = $00000000;
  IdentificationSupportEnumeration_LoyaltyCard = $00000001;
  IdentificationSupportEnumeration_HybridCard = $00000002;
  IdentificationSupportEnumeration_LinkedCard = $00000003;
  IdentificationSupportEnumeration__end = $00000004;

// Constantes pour enum IdentificationTypeEnumeration
type
  IdentificationTypeEnumeration = TOleEnum;
const
  IdentificationTypeEnumeration__none = $FFFFFFFE;
  IdentificationTypeEnumeration__begin = $FFFFFFFF;
  IdentificationTypeEnumeration_PAN = $00000000;
  IdentificationTypeEnumeration_ISOTrack2 = $00000001;
  IdentificationTypeEnumeration_BarCode = $00000002;
  IdentificationTypeEnumeration_AccountNumber = $00000003;
  IdentificationTypeEnumeration_PhoneNumber = $00000004;
  IdentificationTypeEnumeration__end = $00000005;

// Constantes pour enum InfoQualifyEnumeration
type
  InfoQualifyEnumeration = TOleEnum;
const
  InfoQualifyEnumeration__none = $FFFFFFFE;
  InfoQualifyEnumeration__begin = $FFFFFFFF;
  InfoQualifyEnumeration_Status = $00000000;
  InfoQualifyEnumeration_Error = $00000001;
  InfoQualifyEnumeration_Display = $00000002;
  InfoQualifyEnumeration_Sound = $00000003;
  InfoQualifyEnumeration_Input = $00000004;
  InfoQualifyEnumeration_POIReplication = $00000005;
  InfoQualifyEnumeration_CustomerAssistance = $00000006;
  InfoQualifyEnumeration_Receipt = $00000007;
  InfoQualifyEnumeration_Document = $00000008;
  InfoQualifyEnumeration_Voucher = $00000009;
  InfoQualifyEnumeration__end = $0000000A;

// Constantes pour enum InputCommandEnumeration
type
  InputCommandEnumeration = TOleEnum;
const
  InputCommandEnumeration__none = $FFFFFFFE;
  InputCommandEnumeration__begin = $FFFFFFFF;
  InputCommandEnumeration_GetAnyKey = $00000000;
  InputCommandEnumeration_GetConfirmation = $00000001;
  InputCommandEnumeration_SiteManager = $00000002;
  InputCommandEnumeration_TextString = $00000003;
  InputCommandEnumeration_DigitString = $00000004;
  InputCommandEnumeration_DecimalString = $00000005;
  InputCommandEnumeration_GetFunctionKey = $00000006;
  InputCommandEnumeration_GetMenuEntry = $00000007;
  InputCommandEnumeration_Password = $00000008;
  InputCommandEnumeration__end = $00000009;

// Constantes pour enum InstalmentTypeEnumeration
type
  InstalmentTypeEnumeration = TOleEnum;
const
  InstalmentTypeEnumeration__none = $FFFFFFFE;
  InstalmentTypeEnumeration__begin = $FFFFFFFF;
  InstalmentTypeEnumeration_DeferredInstalments = $00000000;
  InstalmentTypeEnumeration_EqualInstalments = $00000001;
  InstalmentTypeEnumeration_InequalInstalments = $00000002;
  InstalmentTypeEnumeration__end = $00000003;

// Constantes pour enum LoyaltyHandlingEnumeration
type
  LoyaltyHandlingEnumeration = TOleEnum;
const
  LoyaltyHandlingEnumeration__none = $FFFFFFFE;
  LoyaltyHandlingEnumeration__begin = $FFFFFFFF;
  LoyaltyHandlingEnumeration_Forbidden = $00000000;
  LoyaltyHandlingEnumeration_Processed = $00000001;
  LoyaltyHandlingEnumeration_Allowed = $00000002;
  LoyaltyHandlingEnumeration_Proposed = $00000003;
  LoyaltyHandlingEnumeration_Required = $00000004;
  LoyaltyHandlingEnumeration__end = $00000005;

// Constantes pour enum LoyaltyTransactionTypeEnumeration
type
  LoyaltyTransactionTypeEnumeration = TOleEnum;
const
  LoyaltyTransactionTypeEnumeration__none = $FFFFFFFE;
  LoyaltyTransactionTypeEnumeration__begin = $FFFFFFFF;
  LoyaltyTransactionTypeEnumeration_Award = $00000000;
  LoyaltyTransactionTypeEnumeration_Rebate = $00000001;
  LoyaltyTransactionTypeEnumeration_Redemption = $00000002;
  LoyaltyTransactionTypeEnumeration_AwardRefund = $00000003;
  LoyaltyTransactionTypeEnumeration_RebateRefund = $00000004;
  LoyaltyTransactionTypeEnumeration_RedemptionRefund = $00000005;
  LoyaltyTransactionTypeEnumeration__end = $00000006;

// Constantes pour enum LoyaltyUnitEnumeration
type
  LoyaltyUnitEnumeration = TOleEnum;
const
  LoyaltyUnitEnumeration__none = $FFFFFFFE;
  LoyaltyUnitEnumeration__begin = $FFFFFFFF;
  LoyaltyUnitEnumeration_Point = $00000000;
  LoyaltyUnitEnumeration_Monetary = $00000001;
  LoyaltyUnitEnumeration__end = $00000002;

// Constantes pour enum MenuEntryTagEnumeration
type
  MenuEntryTagEnumeration = TOleEnum;
const
  MenuEntryTagEnumeration__none = $FFFFFFFE;
  MenuEntryTagEnumeration__begin = $FFFFFFFF;
  MenuEntryTagEnumeration_Selectable = $00000000;
  MenuEntryTagEnumeration_NonSelectable = $00000001;
  MenuEntryTagEnumeration_SubMenu = $00000002;
  MenuEntryTagEnumeration_NonSelectableSubMenu = $00000003;
  MenuEntryTagEnumeration__end = $00000004;

// Constantes pour enum MessageCategoryEnumeration
type
  MessageCategoryEnumeration = TOleEnum;
const
  MessageCategoryEnumeration__none = $FFFFFFFE;
  MessageCategoryEnumeration__begin = $FFFFFFFF;
  MessageCategoryEnumeration_Abort = $00000000;
  MessageCategoryEnumeration_Admin = $00000001;
  MessageCategoryEnumeration_BalanceInquiry = $00000002;
  MessageCategoryEnumeration_Batch = $00000003;
  MessageCategoryEnumeration_CardAcquisition = $00000004;
  MessageCategoryEnumeration_CardReaderAPDU = $00000005;
  MessageCategoryEnumeration_CardReaderInit = $00000006;
  MessageCategoryEnumeration_CardReaderPowerOff = $00000007;
  MessageCategoryEnumeration_Diagnosis = $00000008;
  MessageCategoryEnumeration_Display = $00000009;
  MessageCategoryEnumeration_EnableService = $0000000A;
  MessageCategoryEnumeration_Event = $0000000B;
  MessageCategoryEnumeration_GetTotals = $0000000C;
  MessageCategoryEnumeration_Input = $0000000D;
  MessageCategoryEnumeration_InputUpdate = $0000000E;
  MessageCategoryEnumeration_Login = $0000000F;
  MessageCategoryEnumeration_Logout = $00000010;
  MessageCategoryEnumeration_Loyalty = $00000011;
  MessageCategoryEnumeration_Payment = $00000012;
  MessageCategoryEnumeration_PIN = $00000013;
  MessageCategoryEnumeration_Print = $00000014;
  MessageCategoryEnumeration_Reconciliation = $00000015;
  MessageCategoryEnumeration_Reversal = $00000016;
  MessageCategoryEnumeration_Sound = $00000017;
  MessageCategoryEnumeration_StoredValue = $00000018;
  MessageCategoryEnumeration_TransactionReport = $00000019;
  MessageCategoryEnumeration_TransactionStatus = $0000001A;
  MessageCategoryEnumeration_Transmit = $0000001B;
  MessageCategoryEnumeration__end = $0000001C;

// Constantes pour enum MessageClassEnumeration
type
  MessageClassEnumeration = TOleEnum;
const
  MessageClassEnumeration__none = $FFFFFFFE;
  MessageClassEnumeration__begin = $FFFFFFFF;
  MessageClassEnumeration_Service = $00000000;
  MessageClassEnumeration_Device = $00000001;
  MessageClassEnumeration_Event = $00000002;
  MessageClassEnumeration__end = $00000003;

// Constantes pour enum MessageTypeEnumeration
type
  MessageTypeEnumeration = TOleEnum;
const
  MessageTypeEnumeration__none = $FFFFFFFE;
  MessageTypeEnumeration__begin = $FFFFFFFF;
  MessageTypeEnumeration_Request = $00000000;
  MessageTypeEnumeration_Response = $00000001;
  MessageTypeEnumeration_Notification = $00000002;
  MessageTypeEnumeration__end = $00000003;

// Constantes pour enum OutputFormatEnumeration
type
  OutputFormatEnumeration = TOleEnum;
const
  OutputFormatEnumeration__none = $FFFFFFFE;
  OutputFormatEnumeration__begin = $FFFFFFFF;
  OutputFormatEnumeration_MessageRef = $00000000;
  OutputFormatEnumeration_Text = $00000001;
  OutputFormatEnumeration_XHTML = $00000002;
  OutputFormatEnumeration_BarCode = $00000003;
  OutputFormatEnumeration__end = $00000004;

// Constantes pour enum PaymentInstrumentTypeEnumeration
type
  PaymentInstrumentTypeEnumeration = TOleEnum;
const
  PaymentInstrumentTypeEnumeration__none = $FFFFFFFE;
  PaymentInstrumentTypeEnumeration__begin = $FFFFFFFF;
  PaymentInstrumentTypeEnumeration_Card = $00000000;
  PaymentInstrumentTypeEnumeration_Check = $00000001;
  PaymentInstrumentTypeEnumeration_Mobile = $00000002;
  PaymentInstrumentTypeEnumeration_StoredValue = $00000003;
  PaymentInstrumentTypeEnumeration_Cash = $00000004;
  PaymentInstrumentTypeEnumeration__end = $00000005;

// Constantes pour enum PaymentTypeEnumeration
type
  PaymentTypeEnumeration = TOleEnum;
const
  PaymentTypeEnumeration__none = $FFFFFFFE;
  PaymentTypeEnumeration__begin = $FFFFFFFF;
  PaymentTypeEnumeration_Normal = $00000000;
  PaymentTypeEnumeration_Refund = $00000001;
  PaymentTypeEnumeration_OneTimeReservation = $00000002;
  PaymentTypeEnumeration_FirstReservation = $00000003;
  PaymentTypeEnumeration_UpdateReservation = $00000004;
  PaymentTypeEnumeration_Completion = $00000005;
  PaymentTypeEnumeration_CashAdvance = $00000006;
  PaymentTypeEnumeration_CashDeposit = $00000007;
  PaymentTypeEnumeration_Recurring = $00000008;
  PaymentTypeEnumeration_Instalment = $00000009;
  PaymentTypeEnumeration_IssuerInstalment = $0000000A;
  PaymentTypeEnumeration_PaidOut = $0000000B;
  PaymentTypeEnumeration__end = $0000000C;

// Constantes pour enum PeriodUnitEnumeration
type
  PeriodUnitEnumeration = TOleEnum;
const
  PeriodUnitEnumeration__none = $FFFFFFFE;
  PeriodUnitEnumeration__begin = $FFFFFFFF;
  PeriodUnitEnumeration_Daily = $00000000;
  PeriodUnitEnumeration_Weekly = $00000001;
  PeriodUnitEnumeration_Monthly = $00000002;
  PeriodUnitEnumeration_Annual = $00000003;
  PeriodUnitEnumeration__end = $00000004;

// Constantes pour enum PINFormatEnumeration
type
  PINFormatEnumeration = TOleEnum;
const
  PINFormatEnumeration__none = $FFFFFFFE;
  PINFormatEnumeration__begin = $FFFFFFFF;
  PINFormatEnumeration_ISO0 = $00000000;
  PINFormatEnumeration_ISO1 = $00000001;
  PINFormatEnumeration_ISO2 = $00000002;
  PINFormatEnumeration_ISO3 = $00000003;
  PINFormatEnumeration__end = $00000004;

// Constantes pour enum PINRequestTypeEnumeration
type
  PINRequestTypeEnumeration = TOleEnum;
const
  PINRequestTypeEnumeration__none = $FFFFFFFE;
  PINRequestTypeEnumeration__begin = $FFFFFFFF;
  PINRequestTypeEnumeration_PINVerify = $00000000;
  PINRequestTypeEnumeration_PINVerifyOnly = $00000001;
  PINRequestTypeEnumeration_PINEnter = $00000002;
  PINRequestTypeEnumeration__end = $00000003;

// Constantes pour enum POICapabilitiesEnumeration
type
  POICapabilitiesEnumeration = TOleEnum;
const
  POICapabilitiesEnumeration__none = $FFFFFFFE;
  POICapabilitiesEnumeration__begin = $FFFFFFFF;
  POICapabilitiesEnumeration_CashierDisplay = $00000000;
  POICapabilitiesEnumeration_CashierError = $00000001;
  POICapabilitiesEnumeration_CashierInput = $00000002;
  POICapabilitiesEnumeration_CustomerDisplay = $00000003;
  POICapabilitiesEnumeration_CustomerError = $00000004;
  POICapabilitiesEnumeration_CustomerInput = $00000005;
  POICapabilitiesEnumeration_PrinterReceipt = $00000006;
  POICapabilitiesEnumeration_PrinterDocument = $00000007;
  POICapabilitiesEnumeration_PrinterVoucher = $00000008;
  POICapabilitiesEnumeration_MagStripe = $00000009;
  POICapabilitiesEnumeration_ICC = $0000000A;
  POICapabilitiesEnumeration_EMVContactless = $0000000B;
  POICapabilitiesEnumeration_CashHandling = $0000000C;
  POICapabilitiesEnumeration__end = $0000000D;

// Constantes pour enum PrinterStatusEnumeration
type
  PrinterStatusEnumeration = TOleEnum;
const
  PrinterStatusEnumeration__none = $FFFFFFFE;
  PrinterStatusEnumeration__begin = $FFFFFFFF;
  PrinterStatusEnumeration_OK = $00000000;
  PrinterStatusEnumeration_PaperLow = $00000001;
  PrinterStatusEnumeration_NoPaper = $00000002;
  PrinterStatusEnumeration_PaperJam = $00000003;
  PrinterStatusEnumeration_OutOfOrder = $00000004;
  PrinterStatusEnumeration__end = $00000005;

// Constantes pour enum ReconciliationTypeEnumeration
type
  ReconciliationTypeEnumeration = TOleEnum;
const
  ReconciliationTypeEnumeration__none = $FFFFFFFE;
  ReconciliationTypeEnumeration__begin = $FFFFFFFF;
  ReconciliationTypeEnumeration_SaleReconciliation = $00000000;
  ReconciliationTypeEnumeration_AcquirerSynchronisation = $00000001;
  ReconciliationTypeEnumeration_AcquirerReconciliation = $00000002;
  ReconciliationTypeEnumeration_PreviousReconciliation = $00000003;
  ReconciliationTypeEnumeration__end = $00000004;

// Constantes pour enum ResponseModeEnumeration
type
  ResponseModeEnumeration = TOleEnum;
const
  ResponseModeEnumeration__none = $FFFFFFFE;
  ResponseModeEnumeration__begin = $FFFFFFFF;
  ResponseModeEnumeration_NotRequired = $00000000;
  ResponseModeEnumeration_Immediate = $00000001;
  ResponseModeEnumeration_PrintEnd = $00000002;
  ResponseModeEnumeration_SoundEnd = $00000003;
  ResponseModeEnumeration__end = $00000004;

// Constantes pour enum ResultEnumeration
type
  ResultEnumeration = TOleEnum;
const
  ResultEnumeration__none = $FFFFFFFE;
  ResultEnumeration__begin = $FFFFFFFF;
  ResultEnumeration_Success = $00000000;
  ResultEnumeration_Failure = $00000001;
  ResultEnumeration_Partial = $00000002;
  ResultEnumeration__end = $00000003;

// Constantes pour enum ReversalReasonEnumeration
type
  ReversalReasonEnumeration = TOleEnum;
const
  ReversalReasonEnumeration__none = $FFFFFFFE;
  ReversalReasonEnumeration__begin = $FFFFFFFF;
  ReversalReasonEnumeration_CustCancel = $00000000;
  ReversalReasonEnumeration_MerchantCancel = $00000001;
  ReversalReasonEnumeration_Malfunction = $00000002;
  ReversalReasonEnumeration_Unable2Compl = $00000003;
  ReversalReasonEnumeration__end = $00000004;

// Constantes pour enum SaleCapabilitiesEnumeration
type
  SaleCapabilitiesEnumeration = TOleEnum;
const
  SaleCapabilitiesEnumeration__none = $FFFFFFFE;
  SaleCapabilitiesEnumeration__begin = $FFFFFFFF;
  SaleCapabilitiesEnumeration_CashierStatus = $00000000;
  SaleCapabilitiesEnumeration_CashierError = $00000001;
  SaleCapabilitiesEnumeration_CashierDisplay = $00000002;
  SaleCapabilitiesEnumeration_POIReplication = $00000003;
  SaleCapabilitiesEnumeration_CashierInput = $00000004;
  SaleCapabilitiesEnumeration_CustomerAssistance = $00000005;
  SaleCapabilitiesEnumeration_CustomerDisplay = $00000006;
  SaleCapabilitiesEnumeration_CustomerError = $00000007;
  SaleCapabilitiesEnumeration_CustomerInput = $00000008;
  SaleCapabilitiesEnumeration_PrinterReceipt = $00000009;
  SaleCapabilitiesEnumeration_PrinterDocument = $0000000A;
  SaleCapabilitiesEnumeration_PrinterVoucher = $0000000B;
  SaleCapabilitiesEnumeration_MagStripe = $0000000C;
  SaleCapabilitiesEnumeration_ICC = $0000000D;
  SaleCapabilitiesEnumeration_EMVContactless = $0000000E;
  SaleCapabilitiesEnumeration__end = $0000000F;

// Constantes pour enum ServicesEnabledEnumeration
type
  ServicesEnabledEnumeration = TOleEnum;
const
  ServicesEnabledEnumeration__none = $FFFFFFFE;
  ServicesEnabledEnumeration__begin = $FFFFFFFF;
  ServicesEnabledEnumeration_CardAcquisition = $00000000;
  ServicesEnabledEnumeration_Payment = $00000001;
  ServicesEnabledEnumeration_Loyalty = $00000002;
  ServicesEnabledEnumeration__end = $00000003;

// Constantes pour enum ServiceProfilesEnumeration
type
  ServiceProfilesEnumeration = TOleEnum;
const
  ServiceProfilesEnumeration__none = $FFFFFFFE;
  ServiceProfilesEnumeration__begin = $FFFFFFFF;
  ServiceProfilesEnumeration_Synchro = $00000000;
  ServiceProfilesEnumeration_Batch = $00000001;
  ServiceProfilesEnumeration_OneTimeRes = $00000002;
  ServiceProfilesEnumeration_Reservation = $00000003;
  ServiceProfilesEnumeration_Loyalty = $00000004;
  ServiceProfilesEnumeration_StoredValue = $00000005;
  ServiceProfilesEnumeration_PIN = $00000006;
  ServiceProfilesEnumeration_CardReader = $00000007;
  ServiceProfilesEnumeration_Sound = $00000008;
  ServiceProfilesEnumeration_Communication = $00000009;
  ServiceProfilesEnumeration__end = $0000000A;

// Constantes pour enum SoundActionEnumeration
type
  SoundActionEnumeration = TOleEnum;
const
  SoundActionEnumeration__none = $FFFFFFFE;
  SoundActionEnumeration__begin = $FFFFFFFF;
  SoundActionEnumeration_StartSound = $00000000;
  SoundActionEnumeration_StopSound = $00000001;
  SoundActionEnumeration_SetDefaultVolume = $00000002;
  SoundActionEnumeration__end = $00000003;

// Constantes pour enum SoundFormatEnumeration
type
  SoundFormatEnumeration = TOleEnum;
const
  SoundFormatEnumeration__none = $FFFFFFFE;
  SoundFormatEnumeration__begin = $FFFFFFFF;
  SoundFormatEnumeration_SoundRef = $00000000;
  SoundFormatEnumeration_MessageRef = $00000001;
  SoundFormatEnumeration_Text = $00000002;
  SoundFormatEnumeration__end = $00000003;

// Constantes pour enum StoredValueAccountTypeEnumeration
type
  StoredValueAccountTypeEnumeration = TOleEnum;
const
  StoredValueAccountTypeEnumeration__none = $FFFFFFFE;
  StoredValueAccountTypeEnumeration__begin = $FFFFFFFF;
  StoredValueAccountTypeEnumeration_GiftCard = $00000000;
  StoredValueAccountTypeEnumeration_PhoneCard = $00000001;
  StoredValueAccountTypeEnumeration_Other = $00000002;
  StoredValueAccountTypeEnumeration__end = $00000003;

// Constantes pour enum StoredValueTransactionTypeEnumeration
type
  StoredValueTransactionTypeEnumeration = TOleEnum;
const
  StoredValueTransactionTypeEnumeration__none = $FFFFFFFE;
  StoredValueTransactionTypeEnumeration__begin = $FFFFFFFF;
  StoredValueTransactionTypeEnumeration_Reserve = $00000000;
  StoredValueTransactionTypeEnumeration_Activate = $00000001;
  StoredValueTransactionTypeEnumeration_Load = $00000002;
  StoredValueTransactionTypeEnumeration_Unload = $00000003;
  StoredValueTransactionTypeEnumeration_Reverse = $00000004;
  StoredValueTransactionTypeEnumeration_Duplicate = $00000005;
  StoredValueTransactionTypeEnumeration__end = $00000006;

// Constantes pour enum TerminalEnvironmentEnumeration
type
  TerminalEnvironmentEnumeration = TOleEnum;
const
  TerminalEnvironmentEnumeration__none = $FFFFFFFE;
  TerminalEnvironmentEnumeration__begin = $FFFFFFFF;
  TerminalEnvironmentEnumeration_Attended = $00000000;
  TerminalEnvironmentEnumeration_SemiAttended = $00000001;
  TerminalEnvironmentEnumeration_Unattended = $00000002;
  TerminalEnvironmentEnumeration__end = $00000003;

// Constantes pour enum TokenRequestedTypeEnumeration
type
  TokenRequestedTypeEnumeration = TOleEnum;
const
  TokenRequestedTypeEnumeration__none = $FFFFFFFE;
  TokenRequestedTypeEnumeration__begin = $FFFFFFFF;
  TokenRequestedTypeEnumeration_Transaction = $00000000;
  TokenRequestedTypeEnumeration_Customer = $00000001;
  TokenRequestedTypeEnumeration__end = $00000002;

// Constantes pour enum TotalDetailsEnumeration
type
  TotalDetailsEnumeration = TOleEnum;
const
  TotalDetailsEnumeration__none = $FFFFFFFE;
  TotalDetailsEnumeration__begin = $FFFFFFFF;
  TotalDetailsEnumeration_POIID = $00000000;
  TotalDetailsEnumeration_SaleID = $00000001;
  TotalDetailsEnumeration_OperatorID = $00000002;
  TotalDetailsEnumeration_ShiftNumber = $00000003;
  TotalDetailsEnumeration_TotalsGroupID = $00000004;
  TotalDetailsEnumeration__end = $00000005;

// Constantes pour enum TrackFormatEnumeration
type
  TrackFormatEnumeration = TOleEnum;
const
  TrackFormatEnumeration__none = $FFFFFFFE;
  TrackFormatEnumeration__begin = $FFFFFFFF;
  TrackFormatEnumeration_ISO = $00000000;
  TrackFormatEnumeration_JISI = $00000001;
  TrackFormatEnumeration_JISII = $00000002;
  TrackFormatEnumeration_AAMVA = $00000003;
  TrackFormatEnumeration_CMC7 = $00000004;
  TrackFormatEnumeration_E13B = $00000005;
  TrackFormatEnumeration__end = $00000006;

// Constantes pour enum TransactionActionEnumeration
type
  TransactionActionEnumeration = TOleEnum;
const
  TransactionActionEnumeration__none = $FFFFFFFE;
  TransactionActionEnumeration__begin = $FFFFFFFF;
  TransactionActionEnumeration_StartTransaction = $00000000;
  TransactionActionEnumeration_AbortTransaction = $00000001;
  TransactionActionEnumeration__end = $00000002;

// Constantes pour enum TransactionTypeEnumeration
type
  TransactionTypeEnumeration = TOleEnum;
const
  TransactionTypeEnumeration__none = $FFFFFFFE;
  TransactionTypeEnumeration__begin = $FFFFFFFF;
  TransactionTypeEnumeration_Debit = $00000000;
  TransactionTypeEnumeration_Credit = $00000001;
  TransactionTypeEnumeration_ReverseDebit = $00000002;
  TransactionTypeEnumeration_ReverseCredit = $00000003;
  TransactionTypeEnumeration_OneTimeReservation = $00000004;
  TransactionTypeEnumeration_CompletedDeffered = $00000005;
  TransactionTypeEnumeration_FirstReservation = $00000006;
  TransactionTypeEnumeration_UpdateReservation = $00000007;
  TransactionTypeEnumeration_CompletedReservation = $00000008;
  TransactionTypeEnumeration_CashAdvance = $00000009;
  TransactionTypeEnumeration_IssuerInstalment = $0000000A;
  TransactionTypeEnumeration_Declined = $0000000B;
  TransactionTypeEnumeration_Failed = $0000000C;
  TransactionTypeEnumeration_Award = $0000000D;
  TransactionTypeEnumeration_ReverseAward = $0000000E;
  TransactionTypeEnumeration_Redemption = $0000000F;
  TransactionTypeEnumeration_ReverseRedemption = $00000010;
  TransactionTypeEnumeration_Rebate = $00000011;
  TransactionTypeEnumeration_ReverseRebate = $00000012;
  TransactionTypeEnumeration__end = $00000013;

// Constantes pour enum UnitOfMeasureEnumeration
type
  UnitOfMeasureEnumeration = TOleEnum;
const
  UnitOfMeasureEnumeration__none = $FFFFFFFE;
  UnitOfMeasureEnumeration__begin = $FFFFFFFF;
  UnitOfMeasureEnumeration_Case = $00000000;
  UnitOfMeasureEnumeration_Foot = $00000001;
  UnitOfMeasureEnumeration_UKGallon = $00000002;
  UnitOfMeasureEnumeration_USGallon = $00000003;
  UnitOfMeasureEnumeration_Gram = $00000004;
  UnitOfMeasureEnumeration_Inch = $00000005;
  UnitOfMeasureEnumeration_Kilogram = $00000006;
  UnitOfMeasureEnumeration_Pound = $00000007;
  UnitOfMeasureEnumeration_Meter = $00000008;
  UnitOfMeasureEnumeration_Centimetre = $00000009;
  UnitOfMeasureEnumeration_Litre = $0000000A;
  UnitOfMeasureEnumeration_Centilitre = $0000000B;
  UnitOfMeasureEnumeration_Ounce = $0000000C;
  UnitOfMeasureEnumeration_Quart = $0000000D;
  UnitOfMeasureEnumeration_Pint = $0000000E;
  UnitOfMeasureEnumeration_Mile = $0000000F;
  UnitOfMeasureEnumeration_Kilometre = $00000010;
  UnitOfMeasureEnumeration_Yard = $00000011;
  UnitOfMeasureEnumeration_Other = $00000012;
  UnitOfMeasureEnumeration__end = $00000013;

// Constantes pour enum TagsEnumeration
type
  TagsEnumeration = TOleEnum;
const
  TagsEnumeration_AbortReason = $00000000;
  TagsEnumeration_AccessedBy = $00000001;
  TagsEnumeration_AccountNumber = $00000002;
  TagsEnumeration_AccountType = $00000003;
  TagsEnumeration_AcquirerID = $00000004;
  TagsEnumeration_AcquirerPOIID = $00000005;
  TagsEnumeration_AcquirerTransactionID = $00000006;
  TagsEnumeration_AdditionalInformation = $00000007;
  TagsEnumeration_AdditionalInput = $00000008;
  TagsEnumeration_AdditionalProductInfo = $00000009;
  TagsEnumeration_AdditionalResponse = $0000000A;
  TagsEnumeration_Algorithm = $0000000B;
  TagsEnumeration_Alignment = $0000000C;
  TagsEnumeration_AllowedLoyaltyBrand = $0000000D;
  TagsEnumeration_AllowedPaymentBrand = $0000000E;
  TagsEnumeration_AllowedProduct = $0000000F;
  TagsEnumeration_AllowedProductCode = $00000010;
  TagsEnumeration_AmountsReq = $00000011;
  TagsEnumeration_AmountsResp = $00000012;
  TagsEnumeration_APDUClass = $00000013;
  TagsEnumeration_APDUData = $00000014;
  TagsEnumeration_APDUExpectedLength = $00000015;
  TagsEnumeration_APDUInstruction = $00000016;
  TagsEnumeration_APDUPar1 = $00000017;
  TagsEnumeration_APDUPar2 = $00000018;
  TagsEnumeration_ApplicationName = $00000019;
  TagsEnumeration_ApprovalCode = $0000001A;
  TagsEnumeration_AreaSize = $0000001B;
  TagsEnumeration_ATRValue = $0000001C;
  TagsEnumeration_AttributeType = $0000001D;
  TagsEnumeration_AttributeValue = $0000001E;
  TagsEnumeration_AuthenticationMethod = $0000001F;
  TagsEnumeration_AuthorizedAmount = $00000020;
  TagsEnumeration_BankID = $00000021;
  TagsEnumeration_BarcodeType = $00000022;
  TagsEnumeration_BeepKeyFlag = $00000023;
  TagsEnumeration_CapturedSignature = $00000024;
  TagsEnumeration_CardAcquisitionReference = $00000025;
  TagsEnumeration_CardAcquisitionTransaction = $00000026;
  TagsEnumeration_CardBrand = $00000027;
  TagsEnumeration_CardCountryCode = $00000028;
  TagsEnumeration_CardData = $00000029;
  TagsEnumeration_CardholderPIN = $0000002A;
  TagsEnumeration_CardReaderOKFlag = $0000002B;
  TagsEnumeration_CardReaderOKFlagSpecified = $0000002C;
  TagsEnumeration_CardSeqNumb = $0000002D;
  TagsEnumeration_CardStatusWords = $0000002E;
  TagsEnumeration_CashBackAmount = $0000002F;
  TagsEnumeration_CashBackAmountSpecified = $00000030;
  TagsEnumeration_CashBackFlag = $00000031;
  TagsEnumeration_CashBackFlagSpecified = $00000032;
  TagsEnumeration_CashHandlingDevice = $00000033;
  TagsEnumeration_CashHandlingOKFlag = $00000034;
  TagsEnumeration_Certificate = $00000035;
  TagsEnumeration_CertificationCode = $00000036;
  TagsEnumeration_CharacterHeight = $00000037;
  TagsEnumeration_CharacterSet = $00000038;
  TagsEnumeration_CharacterStyle = $00000039;
  TagsEnumeration_CharacterWidth = $0000003A;
  TagsEnumeration_Charges = $0000003B;
  TagsEnumeration_ChargesSpecified = $0000003C;
  TagsEnumeration_CheckCardNumber = $0000003D;
  TagsEnumeration_CheckData = $0000003E;
  TagsEnumeration_CheckNumber = $0000003F;
  TagsEnumeration_CoinsOrBills = $00000040;
  TagsEnumeration_Color = $00000041;
  TagsEnumeration_Commission = $00000042;
  TagsEnumeration_CommissionSpecified = $00000043;
  TagsEnumeration_CommunicationOKFlag = $00000044;
  TagsEnumeration_CommunicationOKFlagSpecified = $00000045;
  TagsEnumeration_ConfirmedFlag = $00000046;
  TagsEnumeration_ConfirmedFlagSpecified = $00000047;
  TagsEnumeration_Content = $00000048;
  TagsEnumeration_ContentEncryptionAlgorithm = $00000049;
  TagsEnumeration_ContentType = $0000004A;
  TagsEnumeration_ConvertedAmount = $0000004B;
  TagsEnumeration_Country = $0000004C;
  TagsEnumeration_CumulativeAmount = $0000004D;
  TagsEnumeration_CumulativeAmountSpecified = $0000004E;
  TagsEnumeration_Currency = $0000004F;
  TagsEnumeration_CurrencyConversion = $00000050;
  TagsEnumeration_CurrentAmount = $00000051;
  TagsEnumeration_CurrentBalance = $00000052;
  TagsEnumeration_CurrentBalanceSpecified = $00000053;
  TagsEnumeration_CustomerApprovedFlag = $00000054;
  TagsEnumeration_CustomerLanguage = $00000055;
  TagsEnumeration_CustomerOrder = $00000056;
  TagsEnumeration_CustomerOrderID = $00000057;
  TagsEnumeration_CustomerOrderReq = $00000058;
  TagsEnumeration_DateTime = $00000059;
  TagsEnumeration_DebitPreferredFlag = $0000005A;
  TagsEnumeration_Declaration = $0000005B;
  TagsEnumeration_DefaultInputString = $0000005C;
  TagsEnumeration_DefaultSelectedFlag = $0000005D;
  TagsEnumeration_DerivationIdentifier = $0000005E;
  TagsEnumeration_DestinationAddress = $0000005F;
  TagsEnumeration_Device = $00000060;
  TagsEnumeration_DeviceID = $00000061;
  TagsEnumeration_Digest = $00000062;
  TagsEnumeration_DigestAlgorithm = $00000063;
  TagsEnumeration_DigitInput = $00000064;
  TagsEnumeration_DisableCancelFlag = $00000065;
  TagsEnumeration_DisableCorrectFlag = $00000066;
  TagsEnumeration_DisableValidFlag = $00000067;
  TagsEnumeration_DisplayOutput = $00000068;
  TagsEnumeration_DocumentQualifier = $00000069;
  TagsEnumeration_EanUpc = $0000006A;
  TagsEnumeration_EncapsulatedContent = $0000006B;
  TagsEnumeration_EncrPINBlock = $0000006C;
  TagsEnumeration_EncryptedContent = $0000006D;
  TagsEnumeration_EncryptedData = $0000006E;
  TagsEnumeration_EncryptedKey = $0000006F;
  TagsEnumeration_EndDate = $00000070;
  TagsEnumeration_EndDateSpecified = $00000071;
  TagsEnumeration_EndOfLineFlag = $00000072;
  TagsEnumeration_EntryMode = $00000073;
  TagsEnumeration_ErrorCondition = $00000074;
  TagsEnumeration_EventDetails = $00000075;
  TagsEnumeration_EventToNotify = $00000076;
  TagsEnumeration_ExpiryDate = $00000077;
  TagsEnumeration_ExpiryDateTime = $00000078;
  TagsEnumeration_ExpiryDateTimeSpecified = $00000079;
  TagsEnumeration_FirstAmount = $0000007A;
  TagsEnumeration_FirstAmountSpecified = $0000007B;
  TagsEnumeration_FirstPaymentDate = $0000007C;
  TagsEnumeration_Font = $0000007D;
  TagsEnumeration_ForceCustomerSelectionFlag = $0000007E;
  TagsEnumeration_ForceEntryMode = $0000007F;
  TagsEnumeration_ForceOnlineFlag = $00000080;
  TagsEnumeration_ForecastedAmount = $00000081;
  TagsEnumeration_FraudPreventionFlag = $00000082;
  TagsEnumeration_FraudPreventionFlagSpecified = $00000083;
  TagsEnumeration_FromRightToLeftFlag = $00000084;
  TagsEnumeration_FunctionKey = $00000085;
  TagsEnumeration_GenericProfile = $00000086;
  TagsEnumeration_GeographicCoordinates = $00000087;
  TagsEnumeration_Geolocation = $00000088;
  TagsEnumeration_GlobalCorrectionFlag = $00000089;
  TagsEnumeration_GlobalStatus = $0000008A;
  TagsEnumeration_HostDiagnosisFlag = $0000008B;
  TagsEnumeration_HostReconciliationID = $0000008C;
  TagsEnumeration_HostStatus = $0000008D;
  TagsEnumeration_HostTransactionID = $0000008E;
  TagsEnumeration_ICCResetData = $0000008F;
  TagsEnumeration_IdentificationSupport = $00000090;
  TagsEnumeration_IdentificationType = $00000091;
  TagsEnumeration_IMEI = $00000092;
  TagsEnumeration_ImmediateResponseFlag = $00000093;
  TagsEnumeration_IMSI = $00000094;
  TagsEnumeration_InfoQualify = $00000095;
  TagsEnumeration_InitialisationVector = $00000096;
  TagsEnumeration_Input = $00000097;
  TagsEnumeration_InputCommand = $00000098;
  TagsEnumeration_InputData = $00000099;
  TagsEnumeration_InputResult = $0000009A;
  TagsEnumeration_Instalment = $0000009B;
  TagsEnumeration_InstalmentType1 = $0000009C;
  TagsEnumeration_IntegratedPrintFlag = $0000009D;
  TagsEnumeration_IsReachableFlag = $0000009E;
  TagsEnumeration_Issuer = $0000009F;
  TagsEnumeration_IssuerAndSerialNumber = $000000A0;
  TagsEnumeration_Item = $000000A1;
  TagsEnumeration_ItemAmount = $000000A2;
  TagsEnumeration_ItemAmountSpecified = $000000A3;
  TagsEnumeration_ItemID = $000000A4;
  TagsEnumeration_Items = $000000A5;
  TagsEnumeration_KEKIdentifier = $000000A6;
  TagsEnumeration_KeyEncryptionAlgorithm = $000000A7;
  TagsEnumeration_KeyIdentifier = $000000A8;
  TagsEnumeration_KeyName = $000000A9;
  TagsEnumeration_KeyReference = $000000AA;
  TagsEnumeration_KeyVersion = $000000AB;
  TagsEnumeration_Language = $000000AC;
  TagsEnumeration_Latitude = $000000AD;
  TagsEnumeration_LeaveCardFlag = $000000AE;
  TagsEnumeration_LoggedSaleID = $000000AF;
  TagsEnumeration_Longitude = $000000B0;
  TagsEnumeration_LoyaltyAccount = $000000B1;
  TagsEnumeration_LoyaltyAccountID = $000000B2;
  TagsEnumeration_LoyaltyAccountReq = $000000B3;
  TagsEnumeration_LoyaltyAccountStatus = $000000B4;
  TagsEnumeration_LoyaltyAcquirerData = $000000B5;
  TagsEnumeration_LoyaltyAcquirerID = $000000B6;
  TagsEnumeration_LoyaltyAmount = $000000B7;
  TagsEnumeration_LoyaltyBrand = $000000B8;
  TagsEnumeration_LoyaltyCurrency = $000000B9;
  TagsEnumeration_LoyaltyData = $000000BA;
  TagsEnumeration_LoyaltyHandling = $000000BB;
  TagsEnumeration_LoyaltyResult = $000000BC;
  TagsEnumeration_LoyaltyTotals = $000000BD;
  TagsEnumeration_LoyaltyTransaction = $000000BE;
  TagsEnumeration_LoyaltyTransactionID = $000000BF;
  TagsEnumeration_LoyaltyTransactionType1 = $000000C0;
  TagsEnumeration_LoyaltyUnit = $000000C1;
  TagsEnumeration_MAC = $000000C2;
  TagsEnumeration_MACAlgorithm = $000000C3;
  TagsEnumeration_MaintenanceAllowed = $000000C4;
  TagsEnumeration_MaintenanceRequiredFlag = $000000C5;
  TagsEnumeration_ManufacturerID = $000000C6;
  TagsEnumeration_Markup = $000000C7;
  TagsEnumeration_MarkupSpecified = $000000C8;
  TagsEnumeration_MaskCharactersFlag = $000000C9;
  TagsEnumeration_MaskedMSISDN = $000000CA;
  TagsEnumeration_MaskedPAN = $000000CB;
  TagsEnumeration_MaxDecimalLength = $000000CC;
  TagsEnumeration_MaximumCashBackAmount = $000000CD;
  TagsEnumeration_MaximumCashBackAmountSpecified = $000000CE;
  TagsEnumeration_MaximumTransmitTime = $000000CF;
  TagsEnumeration_MaxInputTime = $000000D0;
  TagsEnumeration_MaxLength = $000000D1;
  TagsEnumeration_MaxWaitingTime = $000000D2;
  TagsEnumeration_MenuBackFlag = $000000D3;
  TagsEnumeration_MenuEntry = $000000D4;
  TagsEnumeration_MenuEntryNumber = $000000D5;
  TagsEnumeration_MenuEntryTag = $000000D6;
  TagsEnumeration_MerchantAddress = $000000D7;
  TagsEnumeration_MerchantCategoryCode = $000000D8;
  TagsEnumeration_MerchantCountry = $000000D9;
  TagsEnumeration_MerchantID = $000000DA;
  TagsEnumeration_MerchantName = $000000DB;
  TagsEnumeration_MerchantOverrideFlag = $000000DC;
  TagsEnumeration_Message = $000000DD;
  TagsEnumeration_MessageCategory = $000000DE;
  TagsEnumeration_MessageClass = $000000DF;
  TagsEnumeration_MessageHeader = $000000E0;
  TagsEnumeration_MessageReference = $000000E1;
  TagsEnumeration_MessageType = $000000E2;
  TagsEnumeration_MinimumAmountToDeliver = $000000E3;
  TagsEnumeration_MinimumAmountToDeliverSpecified = $000000E4;
  TagsEnumeration_MinimumDisplayTime = $000000E5;
  TagsEnumeration_MinimumSplitAmount = $000000E6;
  TagsEnumeration_MinimumSplitAmountSpecified = $000000E7;
  TagsEnumeration_MinLength = $000000E8;
  TagsEnumeration_MobileCountryCode = $000000E9;
  TagsEnumeration_MobileData = $000000EA;
  TagsEnumeration_MobileNetworkCode = $000000EB;
  TagsEnumeration_MSISDN = $000000EC;
  TagsEnumeration_NotifyCardInputFlag = $000000ED;
  TagsEnumeration_Number = $000000EE;
  TagsEnumeration_OnlineFlag = $000000EF;
  TagsEnumeration_OpenOrderState = $000000F0;
  TagsEnumeration_OperatorID = $000000F1;
  TagsEnumeration_OperatorLanguage = $000000F2;
  TagsEnumeration_OriginalPOITransaction = $000000F3;
  TagsEnumeration_OutputBarcode = $000000F4;
  TagsEnumeration_OutputContent = $000000F5;
  TagsEnumeration_OutputFormat = $000000F6;
  TagsEnumeration_OutputResult = $000000F7;
  TagsEnumeration_OutputSignature = $000000F8;
  TagsEnumeration_OutputText = $000000F9;
  TagsEnumeration_OutputXHTML = $000000FA;
  TagsEnumeration_OwnerName = $000000FB;
  TagsEnumeration_PaidAmount = $000000FC;
  TagsEnumeration_PaidAmountSpecified = $000000FD;
  TagsEnumeration_PAN = $000000FE;
  TagsEnumeration_Parameter = $000000FF;
  TagsEnumeration_Password = $00000100;
  TagsEnumeration_PaymentAccountRef = $00000101;
  TagsEnumeration_PaymentAccountReq = $00000102;
  TagsEnumeration_PaymentAccountStatus = $00000103;
  TagsEnumeration_PaymentAcquirerData = $00000104;
  TagsEnumeration_PaymentBrand = $00000105;
  TagsEnumeration_PaymentCurrency = $00000106;
  TagsEnumeration_PaymentData = $00000107;
  TagsEnumeration_PaymentInstrumentData = $00000108;
  TagsEnumeration_PaymentInstrumentType = $00000109;
  TagsEnumeration_PaymentReceipt = $0000010A;
  TagsEnumeration_PaymentResult = $0000010B;
  TagsEnumeration_PaymentToken = $0000010C;
  TagsEnumeration_PaymentTotals = $0000010D;
  TagsEnumeration_PaymentTransaction = $0000010E;
  TagsEnumeration_PaymentType = $0000010F;
  TagsEnumeration_PEDOKFlag = $00000110;
  TagsEnumeration_PEDOKFlagSpecified = $00000111;
  TagsEnumeration_PerformedTransaction = $00000112;
  TagsEnumeration_Period = $00000113;
  TagsEnumeration_PeriodUnit = $00000114;
  TagsEnumeration_PINEncAlgorithm = $00000115;
  TagsEnumeration_PINFormat = $00000116;
  TagsEnumeration_PINRequestType1 = $00000117;
  TagsEnumeration_PINVerifMethod = $00000118;
  TagsEnumeration_PlanID = $00000119;
  TagsEnumeration_POICapabilities = $0000011A;
  TagsEnumeration_POIData = $0000011B;
  TagsEnumeration_POIID = $0000011C;
  TagsEnumeration_POIProfile = $0000011D;
  TagsEnumeration_POIReconciliationID = $0000011E;
  TagsEnumeration_POISerialNumber = $0000011F;
  TagsEnumeration_POISoftware = $00000120;
  TagsEnumeration_POIStatus = $00000121;
  TagsEnumeration_POISystemData = $00000122;
  TagsEnumeration_POITerminalData = $00000123;
  TagsEnumeration_POITransactionID = $00000124;
  TagsEnumeration_PredefinedContent = $00000125;
  TagsEnumeration_PrinterStatus = $00000126;
  TagsEnumeration_PrintOutput = $00000127;
  TagsEnumeration_ProductCode = $00000128;
  TagsEnumeration_ProductLabel = $00000129;
  TagsEnumeration_ProtectedCardData = $0000012A;
  TagsEnumeration_ProtectedMobileData = $0000012B;
  TagsEnumeration_ProtectedSignature = $0000012C;
  TagsEnumeration_ProtocolVersion = $0000012D;
  TagsEnumeration_Quantity = $0000012E;
  TagsEnumeration_QuantitySpecified = $0000012F;
  TagsEnumeration_Rate = $00000130;
  TagsEnumeration_RateSpecified = $00000131;
  TagsEnumeration_RebateLabel = $00000132;
  TagsEnumeration_Rebates = $00000133;
  TagsEnumeration_ReceiptReprintFlag = $00000134;
  TagsEnumeration_RecipientIdentifier = $00000135;
  TagsEnumeration_ReconciliationType = $00000136;
  TagsEnumeration_ReferenceID = $00000137;
  TagsEnumeration_RegistrationID = $00000138;
  TagsEnumeration_RejectedMessage = $00000139;
  TagsEnumeration_RelativeDistinguishedName = $0000013A;
  TagsEnumeration_RemoveAllFlag = $0000013B;
  TagsEnumeration_RemoveAllFlagSpecified = $0000013C;
  TagsEnumeration_RepeatedMessageResponse = $0000013D;
  TagsEnumeration_RequestedAmount = $0000013E;
  TagsEnumeration_RequestedAmountSpecified = $0000013F;
  TagsEnumeration_RequestedValidityDate = $00000140;
  TagsEnumeration_RequiredSignatureFlag = $00000141;
  TagsEnumeration_Response = $00000142;
  TagsEnumeration_ResponseMode = $00000143;
  TagsEnumeration_ResponseRequiredFlag = $00000144;
  TagsEnumeration_Result = $00000145;
  TagsEnumeration_ReuseCardDataFlag = $00000146;
  TagsEnumeration_ReversalReason = $00000147;
  TagsEnumeration_ReversedAmount = $00000148;
  TagsEnumeration_ReversedAmountSpecified = $00000149;
  TagsEnumeration_SaleCapabilities = $0000014A;
  TagsEnumeration_SaleChannel = $0000014B;
  TagsEnumeration_SaleData = $0000014C;
  TagsEnumeration_SaleID = $0000014D;
  TagsEnumeration_SaleItem = $0000014E;
  TagsEnumeration_SaleItemRebate = $0000014F;
  TagsEnumeration_SaleProfile = $00000150;
  TagsEnumeration_SaleReferenceID = $00000151;
  TagsEnumeration_SaleSoftware = $00000152;
  TagsEnumeration_SaleTerminalData = $00000153;
  TagsEnumeration_SaleToAcquirerData = $00000154;
  TagsEnumeration_SaleToIssuerData = $00000155;
  TagsEnumeration_SaleToPOIData = $00000156;
  TagsEnumeration_SaleTransactionID = $00000157;
  TagsEnumeration_SecurityOKFlag = $00000158;
  TagsEnumeration_SecurityOKFlagSpecified = $00000159;
  TagsEnumeration_SecurityTrailer = $0000015A;
  TagsEnumeration_SensitiveCardData = $0000015B;
  TagsEnumeration_SensitiveMobileData = $0000015C;
  TagsEnumeration_SequenceNumber = $0000015D;
  TagsEnumeration_SerialNumber = $0000015E;
  TagsEnumeration_ServiceID = $0000015F;
  TagsEnumeration_ServiceIdentification = $00000160;
  TagsEnumeration_ServiceProfiles = $00000161;
  TagsEnumeration_ServicesEnabled = $00000162;
  TagsEnumeration_ShiftNumber = $00000163;
  TagsEnumeration_Signature = $00000164;
  TagsEnumeration_SignatureAlgorithm = $00000165;
  TagsEnumeration_SignaturePoint = $00000166;
  TagsEnumeration_Signer = $00000167;
  TagsEnumeration_SignerIdentifier = $00000168;
  TagsEnumeration_SoftwareVersion = $00000169;
  TagsEnumeration_SoundAction = $0000016A;
  TagsEnumeration_SoundContent = $0000016B;
  TagsEnumeration_SoundFormat = $0000016C;
  TagsEnumeration_SoundVolume = $0000016D;
  TagsEnumeration_SplitPaymentFlag = $0000016E;
  TagsEnumeration_SponsoredMerchant = $0000016F;
  TagsEnumeration_StartColumn = $00000170;
  TagsEnumeration_StartDate = $00000171;
  TagsEnumeration_StartRow = $00000172;
  TagsEnumeration_StatementReference = $00000173;
  TagsEnumeration_StoredValueAccountID = $00000174;
  TagsEnumeration_StoredValueAccountStatus = $00000175;
  TagsEnumeration_StoredValueAccountType = $00000176;
  TagsEnumeration_StoredValueData = $00000177;
  TagsEnumeration_StoredValueProvider = $00000178;
  TagsEnumeration_StoredValueResult = $00000179;
  TagsEnumeration_StoredValueTransactionType = $0000017A;
  TagsEnumeration_StringMask = $0000017B;
  TagsEnumeration_TaxCode = $0000017C;
  TagsEnumeration_TerminalEnvironment = $0000017D;
  TagsEnumeration_TextInput = $0000017E;
  TagsEnumeration_TimeStamp = $0000017F;
  TagsEnumeration_TipAmount = $00000180;
  TagsEnumeration_TipAmountSpecified = $00000181;
  TagsEnumeration_TokenRequestedType = $00000182;
  TagsEnumeration_TokenValue = $00000183;
  TagsEnumeration_TotalAmount = $00000184;
  TagsEnumeration_TotalAmountSpecified = $00000185;
  TagsEnumeration_TotalDetails = $00000186;
  TagsEnumeration_TotalFeesAmount = $00000187;
  TagsEnumeration_TotalFeesAmountSpecified = $00000188;
  TagsEnumeration_TotalFilter = $00000189;
  TagsEnumeration_TotalNbOfPayments = $0000018A;
  TagsEnumeration_TotalRebate = $0000018B;
  TagsEnumeration_TotalRebatesAmount = $0000018C;
  TagsEnumeration_TotalRebatesAmountSpecified = $0000018D;
  TagsEnumeration_TotalRebateSpecified = $0000018E;
  TagsEnumeration_TotalsGroupID = $0000018F;
  TagsEnumeration_TrackData = $00000190;
  TagsEnumeration_TrackFormat = $00000191;
  TagsEnumeration_TrackNumb = $00000192;
  TagsEnumeration_TrainingModeFlag = $00000193;
  TagsEnumeration_TransactionAction = $00000194;
  TagsEnumeration_TransactionAmount = $00000195;
  TagsEnumeration_TransactionConditions = $00000196;
  TagsEnumeration_TransactionCount = $00000197;
  TagsEnumeration_TransactionID = $00000198;
  TagsEnumeration_TransactionToPerform = $00000199;
  TagsEnumeration_TransactionTotals = $0000019A;
  TagsEnumeration_TransactionType = $0000019B;
  TagsEnumeration_TypeCode = $0000019C;
  TagsEnumeration_UnitOfMeasure = $0000019D;
  TagsEnumeration_UnitPrice = $0000019E;
  TagsEnumeration_UnitPriceSpecified = $0000019F;
  TagsEnumeration_UnitValue = $000001A0;
  TagsEnumeration_UTMCoordinates = $000001A1;
  TagsEnumeration_UTMEastward = $000001A2;
  TagsEnumeration_UTMNorthward = $000001A3;
  TagsEnumeration_UTMZone = $000001A4;
  TagsEnumeration_ValidityDate = $000001A5;
  TagsEnumeration_Value = $000001A6;
  TagsEnumeration_Version = $000001A7;
  TagsEnumeration_WaitResponseFlag = $000001A8;
  TagsEnumeration_WaitUserValidationFlag = $000001A9;
  TagsEnumeration_WarmResetFlag = $000001AA;
  TagsEnumeration_WarmResetFlagSpecified = $000001AB;
  TagsEnumeration_X = $000001AC;
  TagsEnumeration_Y = $000001AD;

// Constantes pour enum NexoMessageStatus
type
  NexoMessageStatus = TOleEnum;
const
  NexoMessageStatus_normal = $00000000;
  NexoMessageStatus_timeout = $00000001;
  NexoMessageStatus_cancelled = $00000002;

// Constantes pour enum NexoSchemaEventType
type
  NexoSchemaEventType = TOleEnum;
const
  NexoSchemaEventType_All = $00000000;
  NexoSchemaEventType_Error = $00000001;
  NexoSchemaEventType_Warning = $00000002;

// Constantes pour enum NexoNextAction
type
  NexoNextAction = TOleEnum;
const
  NexoNextAction_nothing = $00000000;
  NexoNextAction_final = $00000001;
  NexoNextAction_noReply = $00000002;
  NexoNextAction_sendReply = $00000003;
  NexoNextAction_sendRequest = $00000004;
  NexoNextAction_sendNotification = $00000005;

// Constantes pour enum NexoValues
type
  NexoValues = TOleEnum;
const
  NexoValues_None = $7FFFFFFF;

// Constantes pour enum Labels
type
  Labels = TOleEnum;
const
  Labels_IP = $00000000;
  Labels_SaleID = $00000001;
  Labels_POIID = $00000002;
  Labels_LoginTimestamp = $00000003;
  Labels_LogoutTimestamp = $00000004;
  Labels_Logged = $00000005;
  Labels_ManufacturerID = $00000006;
  Labels_ApplicationName = $00000007;
  Labels_SoftwareVersion = $00000008;
  Labels_CertificationCode = $00000009;
  Labels_AutoLogoutTimestamp = $0000000A;

// Constantes pour enum Labels_2
type
  Labels_2 = TOleEnum;
const
  Labels_2_IP = $00000000;
  Labels_2_Accepted = $00000001;

// Constantes pour enum Labels_3
type
  Labels_3 = TOleEnum;
const
  Labels_3_IP = $00000000;
  Labels_3_SaleID = $00000001;
  Labels_3_Accepted = $00000002;
  Labels_3_CertificationCode = $00000003;

// Constantes pour enum Labels_4
type
  Labels_4 = TOleEnum;
const
  Labels_4_ID = $00000000;
  Labels_4_SaleID = $00000001;
  Labels_4_POIID = $00000002;
  Labels_4_Category = $00000003;
  Labels_4_Received = $00000004;
  Labels_4_ServiceID = $00000005;
  Labels_4_DeviceID = $00000006;
  Labels_4_Request = $00000007;
  Labels_4_RequestTimestamp = $00000008;
  Labels_4_Reply = $00000009;
  Labels_4_ReplyTimestamp = $0000000A;
  Labels_4_Result = $0000000B;
  Labels_4_ErrorCondition = $0000000C;
  Labels_4_AdditionalResponse = $0000000D;
  Labels_4_RequestedAmount = $0000000E;
  Labels_4_AuthorizedAmount = $0000000F;
  Labels_4_TransactionCurrency = $00000010;
  Labels_4_ReconciliationID = $00000011;
  Labels_4_SaleTransactionID = $00000012;
  Labels_4_SaleTransactionTimestamp = $00000013;
  Labels_4_POITransactionID = $00000014;
  Labels_4_POITransactionTimestamp = $00000015;

type

// *********************************************************************//
// Déclaration Forward des types définis dans la bibliothèque de types                     
// *********************************************************************//
  IAuthenticatedDataType = interface;
  IAuthenticatedDataTypeDisp = dispinterface;
  IKEKType = interface;
  IKEKTypeDisp = dispinterface;
  IKEKIdentifierType = interface;
  IKEKIdentifierTypeDisp = dispinterface;
  IDisplayResponseType = interface;
  IDisplayResponseTypeDisp = dispinterface;
  IOutputResultType = interface;
  IOutputResultTypeDisp = dispinterface;
  IResponseType = interface;
  IResponseTypeDisp = dispinterface;
  IDisplayRequestType = interface;
  IDisplayRequestTypeDisp = dispinterface;
  IDisplayOutputType = interface;
  IDisplayOutputTypeDisp = dispinterface;
  IOutputContentType = interface;
  IOutputContentTypeDisp = dispinterface;
  IPredefinedContentType = interface;
  IPredefinedContentTypeDisp = dispinterface;
  IOutputTextType = interface;
  IOutputTextTypeDisp = dispinterface;
  IOutputBarcodeType = interface;
  IOutputBarcodeTypeDisp = dispinterface;
  IMenuEntryType = interface;
  IMenuEntryTypeDisp = dispinterface;
  IAlgorithmIdentifier = interface;
  IAlgorithmIdentifierDisp = dispinterface;
  IParameterType = interface;
  IParameterTypeDisp = dispinterface;
  IKeyTransportType = interface;
  IKeyTransportTypeDisp = dispinterface;
  IRecipientIdentifierType = interface;
  IRecipientIdentifierTypeDisp = dispinterface;
  IIssuerAndSerialNumberType = interface;
  IIssuerAndSerialNumberTypeDisp = dispinterface;
  IRelativeDistinguishedNameType = interface;
  IRelativeDistinguishedNameTypeDisp = dispinterface;
  IEncapsulatedContentType = interface;
  IEncapsulatedContentTypeDisp = dispinterface;
  IDigestedDataType = interface;
  IDigestedDataTypeDisp = dispinterface;
  IEncryptedContentType = interface;
  IEncryptedContentTypeDisp = dispinterface;
  IEnvelopedDataType = interface;
  IEnvelopedDataTypeDisp = dispinterface;
  IIssuerType = interface;
  IIssuerTypeDisp = dispinterface;
  INamedKeyEncryptedDataType = interface;
  INamedKeyEncryptedDataTypeDisp = dispinterface;
  ISignedDataType = interface;
  ISignedDataTypeDisp = dispinterface;
  ISignerType = interface;
  ISignerTypeDisp = dispinterface;
  ISignerIdentifierType = interface;
  ISignerIdentifierTypeDisp = dispinterface;
  IContentInformationType = interface;
  IContentInformationTypeDisp = dispinterface;
  IAbortRequestType = interface;
  IAbortRequestTypeDisp = dispinterface;
  IMessageReferenceType = interface;
  IMessageReferenceTypeDisp = dispinterface;
  IAdminRequestType = interface;
  IAdminRequestTypeDisp = dispinterface;
  IAdminResponseType = interface;
  IAdminResponseTypeDisp = dispinterface;
  IAllowedProductType = interface;
  IAllowedProductTypeDisp = dispinterface;
  IAmountsReqType = interface;
  IAmountsReqTypeDisp = dispinterface;
  IAmountsRespType = interface;
  IAmountsRespTypeDisp = dispinterface;
  IAreaSizeType = interface;
  IAreaSizeTypeDisp = dispinterface;
  IBalanceInquiryRequestType = interface;
  IBalanceInquiryRequestTypeDisp = dispinterface;
  IPaymentAccountReqType = interface;
  IPaymentAccountReqTypeDisp = dispinterface;
  ITransactionIdentificationType = interface;
  ITransactionIdentificationTypeDisp = dispinterface;
  IPaymentInstrumentDataType = interface;
  IPaymentInstrumentDataTypeDisp = dispinterface;
  ICardDataType = interface;
  ICardDataTypeDisp = dispinterface;
  ISensitiveCardDataType = interface;
  ISensitiveCardDataTypeDisp = dispinterface;
  ITrackDataType = interface;
  ITrackDataTypeDisp = dispinterface;
  IPaymentTokenType = interface;
  IPaymentTokenTypeDisp = dispinterface;
  ICustomerOrderType = interface;
  ICustomerOrderTypeDisp = dispinterface;
  ICheckDataType = interface;
  ICheckDataTypeDisp = dispinterface;
  IMobileDataType = interface;
  IMobileDataTypeDisp = dispinterface;
  IGeolocationType = interface;
  IGeolocationTypeDisp = dispinterface;
  IGeographicCoordinatesType = interface;
  IGeographicCoordinatesTypeDisp = dispinterface;
  IUTMCoordinatesType = interface;
  IUTMCoordinatesTypeDisp = dispinterface;
  ISensitiveMobileDataType = interface;
  ISensitiveMobileDataTypeDisp = dispinterface;
  ILoyaltyAccountReqType = interface;
  ILoyaltyAccountReqTypeDisp = dispinterface;
  ILoyaltyAccountIDType = interface;
  ILoyaltyAccountIDTypeDisp = dispinterface;
  IBalanceInquiryResponseType = interface;
  IBalanceInquiryResponseTypeDisp = dispinterface;
  IPaymentAccountStatusType = interface;
  IPaymentAccountStatusTypeDisp = dispinterface;
  IPaymentAcquirerDataType = interface;
  IPaymentAcquirerDataTypeDisp = dispinterface;
  ILoyaltyAccountStatusType = interface;
  ILoyaltyAccountStatusTypeDisp = dispinterface;
  ILoyaltyAccountType = interface;
  ILoyaltyAccountTypeDisp = dispinterface;
  IBatchRequestType = interface;
  IBatchRequestTypeDisp = dispinterface;
  ITransactionToPerformType = interface;
  ITransactionToPerformTypeDisp = dispinterface;
  ILoyaltyRequestType = interface;
  ILoyaltyRequestTypeDisp = dispinterface;
  ISaleDataType = interface;
  ISaleDataTypeDisp = dispinterface;
  ISaleTerminalDataType = interface;
  ISaleTerminalDataTypeDisp = dispinterface;
  ISaleProfileType = interface;
  ISaleProfileTypeDisp = dispinterface;
  ISponsoredMerchantType = interface;
  ISponsoredMerchantTypeDisp = dispinterface;
  ISaleToIssuerDataType = interface;
  ISaleToIssuerDataTypeDisp = dispinterface;
  ILoyaltyTransactionType = interface;
  ILoyaltyTransactionTypeDisp = dispinterface;
  IOriginalPOITransactionType = interface;
  IOriginalPOITransactionTypeDisp = dispinterface;
  ITransactionConditionsType = interface;
  ITransactionConditionsTypeDisp = dispinterface;
  ISaleItemType = interface;
  ISaleItemTypeDisp = dispinterface;
  ILoyaltyDataType = interface;
  ILoyaltyDataTypeDisp = dispinterface;
  ILoyaltyAmountType = interface;
  ILoyaltyAmountTypeDisp = dispinterface;
  IPaymentRequestType = interface;
  IPaymentRequestTypeDisp = dispinterface;
  IPaymentTransactionType = interface;
  IPaymentTransactionTypeDisp = dispinterface;
  IPaymentDataType = interface;
  IPaymentDataTypeDisp = dispinterface;
  IInstalmentType = interface;
  IInstalmentTypeDisp = dispinterface;
  IReversalRequestType = interface;
  IReversalRequestTypeDisp = dispinterface;
  IBatchResponseType = interface;
  IBatchResponseTypeDisp = dispinterface;
  IPerformedTransactionType = interface;
  IPerformedTransactionTypeDisp = dispinterface;
  IPOIDataType = interface;
  IPOIDataTypeDisp = dispinterface;
  IPaymentResultType = interface;
  IPaymentResultTypeDisp = dispinterface;
  ICurrencyConversionType = interface;
  ICurrencyConversionTypeDisp = dispinterface;
  IAmountType = interface;
  IAmountTypeDisp = dispinterface;
  ICapturedSignatureType = interface;
  ICapturedSignatureTypeDisp = dispinterface;
  ISignaturePointType = interface;
  ISignaturePointTypeDisp = dispinterface;
  ILoyaltyResultType = interface;
  ILoyaltyResultTypeDisp = dispinterface;
  ILoyaltyAcquirerDataType = interface;
  ILoyaltyAcquirerDataTypeDisp = dispinterface;
  IRebatesType = interface;
  IRebatesTypeDisp = dispinterface;
  ISaleItemRebateType = interface;
  ISaleItemRebateTypeDisp = dispinterface;
  ICardAcquisitionRequestType = interface;
  ICardAcquisitionRequestTypeDisp = dispinterface;
  ICardAcquisitionTransactionType = interface;
  ICardAcquisitionTransactionTypeDisp = dispinterface;
  ICardAcquisitionResponseType = interface;
  ICardAcquisitionResponseTypeDisp = dispinterface;
  ICardholderPINType = interface;
  ICardholderPINTypeDisp = dispinterface;
  ICardReaderAPDURequestType = interface;
  ICardReaderAPDURequestTypeDisp = dispinterface;
  ICardReaderAPDUResponseType = interface;
  ICardReaderAPDUResponseTypeDisp = dispinterface;
  ICardReaderInitRequestType = interface;
  ICardReaderInitRequestTypeDisp = dispinterface;
  ICardReaderInitResponseType = interface;
  ICardReaderInitResponseTypeDisp = dispinterface;
  IICCResetDataType = interface;
  IICCResetDataTypeDisp = dispinterface;
  ICardReaderPowerOffRequestType = interface;
  ICardReaderPowerOffRequestTypeDisp = dispinterface;
  ICardReaderPowerOffResponseType = interface;
  ICardReaderPowerOffResponseTypeDisp = dispinterface;
  ICashHandlingDeviceType = interface;
  ICashHandlingDeviceTypeDisp = dispinterface;
  ICoinsOrBillsType = interface;
  ICoinsOrBillsTypeDisp = dispinterface;
  IDiagnosisRequestType = interface;
  IDiagnosisRequestTypeDisp = dispinterface;
  IDiagnosisResponseType = interface;
  IDiagnosisResponseTypeDisp = dispinterface;
  IPOIStatusType = interface;
  IPOIStatusTypeDisp = dispinterface;
  IHostStatusType = interface;
  IHostStatusTypeDisp = dispinterface;
  IEnableServiceRequestType = interface;
  IEnableServiceRequestTypeDisp = dispinterface;
  IEnableServiceResponseType = interface;
  IEnableServiceResponseTypeDisp = dispinterface;
  IEventNotificationType = interface;
  IEventNotificationTypeDisp = dispinterface;
  IGetTotalsRequestType = interface;
  IGetTotalsRequestTypeDisp = dispinterface;
  ITotalFilterType = interface;
  ITotalFilterTypeDisp = dispinterface;
  IGetTotalsResponseType = interface;
  IGetTotalsResponseTypeDisp = dispinterface;
  ITransactionTotalsType = interface;
  ITransactionTotalsTypeDisp = dispinterface;
  IPaymentTotalsType = interface;
  IPaymentTotalsTypeDisp = dispinterface;
  ILoyaltyTotalsType = interface;
  ILoyaltyTotalsTypeDisp = dispinterface;
  IInputType = interface;
  IInputTypeDisp = dispinterface;
  IInputDataType = interface;
  IInputDataTypeDisp = dispinterface;
  IInputRequestType = interface;
  IInputRequestTypeDisp = dispinterface;
  IInputResponseType = interface;
  IInputResponseTypeDisp = dispinterface;
  IInputResultType = interface;
  IInputResultTypeDisp = dispinterface;
  IInputUpdateType = interface;
  IInputUpdateTypeDisp = dispinterface;
  ILoginRequestType = interface;
  ILoginRequestTypeDisp = dispinterface;
  ISaleSoftwareType = interface;
  ISaleSoftwareTypeDisp = dispinterface;
  ILoginResponseType = interface;
  ILoginResponseTypeDisp = dispinterface;
  IPOISystemDataType = interface;
  IPOISystemDataTypeDisp = dispinterface;
  IPOISoftwareType = interface;
  IPOISoftwareTypeDisp = dispinterface;
  IPOITerminalDataType = interface;
  IPOITerminalDataTypeDisp = dispinterface;
  IPOIProfileType = interface;
  IPOIProfileTypeDisp = dispinterface;
  ILogoutRequestType = interface;
  ILogoutRequestTypeDisp = dispinterface;
  ILogoutResponseType = interface;
  ILogoutResponseTypeDisp = dispinterface;
  ILoyaltyResponseType = interface;
  ILoyaltyResponseTypeDisp = dispinterface;
  IPaymentReceiptType = interface;
  IPaymentReceiptTypeDisp = dispinterface;
  IMessageHeaderType = interface;
  IMessageHeaderTypeDisp = dispinterface;
  IPaymentResponseType = interface;
  IPaymentResponseTypeDisp = dispinterface;
  IPINRequestType = interface;
  IPINRequestTypeDisp = dispinterface;
  IPINResponseType = interface;
  IPINResponseTypeDisp = dispinterface;
  IPrintOutputType = interface;
  IPrintOutputTypeDisp = dispinterface;
  IPrintRequestType = interface;
  IPrintRequestTypeDisp = dispinterface;
  IPrintResponseType = interface;
  IPrintResponseTypeDisp = dispinterface;
  IReconciliationRequestType = interface;
  IReconciliationRequestTypeDisp = dispinterface;
  IReconciliationResponseType = interface;
  IReconciliationResponseTypeDisp = dispinterface;
  IRepeatedMessageResponseType = interface;
  IRepeatedMessageResponseTypeDisp = dispinterface;
  IReversalResponseType = interface;
  IReversalResponseTypeDisp = dispinterface;
  IStoredValueResponseType = interface;
  IStoredValueResponseTypeDisp = dispinterface;
  IStoredValueResultType = interface;
  IStoredValueResultTypeDisp = dispinterface;
  IStoredValueAccountStatusType = interface;
  IStoredValueAccountStatusTypeDisp = dispinterface;
  IStoredValueAccountIDType = interface;
  IStoredValueAccountIDTypeDisp = dispinterface;
  ISoundContentType = interface;
  ISoundContentTypeDisp = dispinterface;
  ISoundRequestType = interface;
  ISoundRequestTypeDisp = dispinterface;
  ISoundResponseType = interface;
  ISoundResponseTypeDisp = dispinterface;
  IStoredValueDataType = interface;
  IStoredValueDataTypeDisp = dispinterface;
  IStoredValueRequestType = interface;
  IStoredValueRequestTypeDisp = dispinterface;
  ITransmitRequestType = interface;
  ITransmitRequestTypeDisp = dispinterface;
  ITransmitResponseType = interface;
  ITransmitResponseTypeDisp = dispinterface;
  ITransactionStatusRequestType = interface;
  ITransactionStatusRequestTypeDisp = dispinterface;
  ITransactionStatusResponseType = interface;
  ITransactionStatusResponseTypeDisp = dispinterface;
  ISaleToPOIRequest = interface;
  ISaleToPOIRequestDisp = dispinterface;
  ISaleToPOIResponse = interface;
  ISaleToPOIResponseDisp = dispinterface;
  INexoActivity = interface;
  INexoActivityDisp = dispinterface;
  _NexoMessage = interface;
  _NexoMessageDisp = dispinterface;
  _NexoPartner = interface;
  _NexoPartnerDisp = dispinterface;
  _NexoEndPoint = interface;
  _NexoEndPointDisp = dispinterface;
  _NexoSession = interface;
  _NexoSessionDisp = dispinterface;
  INexoAnyMessage = interface;
  INexoAnyMessageDisp = dispinterface;
  _NexoDelegates = interface;
  _NexoDelegatesDisp = dispinterface;
  INexoItem = interface;
  INexoItemDisp = dispinterface;
  _NexoKey = interface;
  _NexoKeyDisp = dispinterface;
  INexoAdmin = interface;
  INexoAdminDisp = dispinterface;
  INexoObject = interface;
  INexoObjectDisp = dispinterface;
  INexoBalanceInquiry = interface;
  INexoBalanceInquiryDisp = dispinterface;
  INexoBatch = interface;
  INexoBatchDisp = dispinterface;
  INexoCardAcquisition = interface;
  INexoCardAcquisitionDisp = dispinterface;
  INexoCardReaderInit = interface;
  INexoCardReaderInitDisp = dispinterface;
  INexoCardReaderAPDU = interface;
  INexoCardReaderAPDUDisp = dispinterface;
  INexoCardReaderPowerOFF = interface;
  INexoCardReaderPowerOFFDisp = dispinterface;
  INexoDeviceDisplay = interface;
  INexoDeviceDisplayDisp = dispinterface;
  INexoDeviceInputUpdate = interface;
  INexoDeviceInputUpdateDisp = dispinterface;
  INexoDeviceSound = interface;
  INexoDeviceSoundDisp = dispinterface;
  INexoEnableService = interface;
  INexoEnableServiceDisp = dispinterface;
  INexoGetTotals = interface;
  INexoGetTotalsDisp = dispinterface;
  INexoLoyalty = interface;
  INexoLoyaltyDisp = dispinterface;
  INexoPayment = interface;
  INexoPaymentDisp = dispinterface;
  INexoPIN = interface;
  INexoPINDisp = dispinterface;
  INexoReconciliation = interface;
  INexoReconciliationDisp = dispinterface;
  INexoStoredValue = interface;
  INexoStoredValueDisp = dispinterface;
  INexoTransmit = interface;
  INexoTransmitDisp = dispinterface;
  INexoAbort = interface;
  INexoAbortDisp = dispinterface;
  INexoDiagnosis = interface;
  INexoDiagnosisDisp = dispinterface;
  INexoEvent = interface;
  INexoEventDisp = dispinterface;
  INexoTransactionStatus = interface;
  INexoTransactionStatusDisp = dispinterface;
  INexoResponseType = interface;
  INexoResponseTypeDisp = dispinterface;
  INexoDeviceInput = interface;
  INexoDeviceInputDisp = dispinterface;
  INexoDevicePrint = interface;
  INexoDevicePrintDisp = dispinterface;
  INexoLogin = interface;
  INexoLoginDisp = dispinterface;
  INexoLogout = interface;
  INexoLogoutDisp = dispinterface;
  INexoReversal = interface;
  INexoReversalDisp = dispinterface;
  INexoObjectToProcess = interface;
  INexoObjectToProcessDisp = dispinterface;
  INexoTextString = interface;
  INexoTextStringDisp = dispinterface;
  INexoBooleanType = interface;
  INexoBooleanTypeDisp = dispinterface;
  INexoInteger = interface;
  INexoIntegerDisp = dispinterface;
  INexoDecimal = interface;
  INexoDecimalDisp = dispinterface;
  INexoLabel = interface;
  INexoLabelDisp = dispinterface;
  INexoEnumeration = interface;
  INexoEnumerationDisp = dispinterface;
  INexoCluster = interface;
  INexoClusterDisp = dispinterface;
  INexoLengthDrivenTextString = interface;
  INexoLengthDrivenTextStringDisp = dispinterface;
  INexoDigitString = interface;
  INexoDigitStringDisp = dispinterface;
  INexoISOData = interface;
  INexoISODataDisp = dispinterface;
  INexoISODateTime = interface;
  INexoISODateTimeDisp = dispinterface;
  INexoISODate = interface;
  INexoISODateDisp = dispinterface;
  INexoNonStringType = interface;
  INexoNonStringTypeDisp = dispinterface;
  INexoCurrency = interface;
  INexoCurrencyDisp = dispinterface;
  _NexoMessageType = interface;
  _NexoMessageTypeDisp = dispinterface;
  _NexoMessageClass = interface;
  _NexoMessageClassDisp = dispinterface;
  _NexoMessageCategory = interface;
  _NexoMessageCategoryDisp = dispinterface;
  _NexoTerminalEnvironment = interface;
  _NexoTerminalEnvironmentDisp = dispinterface;
  _NexoSaleCapabilities = interface;
  _NexoSaleCapabilitiesDisp = dispinterface;
  _NexoProtocolVersion = interface;
  _NexoProtocolVersionDisp = dispinterface;
  _NexoID = interface;
  _NexoIDDisp = dispinterface;
  _NexoServiceID = interface;
  _NexoServiceIDDisp = dispinterface;
  _NexoDeviceID = interface;
  _NexoDeviceIDDisp = dispinterface;
  _NexoPOIID = interface;
  _NexoPOIIDDisp = dispinterface;
  _NexoSaleID = interface;
  _NexoSaleIDDisp = dispinterface;
  _NexoOperatorLanguage = interface;
  _NexoOperatorLanguageDisp = dispinterface;
  _NexoResult = interface;
  _NexoResultDisp = dispinterface;
  _NexoErrorCondition = interface;
  _NexoErrorConditionDisp = dispinterface;
  _NexoAdditionalResponse = interface;
  _NexoAdditionalResponseDisp = dispinterface;
  _NexoGlobalStatus = interface;
  _NexoGlobalStatusDisp = dispinterface;
  _NexoCertificationCode = interface;
  _NexoCertificationCodeDisp = dispinterface;
  _NexoSoftwareVersion = interface;
  _NexoSoftwareVersionDisp = dispinterface;
  _NexoApplicationName = interface;
  _NexoApplicationNameDisp = dispinterface;
  _NexoManufacturerID = interface;
  _NexoManufacturerIDDisp = dispinterface;
  _NexoPOISerialNumber = interface;
  _NexoPOISerialNumberDisp = dispinterface;
  _NexoOperatorID = interface;
  _NexoOperatorIDDisp = dispinterface;
  _NexoDateTime = interface;
  _NexoDateTimeDisp = dispinterface;
  _NexoInputCommand = interface;
  _NexoInputCommandDisp = dispinterface;
  _NexoEventToNotify = interface;
  _NexoEventToNotifyDisp = dispinterface;
  _NexoPaymentIntrumentType = interface;
  _NexoPaymentIntrumentTypeDisp = dispinterface;
  _NexoVersion = interface;
  _NexoVersionDisp = dispinterface;
  _NexoCurrentVersion = interface;
  _NexoCurrentVersionDisp = dispinterface;
  INexoRetailerClientHandle = interface;
  INexoRetailerClientHandleDisp = dispinterface;
  INexoRetailerClient = interface;
  INexoRetailerClientDisp = dispinterface;
  INexoRetailerClientSettings = interface;
  INexoRetailerClientSettingsDisp = dispinterface;
  INexoRetailerClientConnectionSettings = interface;
  INexoRetailerClientConnectionSettingsDisp = dispinterface;
  INexoRetailerClientActivity = interface;
  INexoRetailerClientActivityDisp = dispinterface;
  INexoRetailerServerActivity = interface;
  INexoRetailerServerActivityDisp = dispinterface;
  _NexoRetailerServerDatabaseConnection = interface;
  _NexoRetailerServerDatabaseConnectionDisp = dispinterface;
  _NexoRetailerServerDatabaseEndPoint = interface;
  _NexoRetailerServerDatabaseEndPointDisp = dispinterface;
  _NexoRetailerServerDatabaseSale = interface;
  _NexoRetailerServerDatabaseSaleDisp = dispinterface;
  _NexoRetailerServerDatabaseMessage = interface;
  _NexoRetailerServerDatabaseMessageDisp = dispinterface;
  INexoRetailerServerDatabaseSettings = interface;
  INexoRetailerServerDatabaseSettingsDisp = dispinterface;
  _NexoRetailerServerDatabase = interface;
  _NexoRetailerServerDatabaseDisp = dispinterface;
  INexoRetailerServerSettings = interface;
  INexoRetailerServerSettingsDisp = dispinterface;

// *********************************************************************//
// Déclaration de CoClasses définies dans la bibliothèque de types        
// (REMARQUE: On affecte chaque CoClasse à son Interface par défaut)      
// *********************************************************************//
  AuthenticatedDataType = IAuthenticatedDataType;
  KEKType = IKEKType;
  KEKIdentifierType = IKEKIdentifierType;
  DisplayResponseType = IDisplayResponseType;
  OutputResultType = IOutputResultType;
  ResponseType = IResponseType;
  DisplayRequestType = IDisplayRequestType;
  DisplayOutputType = IDisplayOutputType;
  OutputContentType = IOutputContentType;
  PredefinedContentType = IPredefinedContentType;
  OutputTextType = IOutputTextType;
  OutputBarcodeType = IOutputBarcodeType;
  MenuEntryType = IMenuEntryType;
  AlgorithmIdentifier = IAlgorithmIdentifier;
  ParameterType = IParameterType;
  KeyTransportType = IKeyTransportType;
  RecipientIdentifierType = IRecipientIdentifierType;
  IssuerAndSerialNumberType = IIssuerAndSerialNumberType;
  RelativeDistinguishedNameType = IRelativeDistinguishedNameType;
  EncapsulatedContentType = IEncapsulatedContentType;
  DigestedDataType = IDigestedDataType;
  EncryptedContentType = IEncryptedContentType;
  EnvelopedDataType = IEnvelopedDataType;
  IssuerType = IIssuerType;
  NamedKeyEncryptedDataType = INamedKeyEncryptedDataType;
  SignedDataType = ISignedDataType;
  SignerType = ISignerType;
  SignerIdentifierType = ISignerIdentifierType;
  ContentInformationType = IContentInformationType;
  AbortRequestType = IAbortRequestType;
  MessageReferenceType = IMessageReferenceType;
  AdminRequestType = IAdminRequestType;
  AdminResponseType = IAdminResponseType;
  AllowedProductType = IAllowedProductType;
  AmountsReqType = IAmountsReqType;
  AmountsRespType = IAmountsRespType;
  AreaSizeType = IAreaSizeType;
  BalanceInquiryRequestType = IBalanceInquiryRequestType;
  PaymentAccountReqType = IPaymentAccountReqType;
  TransactionIdentificationType = ITransactionIdentificationType;
  PaymentInstrumentDataType = IPaymentInstrumentDataType;
  CardDataType = ICardDataType;
  SensitiveCardDataType = ISensitiveCardDataType;
  TrackDataType = ITrackDataType;
  PaymentTokenType = IPaymentTokenType;
  CustomerOrderType = ICustomerOrderType;
  CheckDataType = ICheckDataType;
  MobileDataType = IMobileDataType;
  GeolocationType = IGeolocationType;
  GeographicCoordinatesType = IGeographicCoordinatesType;
  UTMCoordinatesType = IUTMCoordinatesType;
  SensitiveMobileDataType = ISensitiveMobileDataType;
  LoyaltyAccountReqType = ILoyaltyAccountReqType;
  LoyaltyAccountIDType = ILoyaltyAccountIDType;
  BalanceInquiryResponseType = IBalanceInquiryResponseType;
  PaymentAccountStatusType = IPaymentAccountStatusType;
  PaymentAcquirerDataType = IPaymentAcquirerDataType;
  LoyaltyAccountStatusType = ILoyaltyAccountStatusType;
  LoyaltyAccountType = ILoyaltyAccountType;
  BatchRequestType = IBatchRequestType;
  TransactionToPerformType = ITransactionToPerformType;
  LoyaltyRequestType = ILoyaltyRequestType;
  SaleDataType = ISaleDataType;
  SaleTerminalDataType = ISaleTerminalDataType;
  SaleProfileType = ISaleProfileType;
  SponsoredMerchantType = ISponsoredMerchantType;
  SaleToIssuerDataType = ISaleToIssuerDataType;
  LoyaltyTransactionType = ILoyaltyTransactionType;
  OriginalPOITransactionType = IOriginalPOITransactionType;
  TransactionConditionsType = ITransactionConditionsType;
  SaleItemType = ISaleItemType;
  LoyaltyDataType = ILoyaltyDataType;
  LoyaltyAmountType = ILoyaltyAmountType;
  PaymentRequestType = IPaymentRequestType;
  PaymentTransactionType = IPaymentTransactionType;
  PaymentDataType = IPaymentDataType;
  InstalmentType = IInstalmentType;
  ReversalRequestType = IReversalRequestType;
  BatchResponseType = IBatchResponseType;
  PerformedTransactionType = IPerformedTransactionType;
  POIDataType = IPOIDataType;
  PaymentResultType = IPaymentResultType;
  CurrencyConversionType = ICurrencyConversionType;
  AmountType = IAmountType;
  CapturedSignatureType = ICapturedSignatureType;
  SignaturePointType = ISignaturePointType;
  LoyaltyResultType = ILoyaltyResultType;
  LoyaltyAcquirerDataType = ILoyaltyAcquirerDataType;
  RebatesType = IRebatesType;
  SaleItemRebateType = ISaleItemRebateType;
  CardAcquisitionRequestType = ICardAcquisitionRequestType;
  CardAcquisitionTransactionType = ICardAcquisitionTransactionType;
  CardAcquisitionResponseType = ICardAcquisitionResponseType;
  CardholderPINType = ICardholderPINType;
  CardReaderAPDURequestType = ICardReaderAPDURequestType;
  CardReaderAPDUResponseType = ICardReaderAPDUResponseType;
  CardReaderInitRequestType = ICardReaderInitRequestType;
  CardReaderInitResponseType = ICardReaderInitResponseType;
  ICCResetDataType = IICCResetDataType;
  CardReaderPowerOffRequestType = ICardReaderPowerOffRequestType;
  CardReaderPowerOffResponseType = ICardReaderPowerOffResponseType;
  CashHandlingDeviceType = ICashHandlingDeviceType;
  CoinsOrBillsType = ICoinsOrBillsType;
  DiagnosisRequestType = IDiagnosisRequestType;
  DiagnosisResponseType = IDiagnosisResponseType;
  POIStatusType = IPOIStatusType;
  HostStatusType = IHostStatusType;
  EnableServiceRequestType = IEnableServiceRequestType;
  EnableServiceResponseType = IEnableServiceResponseType;
  EventNotificationType = IEventNotificationType;
  GetTotalsRequestType = IGetTotalsRequestType;
  TotalFilterType = ITotalFilterType;
  GetTotalsResponseType = IGetTotalsResponseType;
  TransactionTotalsType = ITransactionTotalsType;
  PaymentTotalsType = IPaymentTotalsType;
  LoyaltyTotalsType = ILoyaltyTotalsType;
  InputType = IInputType;
  InputDataType = IInputDataType;
  InputRequestType = IInputRequestType;
  InputResponseType = IInputResponseType;
  InputResultType = IInputResultType;
  InputUpdateType = IInputUpdateType;
  LoginRequestType = ILoginRequestType;
  SaleSoftwareType = ISaleSoftwareType;
  LoginResponseType = ILoginResponseType;
  POISystemDataType = IPOISystemDataType;
  POISoftwareType = IPOISoftwareType;
  POITerminalDataType = IPOITerminalDataType;
  POIProfileType = IPOIProfileType;
  LogoutRequestType = ILogoutRequestType;
  LogoutResponseType = ILogoutResponseType;
  LoyaltyResponseType = ILoyaltyResponseType;
  PaymentReceiptType = IPaymentReceiptType;
  MessageHeaderType = IMessageHeaderType;
  PaymentResponseType = IPaymentResponseType;
  PINRequestType = IPINRequestType;
  PINResponseType = IPINResponseType;
  PrintOutputType = IPrintOutputType;
  PrintRequestType = IPrintRequestType;
  PrintResponseType = IPrintResponseType;
  ReconciliationRequestType = IReconciliationRequestType;
  ReconciliationResponseType = IReconciliationResponseType;
  RepeatedMessageResponseType = IRepeatedMessageResponseType;
  ReversalResponseType = IReversalResponseType;
  StoredValueResponseType = IStoredValueResponseType;
  StoredValueResultType = IStoredValueResultType;
  StoredValueAccountStatusType = IStoredValueAccountStatusType;
  StoredValueAccountIDType = IStoredValueAccountIDType;
  SoundContentType = ISoundContentType;
  SoundRequestType = ISoundRequestType;
  SoundResponseType = ISoundResponseType;
  StoredValueDataType = IStoredValueDataType;
  StoredValueRequestType = IStoredValueRequestType;
  TransmitRequestType = ITransmitRequestType;
  TransmitResponseType = ITransmitResponseType;
  TransactionStatusRequestType = ITransactionStatusRequestType;
  TransactionStatusResponseType = ITransactionStatusResponseType;
  SaleToPOIRequest = ISaleToPOIRequest;
  SaleToPOIResponse = ISaleToPOIResponse;
  NexoActivity = INexoActivity;
  NexoDictionaryOfMessages = IEnumerable;
  NexoListOfEndPoints = IEnumerable;
  NexoDictionaryOfEndPoints = IEnumerable;
  NexoListOfSessions = IEnumerable;
  NexoDictionaryOfSessions = IEnumerable;
  NexoListOfNexoKeys = IEnumerable;
  NexoDictionaryOfNexoKeys = IEnumerable;
  NexoListOfAnyMessages = IEnumerable;
  NexoDictionaryOfAnyMessages = IEnumerable;
  NexoAcceptedCommands = IEnumerable;
  NexoItem = INexoItem;
  NexoBalanceInquiry = INexoBalanceInquiry;
  NexoBatch = INexoBatch;
  NexoCardAcquisition = INexoCardAcquisition;
  NexoCardReaderInit = INexoCardReaderInit;
  NexoCardReaderAPDU = INexoCardReaderAPDU;
  NexoCardReaderPowerOFF = INexoCardReaderPowerOFF;
  NexoDeviceDisplay = INexoDeviceDisplay;
  NexoDeviceInputUpdate = INexoDeviceInputUpdate;
  NexoDeviceSound = INexoDeviceSound;
  NexoEnableService = INexoEnableService;
  NexoGetTotals = INexoGetTotals;
  NexoLoyalty = INexoLoyalty;
  NexoPayment = INexoPayment;
  NexoPIN = INexoPIN;
  NexoReconciliation = INexoReconciliation;
  NexoStoredValue = INexoStoredValue;
  NexoTransmit = INexoTransmit;
  NexoAbort = INexoAbort;
  NexoDiagnosis = INexoDiagnosis;
  NexoEvent = INexoEvent;
  NexoTransactionStatus = INexoTransactionStatus;
  NexoResponseType = INexoResponseType;
  NexoDeviceInput = INexoDeviceInput;
  NexoDevicePrint = INexoDevicePrint;
  NexoLogin = INexoLogin;
  NexoLogout = INexoLogout;
  NexoAdmin = INexoAdmin;
  NexoObject = INexoObject;
  NexoReversal = INexoReversal;
  NexoObjectToProcess = INexoObjectToProcess;
  NexoTextString = INexoTextString;
  NexoBoolean = INexoBooleanType;
  NexoInteger = INexoInteger;
  NexoDecimal = INexoDecimal;
  NexoSimpleAmount = INexoDecimal;
  NexoLabel = INexoLabel;
  NexoEnumeration = INexoEnumeration;
  NexoCluster = INexoCluster;
  NexoLengthDrivenTextString = INexoLengthDrivenTextString;
  NexoDigitString = INexoDigitString;
  NexoISOCurrency3A = INexoISOData;
  NexoISOCountry3A = INexoISOData;
  NexoISOLanguage2A = INexoISOData;
  NexoISODateTime = INexoISODateTime;
  NexoISODate = INexoISODate;
  NexoByteSequence = INexoNonStringType;
  NexoCurrency = INexoCurrency;
  NexoCurrencyEUR = INexoCurrency;
  NexoCurrencyUSD = INexoCurrency;
  NexoCurrencyGBP = INexoCurrency;
  NexoCurrencyCHF = INexoCurrency;
  NexoSupportedProtocolVersions = IEnumerable;
  NexoRetailerClientHandle = INexoRetailerClientHandle;
  NexoRetailerClient = INexoRetailerClient;
  NexoRetailerClientSettings = INexoRetailerClientSettings;
  NexoRetailerClientConnectionSettings = INexoRetailerClientConnectionSettings;
  NexoRetailerClientActivity = INexoRetailerClientActivity;
  NexoRetailerServerActivity = INexoRetailerServerActivity;
  NexoRetailerServerDatabaseSettings = INexoRetailerServerDatabaseSettings;
  NexoRetailerServerSettings = INexoRetailerServerSettings;
  NexoMessage = _NexoMessage;
  NexoPartner = _NexoPartner;
  NexoEndPoint = _NexoEndPoint;
  NexoSession = _NexoSession;
  NexoDelegates = _NexoDelegates;
  NexoKey = _NexoKey;
  NexoMessageType = _NexoMessageType;
  NexoMessageClass = _NexoMessageClass;
  NexoMessageCategory = _NexoMessageCategory;
  NexoTerminalEnvironment = _NexoTerminalEnvironment;
  NexoSaleCapabilities = _NexoSaleCapabilities;
  NexoProtocolVersion = _NexoProtocolVersion;
  NexoID = _NexoID;
  NexoServiceID = _NexoServiceID;
  NexoDeviceID = _NexoDeviceID;
  NexoPOIID = _NexoPOIID;
  NexoSaleID = _NexoSaleID;
  NexoOperatorLanguage = _NexoOperatorLanguage;
  NexoResult = _NexoResult;
  NexoErrorCondition = _NexoErrorCondition;
  NexoAdditionalResponse = _NexoAdditionalResponse;
  NexoGlobalStatus = _NexoGlobalStatus;
  NexoCertificationCode = _NexoCertificationCode;
  NexoSoftwareVersion = _NexoSoftwareVersion;
  NexoApplicationName = _NexoApplicationName;
  NexoManufacturerID = _NexoManufacturerID;
  NexoPOISerialNumber = _NexoPOISerialNumber;
  NexoOperatorID = _NexoOperatorID;
  NexoDateTime = _NexoDateTime;
  NexoInputCommand = _NexoInputCommand;
  NexoEventToNotify = _NexoEventToNotify;
  NexoPaymentIntrumentType = _NexoPaymentIntrumentType;
  NexoVersion = _NexoVersion;
  NexoCurrentVersion = _NexoCurrentVersion;
  NexoRetailerServerDatabaseConnection = _NexoRetailerServerDatabaseConnection;
  NexoRetailerServerDatabaseEndPoint = _NexoRetailerServerDatabaseEndPoint;
  NexoRetailerServerDatabaseSale = _NexoRetailerServerDatabaseSale;
  NexoRetailerServerDatabaseMessage = _NexoRetailerServerDatabaseMessage;
  NexoRetailerServerDatabase = _NexoRetailerServerDatabase;


// *********************************************************************//
// Interface :   IAuthenticatedDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0103BFDC-32BC-4284-B2DB-9C428B641C21}
// *********************************************************************//
  IAuthenticatedDataType = interface(IDispatch)
    ['{0103BFDC-32BC-4284-B2DB-9C428B641C21}']
    function Get_Items: PSafeArray; safecall;
    procedure Set_Items(pRetVal: PSafeArray); safecall;
    function Get_MACAlgorithm: IAlgorithmIdentifier; safecall;
    procedure _Set_MACAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
    function Get_EncapsulatedContent: IEncapsulatedContentType; safecall;
    procedure _Set_EncapsulatedContent(const pRetVal: IEncapsulatedContentType); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_MAC: PSafeArray; safecall;
    procedure Set_MAC(pRetVal: PSafeArray); safecall;
    function Get_ItemsSpecified: WordBool; safecall;
    procedure Set_ItemsSpecified(pRetVal: WordBool); safecall;
    function Get_MACAlgorithmSpecified: WordBool; safecall;
    procedure Set_MACAlgorithmSpecified(pRetVal: WordBool); safecall;
    function Get_EncapsulatedContentSpecified: WordBool; safecall;
    procedure Set_EncapsulatedContentSpecified(pRetVal: WordBool); safecall;
    function Get_VersionDefaultValue: WideString; safecall;
    function Get_VersionSpecified: WordBool; safecall;
    procedure Set_VersionSpecified(pRetVal: WordBool); safecall;
    function Get_MACSpecified: WordBool; safecall;
    procedure Set_MACSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_AuthenticatedDataTypeClassName: WideString; safecall;
    function ItemsLength: Integer; safecall;
    function ItemsGetItem(index: Integer): OleVariant; safecall;
    function ItemsSetItem(index: Integer; value: OleVariant): WordBool; safecall;
    function ItemsAddItem(value: OleVariant): WordBool; safecall;
    function ItemsRemoveItem(index: Integer): WordBool; safecall;
    function ItemsInsertItem(index: Integer; value: OleVariant): Integer; safecall;
    function MACLength: Integer; safecall;
    function MACGetItem(index: Integer): Byte; safecall;
    function MACSetItem(index: Integer; value: Byte): WordBool; safecall;
    function MACAddItem(value: Byte): WordBool; safecall;
    function MACRemoveItem(index: Integer): WordBool; safecall;
    function MACInsertItem(index: Integer; value: Byte): Integer; safecall;
    property Items: PSafeArray read Get_Items write Set_Items;
    property MACAlgorithm: IAlgorithmIdentifier read Get_MACAlgorithm write _Set_MACAlgorithm;
    property EncapsulatedContent: IEncapsulatedContentType read Get_EncapsulatedContent write _Set_EncapsulatedContent;
    property Version: WideString read Get_Version write Set_Version;
    property MAC: PSafeArray read Get_MAC write Set_MAC;
    property ItemsSpecified: WordBool read Get_ItemsSpecified write Set_ItemsSpecified;
    property MACAlgorithmSpecified: WordBool read Get_MACAlgorithmSpecified write Set_MACAlgorithmSpecified;
    property EncapsulatedContentSpecified: WordBool read Get_EncapsulatedContentSpecified write Set_EncapsulatedContentSpecified;
    property VersionDefaultValue: WideString read Get_VersionDefaultValue;
    property VersionSpecified: WordBool read Get_VersionSpecified write Set_VersionSpecified;
    property MACSpecified: WordBool read Get_MACSpecified write Set_MACSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property AuthenticatedDataTypeClassName: WideString read Get_AuthenticatedDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IAuthenticatedDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0103BFDC-32BC-4284-B2DB-9C428B641C21}
// *********************************************************************//
  IAuthenticatedDataTypeDisp = dispinterface
    ['{0103BFDC-32BC-4284-B2DB-9C428B641C21}']
    property Items: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property MACAlgorithm: IAlgorithmIdentifier dispid 3;
    property EncapsulatedContent: IEncapsulatedContentType dispid 4;
    property Version: WideString dispid 5;
    property MAC: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 6;
    property ItemsSpecified: WordBool dispid 7;
    property MACAlgorithmSpecified: WordBool dispid 14;
    property EncapsulatedContentSpecified: WordBool dispid 15;
    property VersionDefaultValue: WideString readonly dispid 16;
    property VersionSpecified: WordBool dispid 17;
    property MACSpecified: WordBool dispid 18;
    property ObjectHasBeenSet: WordBool readonly dispid 25;
    property AuthenticatedDataTypeClassName: WideString readonly dispid 26;
    function ItemsLength: Integer; dispid 8;
    function ItemsGetItem(index: Integer): OleVariant; dispid 9;
    function ItemsSetItem(index: Integer; value: OleVariant): WordBool; dispid 10;
    function ItemsAddItem(value: OleVariant): WordBool; dispid 11;
    function ItemsRemoveItem(index: Integer): WordBool; dispid 12;
    function ItemsInsertItem(index: Integer; value: OleVariant): Integer; dispid 13;
    function MACLength: Integer; dispid 19;
    function MACGetItem(index: Integer): Byte; dispid 20;
    function MACSetItem(index: Integer; value: Byte): WordBool; dispid 21;
    function MACAddItem(value: Byte): WordBool; dispid 22;
    function MACRemoveItem(index: Integer): WordBool; dispid 23;
    function MACInsertItem(index: Integer; value: Byte): Integer; dispid 24;
  end;

// *********************************************************************//
// Interface :   IKEKType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0F9468C5-8521-4795-B176-39E4CB0AA2A5}
// *********************************************************************//
  IKEKType = interface(IDispatch)
    ['{0F9468C5-8521-4795-B176-39E4CB0AA2A5}']
    function Get_KEKIdentifier: IKEKIdentifierType; safecall;
    procedure _Set_KEKIdentifier(const pRetVal: IKEKIdentifierType); safecall;
    function Get_KeyEncryptionAlgorithm: IAlgorithmIdentifier; safecall;
    procedure _Set_KeyEncryptionAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_EncryptedKey: PSafeArray; safecall;
    procedure Set_EncryptedKey(pRetVal: PSafeArray); safecall;
    function Get_KEKIdentifierSpecified: WordBool; safecall;
    procedure Set_KEKIdentifierSpecified(pRetVal: WordBool); safecall;
    function Get_KeyEncryptionAlgorithmSpecified: WordBool; safecall;
    procedure Set_KeyEncryptionAlgorithmSpecified(pRetVal: WordBool); safecall;
    function Get_VersionDefaultValue: WideString; safecall;
    function Get_VersionSpecified: WordBool; safecall;
    procedure Set_VersionSpecified(pRetVal: WordBool); safecall;
    function Get_EncryptedKeySpecified: WordBool; safecall;
    procedure Set_EncryptedKeySpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_KEKTypeClassName: WideString; safecall;
    function EncryptedKeyLength: Integer; safecall;
    function EncryptedKeyGetItem(index: Integer): Byte; safecall;
    function EncryptedKeySetItem(index: Integer; value: Byte): WordBool; safecall;
    function EncryptedKeyAddItem(value: Byte): WordBool; safecall;
    function EncryptedKeyRemoveItem(index: Integer): WordBool; safecall;
    function EncryptedKeyInsertItem(index: Integer; value: Byte): Integer; safecall;
    property KEKIdentifier: IKEKIdentifierType read Get_KEKIdentifier write _Set_KEKIdentifier;
    property KeyEncryptionAlgorithm: IAlgorithmIdentifier read Get_KeyEncryptionAlgorithm write _Set_KeyEncryptionAlgorithm;
    property Version: WideString read Get_Version write Set_Version;
    property EncryptedKey: PSafeArray read Get_EncryptedKey write Set_EncryptedKey;
    property KEKIdentifierSpecified: WordBool read Get_KEKIdentifierSpecified write Set_KEKIdentifierSpecified;
    property KeyEncryptionAlgorithmSpecified: WordBool read Get_KeyEncryptionAlgorithmSpecified write Set_KeyEncryptionAlgorithmSpecified;
    property VersionDefaultValue: WideString read Get_VersionDefaultValue;
    property VersionSpecified: WordBool read Get_VersionSpecified write Set_VersionSpecified;
    property EncryptedKeySpecified: WordBool read Get_EncryptedKeySpecified write Set_EncryptedKeySpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property KEKTypeClassName: WideString read Get_KEKTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IKEKTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0F9468C5-8521-4795-B176-39E4CB0AA2A5}
// *********************************************************************//
  IKEKTypeDisp = dispinterface
    ['{0F9468C5-8521-4795-B176-39E4CB0AA2A5}']
    property KEKIdentifier: IKEKIdentifierType dispid 2;
    property KeyEncryptionAlgorithm: IAlgorithmIdentifier dispid 3;
    property Version: WideString dispid 4;
    property EncryptedKey: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property KEKIdentifierSpecified: WordBool dispid 6;
    property KeyEncryptionAlgorithmSpecified: WordBool dispid 7;
    property VersionDefaultValue: WideString readonly dispid 8;
    property VersionSpecified: WordBool dispid 9;
    property EncryptedKeySpecified: WordBool dispid 10;
    property ObjectHasBeenSet: WordBool readonly dispid 17;
    property KEKTypeClassName: WideString readonly dispid 18;
    function EncryptedKeyLength: Integer; dispid 11;
    function EncryptedKeyGetItem(index: Integer): Byte; dispid 12;
    function EncryptedKeySetItem(index: Integer; value: Byte): WordBool; dispid 13;
    function EncryptedKeyAddItem(value: Byte): WordBool; dispid 14;
    function EncryptedKeyRemoveItem(index: Integer): WordBool; dispid 15;
    function EncryptedKeyInsertItem(index: Integer; value: Byte): Integer; dispid 16;
  end;

// *********************************************************************//
// Interface :   IKEKIdentifierType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E393981D-4A03-4470-A652-42796C5A88EC}
// *********************************************************************//
  IKEKIdentifierType = interface(IDispatch)
    ['{E393981D-4A03-4470-A652-42796C5A88EC}']
    function Get_KeyIdentifier: WideString; safecall;
    procedure Set_KeyIdentifier(const pRetVal: WideString); safecall;
    function Get_KeyVersion: WideString; safecall;
    procedure Set_KeyVersion(const pRetVal: WideString); safecall;
    function Get_DerivationIdentifier: PSafeArray; safecall;
    procedure Set_DerivationIdentifier(pRetVal: PSafeArray); safecall;
    function Get_KeyIdentifierSpecified: WordBool; safecall;
    procedure Set_KeyIdentifierSpecified(pRetVal: WordBool); safecall;
    function Get_KeyVersionSpecified: WordBool; safecall;
    procedure Set_KeyVersionSpecified(pRetVal: WordBool); safecall;
    function Get_DerivationIdentifierSpecified: WordBool; safecall;
    procedure Set_DerivationIdentifierSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_KEKIdentifierTypeClassName: WideString; safecall;
    function DerivationIdentifierLength: Integer; safecall;
    function DerivationIdentifierGetItem(index: Integer): Byte; safecall;
    function DerivationIdentifierSetItem(index: Integer; value: Byte): WordBool; safecall;
    function DerivationIdentifierAddItem(value: Byte): WordBool; safecall;
    function DerivationIdentifierRemoveItem(index: Integer): WordBool; safecall;
    function DerivationIdentifierInsertItem(index: Integer; value: Byte): Integer; safecall;
    property KeyIdentifier: WideString read Get_KeyIdentifier write Set_KeyIdentifier;
    property KeyVersion: WideString read Get_KeyVersion write Set_KeyVersion;
    property DerivationIdentifier: PSafeArray read Get_DerivationIdentifier write Set_DerivationIdentifier;
    property KeyIdentifierSpecified: WordBool read Get_KeyIdentifierSpecified write Set_KeyIdentifierSpecified;
    property KeyVersionSpecified: WordBool read Get_KeyVersionSpecified write Set_KeyVersionSpecified;
    property DerivationIdentifierSpecified: WordBool read Get_DerivationIdentifierSpecified write Set_DerivationIdentifierSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property KEKIdentifierTypeClassName: WideString read Get_KEKIdentifierTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IKEKIdentifierTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E393981D-4A03-4470-A652-42796C5A88EC}
// *********************************************************************//
  IKEKIdentifierTypeDisp = dispinterface
    ['{E393981D-4A03-4470-A652-42796C5A88EC}']
    property KeyIdentifier: WideString dispid 1;
    property KeyVersion: WideString dispid 2;
    property DerivationIdentifier: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property KeyIdentifierSpecified: WordBool dispid 5;
    property KeyVersionSpecified: WordBool dispid 6;
    property DerivationIdentifierSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 14;
    property KEKIdentifierTypeClassName: WideString readonly dispid 15;
    function DerivationIdentifierLength: Integer; dispid 8;
    function DerivationIdentifierGetItem(index: Integer): Byte; dispid 9;
    function DerivationIdentifierSetItem(index: Integer; value: Byte): WordBool; dispid 10;
    function DerivationIdentifierAddItem(value: Byte): WordBool; dispid 11;
    function DerivationIdentifierRemoveItem(index: Integer): WordBool; dispid 12;
    function DerivationIdentifierInsertItem(index: Integer; value: Byte): Integer; dispid 13;
  end;

// *********************************************************************//
// Interface :   IDisplayResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2964AA38-522A-434B-855E-A7ADAF012210}
// *********************************************************************//
  IDisplayResponseType = interface(IDispatch)
    ['{2964AA38-522A-434B-855E-A7ADAF012210}']
    function Get_OutputResult: PSafeArray; safecall;
    procedure Set_OutputResult(pRetVal: PSafeArray); safecall;
    function Get_OutputResultSpecified: WordBool; safecall;
    procedure Set_OutputResultSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_DisplayResponseTypeClassName: WideString; safecall;
    function OutputResultLength: Integer; safecall;
    function OutputResultGetItem(index: Integer): IOutputResultType; safecall;
    function OutputResultSetItem(index: Integer; const value: IOutputResultType): WordBool; safecall;
    function OutputResultAddItem(const value: IOutputResultType): WordBool; safecall;
    function OutputResultRemoveItem(index: Integer): WordBool; safecall;
    function OutputResultInsertItem(index: Integer; const value: IOutputResultType): Integer; safecall;
    property OutputResult: PSafeArray read Get_OutputResult write Set_OutputResult;
    property OutputResultSpecified: WordBool read Get_OutputResultSpecified write Set_OutputResultSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property DisplayResponseTypeClassName: WideString read Get_DisplayResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IDisplayResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2964AA38-522A-434B-855E-A7ADAF012210}
// *********************************************************************//
  IDisplayResponseTypeDisp = dispinterface
    ['{2964AA38-522A-434B-855E-A7ADAF012210}']
    property OutputResult: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property OutputResultSpecified: WordBool dispid 3;
    property ObjectHasBeenSet: WordBool readonly dispid 10;
    property DisplayResponseTypeClassName: WideString readonly dispid 11;
    function OutputResultLength: Integer; dispid 4;
    function OutputResultGetItem(index: Integer): IOutputResultType; dispid 5;
    function OutputResultSetItem(index: Integer; const value: IOutputResultType): WordBool; dispid 6;
    function OutputResultAddItem(const value: IOutputResultType): WordBool; dispid 7;
    function OutputResultRemoveItem(index: Integer): WordBool; dispid 8;
    function OutputResultInsertItem(index: Integer; const value: IOutputResultType): Integer; dispid 9;
  end;

// *********************************************************************//
// Interface :   IOutputResultType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7CBD2144-EFAD-4664-B867-F8A8A378887D}
// *********************************************************************//
  IOutputResultType = interface(IDispatch)
    ['{7CBD2144-EFAD-4664-B867-F8A8A378887D}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_Device: WideString; safecall;
    procedure Set_Device(const pRetVal: WideString); safecall;
    function Get_InfoQualify: WideString; safecall;
    procedure Set_InfoQualify(const pRetVal: WideString); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_DeviceSpecified: WordBool; safecall;
    procedure Set_DeviceSpecified(pRetVal: WordBool); safecall;
    function Get_InfoQualifySpecified: WordBool; safecall;
    procedure Set_InfoQualifySpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_OutputResultTypeClassName: WideString; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property Device: WideString read Get_Device write Set_Device;
    property InfoQualify: WideString read Get_InfoQualify write Set_InfoQualify;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property DeviceSpecified: WordBool read Get_DeviceSpecified write Set_DeviceSpecified;
    property InfoQualifySpecified: WordBool read Get_InfoQualifySpecified write Set_InfoQualifySpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property OutputResultTypeClassName: WideString read Get_OutputResultTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IOutputResultTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7CBD2144-EFAD-4664-B867-F8A8A378887D}
// *********************************************************************//
  IOutputResultTypeDisp = dispinterface
    ['{7CBD2144-EFAD-4664-B867-F8A8A378887D}']
    property Response: IResponseType dispid 1;
    property Device: WideString dispid 2;
    property InfoQualify: WideString dispid 3;
    property ResponseSpecified: WordBool dispid 5;
    property DeviceSpecified: WordBool dispid 6;
    property InfoQualifySpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 8;
    property OutputResultTypeClassName: WideString readonly dispid 9;
  end;

// *********************************************************************//
// Interface :   IResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D7FA969F-A143-4CD9-95DF-364314075DBB}
// *********************************************************************//
  IResponseType = interface(IDispatch)
    ['{D7FA969F-A143-4CD9-95DF-364314075DBB}']
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_Result: WideString; safecall;
    procedure Set_Result(const pRetVal: WideString); safecall;
    function Get_ErrorCondition: WideString; safecall;
    procedure Set_ErrorCondition(const pRetVal: WideString); safecall;
    function Get_AdditionalResponseSpecified: WordBool; safecall;
    procedure Set_AdditionalResponseSpecified(pRetVal: WordBool); safecall;
    function Get_ResultSpecified: WordBool; safecall;
    procedure Set_ResultSpecified(pRetVal: WordBool); safecall;
    function Get_ErrorConditionSpecified: WordBool; safecall;
    procedure Set_ErrorConditionSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_ResponseTypeClassName: WideString; safecall;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property Result: WideString read Get_Result write Set_Result;
    property ErrorCondition: WideString read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponseSpecified: WordBool read Get_AdditionalResponseSpecified write Set_AdditionalResponseSpecified;
    property ResultSpecified: WordBool read Get_ResultSpecified write Set_ResultSpecified;
    property ErrorConditionSpecified: WordBool read Get_ErrorConditionSpecified write Set_ErrorConditionSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property ResponseTypeClassName: WideString read Get_ResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D7FA969F-A143-4CD9-95DF-364314075DBB}
// *********************************************************************//
  IResponseTypeDisp = dispinterface
    ['{D7FA969F-A143-4CD9-95DF-364314075DBB}']
    property AdditionalResponse: WideString dispid 1;
    property Result: WideString dispid 2;
    property ErrorCondition: WideString dispid 3;
    property AdditionalResponseSpecified: WordBool dispid 5;
    property ResultSpecified: WordBool dispid 6;
    property ErrorConditionSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 8;
    property ResponseTypeClassName: WideString readonly dispid 9;
  end;

// *********************************************************************//
// Interface :   IDisplayRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CC90DF52-6903-474B-8D91-68F601FC87E6}
// *********************************************************************//
  IDisplayRequestType = interface(IDispatch)
    ['{CC90DF52-6903-474B-8D91-68F601FC87E6}']
    function Get_DisplayOutput: PSafeArray; safecall;
    procedure Set_DisplayOutput(pRetVal: PSafeArray); safecall;
    function Get_DisplayOutputSpecified: WordBool; safecall;
    procedure Set_DisplayOutputSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_DisplayRequestTypeClassName: WideString; safecall;
    function DisplayOutputLength: Integer; safecall;
    function DisplayOutputGetItem(index: Integer): IDisplayOutputType; safecall;
    function DisplayOutputSetItem(index: Integer; const value: IDisplayOutputType): WordBool; safecall;
    function DisplayOutputAddItem(const value: IDisplayOutputType): WordBool; safecall;
    function DisplayOutputRemoveItem(index: Integer): WordBool; safecall;
    function DisplayOutputInsertItem(index: Integer; const value: IDisplayOutputType): Integer; safecall;
    property DisplayOutput: PSafeArray read Get_DisplayOutput write Set_DisplayOutput;
    property DisplayOutputSpecified: WordBool read Get_DisplayOutputSpecified write Set_DisplayOutputSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property DisplayRequestTypeClassName: WideString read Get_DisplayRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IDisplayRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CC90DF52-6903-474B-8D91-68F601FC87E6}
// *********************************************************************//
  IDisplayRequestTypeDisp = dispinterface
    ['{CC90DF52-6903-474B-8D91-68F601FC87E6}']
    property DisplayOutput: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property DisplayOutputSpecified: WordBool dispid 3;
    property ObjectHasBeenSet: WordBool readonly dispid 10;
    property DisplayRequestTypeClassName: WideString readonly dispid 11;
    function DisplayOutputLength: Integer; dispid 4;
    function DisplayOutputGetItem(index: Integer): IDisplayOutputType; dispid 5;
    function DisplayOutputSetItem(index: Integer; const value: IDisplayOutputType): WordBool; dispid 6;
    function DisplayOutputAddItem(const value: IDisplayOutputType): WordBool; dispid 7;
    function DisplayOutputRemoveItem(index: Integer): WordBool; dispid 8;
    function DisplayOutputInsertItem(index: Integer; const value: IDisplayOutputType): Integer; dispid 9;
  end;

// *********************************************************************//
// Interface :   IDisplayOutputType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A9BD68A5-43C2-40D5-A66B-49989B155C71}
// *********************************************************************//
  IDisplayOutputType = interface(IDispatch)
    ['{A9BD68A5-43C2-40D5-A66B-49989B155C71}']
    function Get_OutputContent: IOutputContentType; safecall;
    procedure _Set_OutputContent(const pRetVal: IOutputContentType); safecall;
    function Get_MenuEntry: PSafeArray; safecall;
    procedure Set_MenuEntry(pRetVal: PSafeArray); safecall;
    function Get_OutputSignature: PSafeArray; safecall;
    procedure Set_OutputSignature(pRetVal: PSafeArray); safecall;
    function Get_ResponseRequiredFlag: WordBool; safecall;
    procedure Set_ResponseRequiredFlag(pRetVal: WordBool); safecall;
    function Get_MinimumDisplayTime: Integer; safecall;
    procedure Set_MinimumDisplayTime(pRetVal: Integer); safecall;
    function Get_Device: WideString; safecall;
    procedure Set_Device(const pRetVal: WideString); safecall;
    function Get_InfoQualify: WideString; safecall;
    procedure Set_InfoQualify(const pRetVal: WideString); safecall;
    function Get_OutputContentSpecified: WordBool; safecall;
    procedure Set_OutputContentSpecified(pRetVal: WordBool); safecall;
    function Get_MenuEntrySpecified: WordBool; safecall;
    procedure Set_MenuEntrySpecified(pRetVal: WordBool); safecall;
    function Get_OutputSignatureSpecified: WordBool; safecall;
    procedure Set_OutputSignatureSpecified(pRetVal: WordBool); safecall;
    function Get_ResponseRequiredFlagDefaultValue: WordBool; safecall;
    function Get_ResponseRequiredFlagSpecified: WordBool; safecall;
    procedure Set_ResponseRequiredFlagSpecified(pRetVal: WordBool); safecall;
    function Get_MinimumDisplayTimeDefaultValue: Integer; safecall;
    function Get_MinimumDisplayTimeSpecified: WordBool; safecall;
    procedure Set_MinimumDisplayTimeSpecified(pRetVal: WordBool); safecall;
    function Get_DeviceSpecified: WordBool; safecall;
    procedure Set_DeviceSpecified(pRetVal: WordBool); safecall;
    function Get_InfoQualifySpecified: WordBool; safecall;
    procedure Set_InfoQualifySpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_DisplayOutputTypeClassName: WideString; safecall;
    function MenuEntryLength: Integer; safecall;
    function MenuEntryGetItem(index: Integer): IMenuEntryType; safecall;
    function MenuEntrySetItem(index: Integer; const value: IMenuEntryType): WordBool; safecall;
    function MenuEntryAddItem(const value: IMenuEntryType): WordBool; safecall;
    function MenuEntryRemoveItem(index: Integer): WordBool; safecall;
    function MenuEntryInsertItem(index: Integer; const value: IMenuEntryType): Integer; safecall;
    function OutputSignatureLength: Integer; safecall;
    function OutputSignatureGetItem(index: Integer): Byte; safecall;
    function OutputSignatureSetItem(index: Integer; value: Byte): WordBool; safecall;
    function OutputSignatureAddItem(value: Byte): WordBool; safecall;
    function OutputSignatureRemoveItem(index: Integer): WordBool; safecall;
    function OutputSignatureInsertItem(index: Integer; value: Byte): Integer; safecall;
    property OutputContent: IOutputContentType read Get_OutputContent write _Set_OutputContent;
    property MenuEntry: PSafeArray read Get_MenuEntry write Set_MenuEntry;
    property OutputSignature: PSafeArray read Get_OutputSignature write Set_OutputSignature;
    property ResponseRequiredFlag: WordBool read Get_ResponseRequiredFlag write Set_ResponseRequiredFlag;
    property MinimumDisplayTime: Integer read Get_MinimumDisplayTime write Set_MinimumDisplayTime;
    property Device: WideString read Get_Device write Set_Device;
    property InfoQualify: WideString read Get_InfoQualify write Set_InfoQualify;
    property OutputContentSpecified: WordBool read Get_OutputContentSpecified write Set_OutputContentSpecified;
    property MenuEntrySpecified: WordBool read Get_MenuEntrySpecified write Set_MenuEntrySpecified;
    property OutputSignatureSpecified: WordBool read Get_OutputSignatureSpecified write Set_OutputSignatureSpecified;
    property ResponseRequiredFlagDefaultValue: WordBool read Get_ResponseRequiredFlagDefaultValue;
    property ResponseRequiredFlagSpecified: WordBool read Get_ResponseRequiredFlagSpecified write Set_ResponseRequiredFlagSpecified;
    property MinimumDisplayTimeDefaultValue: Integer read Get_MinimumDisplayTimeDefaultValue;
    property MinimumDisplayTimeSpecified: WordBool read Get_MinimumDisplayTimeSpecified write Set_MinimumDisplayTimeSpecified;
    property DeviceSpecified: WordBool read Get_DeviceSpecified write Set_DeviceSpecified;
    property InfoQualifySpecified: WordBool read Get_InfoQualifySpecified write Set_InfoQualifySpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property DisplayOutputTypeClassName: WideString read Get_DisplayOutputTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IDisplayOutputTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A9BD68A5-43C2-40D5-A66B-49989B155C71}
// *********************************************************************//
  IDisplayOutputTypeDisp = dispinterface
    ['{A9BD68A5-43C2-40D5-A66B-49989B155C71}']
    property OutputContent: IOutputContentType dispid 2;
    property MenuEntry: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property OutputSignature: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property ResponseRequiredFlag: WordBool dispid 5;
    property MinimumDisplayTime: Integer dispid 6;
    property Device: WideString dispid 7;
    property InfoQualify: WideString dispid 8;
    property OutputContentSpecified: WordBool dispid 9;
    property MenuEntrySpecified: WordBool dispid 10;
    property OutputSignatureSpecified: WordBool dispid 17;
    property ResponseRequiredFlagDefaultValue: WordBool readonly dispid 24;
    property ResponseRequiredFlagSpecified: WordBool dispid 25;
    property MinimumDisplayTimeDefaultValue: Integer readonly dispid 26;
    property MinimumDisplayTimeSpecified: WordBool dispid 27;
    property DeviceSpecified: WordBool dispid 28;
    property InfoQualifySpecified: WordBool dispid 29;
    property ObjectHasBeenSet: WordBool readonly dispid 30;
    property DisplayOutputTypeClassName: WideString readonly dispid 31;
    function MenuEntryLength: Integer; dispid 11;
    function MenuEntryGetItem(index: Integer): IMenuEntryType; dispid 12;
    function MenuEntrySetItem(index: Integer; const value: IMenuEntryType): WordBool; dispid 13;
    function MenuEntryAddItem(const value: IMenuEntryType): WordBool; dispid 14;
    function MenuEntryRemoveItem(index: Integer): WordBool; dispid 15;
    function MenuEntryInsertItem(index: Integer; const value: IMenuEntryType): Integer; dispid 16;
    function OutputSignatureLength: Integer; dispid 18;
    function OutputSignatureGetItem(index: Integer): Byte; dispid 19;
    function OutputSignatureSetItem(index: Integer; value: Byte): WordBool; dispid 20;
    function OutputSignatureAddItem(value: Byte): WordBool; dispid 21;
    function OutputSignatureRemoveItem(index: Integer): WordBool; dispid 22;
    function OutputSignatureInsertItem(index: Integer; value: Byte): Integer; dispid 23;
  end;

// *********************************************************************//
// Interface :   IOutputContentType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CB5B85B3-7B48-4926-B007-CB3467BC5B10}
// *********************************************************************//
  IOutputContentType = interface(IDispatch)
    ['{CB5B85B3-7B48-4926-B007-CB3467BC5B10}']
    function Get_PredefinedContent: IPredefinedContentType; safecall;
    procedure _Set_PredefinedContent(const pRetVal: IPredefinedContentType); safecall;
    function Get_OutputText: PSafeArray; safecall;
    procedure Set_OutputText(pRetVal: PSafeArray); safecall;
    function Get_OutputXHTML: PSafeArray; safecall;
    procedure Set_OutputXHTML(pRetVal: PSafeArray); safecall;
    function Get_OutputBarcode: IOutputBarcodeType; safecall;
    procedure _Set_OutputBarcode(const pRetVal: IOutputBarcodeType); safecall;
    function Get_OutputFormat: WideString; safecall;
    procedure Set_OutputFormat(const pRetVal: WideString); safecall;
    function Get_PredefinedContentSpecified: WordBool; safecall;
    procedure Set_PredefinedContentSpecified(pRetVal: WordBool); safecall;
    function Get_OutputTextSpecified: WordBool; safecall;
    procedure Set_OutputTextSpecified(pRetVal: WordBool); safecall;
    function Get_OutputXHTMLSpecified: WordBool; safecall;
    procedure Set_OutputXHTMLSpecified(pRetVal: WordBool); safecall;
    function Get_OutputBarcodeSpecified: WordBool; safecall;
    procedure Set_OutputBarcodeSpecified(pRetVal: WordBool); safecall;
    function Get_OutputFormatSpecified: WordBool; safecall;
    procedure Set_OutputFormatSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_OutputContentTypeClassName: WideString; safecall;
    function OutputTextLength: Integer; safecall;
    function OutputTextGetItem(index: Integer): IOutputTextType; safecall;
    function OutputTextSetItem(index: Integer; const value: IOutputTextType): WordBool; safecall;
    function OutputTextAddItem(const value: IOutputTextType): WordBool; safecall;
    function OutputTextRemoveItem(index: Integer): WordBool; safecall;
    function OutputTextInsertItem(index: Integer; const value: IOutputTextType): Integer; safecall;
    function OutputXHTMLLength: Integer; safecall;
    function OutputXHTMLGetItem(index: Integer): Byte; safecall;
    function OutputXHTMLSetItem(index: Integer; value: Byte): WordBool; safecall;
    function OutputXHTMLAddItem(value: Byte): WordBool; safecall;
    function OutputXHTMLRemoveItem(index: Integer): WordBool; safecall;
    function OutputXHTMLInsertItem(index: Integer; value: Byte): Integer; safecall;
    property PredefinedContent: IPredefinedContentType read Get_PredefinedContent write _Set_PredefinedContent;
    property OutputText: PSafeArray read Get_OutputText write Set_OutputText;
    property OutputXHTML: PSafeArray read Get_OutputXHTML write Set_OutputXHTML;
    property OutputBarcode: IOutputBarcodeType read Get_OutputBarcode write _Set_OutputBarcode;
    property OutputFormat: WideString read Get_OutputFormat write Set_OutputFormat;
    property PredefinedContentSpecified: WordBool read Get_PredefinedContentSpecified write Set_PredefinedContentSpecified;
    property OutputTextSpecified: WordBool read Get_OutputTextSpecified write Set_OutputTextSpecified;
    property OutputXHTMLSpecified: WordBool read Get_OutputXHTMLSpecified write Set_OutputXHTMLSpecified;
    property OutputBarcodeSpecified: WordBool read Get_OutputBarcodeSpecified write Set_OutputBarcodeSpecified;
    property OutputFormatSpecified: WordBool read Get_OutputFormatSpecified write Set_OutputFormatSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property OutputContentTypeClassName: WideString read Get_OutputContentTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IOutputContentTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CB5B85B3-7B48-4926-B007-CB3467BC5B10}
// *********************************************************************//
  IOutputContentTypeDisp = dispinterface
    ['{CB5B85B3-7B48-4926-B007-CB3467BC5B10}']
    property PredefinedContent: IPredefinedContentType dispid 1;
    property OutputText: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property OutputXHTML: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property OutputBarcode: IOutputBarcodeType dispid 4;
    property OutputFormat: WideString dispid 5;
    property PredefinedContentSpecified: WordBool dispid 7;
    property OutputTextSpecified: WordBool dispid 8;
    property OutputXHTMLSpecified: WordBool dispid 15;
    property OutputBarcodeSpecified: WordBool dispid 22;
    property OutputFormatSpecified: WordBool dispid 23;
    property ObjectHasBeenSet: WordBool readonly dispid 24;
    property OutputContentTypeClassName: WideString readonly dispid 25;
    function OutputTextLength: Integer; dispid 9;
    function OutputTextGetItem(index: Integer): IOutputTextType; dispid 10;
    function OutputTextSetItem(index: Integer; const value: IOutputTextType): WordBool; dispid 11;
    function OutputTextAddItem(const value: IOutputTextType): WordBool; dispid 12;
    function OutputTextRemoveItem(index: Integer): WordBool; dispid 13;
    function OutputTextInsertItem(index: Integer; const value: IOutputTextType): Integer; dispid 14;
    function OutputXHTMLLength: Integer; dispid 16;
    function OutputXHTMLGetItem(index: Integer): Byte; dispid 17;
    function OutputXHTMLSetItem(index: Integer; value: Byte): WordBool; dispid 18;
    function OutputXHTMLAddItem(value: Byte): WordBool; dispid 19;
    function OutputXHTMLRemoveItem(index: Integer): WordBool; dispid 20;
    function OutputXHTMLInsertItem(index: Integer; value: Byte): Integer; dispid 21;
  end;

// *********************************************************************//
// Interface :   IPredefinedContentType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {745F8DDE-FAE5-4FA0-B921-DFAFF2D3B39F}
// *********************************************************************//
  IPredefinedContentType = interface(IDispatch)
    ['{745F8DDE-FAE5-4FA0-B921-DFAFF2D3B39F}']
    function Get_ReferenceID: WideString; safecall;
    procedure Set_ReferenceID(const pRetVal: WideString); safecall;
    function Get_Language: WideString; safecall;
    procedure Set_Language(const pRetVal: WideString); safecall;
    function Get_ReferenceIDSpecified: WordBool; safecall;
    procedure Set_ReferenceIDSpecified(pRetVal: WordBool); safecall;
    function Get_LanguageSpecified: WordBool; safecall;
    procedure Set_LanguageSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PredefinedContentTypeClassName: WideString; safecall;
    property ReferenceID: WideString read Get_ReferenceID write Set_ReferenceID;
    property Language: WideString read Get_Language write Set_Language;
    property ReferenceIDSpecified: WordBool read Get_ReferenceIDSpecified write Set_ReferenceIDSpecified;
    property LanguageSpecified: WordBool read Get_LanguageSpecified write Set_LanguageSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PredefinedContentTypeClassName: WideString read Get_PredefinedContentTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPredefinedContentTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {745F8DDE-FAE5-4FA0-B921-DFAFF2D3B39F}
// *********************************************************************//
  IPredefinedContentTypeDisp = dispinterface
    ['{745F8DDE-FAE5-4FA0-B921-DFAFF2D3B39F}']
    property ReferenceID: WideString dispid 1;
    property Language: WideString dispid 2;
    property ReferenceIDSpecified: WordBool dispid 4;
    property LanguageSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property PredefinedContentTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IOutputTextType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F9D4E60A-F87E-435F-8214-EA852C48338C}
// *********************************************************************//
  IOutputTextType = interface(IDispatch)
    ['{F9D4E60A-F87E-435F-8214-EA852C48338C}']
    function Get_CharacterSet: Integer; safecall;
    procedure Set_CharacterSet(pRetVal: Integer); safecall;
    function Get_Font: WideString; safecall;
    procedure Set_Font(const pRetVal: WideString); safecall;
    function Get_StartRow: Integer; safecall;
    procedure Set_StartRow(pRetVal: Integer); safecall;
    function Get_StartColumn: Integer; safecall;
    procedure Set_StartColumn(pRetVal: Integer); safecall;
    function Get_Color: WideString; safecall;
    procedure Set_Color(const pRetVal: WideString); safecall;
    function Get_CharacterWidth: WideString; safecall;
    procedure Set_CharacterWidth(const pRetVal: WideString); safecall;
    function Get_CharacterHeight: WideString; safecall;
    procedure Set_CharacterHeight(const pRetVal: WideString); safecall;
    function Get_CharacterStyle: WideString; safecall;
    procedure Set_CharacterStyle(const pRetVal: WideString); safecall;
    function Get_Alignment: WideString; safecall;
    procedure Set_Alignment(const pRetVal: WideString); safecall;
    function Get_EndOfLineFlag: WordBool; safecall;
    procedure Set_EndOfLineFlag(pRetVal: WordBool); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_CharacterSetSpecified: WordBool; safecall;
    procedure Set_CharacterSetSpecified(pRetVal: WordBool); safecall;
    function Get_FontSpecified: WordBool; safecall;
    procedure Set_FontSpecified(pRetVal: WordBool); safecall;
    function Get_StartRowSpecified: WordBool; safecall;
    procedure Set_StartRowSpecified(pRetVal: WordBool); safecall;
    function Get_StartColumnSpecified: WordBool; safecall;
    procedure Set_StartColumnSpecified(pRetVal: WordBool); safecall;
    function Get_ColorSpecified: WordBool; safecall;
    procedure Set_ColorSpecified(pRetVal: WordBool); safecall;
    function Get_CharacterWidthSpecified: WordBool; safecall;
    procedure Set_CharacterWidthSpecified(pRetVal: WordBool); safecall;
    function Get_CharacterHeightSpecified: WordBool; safecall;
    procedure Set_CharacterHeightSpecified(pRetVal: WordBool); safecall;
    function Get_CharacterStyleSpecified: WordBool; safecall;
    procedure Set_CharacterStyleSpecified(pRetVal: WordBool); safecall;
    function Get_AlignmentSpecified: WordBool; safecall;
    procedure Set_AlignmentSpecified(pRetVal: WordBool); safecall;
    function Get_EndOfLineFlagDefaultValue: WordBool; safecall;
    function Get_EndOfLineFlagSpecified: WordBool; safecall;
    procedure Set_EndOfLineFlagSpecified(pRetVal: WordBool); safecall;
    function Get_ValueSpecified: WordBool; safecall;
    procedure Set_ValueSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_OutputTextTypeClassName: WideString; safecall;
    property CharacterSet: Integer read Get_CharacterSet write Set_CharacterSet;
    property Font: WideString read Get_Font write Set_Font;
    property StartRow: Integer read Get_StartRow write Set_StartRow;
    property StartColumn: Integer read Get_StartColumn write Set_StartColumn;
    property Color: WideString read Get_Color write Set_Color;
    property CharacterWidth: WideString read Get_CharacterWidth write Set_CharacterWidth;
    property CharacterHeight: WideString read Get_CharacterHeight write Set_CharacterHeight;
    property CharacterStyle: WideString read Get_CharacterStyle write Set_CharacterStyle;
    property Alignment: WideString read Get_Alignment write Set_Alignment;
    property EndOfLineFlag: WordBool read Get_EndOfLineFlag write Set_EndOfLineFlag;
    property value: WideString read Get_value write Set_value;
    property CharacterSetSpecified: WordBool read Get_CharacterSetSpecified write Set_CharacterSetSpecified;
    property FontSpecified: WordBool read Get_FontSpecified write Set_FontSpecified;
    property StartRowSpecified: WordBool read Get_StartRowSpecified write Set_StartRowSpecified;
    property StartColumnSpecified: WordBool read Get_StartColumnSpecified write Set_StartColumnSpecified;
    property ColorSpecified: WordBool read Get_ColorSpecified write Set_ColorSpecified;
    property CharacterWidthSpecified: WordBool read Get_CharacterWidthSpecified write Set_CharacterWidthSpecified;
    property CharacterHeightSpecified: WordBool read Get_CharacterHeightSpecified write Set_CharacterHeightSpecified;
    property CharacterStyleSpecified: WordBool read Get_CharacterStyleSpecified write Set_CharacterStyleSpecified;
    property AlignmentSpecified: WordBool read Get_AlignmentSpecified write Set_AlignmentSpecified;
    property EndOfLineFlagDefaultValue: WordBool read Get_EndOfLineFlagDefaultValue;
    property EndOfLineFlagSpecified: WordBool read Get_EndOfLineFlagSpecified write Set_EndOfLineFlagSpecified;
    property ValueSpecified: WordBool read Get_ValueSpecified write Set_ValueSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property OutputTextTypeClassName: WideString read Get_OutputTextTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IOutputTextTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F9D4E60A-F87E-435F-8214-EA852C48338C}
// *********************************************************************//
  IOutputTextTypeDisp = dispinterface
    ['{F9D4E60A-F87E-435F-8214-EA852C48338C}']
    property CharacterSet: Integer dispid 2;
    property Font: WideString dispid 3;
    property StartRow: Integer dispid 4;
    property StartColumn: Integer dispid 5;
    property Color: WideString dispid 6;
    property CharacterWidth: WideString dispid 7;
    property CharacterHeight: WideString dispid 8;
    property CharacterStyle: WideString dispid 9;
    property Alignment: WideString dispid 10;
    property EndOfLineFlag: WordBool dispid 11;
    property value: WideString dispid 12;
    property CharacterSetSpecified: WordBool dispid 13;
    property FontSpecified: WordBool dispid 14;
    property StartRowSpecified: WordBool dispid 15;
    property StartColumnSpecified: WordBool dispid 16;
    property ColorSpecified: WordBool dispid 17;
    property CharacterWidthSpecified: WordBool dispid 18;
    property CharacterHeightSpecified: WordBool dispid 19;
    property CharacterStyleSpecified: WordBool dispid 20;
    property AlignmentSpecified: WordBool dispid 21;
    property EndOfLineFlagDefaultValue: WordBool readonly dispid 22;
    property EndOfLineFlagSpecified: WordBool dispid 23;
    property ValueSpecified: WordBool dispid 24;
    property ObjectHasBeenSet: WordBool readonly dispid 25;
    property OutputTextTypeClassName: WideString readonly dispid 26;
  end;

// *********************************************************************//
// Interface :   IOutputBarcodeType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {020FA7C1-5F33-48C9-BFD0-D8092E6A74F4}
// *********************************************************************//
  IOutputBarcodeType = interface(IDispatch)
    ['{020FA7C1-5F33-48C9-BFD0-D8092E6A74F4}']
    function Get_BarcodeType: WideString; safecall;
    procedure Set_BarcodeType(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_BarcodeTypeDefaultValue: WideString; safecall;
    function Get_BarcodeTypeSpecified: WordBool; safecall;
    procedure Set_BarcodeTypeSpecified(pRetVal: WordBool); safecall;
    function Get_ValueSpecified: WordBool; safecall;
    procedure Set_ValueSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_OutputBarcodeTypeClassName: WideString; safecall;
    property BarcodeType: WideString read Get_BarcodeType write Set_BarcodeType;
    property value: WideString read Get_value write Set_value;
    property BarcodeTypeDefaultValue: WideString read Get_BarcodeTypeDefaultValue;
    property BarcodeTypeSpecified: WordBool read Get_BarcodeTypeSpecified write Set_BarcodeTypeSpecified;
    property ValueSpecified: WordBool read Get_ValueSpecified write Set_ValueSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property OutputBarcodeTypeClassName: WideString read Get_OutputBarcodeTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IOutputBarcodeTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {020FA7C1-5F33-48C9-BFD0-D8092E6A74F4}
// *********************************************************************//
  IOutputBarcodeTypeDisp = dispinterface
    ['{020FA7C1-5F33-48C9-BFD0-D8092E6A74F4}']
    property BarcodeType: WideString dispid 2;
    property value: WideString dispid 3;
    property BarcodeTypeDefaultValue: WideString readonly dispid 4;
    property BarcodeTypeSpecified: WordBool dispid 5;
    property ValueSpecified: WordBool dispid 6;
    property ObjectHasBeenSet: WordBool readonly dispid 7;
    property OutputBarcodeTypeClassName: WideString readonly dispid 8;
  end;

// *********************************************************************//
// Interface :   IMenuEntryType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {09EC084B-4A75-4536-8700-E5676EB15AF9}
// *********************************************************************//
  IMenuEntryType = interface(IDispatch)
    ['{09EC084B-4A75-4536-8700-E5676EB15AF9}']
    function Get_PredefinedContent: IPredefinedContentType; safecall;
    procedure _Set_PredefinedContent(const pRetVal: IPredefinedContentType); safecall;
    function Get_OutputText: PSafeArray; safecall;
    procedure Set_OutputText(pRetVal: PSafeArray); safecall;
    function Get_OutputXHTML: PSafeArray; safecall;
    procedure Set_OutputXHTML(pRetVal: PSafeArray); safecall;
    function Get_MenuEntryTag: WideString; safecall;
    procedure Set_MenuEntryTag(const pRetVal: WideString); safecall;
    function Get_OutputFormat: WideString; safecall;
    procedure Set_OutputFormat(const pRetVal: WideString); safecall;
    function Get_DefaultSelectedFlag: WordBool; safecall;
    procedure Set_DefaultSelectedFlag(pRetVal: WordBool); safecall;
    function Get_PredefinedContentSpecified: WordBool; safecall;
    procedure Set_PredefinedContentSpecified(pRetVal: WordBool); safecall;
    function Get_OutputTextSpecified: WordBool; safecall;
    procedure Set_OutputTextSpecified(pRetVal: WordBool); safecall;
    function Get_OutputXHTMLSpecified: WordBool; safecall;
    procedure Set_OutputXHTMLSpecified(pRetVal: WordBool); safecall;
    function Get_MenuEntryTagDefaultValue: WideString; safecall;
    function Get_MenuEntryTagSpecified: WordBool; safecall;
    procedure Set_MenuEntryTagSpecified(pRetVal: WordBool); safecall;
    function Get_OutputFormatSpecified: WordBool; safecall;
    procedure Set_OutputFormatSpecified(pRetVal: WordBool); safecall;
    function Get_DefaultSelectedFlagDefaultValue: WordBool; safecall;
    function Get_DefaultSelectedFlagSpecified: WordBool; safecall;
    procedure Set_DefaultSelectedFlagSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_MenuEntryTypeClassName: WideString; safecall;
    function OutputTextLength: Integer; safecall;
    function OutputTextGetItem(index: Integer): IOutputTextType; safecall;
    function OutputTextSetItem(index: Integer; const value: IOutputTextType): WordBool; safecall;
    function OutputTextAddItem(const value: IOutputTextType): WordBool; safecall;
    function OutputTextRemoveItem(index: Integer): WordBool; safecall;
    function OutputTextInsertItem(index: Integer; const value: IOutputTextType): Integer; safecall;
    function OutputXHTMLLength: Integer; safecall;
    function OutputXHTMLGetItem(index: Integer): Byte; safecall;
    function OutputXHTMLSetItem(index: Integer; value: Byte): WordBool; safecall;
    function OutputXHTMLAddItem(value: Byte): WordBool; safecall;
    function OutputXHTMLRemoveItem(index: Integer): WordBool; safecall;
    function OutputXHTMLInsertItem(index: Integer; value: Byte): Integer; safecall;
    property PredefinedContent: IPredefinedContentType read Get_PredefinedContent write _Set_PredefinedContent;
    property OutputText: PSafeArray read Get_OutputText write Set_OutputText;
    property OutputXHTML: PSafeArray read Get_OutputXHTML write Set_OutputXHTML;
    property MenuEntryTag: WideString read Get_MenuEntryTag write Set_MenuEntryTag;
    property OutputFormat: WideString read Get_OutputFormat write Set_OutputFormat;
    property DefaultSelectedFlag: WordBool read Get_DefaultSelectedFlag write Set_DefaultSelectedFlag;
    property PredefinedContentSpecified: WordBool read Get_PredefinedContentSpecified write Set_PredefinedContentSpecified;
    property OutputTextSpecified: WordBool read Get_OutputTextSpecified write Set_OutputTextSpecified;
    property OutputXHTMLSpecified: WordBool read Get_OutputXHTMLSpecified write Set_OutputXHTMLSpecified;
    property MenuEntryTagDefaultValue: WideString read Get_MenuEntryTagDefaultValue;
    property MenuEntryTagSpecified: WordBool read Get_MenuEntryTagSpecified write Set_MenuEntryTagSpecified;
    property OutputFormatSpecified: WordBool read Get_OutputFormatSpecified write Set_OutputFormatSpecified;
    property DefaultSelectedFlagDefaultValue: WordBool read Get_DefaultSelectedFlagDefaultValue;
    property DefaultSelectedFlagSpecified: WordBool read Get_DefaultSelectedFlagSpecified write Set_DefaultSelectedFlagSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property MenuEntryTypeClassName: WideString read Get_MenuEntryTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IMenuEntryTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {09EC084B-4A75-4536-8700-E5676EB15AF9}
// *********************************************************************//
  IMenuEntryTypeDisp = dispinterface
    ['{09EC084B-4A75-4536-8700-E5676EB15AF9}']
    property PredefinedContent: IPredefinedContentType dispid 2;
    property OutputText: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property OutputXHTML: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property MenuEntryTag: WideString dispid 5;
    property OutputFormat: WideString dispid 6;
    property DefaultSelectedFlag: WordBool dispid 7;
    property PredefinedContentSpecified: WordBool dispid 8;
    property OutputTextSpecified: WordBool dispid 9;
    property OutputXHTMLSpecified: WordBool dispid 16;
    property MenuEntryTagDefaultValue: WideString readonly dispid 23;
    property MenuEntryTagSpecified: WordBool dispid 24;
    property OutputFormatSpecified: WordBool dispid 25;
    property DefaultSelectedFlagDefaultValue: WordBool readonly dispid 26;
    property DefaultSelectedFlagSpecified: WordBool dispid 27;
    property ObjectHasBeenSet: WordBool readonly dispid 28;
    property MenuEntryTypeClassName: WideString readonly dispid 29;
    function OutputTextLength: Integer; dispid 10;
    function OutputTextGetItem(index: Integer): IOutputTextType; dispid 11;
    function OutputTextSetItem(index: Integer; const value: IOutputTextType): WordBool; dispid 12;
    function OutputTextAddItem(const value: IOutputTextType): WordBool; dispid 13;
    function OutputTextRemoveItem(index: Integer): WordBool; dispid 14;
    function OutputTextInsertItem(index: Integer; const value: IOutputTextType): Integer; dispid 15;
    function OutputXHTMLLength: Integer; dispid 17;
    function OutputXHTMLGetItem(index: Integer): Byte; dispid 18;
    function OutputXHTMLSetItem(index: Integer; value: Byte): WordBool; dispid 19;
    function OutputXHTMLAddItem(value: Byte): WordBool; dispid 20;
    function OutputXHTMLRemoveItem(index: Integer): WordBool; dispid 21;
    function OutputXHTMLInsertItem(index: Integer; value: Byte): Integer; dispid 22;
  end;

// *********************************************************************//
// Interface :   IAlgorithmIdentifier
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8A6317C0-4FF8-4BC1-98C5-D9A2F3708E2B}
// *********************************************************************//
  IAlgorithmIdentifier = interface(IDispatch)
    ['{8A6317C0-4FF8-4BC1-98C5-D9A2F3708E2B}']
    function Get_Parameter: IParameterType; safecall;
    procedure _Set_Parameter(const pRetVal: IParameterType); safecall;
    function Get_Algorithm: WideString; safecall;
    procedure Set_Algorithm(const pRetVal: WideString); safecall;
    function Get_ParameterSpecified: WordBool; safecall;
    procedure Set_ParameterSpecified(pRetVal: WordBool); safecall;
    function Get_AlgorithmSpecified: WordBool; safecall;
    procedure Set_AlgorithmSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_AlgorithmIdentifierClassName: WideString; safecall;
    property Parameter: IParameterType read Get_Parameter write _Set_Parameter;
    property Algorithm: WideString read Get_Algorithm write Set_Algorithm;
    property ParameterSpecified: WordBool read Get_ParameterSpecified write Set_ParameterSpecified;
    property AlgorithmSpecified: WordBool read Get_AlgorithmSpecified write Set_AlgorithmSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property AlgorithmIdentifierClassName: WideString read Get_AlgorithmIdentifierClassName;
  end;

// *********************************************************************//
// DispIntf :    IAlgorithmIdentifierDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8A6317C0-4FF8-4BC1-98C5-D9A2F3708E2B}
// *********************************************************************//
  IAlgorithmIdentifierDisp = dispinterface
    ['{8A6317C0-4FF8-4BC1-98C5-D9A2F3708E2B}']
    property Parameter: IParameterType dispid 1;
    property Algorithm: WideString dispid 2;
    property ParameterSpecified: WordBool dispid 4;
    property AlgorithmSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property AlgorithmIdentifierClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IParameterType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {70FE73F6-E5DA-4E62-A5B8-01109CEE7387}
// *********************************************************************//
  IParameterType = interface(IDispatch)
    ['{70FE73F6-E5DA-4E62-A5B8-01109CEE7387}']
    function Get_InitialisationVector: PSafeArray; safecall;
    procedure Set_InitialisationVector(pRetVal: PSafeArray); safecall;
    function Get_InitialisationVectorSpecified: WordBool; safecall;
    procedure Set_InitialisationVectorSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_ParameterTypeClassName: WideString; safecall;
    function InitialisationVectorLength: Integer; safecall;
    function InitialisationVectorGetItem(index: Integer): Byte; safecall;
    function InitialisationVectorSetItem(index: Integer; value: Byte): WordBool; safecall;
    function InitialisationVectorAddItem(value: Byte): WordBool; safecall;
    function InitialisationVectorRemoveItem(index: Integer): WordBool; safecall;
    function InitialisationVectorInsertItem(index: Integer; value: Byte): Integer; safecall;
    property InitialisationVector: PSafeArray read Get_InitialisationVector write Set_InitialisationVector;
    property InitialisationVectorSpecified: WordBool read Get_InitialisationVectorSpecified write Set_InitialisationVectorSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property ParameterTypeClassName: WideString read Get_ParameterTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IParameterTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {70FE73F6-E5DA-4E62-A5B8-01109CEE7387}
// *********************************************************************//
  IParameterTypeDisp = dispinterface
    ['{70FE73F6-E5DA-4E62-A5B8-01109CEE7387}']
    property InitialisationVector: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property InitialisationVectorSpecified: WordBool dispid 3;
    property ObjectHasBeenSet: WordBool readonly dispid 10;
    property ParameterTypeClassName: WideString readonly dispid 11;
    function InitialisationVectorLength: Integer; dispid 4;
    function InitialisationVectorGetItem(index: Integer): Byte; dispid 5;
    function InitialisationVectorSetItem(index: Integer; value: Byte): WordBool; dispid 6;
    function InitialisationVectorAddItem(value: Byte): WordBool; dispid 7;
    function InitialisationVectorRemoveItem(index: Integer): WordBool; dispid 8;
    function InitialisationVectorInsertItem(index: Integer; value: Byte): Integer; dispid 9;
  end;

// *********************************************************************//
// Interface :   IKeyTransportType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8F5666C4-AAC4-4568-A157-0865637377FC}
// *********************************************************************//
  IKeyTransportType = interface(IDispatch)
    ['{8F5666C4-AAC4-4568-A157-0865637377FC}']
    function Get_RecipientIdentifier: IRecipientIdentifierType; safecall;
    procedure _Set_RecipientIdentifier(const pRetVal: IRecipientIdentifierType); safecall;
    function Get_KeyEncryptionAlgorithm: IAlgorithmIdentifier; safecall;
    procedure _Set_KeyEncryptionAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_EncryptedKey: PSafeArray; safecall;
    procedure Set_EncryptedKey(pRetVal: PSafeArray); safecall;
    function Get_RecipientIdentifierSpecified: WordBool; safecall;
    procedure Set_RecipientIdentifierSpecified(pRetVal: WordBool); safecall;
    function Get_KeyEncryptionAlgorithmSpecified: WordBool; safecall;
    procedure Set_KeyEncryptionAlgorithmSpecified(pRetVal: WordBool); safecall;
    function Get_VersionDefaultValue: WideString; safecall;
    function Get_VersionSpecified: WordBool; safecall;
    procedure Set_VersionSpecified(pRetVal: WordBool); safecall;
    function Get_EncryptedKeySpecified: WordBool; safecall;
    procedure Set_EncryptedKeySpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_KeyTransportTypeClassName: WideString; safecall;
    function EncryptedKeyLength: Integer; safecall;
    function EncryptedKeyGetItem(index: Integer): Byte; safecall;
    function EncryptedKeySetItem(index: Integer; value: Byte): WordBool; safecall;
    function EncryptedKeyAddItem(value: Byte): WordBool; safecall;
    function EncryptedKeyRemoveItem(index: Integer): WordBool; safecall;
    function EncryptedKeyInsertItem(index: Integer; value: Byte): Integer; safecall;
    property RecipientIdentifier: IRecipientIdentifierType read Get_RecipientIdentifier write _Set_RecipientIdentifier;
    property KeyEncryptionAlgorithm: IAlgorithmIdentifier read Get_KeyEncryptionAlgorithm write _Set_KeyEncryptionAlgorithm;
    property Version: WideString read Get_Version write Set_Version;
    property EncryptedKey: PSafeArray read Get_EncryptedKey write Set_EncryptedKey;
    property RecipientIdentifierSpecified: WordBool read Get_RecipientIdentifierSpecified write Set_RecipientIdentifierSpecified;
    property KeyEncryptionAlgorithmSpecified: WordBool read Get_KeyEncryptionAlgorithmSpecified write Set_KeyEncryptionAlgorithmSpecified;
    property VersionDefaultValue: WideString read Get_VersionDefaultValue;
    property VersionSpecified: WordBool read Get_VersionSpecified write Set_VersionSpecified;
    property EncryptedKeySpecified: WordBool read Get_EncryptedKeySpecified write Set_EncryptedKeySpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property KeyTransportTypeClassName: WideString read Get_KeyTransportTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IKeyTransportTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8F5666C4-AAC4-4568-A157-0865637377FC}
// *********************************************************************//
  IKeyTransportTypeDisp = dispinterface
    ['{8F5666C4-AAC4-4568-A157-0865637377FC}']
    property RecipientIdentifier: IRecipientIdentifierType dispid 2;
    property KeyEncryptionAlgorithm: IAlgorithmIdentifier dispid 3;
    property Version: WideString dispid 4;
    property EncryptedKey: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property RecipientIdentifierSpecified: WordBool dispid 6;
    property KeyEncryptionAlgorithmSpecified: WordBool dispid 7;
    property VersionDefaultValue: WideString readonly dispid 8;
    property VersionSpecified: WordBool dispid 9;
    property EncryptedKeySpecified: WordBool dispid 10;
    property ObjectHasBeenSet: WordBool readonly dispid 17;
    property KeyTransportTypeClassName: WideString readonly dispid 18;
    function EncryptedKeyLength: Integer; dispid 11;
    function EncryptedKeyGetItem(index: Integer): Byte; dispid 12;
    function EncryptedKeySetItem(index: Integer; value: Byte): WordBool; dispid 13;
    function EncryptedKeyAddItem(value: Byte): WordBool; dispid 14;
    function EncryptedKeyRemoveItem(index: Integer): WordBool; dispid 15;
    function EncryptedKeyInsertItem(index: Integer; value: Byte): Integer; dispid 16;
  end;

// *********************************************************************//
// Interface :   IRecipientIdentifierType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {329B9102-F23E-4787-B431-CA045837AF6C}
// *********************************************************************//
  IRecipientIdentifierType = interface(IDispatch)
    ['{329B9102-F23E-4787-B431-CA045837AF6C}']
    function Get_IssuerAndSerialNumber: IIssuerAndSerialNumberType; safecall;
    procedure _Set_IssuerAndSerialNumber(const pRetVal: IIssuerAndSerialNumberType); safecall;
    function Get_IssuerAndSerialNumberSpecified: WordBool; safecall;
    procedure Set_IssuerAndSerialNumberSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_RecipientIdentifierTypeClassName: WideString; safecall;
    property IssuerAndSerialNumber: IIssuerAndSerialNumberType read Get_IssuerAndSerialNumber write _Set_IssuerAndSerialNumber;
    property IssuerAndSerialNumberSpecified: WordBool read Get_IssuerAndSerialNumberSpecified write Set_IssuerAndSerialNumberSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property RecipientIdentifierTypeClassName: WideString read Get_RecipientIdentifierTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IRecipientIdentifierTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {329B9102-F23E-4787-B431-CA045837AF6C}
// *********************************************************************//
  IRecipientIdentifierTypeDisp = dispinterface
    ['{329B9102-F23E-4787-B431-CA045837AF6C}']
    property IssuerAndSerialNumber: IIssuerAndSerialNumberType dispid 1;
    property IssuerAndSerialNumberSpecified: WordBool dispid 3;
    property ObjectHasBeenSet: WordBool readonly dispid 4;
    property RecipientIdentifierTypeClassName: WideString readonly dispid 5;
  end;

// *********************************************************************//
// Interface :   IIssuerAndSerialNumberType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9D6D3284-81FA-41EA-9F7B-BEF880B68523}
// *********************************************************************//
  IIssuerAndSerialNumberType = interface(IDispatch)
    ['{9D6D3284-81FA-41EA-9F7B-BEF880B68523}']
    function Get_Issuer: PSafeArray; safecall;
    procedure Set_Issuer(pRetVal: PSafeArray); safecall;
    function Get_SerialNumber: WideString; safecall;
    procedure Set_SerialNumber(const pRetVal: WideString); safecall;
    function Get_IssuerSpecified: WordBool; safecall;
    procedure Set_IssuerSpecified(pRetVal: WordBool); safecall;
    function Get_SerialNumberSpecified: WordBool; safecall;
    procedure Set_SerialNumberSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_IssuerAndSerialNumberTypeClassName: WideString; safecall;
    function IssuerLength: Integer; safecall;
    function IssuerGetItem(index: Integer): IRelativeDistinguishedNameType; safecall;
    function IssuerSetItem(index: Integer; const value: IRelativeDistinguishedNameType): WordBool; safecall;
    function IssuerAddItem(const value: IRelativeDistinguishedNameType): WordBool; safecall;
    function IssuerRemoveItem(index: Integer): WordBool; safecall;
    function IssuerInsertItem(index: Integer; const value: IRelativeDistinguishedNameType): Integer; safecall;
    property Issuer: PSafeArray read Get_Issuer write Set_Issuer;
    property SerialNumber: WideString read Get_SerialNumber write Set_SerialNumber;
    property IssuerSpecified: WordBool read Get_IssuerSpecified write Set_IssuerSpecified;
    property SerialNumberSpecified: WordBool read Get_SerialNumberSpecified write Set_SerialNumberSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property IssuerAndSerialNumberTypeClassName: WideString read Get_IssuerAndSerialNumberTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IIssuerAndSerialNumberTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9D6D3284-81FA-41EA-9F7B-BEF880B68523}
// *********************************************************************//
  IIssuerAndSerialNumberTypeDisp = dispinterface
    ['{9D6D3284-81FA-41EA-9F7B-BEF880B68523}']
    property Issuer: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property SerialNumber: WideString dispid 2;
    property IssuerSpecified: WordBool dispid 4;
    property SerialNumberSpecified: WordBool dispid 11;
    property ObjectHasBeenSet: WordBool readonly dispid 12;
    property IssuerAndSerialNumberTypeClassName: WideString readonly dispid 13;
    function IssuerLength: Integer; dispid 5;
    function IssuerGetItem(index: Integer): IRelativeDistinguishedNameType; dispid 6;
    function IssuerSetItem(index: Integer; const value: IRelativeDistinguishedNameType): WordBool; dispid 7;
    function IssuerAddItem(const value: IRelativeDistinguishedNameType): WordBool; dispid 8;
    function IssuerRemoveItem(index: Integer): WordBool; dispid 9;
    function IssuerInsertItem(index: Integer; const value: IRelativeDistinguishedNameType): Integer; dispid 10;
  end;

// *********************************************************************//
// Interface :   IRelativeDistinguishedNameType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1D5912E4-7002-4C22-9068-A381B95A68C7}
// *********************************************************************//
  IRelativeDistinguishedNameType = interface(IDispatch)
    ['{1D5912E4-7002-4C22-9068-A381B95A68C7}']
    function Get_AttributeType: WideString; safecall;
    procedure Set_AttributeType(const pRetVal: WideString); safecall;
    function Get_AttributeValue: WideString; safecall;
    procedure Set_AttributeValue(const pRetVal: WideString); safecall;
    function Get_AttributeTypeSpecified: WordBool; safecall;
    procedure Set_AttributeTypeSpecified(pRetVal: WordBool); safecall;
    function Get_AttributeValueSpecified: WordBool; safecall;
    procedure Set_AttributeValueSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_RelativeDistinguishedNameTypeClassName: WideString; safecall;
    property AttributeType: WideString read Get_AttributeType write Set_AttributeType;
    property AttributeValue: WideString read Get_AttributeValue write Set_AttributeValue;
    property AttributeTypeSpecified: WordBool read Get_AttributeTypeSpecified write Set_AttributeTypeSpecified;
    property AttributeValueSpecified: WordBool read Get_AttributeValueSpecified write Set_AttributeValueSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property RelativeDistinguishedNameTypeClassName: WideString read Get_RelativeDistinguishedNameTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IRelativeDistinguishedNameTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1D5912E4-7002-4C22-9068-A381B95A68C7}
// *********************************************************************//
  IRelativeDistinguishedNameTypeDisp = dispinterface
    ['{1D5912E4-7002-4C22-9068-A381B95A68C7}']
    property AttributeType: WideString dispid 1;
    property AttributeValue: WideString dispid 2;
    property AttributeTypeSpecified: WordBool dispid 4;
    property AttributeValueSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property RelativeDistinguishedNameTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IEncapsulatedContentType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {69F327EE-CBFB-4D8D-8338-03D5E5926F0B}
// *********************************************************************//
  IEncapsulatedContentType = interface(IDispatch)
    ['{69F327EE-CBFB-4D8D-8338-03D5E5926F0B}']
    function Get_Content: PSafeArray; safecall;
    procedure Set_Content(pRetVal: PSafeArray); safecall;
    function Get_ContentType: WideString; safecall;
    procedure Set_ContentType(const pRetVal: WideString); safecall;
    function Get_ContentSpecified: WordBool; safecall;
    procedure Set_ContentSpecified(pRetVal: WordBool); safecall;
    function Get_ContentTypeSpecified: WordBool; safecall;
    procedure Set_ContentTypeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_EncapsulatedContentTypeClassName: WideString; safecall;
    function ContentLength: Integer; safecall;
    function ContentGetItem(index: Integer): Byte; safecall;
    function ContentSetItem(index: Integer; value: Byte): WordBool; safecall;
    function ContentAddItem(value: Byte): WordBool; safecall;
    function ContentRemoveItem(index: Integer): WordBool; safecall;
    function ContentInsertItem(index: Integer; value: Byte): Integer; safecall;
    property Content: PSafeArray read Get_Content write Set_Content;
    property ContentType: WideString read Get_ContentType write Set_ContentType;
    property ContentSpecified: WordBool read Get_ContentSpecified write Set_ContentSpecified;
    property ContentTypeSpecified: WordBool read Get_ContentTypeSpecified write Set_ContentTypeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property EncapsulatedContentTypeClassName: WideString read Get_EncapsulatedContentTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IEncapsulatedContentTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {69F327EE-CBFB-4D8D-8338-03D5E5926F0B}
// *********************************************************************//
  IEncapsulatedContentTypeDisp = dispinterface
    ['{69F327EE-CBFB-4D8D-8338-03D5E5926F0B}']
    property Content: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property ContentType: WideString dispid 2;
    property ContentSpecified: WordBool dispid 4;
    property ContentTypeSpecified: WordBool dispid 11;
    property ObjectHasBeenSet: WordBool readonly dispid 12;
    property EncapsulatedContentTypeClassName: WideString readonly dispid 13;
    function ContentLength: Integer; dispid 5;
    function ContentGetItem(index: Integer): Byte; dispid 6;
    function ContentSetItem(index: Integer; value: Byte): WordBool; dispid 7;
    function ContentAddItem(value: Byte): WordBool; dispid 8;
    function ContentRemoveItem(index: Integer): WordBool; dispid 9;
    function ContentInsertItem(index: Integer; value: Byte): Integer; dispid 10;
  end;

// *********************************************************************//
// Interface :   IDigestedDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {FF3454A9-51E5-468D-82BC-F06A926CAEAA}
// *********************************************************************//
  IDigestedDataType = interface(IDispatch)
    ['{FF3454A9-51E5-468D-82BC-F06A926CAEAA}']
    function Get_DigestAlgorithm: IAlgorithmIdentifier; safecall;
    procedure _Set_DigestAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
    function Get_EncapsulatedContent: IEncapsulatedContentType; safecall;
    procedure _Set_EncapsulatedContent(const pRetVal: IEncapsulatedContentType); safecall;
    function Get_Digest: PSafeArray; safecall;
    procedure Set_Digest(pRetVal: PSafeArray); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_DigestAlgorithmSpecified: WordBool; safecall;
    procedure Set_DigestAlgorithmSpecified(pRetVal: WordBool); safecall;
    function Get_EncapsulatedContentSpecified: WordBool; safecall;
    procedure Set_EncapsulatedContentSpecified(pRetVal: WordBool); safecall;
    function Get_DigestSpecified: WordBool; safecall;
    procedure Set_DigestSpecified(pRetVal: WordBool); safecall;
    function Get_VersionSpecified: WordBool; safecall;
    procedure Set_VersionSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_DigestedDataTypeClassName: WideString; safecall;
    function DigestLength: Integer; safecall;
    function DigestGetItem(index: Integer): Byte; safecall;
    function DigestSetItem(index: Integer; value: Byte): WordBool; safecall;
    function DigestAddItem(value: Byte): WordBool; safecall;
    function DigestRemoveItem(index: Integer): WordBool; safecall;
    function DigestInsertItem(index: Integer; value: Byte): Integer; safecall;
    property DigestAlgorithm: IAlgorithmIdentifier read Get_DigestAlgorithm write _Set_DigestAlgorithm;
    property EncapsulatedContent: IEncapsulatedContentType read Get_EncapsulatedContent write _Set_EncapsulatedContent;
    property Digest: PSafeArray read Get_Digest write Set_Digest;
    property Version: WideString read Get_Version write Set_Version;
    property DigestAlgorithmSpecified: WordBool read Get_DigestAlgorithmSpecified write Set_DigestAlgorithmSpecified;
    property EncapsulatedContentSpecified: WordBool read Get_EncapsulatedContentSpecified write Set_EncapsulatedContentSpecified;
    property DigestSpecified: WordBool read Get_DigestSpecified write Set_DigestSpecified;
    property VersionSpecified: WordBool read Get_VersionSpecified write Set_VersionSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property DigestedDataTypeClassName: WideString read Get_DigestedDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IDigestedDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {FF3454A9-51E5-468D-82BC-F06A926CAEAA}
// *********************************************************************//
  IDigestedDataTypeDisp = dispinterface
    ['{FF3454A9-51E5-468D-82BC-F06A926CAEAA}']
    property DigestAlgorithm: IAlgorithmIdentifier dispid 1;
    property EncapsulatedContent: IEncapsulatedContentType dispid 2;
    property Digest: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property Version: WideString dispid 4;
    property DigestAlgorithmSpecified: WordBool dispid 6;
    property EncapsulatedContentSpecified: WordBool dispid 7;
    property DigestSpecified: WordBool dispid 8;
    property VersionSpecified: WordBool dispid 15;
    property ObjectHasBeenSet: WordBool readonly dispid 16;
    property DigestedDataTypeClassName: WideString readonly dispid 17;
    function DigestLength: Integer; dispid 9;
    function DigestGetItem(index: Integer): Byte; dispid 10;
    function DigestSetItem(index: Integer; value: Byte): WordBool; dispid 11;
    function DigestAddItem(value: Byte): WordBool; dispid 12;
    function DigestRemoveItem(index: Integer): WordBool; dispid 13;
    function DigestInsertItem(index: Integer; value: Byte): Integer; dispid 14;
  end;

// *********************************************************************//
// Interface :   IEncryptedContentType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {FE53185F-A040-4543-BFEA-62AB2646E4B3}
// *********************************************************************//
  IEncryptedContentType = interface(IDispatch)
    ['{FE53185F-A040-4543-BFEA-62AB2646E4B3}']
    function Get_ContentEncryptionAlgorithm: IAlgorithmIdentifier; safecall;
    procedure _Set_ContentEncryptionAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
    function Get_EncryptedData: PSafeArray; safecall;
    procedure Set_EncryptedData(pRetVal: PSafeArray); safecall;
    function Get_ContentType: WideString; safecall;
    procedure Set_ContentType(const pRetVal: WideString); safecall;
    function Get_ContentEncryptionAlgorithmSpecified: WordBool; safecall;
    procedure Set_ContentEncryptionAlgorithmSpecified(pRetVal: WordBool); safecall;
    function Get_EncryptedDataSpecified: WordBool; safecall;
    procedure Set_EncryptedDataSpecified(pRetVal: WordBool); safecall;
    function Get_ContentTypeSpecified: WordBool; safecall;
    procedure Set_ContentTypeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_EncryptedContentTypeClassName: WideString; safecall;
    function EncryptedDataLength: Integer; safecall;
    function EncryptedDataGetItem(index: Integer): Byte; safecall;
    function EncryptedDataSetItem(index: Integer; value: Byte): WordBool; safecall;
    function EncryptedDataAddItem(value: Byte): WordBool; safecall;
    function EncryptedDataRemoveItem(index: Integer): WordBool; safecall;
    function EncryptedDataInsertItem(index: Integer; value: Byte): Integer; safecall;
    property ContentEncryptionAlgorithm: IAlgorithmIdentifier read Get_ContentEncryptionAlgorithm write _Set_ContentEncryptionAlgorithm;
    property EncryptedData: PSafeArray read Get_EncryptedData write Set_EncryptedData;
    property ContentType: WideString read Get_ContentType write Set_ContentType;
    property ContentEncryptionAlgorithmSpecified: WordBool read Get_ContentEncryptionAlgorithmSpecified write Set_ContentEncryptionAlgorithmSpecified;
    property EncryptedDataSpecified: WordBool read Get_EncryptedDataSpecified write Set_EncryptedDataSpecified;
    property ContentTypeSpecified: WordBool read Get_ContentTypeSpecified write Set_ContentTypeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property EncryptedContentTypeClassName: WideString read Get_EncryptedContentTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IEncryptedContentTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {FE53185F-A040-4543-BFEA-62AB2646E4B3}
// *********************************************************************//
  IEncryptedContentTypeDisp = dispinterface
    ['{FE53185F-A040-4543-BFEA-62AB2646E4B3}']
    property ContentEncryptionAlgorithm: IAlgorithmIdentifier dispid 1;
    property EncryptedData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property ContentType: WideString dispid 3;
    property ContentEncryptionAlgorithmSpecified: WordBool dispid 5;
    property EncryptedDataSpecified: WordBool dispid 6;
    property ContentTypeSpecified: WordBool dispid 13;
    property ObjectHasBeenSet: WordBool readonly dispid 14;
    property EncryptedContentTypeClassName: WideString readonly dispid 15;
    function EncryptedDataLength: Integer; dispid 7;
    function EncryptedDataGetItem(index: Integer): Byte; dispid 8;
    function EncryptedDataSetItem(index: Integer; value: Byte): WordBool; dispid 9;
    function EncryptedDataAddItem(value: Byte): WordBool; dispid 10;
    function EncryptedDataRemoveItem(index: Integer): WordBool; dispid 11;
    function EncryptedDataInsertItem(index: Integer; value: Byte): Integer; dispid 12;
  end;

// *********************************************************************//
// Interface :   IEnvelopedDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B07AB1AF-5E11-468F-AA32-574A45F3B00D}
// *********************************************************************//
  IEnvelopedDataType = interface(IDispatch)
    ['{B07AB1AF-5E11-468F-AA32-574A45F3B00D}']
    function Get_Items: PSafeArray; safecall;
    procedure Set_Items(pRetVal: PSafeArray); safecall;
    function Get_EncryptedContent: IEncryptedContentType; safecall;
    procedure _Set_EncryptedContent(const pRetVal: IEncryptedContentType); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_ItemsSpecified: WordBool; safecall;
    procedure Set_ItemsSpecified(pRetVal: WordBool); safecall;
    function Get_EncryptedContentSpecified: WordBool; safecall;
    procedure Set_EncryptedContentSpecified(pRetVal: WordBool); safecall;
    function Get_VersionDefaultValue: WideString; safecall;
    function Get_VersionSpecified: WordBool; safecall;
    procedure Set_VersionSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_EnvelopedDataTypeClassName: WideString; safecall;
    function ItemsLength: Integer; safecall;
    function ItemsGetItem(index: Integer): OleVariant; safecall;
    function ItemsSetItem(index: Integer; value: OleVariant): WordBool; safecall;
    function ItemsAddItem(value: OleVariant): WordBool; safecall;
    function ItemsRemoveItem(index: Integer): WordBool; safecall;
    function ItemsInsertItem(index: Integer; value: OleVariant): Integer; safecall;
    property Items: PSafeArray read Get_Items write Set_Items;
    property EncryptedContent: IEncryptedContentType read Get_EncryptedContent write _Set_EncryptedContent;
    property Version: WideString read Get_Version write Set_Version;
    property ItemsSpecified: WordBool read Get_ItemsSpecified write Set_ItemsSpecified;
    property EncryptedContentSpecified: WordBool read Get_EncryptedContentSpecified write Set_EncryptedContentSpecified;
    property VersionDefaultValue: WideString read Get_VersionDefaultValue;
    property VersionSpecified: WordBool read Get_VersionSpecified write Set_VersionSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property EnvelopedDataTypeClassName: WideString read Get_EnvelopedDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IEnvelopedDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B07AB1AF-5E11-468F-AA32-574A45F3B00D}
// *********************************************************************//
  IEnvelopedDataTypeDisp = dispinterface
    ['{B07AB1AF-5E11-468F-AA32-574A45F3B00D}']
    property Items: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property EncryptedContent: IEncryptedContentType dispid 3;
    property Version: WideString dispid 4;
    property ItemsSpecified: WordBool dispid 5;
    property EncryptedContentSpecified: WordBool dispid 12;
    property VersionDefaultValue: WideString readonly dispid 13;
    property VersionSpecified: WordBool dispid 14;
    property ObjectHasBeenSet: WordBool readonly dispid 15;
    property EnvelopedDataTypeClassName: WideString readonly dispid 16;
    function ItemsLength: Integer; dispid 6;
    function ItemsGetItem(index: Integer): OleVariant; dispid 7;
    function ItemsSetItem(index: Integer; value: OleVariant): WordBool; dispid 8;
    function ItemsAddItem(value: OleVariant): WordBool; dispid 9;
    function ItemsRemoveItem(index: Integer): WordBool; dispid 10;
    function ItemsInsertItem(index: Integer; value: OleVariant): Integer; dispid 11;
  end;

// *********************************************************************//
// Interface :   IIssuerType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {14E31B84-625C-48A2-BD9C-335B9BF09771}
// *********************************************************************//
  IIssuerType = interface(IDispatch)
    ['{14E31B84-625C-48A2-BD9C-335B9BF09771}']
    function Get_RelativeDistinguishedName: PSafeArray; safecall;
    procedure Set_RelativeDistinguishedName(pRetVal: PSafeArray); safecall;
    function Get_RelativeDistinguishedNameSpecified: WordBool; safecall;
    procedure Set_RelativeDistinguishedNameSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_IssuerTypeClassName: WideString; safecall;
    function RelativeDistinguishedNameLength: Integer; safecall;
    function RelativeDistinguishedNameGetItem(index: Integer): IRelativeDistinguishedNameType; safecall;
    function RelativeDistinguishedNameSetItem(index: Integer; 
                                              const value: IRelativeDistinguishedNameType): WordBool; safecall;
    function RelativeDistinguishedNameAddItem(const value: IRelativeDistinguishedNameType): WordBool; safecall;
    function RelativeDistinguishedNameRemoveItem(index: Integer): WordBool; safecall;
    function RelativeDistinguishedNameInsertItem(index: Integer; 
                                                 const value: IRelativeDistinguishedNameType): Integer; safecall;
    property RelativeDistinguishedName: PSafeArray read Get_RelativeDistinguishedName write Set_RelativeDistinguishedName;
    property RelativeDistinguishedNameSpecified: WordBool read Get_RelativeDistinguishedNameSpecified write Set_RelativeDistinguishedNameSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property IssuerTypeClassName: WideString read Get_IssuerTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IIssuerTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {14E31B84-625C-48A2-BD9C-335B9BF09771}
// *********************************************************************//
  IIssuerTypeDisp = dispinterface
    ['{14E31B84-625C-48A2-BD9C-335B9BF09771}']
    property RelativeDistinguishedName: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property RelativeDistinguishedNameSpecified: WordBool dispid 3;
    property ObjectHasBeenSet: WordBool readonly dispid 10;
    property IssuerTypeClassName: WideString readonly dispid 11;
    function RelativeDistinguishedNameLength: Integer; dispid 4;
    function RelativeDistinguishedNameGetItem(index: Integer): IRelativeDistinguishedNameType; dispid 5;
    function RelativeDistinguishedNameSetItem(index: Integer; 
                                              const value: IRelativeDistinguishedNameType): WordBool; dispid 6;
    function RelativeDistinguishedNameAddItem(const value: IRelativeDistinguishedNameType): WordBool; dispid 7;
    function RelativeDistinguishedNameRemoveItem(index: Integer): WordBool; dispid 8;
    function RelativeDistinguishedNameInsertItem(index: Integer; 
                                                 const value: IRelativeDistinguishedNameType): Integer; dispid 9;
  end;

// *********************************************************************//
// Interface :   INamedKeyEncryptedDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5E745556-663A-4A8A-B2C9-FE7235A60BE9}
// *********************************************************************//
  INamedKeyEncryptedDataType = interface(IDispatch)
    ['{5E745556-663A-4A8A-B2C9-FE7235A60BE9}']
    function Get_KeyName: WideString; safecall;
    procedure Set_KeyName(const pRetVal: WideString); safecall;
    function Get_EncryptedContent: IEncryptedContentType; safecall;
    procedure _Set_EncryptedContent(const pRetVal: IEncryptedContentType); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_KeyNameSpecified: WordBool; safecall;
    procedure Set_KeyNameSpecified(pRetVal: WordBool); safecall;
    function Get_EncryptedContentSpecified: WordBool; safecall;
    procedure Set_EncryptedContentSpecified(pRetVal: WordBool); safecall;
    function Get_VersionDefaultValue: WideString; safecall;
    function Get_VersionSpecified: WordBool; safecall;
    procedure Set_VersionSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_NamedKeyEncryptedDataTypeClassName: WideString; safecall;
    property KeyName: WideString read Get_KeyName write Set_KeyName;
    property EncryptedContent: IEncryptedContentType read Get_EncryptedContent write _Set_EncryptedContent;
    property Version: WideString read Get_Version write Set_Version;
    property KeyNameSpecified: WordBool read Get_KeyNameSpecified write Set_KeyNameSpecified;
    property EncryptedContentSpecified: WordBool read Get_EncryptedContentSpecified write Set_EncryptedContentSpecified;
    property VersionDefaultValue: WideString read Get_VersionDefaultValue;
    property VersionSpecified: WordBool read Get_VersionSpecified write Set_VersionSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property NamedKeyEncryptedDataTypeClassName: WideString read Get_NamedKeyEncryptedDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    INamedKeyEncryptedDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5E745556-663A-4A8A-B2C9-FE7235A60BE9}
// *********************************************************************//
  INamedKeyEncryptedDataTypeDisp = dispinterface
    ['{5E745556-663A-4A8A-B2C9-FE7235A60BE9}']
    property KeyName: WideString dispid 2;
    property EncryptedContent: IEncryptedContentType dispid 3;
    property Version: WideString dispid 4;
    property KeyNameSpecified: WordBool dispid 5;
    property EncryptedContentSpecified: WordBool dispid 6;
    property VersionDefaultValue: WideString readonly dispid 7;
    property VersionSpecified: WordBool dispid 8;
    property ObjectHasBeenSet: WordBool readonly dispid 9;
    property NamedKeyEncryptedDataTypeClassName: WideString readonly dispid 10;
  end;

// *********************************************************************//
// Interface :   ISignedDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7E13E64C-7695-4FBA-82A7-4E4237122C07}
// *********************************************************************//
  ISignedDataType = interface(IDispatch)
    ['{7E13E64C-7695-4FBA-82A7-4E4237122C07}']
    function Get_DigestAlgorithm: PSafeArray; safecall;
    procedure Set_DigestAlgorithm(pRetVal: PSafeArray); safecall;
    function Get_EncapsulatedContent: IEncapsulatedContentType; safecall;
    procedure _Set_EncapsulatedContent(const pRetVal: IEncapsulatedContentType); safecall;
    function Get_Certificate: PSafeArray; safecall;
    procedure Set_Certificate(pRetVal: PSafeArray); safecall;
    function Get_Signer: PSafeArray; safecall;
    procedure Set_Signer(pRetVal: PSafeArray); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_DigestAlgorithmSpecified: WordBool; safecall;
    procedure Set_DigestAlgorithmSpecified(pRetVal: WordBool); safecall;
    function Get_EncapsulatedContentSpecified: WordBool; safecall;
    procedure Set_EncapsulatedContentSpecified(pRetVal: WordBool); safecall;
    function Get_CertificateSpecified: WordBool; safecall;
    procedure Set_CertificateSpecified(pRetVal: WordBool); safecall;
    function Get_SignerSpecified: WordBool; safecall;
    procedure Set_SignerSpecified(pRetVal: WordBool); safecall;
    function Get_VersionDefaultValue: WideString; safecall;
    function Get_VersionSpecified: WordBool; safecall;
    procedure Set_VersionSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SignedDataTypeClassName: WideString; safecall;
    function DigestAlgorithmLength: Integer; safecall;
    function DigestAlgorithmGetItem(index: Integer): IAlgorithmIdentifier; safecall;
    function DigestAlgorithmSetItem(index: Integer; const value: IAlgorithmIdentifier): WordBool; safecall;
    function DigestAlgorithmAddItem(const value: IAlgorithmIdentifier): WordBool; safecall;
    function DigestAlgorithmRemoveItem(index: Integer): WordBool; safecall;
    function DigestAlgorithmInsertItem(index: Integer; const value: IAlgorithmIdentifier): Integer; safecall;
    function CertificateLength: Integer; safecall;
    function CertificateGetItem(index: Integer): Byte; safecall;
    function CertificateSetItem(index: Integer; value: Byte): WordBool; safecall;
    function CertificateAddItem(value: Byte): WordBool; safecall;
    function CertificateRemoveItem(index: Integer): WordBool; safecall;
    function CertificateInsertItem(index: Integer; value: Byte): Integer; safecall;
    function SignerLength: Integer; safecall;
    function SignerGetItem(index: Integer): ISignerType; safecall;
    function SignerSetItem(index: Integer; const value: ISignerType): WordBool; safecall;
    function SignerAddItem(const value: ISignerType): WordBool; safecall;
    function SignerRemoveItem(index: Integer): WordBool; safecall;
    function SignerInsertItem(index: Integer; const value: ISignerType): Integer; safecall;
    property DigestAlgorithm: PSafeArray read Get_DigestAlgorithm write Set_DigestAlgorithm;
    property EncapsulatedContent: IEncapsulatedContentType read Get_EncapsulatedContent write _Set_EncapsulatedContent;
    property Certificate: PSafeArray read Get_Certificate write Set_Certificate;
    property Signer: PSafeArray read Get_Signer write Set_Signer;
    property Version: WideString read Get_Version write Set_Version;
    property DigestAlgorithmSpecified: WordBool read Get_DigestAlgorithmSpecified write Set_DigestAlgorithmSpecified;
    property EncapsulatedContentSpecified: WordBool read Get_EncapsulatedContentSpecified write Set_EncapsulatedContentSpecified;
    property CertificateSpecified: WordBool read Get_CertificateSpecified write Set_CertificateSpecified;
    property SignerSpecified: WordBool read Get_SignerSpecified write Set_SignerSpecified;
    property VersionDefaultValue: WideString read Get_VersionDefaultValue;
    property VersionSpecified: WordBool read Get_VersionSpecified write Set_VersionSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SignedDataTypeClassName: WideString read Get_SignedDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISignedDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7E13E64C-7695-4FBA-82A7-4E4237122C07}
// *********************************************************************//
  ISignedDataTypeDisp = dispinterface
    ['{7E13E64C-7695-4FBA-82A7-4E4237122C07}']
    property DigestAlgorithm: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property EncapsulatedContent: IEncapsulatedContentType dispid 3;
    property Certificate: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property Signer: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property Version: WideString dispid 6;
    property DigestAlgorithmSpecified: WordBool dispid 7;
    property EncapsulatedContentSpecified: WordBool dispid 14;
    property CertificateSpecified: WordBool dispid 15;
    property SignerSpecified: WordBool dispid 22;
    property VersionDefaultValue: WideString readonly dispid 29;
    property VersionSpecified: WordBool dispid 30;
    property ObjectHasBeenSet: WordBool readonly dispid 31;
    property SignedDataTypeClassName: WideString readonly dispid 32;
    function DigestAlgorithmLength: Integer; dispid 8;
    function DigestAlgorithmGetItem(index: Integer): IAlgorithmIdentifier; dispid 9;
    function DigestAlgorithmSetItem(index: Integer; const value: IAlgorithmIdentifier): WordBool; dispid 10;
    function DigestAlgorithmAddItem(const value: IAlgorithmIdentifier): WordBool; dispid 11;
    function DigestAlgorithmRemoveItem(index: Integer): WordBool; dispid 12;
    function DigestAlgorithmInsertItem(index: Integer; const value: IAlgorithmIdentifier): Integer; dispid 13;
    function CertificateLength: Integer; dispid 16;
    function CertificateGetItem(index: Integer): Byte; dispid 17;
    function CertificateSetItem(index: Integer; value: Byte): WordBool; dispid 18;
    function CertificateAddItem(value: Byte): WordBool; dispid 19;
    function CertificateRemoveItem(index: Integer): WordBool; dispid 20;
    function CertificateInsertItem(index: Integer; value: Byte): Integer; dispid 21;
    function SignerLength: Integer; dispid 23;
    function SignerGetItem(index: Integer): ISignerType; dispid 24;
    function SignerSetItem(index: Integer; const value: ISignerType): WordBool; dispid 25;
    function SignerAddItem(const value: ISignerType): WordBool; dispid 26;
    function SignerRemoveItem(index: Integer): WordBool; dispid 27;
    function SignerInsertItem(index: Integer; const value: ISignerType): Integer; dispid 28;
  end;

// *********************************************************************//
// Interface :   ISignerType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F7C84837-871D-4278-84F1-6A0133FC8539}
// *********************************************************************//
  ISignerType = interface(IDispatch)
    ['{F7C84837-871D-4278-84F1-6A0133FC8539}']
    function Get_SignerIdentifier: ISignerIdentifierType; safecall;
    procedure _Set_SignerIdentifier(const pRetVal: ISignerIdentifierType); safecall;
    function Get_DigestAlgorithm: IAlgorithmIdentifier; safecall;
    procedure _Set_DigestAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
    function Get_SignatureAlgorithm: IAlgorithmIdentifier; safecall;
    procedure _Set_SignatureAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
    function Get_Signature: PSafeArray; safecall;
    procedure Set_Signature(pRetVal: PSafeArray); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_SignerIdentifierSpecified: WordBool; safecall;
    procedure Set_SignerIdentifierSpecified(pRetVal: WordBool); safecall;
    function Get_DigestAlgorithmSpecified: WordBool; safecall;
    procedure Set_DigestAlgorithmSpecified(pRetVal: WordBool); safecall;
    function Get_SignatureAlgorithmSpecified: WordBool; safecall;
    procedure Set_SignatureAlgorithmSpecified(pRetVal: WordBool); safecall;
    function Get_SignatureSpecified: WordBool; safecall;
    procedure Set_SignatureSpecified(pRetVal: WordBool); safecall;
    function Get_VersionDefaultValue: WideString; safecall;
    function Get_VersionSpecified: WordBool; safecall;
    procedure Set_VersionSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SignerTypeClassName: WideString; safecall;
    function SignatureLength: Integer; safecall;
    function SignatureGetItem(index: Integer): Byte; safecall;
    function SignatureSetItem(index: Integer; value: Byte): WordBool; safecall;
    function SignatureAddItem(value: Byte): WordBool; safecall;
    function SignatureRemoveItem(index: Integer): WordBool; safecall;
    function SignatureInsertItem(index: Integer; value: Byte): Integer; safecall;
    property SignerIdentifier: ISignerIdentifierType read Get_SignerIdentifier write _Set_SignerIdentifier;
    property DigestAlgorithm: IAlgorithmIdentifier read Get_DigestAlgorithm write _Set_DigestAlgorithm;
    property SignatureAlgorithm: IAlgorithmIdentifier read Get_SignatureAlgorithm write _Set_SignatureAlgorithm;
    property Signature: PSafeArray read Get_Signature write Set_Signature;
    property Version: WideString read Get_Version write Set_Version;
    property SignerIdentifierSpecified: WordBool read Get_SignerIdentifierSpecified write Set_SignerIdentifierSpecified;
    property DigestAlgorithmSpecified: WordBool read Get_DigestAlgorithmSpecified write Set_DigestAlgorithmSpecified;
    property SignatureAlgorithmSpecified: WordBool read Get_SignatureAlgorithmSpecified write Set_SignatureAlgorithmSpecified;
    property SignatureSpecified: WordBool read Get_SignatureSpecified write Set_SignatureSpecified;
    property VersionDefaultValue: WideString read Get_VersionDefaultValue;
    property VersionSpecified: WordBool read Get_VersionSpecified write Set_VersionSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SignerTypeClassName: WideString read Get_SignerTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISignerTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F7C84837-871D-4278-84F1-6A0133FC8539}
// *********************************************************************//
  ISignerTypeDisp = dispinterface
    ['{F7C84837-871D-4278-84F1-6A0133FC8539}']
    property SignerIdentifier: ISignerIdentifierType dispid 2;
    property DigestAlgorithm: IAlgorithmIdentifier dispid 3;
    property SignatureAlgorithm: IAlgorithmIdentifier dispid 4;
    property Signature: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property Version: WideString dispid 6;
    property SignerIdentifierSpecified: WordBool dispid 7;
    property DigestAlgorithmSpecified: WordBool dispid 8;
    property SignatureAlgorithmSpecified: WordBool dispid 9;
    property SignatureSpecified: WordBool dispid 10;
    property VersionDefaultValue: WideString readonly dispid 17;
    property VersionSpecified: WordBool dispid 18;
    property ObjectHasBeenSet: WordBool readonly dispid 19;
    property SignerTypeClassName: WideString readonly dispid 20;
    function SignatureLength: Integer; dispid 11;
    function SignatureGetItem(index: Integer): Byte; dispid 12;
    function SignatureSetItem(index: Integer; value: Byte): WordBool; dispid 13;
    function SignatureAddItem(value: Byte): WordBool; dispid 14;
    function SignatureRemoveItem(index: Integer): WordBool; dispid 15;
    function SignatureInsertItem(index: Integer; value: Byte): Integer; dispid 16;
  end;

// *********************************************************************//
// Interface :   ISignerIdentifierType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {48F3EB08-A25F-40DF-88E1-6F08223EBFF3}
// *********************************************************************//
  ISignerIdentifierType = interface(IDispatch)
    ['{48F3EB08-A25F-40DF-88E1-6F08223EBFF3}']
    function Get_IssuerAndSerialNumber: IIssuerAndSerialNumberType; safecall;
    procedure _Set_IssuerAndSerialNumber(const pRetVal: IIssuerAndSerialNumberType); safecall;
    function Get_IssuerAndSerialNumberSpecified: WordBool; safecall;
    procedure Set_IssuerAndSerialNumberSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SignerIdentifierTypeClassName: WideString; safecall;
    property IssuerAndSerialNumber: IIssuerAndSerialNumberType read Get_IssuerAndSerialNumber write _Set_IssuerAndSerialNumber;
    property IssuerAndSerialNumberSpecified: WordBool read Get_IssuerAndSerialNumberSpecified write Set_IssuerAndSerialNumberSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SignerIdentifierTypeClassName: WideString read Get_SignerIdentifierTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISignerIdentifierTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {48F3EB08-A25F-40DF-88E1-6F08223EBFF3}
// *********************************************************************//
  ISignerIdentifierTypeDisp = dispinterface
    ['{48F3EB08-A25F-40DF-88E1-6F08223EBFF3}']
    property IssuerAndSerialNumber: IIssuerAndSerialNumberType dispid 1;
    property IssuerAndSerialNumberSpecified: WordBool dispid 3;
    property ObjectHasBeenSet: WordBool readonly dispid 4;
    property SignerIdentifierTypeClassName: WideString readonly dispid 5;
  end;

// *********************************************************************//
// Interface :   IContentInformationType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4CBD5240-95A1-4F0E-9662-D37A66AAF4A4}
// *********************************************************************//
  IContentInformationType = interface(IDispatch)
    ['{4CBD5240-95A1-4F0E-9662-D37A66AAF4A4}']
    function Get_Item: OleVariant; safecall;
    procedure _Set_Item(pRetVal: OleVariant); safecall;
    function Get_ContentType: WideString; safecall;
    procedure Set_ContentType(const pRetVal: WideString); safecall;
    function Get_ItemSpecified: WordBool; safecall;
    procedure Set_ItemSpecified(pRetVal: WordBool); safecall;
    function Get_ContentTypeSpecified: WordBool; safecall;
    procedure Set_ContentTypeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_ContentInformationTypeClassName: WideString; safecall;
    property Item: OleVariant read Get_Item write _Set_Item;
    property ContentType: WideString read Get_ContentType write Set_ContentType;
    property ItemSpecified: WordBool read Get_ItemSpecified write Set_ItemSpecified;
    property ContentTypeSpecified: WordBool read Get_ContentTypeSpecified write Set_ContentTypeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property ContentInformationTypeClassName: WideString read Get_ContentInformationTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IContentInformationTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4CBD5240-95A1-4F0E-9662-D37A66AAF4A4}
// *********************************************************************//
  IContentInformationTypeDisp = dispinterface
    ['{4CBD5240-95A1-4F0E-9662-D37A66AAF4A4}']
    property Item: OleVariant dispid 1;
    property ContentType: WideString dispid 2;
    property ItemSpecified: WordBool dispid 4;
    property ContentTypeSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property ContentInformationTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IAbortRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D93E3748-A956-4B97-89EE-CBA96B248C35}
// *********************************************************************//
  IAbortRequestType = interface(IDispatch)
    ['{D93E3748-A956-4B97-89EE-CBA96B248C35}']
    function Get_MessageReference: IMessageReferenceType; safecall;
    procedure _Set_MessageReference(const pRetVal: IMessageReferenceType); safecall;
    function Get_AbortReason: WideString; safecall;
    procedure Set_AbortReason(const pRetVal: WideString); safecall;
    function Get_DisplayOutput: IDisplayOutputType; safecall;
    procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
    function Get_MessageReferenceSpecified: WordBool; safecall;
    procedure Set_MessageReferenceSpecified(pRetVal: WordBool); safecall;
    function Get_AbortReasonSpecified: WordBool; safecall;
    procedure Set_AbortReasonSpecified(pRetVal: WordBool); safecall;
    function Get_DisplayOutputSpecified: WordBool; safecall;
    procedure Set_DisplayOutputSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_AbortRequestTypeClassName: WideString; safecall;
    property MessageReference: IMessageReferenceType read Get_MessageReference write _Set_MessageReference;
    property AbortReason: WideString read Get_AbortReason write Set_AbortReason;
    property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
    property MessageReferenceSpecified: WordBool read Get_MessageReferenceSpecified write Set_MessageReferenceSpecified;
    property AbortReasonSpecified: WordBool read Get_AbortReasonSpecified write Set_AbortReasonSpecified;
    property DisplayOutputSpecified: WordBool read Get_DisplayOutputSpecified write Set_DisplayOutputSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property AbortRequestTypeClassName: WideString read Get_AbortRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IAbortRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D93E3748-A956-4B97-89EE-CBA96B248C35}
// *********************************************************************//
  IAbortRequestTypeDisp = dispinterface
    ['{D93E3748-A956-4B97-89EE-CBA96B248C35}']
    property MessageReference: IMessageReferenceType dispid 1;
    property AbortReason: WideString dispid 2;
    property DisplayOutput: IDisplayOutputType dispid 3;
    property MessageReferenceSpecified: WordBool dispid 5;
    property AbortReasonSpecified: WordBool dispid 6;
    property DisplayOutputSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 8;
    property AbortRequestTypeClassName: WideString readonly dispid 9;
  end;

// *********************************************************************//
// Interface :   IMessageReferenceType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E017D402-6316-4DD0-B8EF-894B1739382A}
// *********************************************************************//
  IMessageReferenceType = interface(IDispatch)
    ['{E017D402-6316-4DD0-B8EF-894B1739382A}']
    function Get_MessageCategory: WideString; safecall;
    procedure Set_MessageCategory(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_MessageCategorySpecified: WordBool; safecall;
    procedure Set_MessageCategorySpecified(pRetVal: WordBool); safecall;
    function Get_ServiceIDSpecified: WordBool; safecall;
    procedure Set_ServiceIDSpecified(pRetVal: WordBool); safecall;
    function Get_DeviceIDSpecified: WordBool; safecall;
    procedure Set_DeviceIDSpecified(pRetVal: WordBool); safecall;
    function Get_SaleIDSpecified: WordBool; safecall;
    procedure Set_SaleIDSpecified(pRetVal: WordBool); safecall;
    function Get_POIIDSpecified: WordBool; safecall;
    procedure Set_POIIDSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_MessageReferenceTypeClassName: WideString; safecall;
    property MessageCategory: WideString read Get_MessageCategory write Set_MessageCategory;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property MessageCategorySpecified: WordBool read Get_MessageCategorySpecified write Set_MessageCategorySpecified;
    property ServiceIDSpecified: WordBool read Get_ServiceIDSpecified write Set_ServiceIDSpecified;
    property DeviceIDSpecified: WordBool read Get_DeviceIDSpecified write Set_DeviceIDSpecified;
    property SaleIDSpecified: WordBool read Get_SaleIDSpecified write Set_SaleIDSpecified;
    property POIIDSpecified: WordBool read Get_POIIDSpecified write Set_POIIDSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property MessageReferenceTypeClassName: WideString read Get_MessageReferenceTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IMessageReferenceTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E017D402-6316-4DD0-B8EF-894B1739382A}
// *********************************************************************//
  IMessageReferenceTypeDisp = dispinterface
    ['{E017D402-6316-4DD0-B8EF-894B1739382A}']
    property MessageCategory: WideString dispid 1;
    property ServiceID: WideString dispid 2;
    property DeviceID: WideString dispid 3;
    property SaleID: WideString dispid 4;
    property POIID: WideString dispid 5;
    property MessageCategorySpecified: WordBool dispid 7;
    property ServiceIDSpecified: WordBool dispid 8;
    property DeviceIDSpecified: WordBool dispid 9;
    property SaleIDSpecified: WordBool dispid 10;
    property POIIDSpecified: WordBool dispid 11;
    property ObjectHasBeenSet: WordBool readonly dispid 12;
    property MessageReferenceTypeClassName: WideString readonly dispid 13;
  end;

// *********************************************************************//
// Interface :   IAdminRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A3E8F8FE-23CB-440E-982A-8E37F565B0E9}
// *********************************************************************//
  IAdminRequestType = interface(IDispatch)
    ['{A3E8F8FE-23CB-440E-982A-8E37F565B0E9}']
    function Get_ServiceIdentification: WideString; safecall;
    procedure Set_ServiceIdentification(const pRetVal: WideString); safecall;
    function Get_ServiceIdentificationSpecified: WordBool; safecall;
    procedure Set_ServiceIdentificationSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_AdminRequestTypeClassName: WideString; safecall;
    property ServiceIdentification: WideString read Get_ServiceIdentification write Set_ServiceIdentification;
    property ServiceIdentificationSpecified: WordBool read Get_ServiceIdentificationSpecified write Set_ServiceIdentificationSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property AdminRequestTypeClassName: WideString read Get_AdminRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IAdminRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A3E8F8FE-23CB-440E-982A-8E37F565B0E9}
// *********************************************************************//
  IAdminRequestTypeDisp = dispinterface
    ['{A3E8F8FE-23CB-440E-982A-8E37F565B0E9}']
    property ServiceIdentification: WideString dispid 1;
    property ServiceIdentificationSpecified: WordBool dispid 3;
    property ObjectHasBeenSet: WordBool readonly dispid 4;
    property AdminRequestTypeClassName: WideString readonly dispid 5;
  end;

// *********************************************************************//
// Interface :   IAdminResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {12DD6E38-1996-429E-94A8-A0BEAFB692BD}
// *********************************************************************//
  IAdminResponseType = interface(IDispatch)
    ['{12DD6E38-1996-429E-94A8-A0BEAFB692BD}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_AdminResponseTypeClassName: WideString; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property AdminResponseTypeClassName: WideString read Get_AdminResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IAdminResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {12DD6E38-1996-429E-94A8-A0BEAFB692BD}
// *********************************************************************//
  IAdminResponseTypeDisp = dispinterface
    ['{12DD6E38-1996-429E-94A8-A0BEAFB692BD}']
    property Response: IResponseType dispid 1;
    property ResponseSpecified: WordBool dispid 3;
    property ObjectHasBeenSet: WordBool readonly dispid 4;
    property AdminResponseTypeClassName: WideString readonly dispid 5;
  end;

// *********************************************************************//
// Interface :   IAllowedProductType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {DFB251C8-07CA-4E08-883C-882EFE14CF18}
// *********************************************************************//
  IAllowedProductType = interface(IDispatch)
    ['{DFB251C8-07CA-4E08-883C-882EFE14CF18}']
    function Get_ProductLabel: WideString; safecall;
    procedure Set_ProductLabel(const pRetVal: WideString); safecall;
    function Get_AdditionalProductInfo: WideString; safecall;
    procedure Set_AdditionalProductInfo(const pRetVal: WideString); safecall;
    function Get_ProductCode: WideString; safecall;
    procedure Set_ProductCode(const pRetVal: WideString); safecall;
    function Get_EanUpc: WideString; safecall;
    procedure Set_EanUpc(const pRetVal: WideString); safecall;
    function Get_ProductLabelSpecified: WordBool; safecall;
    procedure Set_ProductLabelSpecified(pRetVal: WordBool); safecall;
    function Get_AdditionalProductInfoSpecified: WordBool; safecall;
    procedure Set_AdditionalProductInfoSpecified(pRetVal: WordBool); safecall;
    function Get_ProductCodeSpecified: WordBool; safecall;
    procedure Set_ProductCodeSpecified(pRetVal: WordBool); safecall;
    function Get_EanUpcSpecified: WordBool; safecall;
    procedure Set_EanUpcSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_AllowedProductTypeClassName: WideString; safecall;
    property ProductLabel: WideString read Get_ProductLabel write Set_ProductLabel;
    property AdditionalProductInfo: WideString read Get_AdditionalProductInfo write Set_AdditionalProductInfo;
    property ProductCode: WideString read Get_ProductCode write Set_ProductCode;
    property EanUpc: WideString read Get_EanUpc write Set_EanUpc;
    property ProductLabelSpecified: WordBool read Get_ProductLabelSpecified write Set_ProductLabelSpecified;
    property AdditionalProductInfoSpecified: WordBool read Get_AdditionalProductInfoSpecified write Set_AdditionalProductInfoSpecified;
    property ProductCodeSpecified: WordBool read Get_ProductCodeSpecified write Set_ProductCodeSpecified;
    property EanUpcSpecified: WordBool read Get_EanUpcSpecified write Set_EanUpcSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property AllowedProductTypeClassName: WideString read Get_AllowedProductTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IAllowedProductTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {DFB251C8-07CA-4E08-883C-882EFE14CF18}
// *********************************************************************//
  IAllowedProductTypeDisp = dispinterface
    ['{DFB251C8-07CA-4E08-883C-882EFE14CF18}']
    property ProductLabel: WideString dispid 1;
    property AdditionalProductInfo: WideString dispid 2;
    property ProductCode: WideString dispid 3;
    property EanUpc: WideString dispid 4;
    property ProductLabelSpecified: WordBool dispid 6;
    property AdditionalProductInfoSpecified: WordBool dispid 7;
    property ProductCodeSpecified: WordBool dispid 8;
    property EanUpcSpecified: WordBool dispid 9;
    property ObjectHasBeenSet: WordBool readonly dispid 10;
    property AllowedProductTypeClassName: WideString readonly dispid 11;
  end;

// *********************************************************************//
// Interface :   IAmountsReqType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BDDBFF81-1429-4458-A291-32CCAB0A5C83}
// *********************************************************************//
  IAmountsReqType = interface(IDispatch)
    ['{BDDBFF81-1429-4458-A291-32CCAB0A5C83}']
    function Get_Currency: WideString; safecall;
    procedure Set_Currency(const pRetVal: WideString); safecall;
    function Get_RequestedAmount: Double; safecall;
    procedure Set_RequestedAmount(pRetVal: Double); safecall;
    function Get_RequestedAmountSpecified: WordBool; safecall;
    procedure Set_RequestedAmountSpecified(pRetVal: WordBool); safecall;
    function Get_CashBackAmount: Double; safecall;
    procedure Set_CashBackAmount(pRetVal: Double); safecall;
    function Get_CashBackAmountSpecified: WordBool; safecall;
    procedure Set_CashBackAmountSpecified(pRetVal: WordBool); safecall;
    function Get_TipAmount: Double; safecall;
    procedure Set_TipAmount(pRetVal: Double); safecall;
    function Get_TipAmountSpecified: WordBool; safecall;
    procedure Set_TipAmountSpecified(pRetVal: WordBool); safecall;
    function Get_PaidAmount: Double; safecall;
    procedure Set_PaidAmount(pRetVal: Double); safecall;
    function Get_PaidAmountSpecified: WordBool; safecall;
    procedure Set_PaidAmountSpecified(pRetVal: WordBool); safecall;
    function Get_MinimumAmountToDeliver: Double; safecall;
    procedure Set_MinimumAmountToDeliver(pRetVal: Double); safecall;
    function Get_MinimumAmountToDeliverSpecified: WordBool; safecall;
    procedure Set_MinimumAmountToDeliverSpecified(pRetVal: WordBool); safecall;
    function Get_MaximumCashBackAmount: Double; safecall;
    procedure Set_MaximumCashBackAmount(pRetVal: Double); safecall;
    function Get_MaximumCashBackAmountSpecified: WordBool; safecall;
    procedure Set_MaximumCashBackAmountSpecified(pRetVal: WordBool); safecall;
    function Get_MinimumSplitAmount: Double; safecall;
    procedure Set_MinimumSplitAmount(pRetVal: Double); safecall;
    function Get_MinimumSplitAmountSpecified: WordBool; safecall;
    procedure Set_MinimumSplitAmountSpecified(pRetVal: WordBool); safecall;
    function Get_CurrencySpecified: WordBool; safecall;
    procedure Set_CurrencySpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_AmountsReqTypeClassName: WideString; safecall;
    property Currency: WideString read Get_Currency write Set_Currency;
    property RequestedAmount: Double read Get_RequestedAmount write Set_RequestedAmount;
    property RequestedAmountSpecified: WordBool read Get_RequestedAmountSpecified write Set_RequestedAmountSpecified;
    property CashBackAmount: Double read Get_CashBackAmount write Set_CashBackAmount;
    property CashBackAmountSpecified: WordBool read Get_CashBackAmountSpecified write Set_CashBackAmountSpecified;
    property TipAmount: Double read Get_TipAmount write Set_TipAmount;
    property TipAmountSpecified: WordBool read Get_TipAmountSpecified write Set_TipAmountSpecified;
    property PaidAmount: Double read Get_PaidAmount write Set_PaidAmount;
    property PaidAmountSpecified: WordBool read Get_PaidAmountSpecified write Set_PaidAmountSpecified;
    property MinimumAmountToDeliver: Double read Get_MinimumAmountToDeliver write Set_MinimumAmountToDeliver;
    property MinimumAmountToDeliverSpecified: WordBool read Get_MinimumAmountToDeliverSpecified write Set_MinimumAmountToDeliverSpecified;
    property MaximumCashBackAmount: Double read Get_MaximumCashBackAmount write Set_MaximumCashBackAmount;
    property MaximumCashBackAmountSpecified: WordBool read Get_MaximumCashBackAmountSpecified write Set_MaximumCashBackAmountSpecified;
    property MinimumSplitAmount: Double read Get_MinimumSplitAmount write Set_MinimumSplitAmount;
    property MinimumSplitAmountSpecified: WordBool read Get_MinimumSplitAmountSpecified write Set_MinimumSplitAmountSpecified;
    property CurrencySpecified: WordBool read Get_CurrencySpecified write Set_CurrencySpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property AmountsReqTypeClassName: WideString read Get_AmountsReqTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IAmountsReqTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BDDBFF81-1429-4458-A291-32CCAB0A5C83}
// *********************************************************************//
  IAmountsReqTypeDisp = dispinterface
    ['{BDDBFF81-1429-4458-A291-32CCAB0A5C83}']
    property Currency: WideString dispid 1;
    property RequestedAmount: Double dispid 2;
    property RequestedAmountSpecified: WordBool dispid 3;
    property CashBackAmount: Double dispid 4;
    property CashBackAmountSpecified: WordBool dispid 5;
    property TipAmount: Double dispid 6;
    property TipAmountSpecified: WordBool dispid 7;
    property PaidAmount: Double dispid 8;
    property PaidAmountSpecified: WordBool dispid 9;
    property MinimumAmountToDeliver: Double dispid 10;
    property MinimumAmountToDeliverSpecified: WordBool dispid 11;
    property MaximumCashBackAmount: Double dispid 12;
    property MaximumCashBackAmountSpecified: WordBool dispid 13;
    property MinimumSplitAmount: Double dispid 14;
    property MinimumSplitAmountSpecified: WordBool dispid 15;
    property CurrencySpecified: WordBool dispid 17;
    property ObjectHasBeenSet: WordBool readonly dispid 18;
    property AmountsReqTypeClassName: WideString readonly dispid 19;
  end;

// *********************************************************************//
// Interface :   IAmountsRespType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4761C08B-82B5-4920-890E-3327A3A5A658}
// *********************************************************************//
  IAmountsRespType = interface(IDispatch)
    ['{4761C08B-82B5-4920-890E-3327A3A5A658}']
    function Get_Currency: WideString; safecall;
    procedure Set_Currency(const pRetVal: WideString); safecall;
    function Get_AuthorizedAmount: Double; safecall;
    procedure Set_AuthorizedAmount(pRetVal: Double); safecall;
    function Get_TotalRebatesAmount: Double; safecall;
    procedure Set_TotalRebatesAmount(pRetVal: Double); safecall;
    function Get_TotalRebatesAmountSpecified: WordBool; safecall;
    procedure Set_TotalRebatesAmountSpecified(pRetVal: WordBool); safecall;
    function Get_TotalFeesAmount: Double; safecall;
    procedure Set_TotalFeesAmount(pRetVal: Double); safecall;
    function Get_TotalFeesAmountSpecified: WordBool; safecall;
    procedure Set_TotalFeesAmountSpecified(pRetVal: WordBool); safecall;
    function Get_CashBackAmount: Double; safecall;
    procedure Set_CashBackAmount(pRetVal: Double); safecall;
    function Get_CashBackAmountSpecified: WordBool; safecall;
    procedure Set_CashBackAmountSpecified(pRetVal: WordBool); safecall;
    function Get_TipAmount: Double; safecall;
    procedure Set_TipAmount(pRetVal: Double); safecall;
    function Get_TipAmountSpecified: WordBool; safecall;
    procedure Set_TipAmountSpecified(pRetVal: WordBool); safecall;
    function Get_CurrencySpecified: WordBool; safecall;
    procedure Set_CurrencySpecified(pRetVal: WordBool); safecall;
    function Get_AuthorizedAmountSpecified: WordBool; safecall;
    procedure Set_AuthorizedAmountSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_AmountsRespTypeClassName: WideString; safecall;
    property Currency: WideString read Get_Currency write Set_Currency;
    property AuthorizedAmount: Double read Get_AuthorizedAmount write Set_AuthorizedAmount;
    property TotalRebatesAmount: Double read Get_TotalRebatesAmount write Set_TotalRebatesAmount;
    property TotalRebatesAmountSpecified: WordBool read Get_TotalRebatesAmountSpecified write Set_TotalRebatesAmountSpecified;
    property TotalFeesAmount: Double read Get_TotalFeesAmount write Set_TotalFeesAmount;
    property TotalFeesAmountSpecified: WordBool read Get_TotalFeesAmountSpecified write Set_TotalFeesAmountSpecified;
    property CashBackAmount: Double read Get_CashBackAmount write Set_CashBackAmount;
    property CashBackAmountSpecified: WordBool read Get_CashBackAmountSpecified write Set_CashBackAmountSpecified;
    property TipAmount: Double read Get_TipAmount write Set_TipAmount;
    property TipAmountSpecified: WordBool read Get_TipAmountSpecified write Set_TipAmountSpecified;
    property CurrencySpecified: WordBool read Get_CurrencySpecified write Set_CurrencySpecified;
    property AuthorizedAmountSpecified: WordBool read Get_AuthorizedAmountSpecified write Set_AuthorizedAmountSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property AmountsRespTypeClassName: WideString read Get_AmountsRespTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IAmountsRespTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4761C08B-82B5-4920-890E-3327A3A5A658}
// *********************************************************************//
  IAmountsRespTypeDisp = dispinterface
    ['{4761C08B-82B5-4920-890E-3327A3A5A658}']
    property Currency: WideString dispid 1;
    property AuthorizedAmount: Double dispid 2;
    property TotalRebatesAmount: Double dispid 3;
    property TotalRebatesAmountSpecified: WordBool dispid 4;
    property TotalFeesAmount: Double dispid 5;
    property TotalFeesAmountSpecified: WordBool dispid 6;
    property CashBackAmount: Double dispid 7;
    property CashBackAmountSpecified: WordBool dispid 8;
    property TipAmount: Double dispid 9;
    property TipAmountSpecified: WordBool dispid 10;
    property CurrencySpecified: WordBool dispid 12;
    property AuthorizedAmountSpecified: WordBool dispid 13;
    property ObjectHasBeenSet: WordBool readonly dispid 14;
    property AmountsRespTypeClassName: WideString readonly dispid 15;
  end;

// *********************************************************************//
// Interface :   IAreaSizeType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6F8060AB-F530-4753-8FBD-404893852F36}
// *********************************************************************//
  IAreaSizeType = interface(IDispatch)
    ['{6F8060AB-F530-4753-8FBD-404893852F36}']
    function Get_X: WideString; safecall;
    procedure Set_X(const pRetVal: WideString); safecall;
    function Get_Y: WideString; safecall;
    procedure Set_Y(const pRetVal: WideString); safecall;
    function Get_XSpecified: WordBool; safecall;
    procedure Set_XSpecified(pRetVal: WordBool); safecall;
    function Get_YSpecified: WordBool; safecall;
    procedure Set_YSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_AreaSizeTypeClassName: WideString; safecall;
    property X: WideString read Get_X write Set_X;
    property Y: WideString read Get_Y write Set_Y;
    property XSpecified: WordBool read Get_XSpecified write Set_XSpecified;
    property YSpecified: WordBool read Get_YSpecified write Set_YSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property AreaSizeTypeClassName: WideString read Get_AreaSizeTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IAreaSizeTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6F8060AB-F530-4753-8FBD-404893852F36}
// *********************************************************************//
  IAreaSizeTypeDisp = dispinterface
    ['{6F8060AB-F530-4753-8FBD-404893852F36}']
    property X: WideString dispid 1;
    property Y: WideString dispid 2;
    property XSpecified: WordBool dispid 4;
    property YSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property AreaSizeTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IBalanceInquiryRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4C22034D-5458-4CF9-A909-B28942F5A5B7}
// *********************************************************************//
  IBalanceInquiryRequestType = interface(IDispatch)
    ['{4C22034D-5458-4CF9-A909-B28942F5A5B7}']
    function Get_PaymentAccountReq: IPaymentAccountReqType; safecall;
    procedure _Set_PaymentAccountReq(const pRetVal: IPaymentAccountReqType); safecall;
    function Get_LoyaltyAccountReq: ILoyaltyAccountReqType; safecall;
    procedure _Set_LoyaltyAccountReq(const pRetVal: ILoyaltyAccountReqType); safecall;
    function Get_PaymentAccountReqSpecified: WordBool; safecall;
    procedure Set_PaymentAccountReqSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyAccountReqSpecified: WordBool; safecall;
    procedure Set_LoyaltyAccountReqSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_BalanceInquiryRequestTypeClassName: WideString; safecall;
    property PaymentAccountReq: IPaymentAccountReqType read Get_PaymentAccountReq write _Set_PaymentAccountReq;
    property LoyaltyAccountReq: ILoyaltyAccountReqType read Get_LoyaltyAccountReq write _Set_LoyaltyAccountReq;
    property PaymentAccountReqSpecified: WordBool read Get_PaymentAccountReqSpecified write Set_PaymentAccountReqSpecified;
    property LoyaltyAccountReqSpecified: WordBool read Get_LoyaltyAccountReqSpecified write Set_LoyaltyAccountReqSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property BalanceInquiryRequestTypeClassName: WideString read Get_BalanceInquiryRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IBalanceInquiryRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4C22034D-5458-4CF9-A909-B28942F5A5B7}
// *********************************************************************//
  IBalanceInquiryRequestTypeDisp = dispinterface
    ['{4C22034D-5458-4CF9-A909-B28942F5A5B7}']
    property PaymentAccountReq: IPaymentAccountReqType dispid 1;
    property LoyaltyAccountReq: ILoyaltyAccountReqType dispid 2;
    property PaymentAccountReqSpecified: WordBool dispid 4;
    property LoyaltyAccountReqSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property BalanceInquiryRequestTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IPaymentAccountReqType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3C99F363-F01A-43D6-AADF-223DED9B6FEE}
// *********************************************************************//
  IPaymentAccountReqType = interface(IDispatch)
    ['{3C99F363-F01A-43D6-AADF-223DED9B6FEE}']
    function Get_CardAcquisitionReference: ITransactionIdentificationType; safecall;
    procedure _Set_CardAcquisitionReference(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_PaymentInstrumentData: IPaymentInstrumentDataType; safecall;
    procedure _Set_PaymentInstrumentData(const pRetVal: IPaymentInstrumentDataType); safecall;
    function Get_AccountType: WideString; safecall;
    procedure Set_AccountType(const pRetVal: WideString); safecall;
    function Get_CardAcquisitionReferenceSpecified: WordBool; safecall;
    procedure Set_CardAcquisitionReferenceSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentInstrumentDataSpecified: WordBool; safecall;
    procedure Set_PaymentInstrumentDataSpecified(pRetVal: WordBool); safecall;
    function Get_AccountTypeDefaultValue: WideString; safecall;
    function Get_AccountTypeSpecified: WordBool; safecall;
    procedure Set_AccountTypeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PaymentAccountReqTypeClassName: WideString; safecall;
    property CardAcquisitionReference: ITransactionIdentificationType read Get_CardAcquisitionReference write _Set_CardAcquisitionReference;
    property PaymentInstrumentData: IPaymentInstrumentDataType read Get_PaymentInstrumentData write _Set_PaymentInstrumentData;
    property AccountType: WideString read Get_AccountType write Set_AccountType;
    property CardAcquisitionReferenceSpecified: WordBool read Get_CardAcquisitionReferenceSpecified write Set_CardAcquisitionReferenceSpecified;
    property PaymentInstrumentDataSpecified: WordBool read Get_PaymentInstrumentDataSpecified write Set_PaymentInstrumentDataSpecified;
    property AccountTypeDefaultValue: WideString read Get_AccountTypeDefaultValue;
    property AccountTypeSpecified: WordBool read Get_AccountTypeSpecified write Set_AccountTypeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PaymentAccountReqTypeClassName: WideString read Get_PaymentAccountReqTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPaymentAccountReqTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3C99F363-F01A-43D6-AADF-223DED9B6FEE}
// *********************************************************************//
  IPaymentAccountReqTypeDisp = dispinterface
    ['{3C99F363-F01A-43D6-AADF-223DED9B6FEE}']
    property CardAcquisitionReference: ITransactionIdentificationType dispid 2;
    property PaymentInstrumentData: IPaymentInstrumentDataType dispid 3;
    property AccountType: WideString dispid 4;
    property CardAcquisitionReferenceSpecified: WordBool dispid 5;
    property PaymentInstrumentDataSpecified: WordBool dispid 6;
    property AccountTypeDefaultValue: WideString readonly dispid 7;
    property AccountTypeSpecified: WordBool dispid 8;
    property ObjectHasBeenSet: WordBool readonly dispid 9;
    property PaymentAccountReqTypeClassName: WideString readonly dispid 10;
  end;

// *********************************************************************//
// Interface :   ITransactionIdentificationType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {661750DC-9762-485A-B70C-930F0DE1D0F0}
// *********************************************************************//
  ITransactionIdentificationType = interface(IDispatch)
    ['{661750DC-9762-485A-B70C-930F0DE1D0F0}']
    function Get_TransactionID: WideString; safecall;
    procedure Set_TransactionID(const pRetVal: WideString); safecall;
    function Get_TimeStamp: WideString; safecall;
    procedure Set_TimeStamp(const pRetVal: WideString); safecall;
    function Get_TransactionIDSpecified: WordBool; safecall;
    procedure Set_TransactionIDSpecified(pRetVal: WordBool); safecall;
    function Get_TimeStampSpecified: WordBool; safecall;
    procedure Set_TimeStampSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_TransactionIdentificationTypeClassName: WideString; safecall;
    property TransactionID: WideString read Get_TransactionID write Set_TransactionID;
    property TimeStamp: WideString read Get_TimeStamp write Set_TimeStamp;
    property TransactionIDSpecified: WordBool read Get_TransactionIDSpecified write Set_TransactionIDSpecified;
    property TimeStampSpecified: WordBool read Get_TimeStampSpecified write Set_TimeStampSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property TransactionIdentificationTypeClassName: WideString read Get_TransactionIdentificationTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ITransactionIdentificationTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {661750DC-9762-485A-B70C-930F0DE1D0F0}
// *********************************************************************//
  ITransactionIdentificationTypeDisp = dispinterface
    ['{661750DC-9762-485A-B70C-930F0DE1D0F0}']
    property TransactionID: WideString dispid 1;
    property TimeStamp: WideString dispid 2;
    property TransactionIDSpecified: WordBool dispid 4;
    property TimeStampSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property TransactionIdentificationTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IPaymentInstrumentDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D2995B18-6B09-44AE-A401-75EA05C580B7}
// *********************************************************************//
  IPaymentInstrumentDataType = interface(IDispatch)
    ['{D2995B18-6B09-44AE-A401-75EA05C580B7}']
    function Get_CardData: ICardDataType; safecall;
    procedure _Set_CardData(const pRetVal: ICardDataType); safecall;
    function Get_CheckData: ICheckDataType; safecall;
    procedure _Set_CheckData(const pRetVal: ICheckDataType); safecall;
    function Get_MobileData: IMobileDataType; safecall;
    procedure _Set_MobileData(const pRetVal: IMobileDataType); safecall;
    function Get_PaymentInstrumentType: WideString; safecall;
    procedure Set_PaymentInstrumentType(const pRetVal: WideString); safecall;
    function Get_CardDataSpecified: WordBool; safecall;
    procedure Set_CardDataSpecified(pRetVal: WordBool); safecall;
    function Get_CheckDataSpecified: WordBool; safecall;
    procedure Set_CheckDataSpecified(pRetVal: WordBool); safecall;
    function Get_MobileDataSpecified: WordBool; safecall;
    procedure Set_MobileDataSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentInstrumentTypeSpecified: WordBool; safecall;
    procedure Set_PaymentInstrumentTypeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PaymentInstrumentDataTypeClassName: WideString; safecall;
    property CardData: ICardDataType read Get_CardData write _Set_CardData;
    property CheckData: ICheckDataType read Get_CheckData write _Set_CheckData;
    property MobileData: IMobileDataType read Get_MobileData write _Set_MobileData;
    property PaymentInstrumentType: WideString read Get_PaymentInstrumentType write Set_PaymentInstrumentType;
    property CardDataSpecified: WordBool read Get_CardDataSpecified write Set_CardDataSpecified;
    property CheckDataSpecified: WordBool read Get_CheckDataSpecified write Set_CheckDataSpecified;
    property MobileDataSpecified: WordBool read Get_MobileDataSpecified write Set_MobileDataSpecified;
    property PaymentInstrumentTypeSpecified: WordBool read Get_PaymentInstrumentTypeSpecified write Set_PaymentInstrumentTypeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PaymentInstrumentDataTypeClassName: WideString read Get_PaymentInstrumentDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPaymentInstrumentDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D2995B18-6B09-44AE-A401-75EA05C580B7}
// *********************************************************************//
  IPaymentInstrumentDataTypeDisp = dispinterface
    ['{D2995B18-6B09-44AE-A401-75EA05C580B7}']
    property CardData: ICardDataType dispid 1;
    property CheckData: ICheckDataType dispid 2;
    property MobileData: IMobileDataType dispid 3;
    property PaymentInstrumentType: WideString dispid 4;
    property CardDataSpecified: WordBool dispid 6;
    property CheckDataSpecified: WordBool dispid 7;
    property MobileDataSpecified: WordBool dispid 8;
    property PaymentInstrumentTypeSpecified: WordBool dispid 9;
    property ObjectHasBeenSet: WordBool readonly dispid 10;
    property PaymentInstrumentDataTypeClassName: WideString readonly dispid 11;
  end;

// *********************************************************************//
// Interface :   ICardDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {016C16FB-BC51-4303-B75F-6966323DE3CD}
// *********************************************************************//
  ICardDataType = interface(IDispatch)
    ['{016C16FB-BC51-4303-B75F-6966323DE3CD}']
    function Get_ProtectedCardData: IContentInformationType; safecall;
    procedure _Set_ProtectedCardData(const pRetVal: IContentInformationType); safecall;
    function Get_SensitiveCardData: ISensitiveCardDataType; safecall;
    procedure _Set_SensitiveCardData(const pRetVal: ISensitiveCardDataType); safecall;
    function Get_AllowedProductCode: PSafeArray; safecall;
    procedure Set_AllowedProductCode(pRetVal: PSafeArray); safecall;
    function Get_AllowedProduct: PSafeArray; safecall;
    procedure Set_AllowedProduct(pRetVal: PSafeArray); safecall;
    function Get_PaymentToken: IPaymentTokenType; safecall;
    procedure _Set_PaymentToken(const pRetVal: IPaymentTokenType); safecall;
    function Get_CustomerOrder: PSafeArray; safecall;
    procedure Set_CustomerOrder(pRetVal: PSafeArray); safecall;
    function Get_PaymentBrand: WideString; safecall;
    procedure Set_PaymentBrand(const pRetVal: WideString); safecall;
    function Get_MaskedPAN: WideString; safecall;
    procedure Set_MaskedPAN(const pRetVal: WideString); safecall;
    function Get_PaymentAccountRef: WideString; safecall;
    procedure Set_PaymentAccountRef(const pRetVal: WideString); safecall;
    function Get_EntryMode: PSafeArray; safecall;
    procedure Set_EntryMode(pRetVal: PSafeArray); safecall;
    function Get_CardCountryCode: WideString; safecall;
    procedure Set_CardCountryCode(const pRetVal: WideString); safecall;
    function Get_ProtectedCardDataSpecified: WordBool; safecall;
    procedure Set_ProtectedCardDataSpecified(pRetVal: WordBool); safecall;
    function Get_SensitiveCardDataSpecified: WordBool; safecall;
    procedure Set_SensitiveCardDataSpecified(pRetVal: WordBool); safecall;
    function Get_AllowedProductCodeSpecified: WordBool; safecall;
    procedure Set_AllowedProductCodeSpecified(pRetVal: WordBool); safecall;
    function Get_AllowedProductSpecified: WordBool; safecall;
    procedure Set_AllowedProductSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentTokenSpecified: WordBool; safecall;
    procedure Set_PaymentTokenSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerOrderSpecified: WordBool; safecall;
    procedure Set_CustomerOrderSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentBrandSpecified: WordBool; safecall;
    procedure Set_PaymentBrandSpecified(pRetVal: WordBool); safecall;
    function Get_MaskedPANSpecified: WordBool; safecall;
    procedure Set_MaskedPANSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentAccountRefSpecified: WordBool; safecall;
    procedure Set_PaymentAccountRefSpecified(pRetVal: WordBool); safecall;
    function Get_EntryModeSpecified: WordBool; safecall;
    procedure Set_EntryModeSpecified(pRetVal: WordBool); safecall;
    function Get_CardCountryCodeSpecified: WordBool; safecall;
    procedure Set_CardCountryCodeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CardDataTypeClassName: WideString; safecall;
    function AllowedProductCodeLength: Integer; safecall;
    function AllowedProductCodeGetItem(index: Integer): WideString; safecall;
    function AllowedProductCodeSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function AllowedProductCodeAddItem(const value: WideString): WordBool; safecall;
    function AllowedProductCodeRemoveItem(index: Integer): WordBool; safecall;
    function AllowedProductCodeInsertItem(index: Integer; const value: WideString): Integer; safecall;
    function AllowedProductLength: Integer; safecall;
    function AllowedProductGetItem(index: Integer): IAllowedProductType; safecall;
    function AllowedProductSetItem(index: Integer; const value: IAllowedProductType): WordBool; safecall;
    function AllowedProductAddItem(const value: IAllowedProductType): WordBool; safecall;
    function AllowedProductRemoveItem(index: Integer): WordBool; safecall;
    function AllowedProductInsertItem(index: Integer; const value: IAllowedProductType): Integer; safecall;
    function CustomerOrderLength: Integer; safecall;
    function CustomerOrderGetItem(index: Integer): ICustomerOrderType; safecall;
    function CustomerOrderSetItem(index: Integer; const value: ICustomerOrderType): WordBool; safecall;
    function CustomerOrderAddItem(const value: ICustomerOrderType): WordBool; safecall;
    function CustomerOrderRemoveItem(index: Integer): WordBool; safecall;
    function CustomerOrderInsertItem(index: Integer; const value: ICustomerOrderType): Integer; safecall;
    function EntryModeLength: Integer; safecall;
    function EntryModeGetItem(index: Integer): WideString; safecall;
    function EntryModeSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function EntryModeAddItem(const value: WideString): WordBool; safecall;
    function EntryModeRemoveItem(index: Integer): WordBool; safecall;
    function EntryModeInsertItem(index: Integer; const value: WideString): Integer; safecall;
    property ProtectedCardData: IContentInformationType read Get_ProtectedCardData write _Set_ProtectedCardData;
    property SensitiveCardData: ISensitiveCardDataType read Get_SensitiveCardData write _Set_SensitiveCardData;
    property AllowedProductCode: PSafeArray read Get_AllowedProductCode write Set_AllowedProductCode;
    property AllowedProduct: PSafeArray read Get_AllowedProduct write Set_AllowedProduct;
    property PaymentToken: IPaymentTokenType read Get_PaymentToken write _Set_PaymentToken;
    property CustomerOrder: PSafeArray read Get_CustomerOrder write Set_CustomerOrder;
    property PaymentBrand: WideString read Get_PaymentBrand write Set_PaymentBrand;
    property MaskedPAN: WideString read Get_MaskedPAN write Set_MaskedPAN;
    property PaymentAccountRef: WideString read Get_PaymentAccountRef write Set_PaymentAccountRef;
    property EntryMode: PSafeArray read Get_EntryMode write Set_EntryMode;
    property CardCountryCode: WideString read Get_CardCountryCode write Set_CardCountryCode;
    property ProtectedCardDataSpecified: WordBool read Get_ProtectedCardDataSpecified write Set_ProtectedCardDataSpecified;
    property SensitiveCardDataSpecified: WordBool read Get_SensitiveCardDataSpecified write Set_SensitiveCardDataSpecified;
    property AllowedProductCodeSpecified: WordBool read Get_AllowedProductCodeSpecified write Set_AllowedProductCodeSpecified;
    property AllowedProductSpecified: WordBool read Get_AllowedProductSpecified write Set_AllowedProductSpecified;
    property PaymentTokenSpecified: WordBool read Get_PaymentTokenSpecified write Set_PaymentTokenSpecified;
    property CustomerOrderSpecified: WordBool read Get_CustomerOrderSpecified write Set_CustomerOrderSpecified;
    property PaymentBrandSpecified: WordBool read Get_PaymentBrandSpecified write Set_PaymentBrandSpecified;
    property MaskedPANSpecified: WordBool read Get_MaskedPANSpecified write Set_MaskedPANSpecified;
    property PaymentAccountRefSpecified: WordBool read Get_PaymentAccountRefSpecified write Set_PaymentAccountRefSpecified;
    property EntryModeSpecified: WordBool read Get_EntryModeSpecified write Set_EntryModeSpecified;
    property CardCountryCodeSpecified: WordBool read Get_CardCountryCodeSpecified write Set_CardCountryCodeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CardDataTypeClassName: WideString read Get_CardDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICardDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {016C16FB-BC51-4303-B75F-6966323DE3CD}
// *********************************************************************//
  ICardDataTypeDisp = dispinterface
    ['{016C16FB-BC51-4303-B75F-6966323DE3CD}']
    property ProtectedCardData: IContentInformationType dispid 1;
    property SensitiveCardData: ISensitiveCardDataType dispid 2;
    property AllowedProductCode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property AllowedProduct: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property PaymentToken: IPaymentTokenType dispid 5;
    property CustomerOrder: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 6;
    property PaymentBrand: WideString dispid 7;
    property MaskedPAN: WideString dispid 8;
    property PaymentAccountRef: WideString dispid 9;
    property EntryMode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 10;
    property CardCountryCode: WideString dispid 11;
    property ProtectedCardDataSpecified: WordBool dispid 13;
    property SensitiveCardDataSpecified: WordBool dispid 14;
    property AllowedProductCodeSpecified: WordBool dispid 15;
    property AllowedProductSpecified: WordBool dispid 22;
    property PaymentTokenSpecified: WordBool dispid 29;
    property CustomerOrderSpecified: WordBool dispid 30;
    property PaymentBrandSpecified: WordBool dispid 37;
    property MaskedPANSpecified: WordBool dispid 38;
    property PaymentAccountRefSpecified: WordBool dispid 39;
    property EntryModeSpecified: WordBool dispid 40;
    property CardCountryCodeSpecified: WordBool dispid 47;
    property ObjectHasBeenSet: WordBool readonly dispid 48;
    property CardDataTypeClassName: WideString readonly dispid 49;
    function AllowedProductCodeLength: Integer; dispid 16;
    function AllowedProductCodeGetItem(index: Integer): WideString; dispid 17;
    function AllowedProductCodeSetItem(index: Integer; const value: WideString): WordBool; dispid 18;
    function AllowedProductCodeAddItem(const value: WideString): WordBool; dispid 19;
    function AllowedProductCodeRemoveItem(index: Integer): WordBool; dispid 20;
    function AllowedProductCodeInsertItem(index: Integer; const value: WideString): Integer; dispid 21;
    function AllowedProductLength: Integer; dispid 23;
    function AllowedProductGetItem(index: Integer): IAllowedProductType; dispid 24;
    function AllowedProductSetItem(index: Integer; const value: IAllowedProductType): WordBool; dispid 25;
    function AllowedProductAddItem(const value: IAllowedProductType): WordBool; dispid 26;
    function AllowedProductRemoveItem(index: Integer): WordBool; dispid 27;
    function AllowedProductInsertItem(index: Integer; const value: IAllowedProductType): Integer; dispid 28;
    function CustomerOrderLength: Integer; dispid 31;
    function CustomerOrderGetItem(index: Integer): ICustomerOrderType; dispid 32;
    function CustomerOrderSetItem(index: Integer; const value: ICustomerOrderType): WordBool; dispid 33;
    function CustomerOrderAddItem(const value: ICustomerOrderType): WordBool; dispid 34;
    function CustomerOrderRemoveItem(index: Integer): WordBool; dispid 35;
    function CustomerOrderInsertItem(index: Integer; const value: ICustomerOrderType): Integer; dispid 36;
    function EntryModeLength: Integer; dispid 41;
    function EntryModeGetItem(index: Integer): WideString; dispid 42;
    function EntryModeSetItem(index: Integer; const value: WideString): WordBool; dispid 43;
    function EntryModeAddItem(const value: WideString): WordBool; dispid 44;
    function EntryModeRemoveItem(index: Integer): WordBool; dispid 45;
    function EntryModeInsertItem(index: Integer; const value: WideString): Integer; dispid 46;
  end;

// *********************************************************************//
// Interface :   ISensitiveCardDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8157B029-07A4-4390-93F9-5CD23C447FE7}
// *********************************************************************//
  ISensitiveCardDataType = interface(IDispatch)
    ['{8157B029-07A4-4390-93F9-5CD23C447FE7}']
    function Get_TrackData: PSafeArray; safecall;
    procedure Set_TrackData(pRetVal: PSafeArray); safecall;
    function Get_PAN: WideString; safecall;
    procedure Set_PAN(const pRetVal: WideString); safecall;
    function Get_CardSeqNumb: WideString; safecall;
    procedure Set_CardSeqNumb(const pRetVal: WideString); safecall;
    function Get_ExpiryDate: WideString; safecall;
    procedure Set_ExpiryDate(const pRetVal: WideString); safecall;
    function Get_TrackDataSpecified: WordBool; safecall;
    procedure Set_TrackDataSpecified(pRetVal: WordBool); safecall;
    function Get_PANSpecified: WordBool; safecall;
    procedure Set_PANSpecified(pRetVal: WordBool); safecall;
    function Get_CardSeqNumbSpecified: WordBool; safecall;
    procedure Set_CardSeqNumbSpecified(pRetVal: WordBool); safecall;
    function Get_ExpiryDateSpecified: WordBool; safecall;
    procedure Set_ExpiryDateSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SensitiveCardDataTypeClassName: WideString; safecall;
    function TrackDataLength: Integer; safecall;
    function TrackDataGetItem(index: Integer): ITrackDataType; safecall;
    function TrackDataSetItem(index: Integer; const value: ITrackDataType): WordBool; safecall;
    function TrackDataAddItem(const value: ITrackDataType): WordBool; safecall;
    function TrackDataRemoveItem(index: Integer): WordBool; safecall;
    function TrackDataInsertItem(index: Integer; const value: ITrackDataType): Integer; safecall;
    property TrackData: PSafeArray read Get_TrackData write Set_TrackData;
    property PAN: WideString read Get_PAN write Set_PAN;
    property CardSeqNumb: WideString read Get_CardSeqNumb write Set_CardSeqNumb;
    property ExpiryDate: WideString read Get_ExpiryDate write Set_ExpiryDate;
    property TrackDataSpecified: WordBool read Get_TrackDataSpecified write Set_TrackDataSpecified;
    property PANSpecified: WordBool read Get_PANSpecified write Set_PANSpecified;
    property CardSeqNumbSpecified: WordBool read Get_CardSeqNumbSpecified write Set_CardSeqNumbSpecified;
    property ExpiryDateSpecified: WordBool read Get_ExpiryDateSpecified write Set_ExpiryDateSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SensitiveCardDataTypeClassName: WideString read Get_SensitiveCardDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISensitiveCardDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8157B029-07A4-4390-93F9-5CD23C447FE7}
// *********************************************************************//
  ISensitiveCardDataTypeDisp = dispinterface
    ['{8157B029-07A4-4390-93F9-5CD23C447FE7}']
    property TrackData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property PAN: WideString dispid 2;
    property CardSeqNumb: WideString dispid 3;
    property ExpiryDate: WideString dispid 4;
    property TrackDataSpecified: WordBool dispid 6;
    property PANSpecified: WordBool dispid 13;
    property CardSeqNumbSpecified: WordBool dispid 14;
    property ExpiryDateSpecified: WordBool dispid 15;
    property ObjectHasBeenSet: WordBool readonly dispid 16;
    property SensitiveCardDataTypeClassName: WideString readonly dispid 17;
    function TrackDataLength: Integer; dispid 7;
    function TrackDataGetItem(index: Integer): ITrackDataType; dispid 8;
    function TrackDataSetItem(index: Integer; const value: ITrackDataType): WordBool; dispid 9;
    function TrackDataAddItem(const value: ITrackDataType): WordBool; dispid 10;
    function TrackDataRemoveItem(index: Integer): WordBool; dispid 11;
    function TrackDataInsertItem(index: Integer; const value: ITrackDataType): Integer; dispid 12;
  end;

// *********************************************************************//
// Interface :   ITrackDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {71C428AD-CB8C-41CD-AF4F-A4C218878653}
// *********************************************************************//
  ITrackDataType = interface(IDispatch)
    ['{71C428AD-CB8C-41CD-AF4F-A4C218878653}']
    function Get_TrackNumb: Integer; safecall;
    procedure Set_TrackNumb(pRetVal: Integer); safecall;
    function Get_TrackFormat: WideString; safecall;
    procedure Set_TrackFormat(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_TrackNumbDefaultValue: Integer; safecall;
    function Get_TrackNumbSpecified: WordBool; safecall;
    procedure Set_TrackNumbSpecified(pRetVal: WordBool); safecall;
    function Get_TrackFormatDefaultValue: WideString; safecall;
    function Get_TrackFormatSpecified: WordBool; safecall;
    procedure Set_TrackFormatSpecified(pRetVal: WordBool); safecall;
    function Get_ValueSpecified: WordBool; safecall;
    procedure Set_ValueSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_TrackDataTypeClassName: WideString; safecall;
    property TrackNumb: Integer read Get_TrackNumb write Set_TrackNumb;
    property TrackFormat: WideString read Get_TrackFormat write Set_TrackFormat;
    property value: WideString read Get_value write Set_value;
    property TrackNumbDefaultValue: Integer read Get_TrackNumbDefaultValue;
    property TrackNumbSpecified: WordBool read Get_TrackNumbSpecified write Set_TrackNumbSpecified;
    property TrackFormatDefaultValue: WideString read Get_TrackFormatDefaultValue;
    property TrackFormatSpecified: WordBool read Get_TrackFormatSpecified write Set_TrackFormatSpecified;
    property ValueSpecified: WordBool read Get_ValueSpecified write Set_ValueSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property TrackDataTypeClassName: WideString read Get_TrackDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ITrackDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {71C428AD-CB8C-41CD-AF4F-A4C218878653}
// *********************************************************************//
  ITrackDataTypeDisp = dispinterface
    ['{71C428AD-CB8C-41CD-AF4F-A4C218878653}']
    property TrackNumb: Integer dispid 2;
    property TrackFormat: WideString dispid 3;
    property value: WideString dispid 4;
    property TrackNumbDefaultValue: Integer readonly dispid 5;
    property TrackNumbSpecified: WordBool dispid 6;
    property TrackFormatDefaultValue: WideString readonly dispid 7;
    property TrackFormatSpecified: WordBool dispid 8;
    property ValueSpecified: WordBool dispid 9;
    property ObjectHasBeenSet: WordBool readonly dispid 10;
    property TrackDataTypeClassName: WideString readonly dispid 11;
  end;

// *********************************************************************//
// Interface :   IPaymentTokenType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0C551044-F6E2-47A9-BCFA-6F6FB43A6CB7}
// *********************************************************************//
  IPaymentTokenType = interface(IDispatch)
    ['{0C551044-F6E2-47A9-BCFA-6F6FB43A6CB7}']
    function Get_TokenRequestedType: WideString; safecall;
    procedure Set_TokenRequestedType(const pRetVal: WideString); safecall;
    function Get_TokenValue: WideString; safecall;
    procedure Set_TokenValue(const pRetVal: WideString); safecall;
    function Get_ExpiryDateTime: WideString; safecall;
    procedure Set_ExpiryDateTime(const pRetVal: WideString); safecall;
    function Get_ExpiryDateTimeSpecified: WordBool; safecall;
    procedure Set_ExpiryDateTimeSpecified(pRetVal: WordBool); safecall;
    function Get_TokenRequestedTypeSpecified: WordBool; safecall;
    procedure Set_TokenRequestedTypeSpecified(pRetVal: WordBool); safecall;
    function Get_TokenValueSpecified: WordBool; safecall;
    procedure Set_TokenValueSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PaymentTokenTypeClassName: WideString; safecall;
    property TokenRequestedType: WideString read Get_TokenRequestedType write Set_TokenRequestedType;
    property TokenValue: WideString read Get_TokenValue write Set_TokenValue;
    property ExpiryDateTime: WideString read Get_ExpiryDateTime write Set_ExpiryDateTime;
    property ExpiryDateTimeSpecified: WordBool read Get_ExpiryDateTimeSpecified write Set_ExpiryDateTimeSpecified;
    property TokenRequestedTypeSpecified: WordBool read Get_TokenRequestedTypeSpecified write Set_TokenRequestedTypeSpecified;
    property TokenValueSpecified: WordBool read Get_TokenValueSpecified write Set_TokenValueSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PaymentTokenTypeClassName: WideString read Get_PaymentTokenTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPaymentTokenTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0C551044-F6E2-47A9-BCFA-6F6FB43A6CB7}
// *********************************************************************//
  IPaymentTokenTypeDisp = dispinterface
    ['{0C551044-F6E2-47A9-BCFA-6F6FB43A6CB7}']
    property TokenRequestedType: WideString dispid 1;
    property TokenValue: WideString dispid 2;
    property ExpiryDateTime: WideString dispid 3;
    property ExpiryDateTimeSpecified: WordBool dispid 4;
    property TokenRequestedTypeSpecified: WordBool dispid 6;
    property TokenValueSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 8;
    property PaymentTokenTypeClassName: WideString readonly dispid 9;
  end;

// *********************************************************************//
// Interface :   ICustomerOrderType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7FC6DEA0-7948-4482-B493-7E81E3CF1CC1}
// *********************************************************************//
  ICustomerOrderType = interface(IDispatch)
    ['{7FC6DEA0-7948-4482-B493-7E81E3CF1CC1}']
    function Get_AdditionalInformation: WideString; safecall;
    procedure Set_AdditionalInformation(const pRetVal: WideString); safecall;
    function Get_CustomerOrderID: WideString; safecall;
    procedure Set_CustomerOrderID(const pRetVal: WideString); safecall;
    function Get_OpenOrderState: WordBool; safecall;
    procedure Set_OpenOrderState(pRetVal: WordBool); safecall;
    function Get_StartDate: WideString; safecall;
    procedure Set_StartDate(const pRetVal: WideString); safecall;
    function Get_EndDate: WideString; safecall;
    procedure Set_EndDate(const pRetVal: WideString); safecall;
    function Get_EndDateSpecified: WordBool; safecall;
    procedure Set_EndDateSpecified(pRetVal: WordBool); safecall;
    function Get_ForecastedAmount: Double; safecall;
    procedure Set_ForecastedAmount(pRetVal: Double); safecall;
    function Get_CurrentAmount: Double; safecall;
    procedure Set_CurrentAmount(pRetVal: Double); safecall;
    function Get_Currency: WideString; safecall;
    procedure Set_Currency(const pRetVal: WideString); safecall;
    function Get_AccessedBy: WideString; safecall;
    procedure Set_AccessedBy(const pRetVal: WideString); safecall;
    function Get_AdditionalInformationSpecified: WordBool; safecall;
    procedure Set_AdditionalInformationSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerOrderIDSpecified: WordBool; safecall;
    procedure Set_CustomerOrderIDSpecified(pRetVal: WordBool); safecall;
    function Get_OpenOrderStateDefaultValue: WordBool; safecall;
    function Get_OpenOrderStateSpecified: WordBool; safecall;
    procedure Set_OpenOrderStateSpecified(pRetVal: WordBool); safecall;
    function Get_StartDateSpecified: WordBool; safecall;
    procedure Set_StartDateSpecified(pRetVal: WordBool); safecall;
    function Get_ForecastedAmountSpecified: WordBool; safecall;
    procedure Set_ForecastedAmountSpecified(pRetVal: WordBool); safecall;
    function Get_CurrentAmountSpecified: WordBool; safecall;
    procedure Set_CurrentAmountSpecified(pRetVal: WordBool); safecall;
    function Get_CurrencySpecified: WordBool; safecall;
    procedure Set_CurrencySpecified(pRetVal: WordBool); safecall;
    function Get_AccessedBySpecified: WordBool; safecall;
    procedure Set_AccessedBySpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CustomerOrderTypeClassName: WideString; safecall;
    property AdditionalInformation: WideString read Get_AdditionalInformation write Set_AdditionalInformation;
    property CustomerOrderID: WideString read Get_CustomerOrderID write Set_CustomerOrderID;
    property OpenOrderState: WordBool read Get_OpenOrderState write Set_OpenOrderState;
    property StartDate: WideString read Get_StartDate write Set_StartDate;
    property EndDate: WideString read Get_EndDate write Set_EndDate;
    property EndDateSpecified: WordBool read Get_EndDateSpecified write Set_EndDateSpecified;
    property ForecastedAmount: Double read Get_ForecastedAmount write Set_ForecastedAmount;
    property CurrentAmount: Double read Get_CurrentAmount write Set_CurrentAmount;
    property Currency: WideString read Get_Currency write Set_Currency;
    property AccessedBy: WideString read Get_AccessedBy write Set_AccessedBy;
    property AdditionalInformationSpecified: WordBool read Get_AdditionalInformationSpecified write Set_AdditionalInformationSpecified;
    property CustomerOrderIDSpecified: WordBool read Get_CustomerOrderIDSpecified write Set_CustomerOrderIDSpecified;
    property OpenOrderStateDefaultValue: WordBool read Get_OpenOrderStateDefaultValue;
    property OpenOrderStateSpecified: WordBool read Get_OpenOrderStateSpecified write Set_OpenOrderStateSpecified;
    property StartDateSpecified: WordBool read Get_StartDateSpecified write Set_StartDateSpecified;
    property ForecastedAmountSpecified: WordBool read Get_ForecastedAmountSpecified write Set_ForecastedAmountSpecified;
    property CurrentAmountSpecified: WordBool read Get_CurrentAmountSpecified write Set_CurrentAmountSpecified;
    property CurrencySpecified: WordBool read Get_CurrencySpecified write Set_CurrencySpecified;
    property AccessedBySpecified: WordBool read Get_AccessedBySpecified write Set_AccessedBySpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CustomerOrderTypeClassName: WideString read Get_CustomerOrderTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICustomerOrderTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7FC6DEA0-7948-4482-B493-7E81E3CF1CC1}
// *********************************************************************//
  ICustomerOrderTypeDisp = dispinterface
    ['{7FC6DEA0-7948-4482-B493-7E81E3CF1CC1}']
    property AdditionalInformation: WideString dispid 2;
    property CustomerOrderID: WideString dispid 3;
    property OpenOrderState: WordBool dispid 4;
    property StartDate: WideString dispid 5;
    property EndDate: WideString dispid 6;
    property EndDateSpecified: WordBool dispid 7;
    property ForecastedAmount: Double dispid 8;
    property CurrentAmount: Double dispid 9;
    property Currency: WideString dispid 10;
    property AccessedBy: WideString dispid 11;
    property AdditionalInformationSpecified: WordBool dispid 12;
    property CustomerOrderIDSpecified: WordBool dispid 13;
    property OpenOrderStateDefaultValue: WordBool readonly dispid 14;
    property OpenOrderStateSpecified: WordBool dispid 15;
    property StartDateSpecified: WordBool dispid 16;
    property ForecastedAmountSpecified: WordBool dispid 17;
    property CurrentAmountSpecified: WordBool dispid 18;
    property CurrencySpecified: WordBool dispid 19;
    property AccessedBySpecified: WordBool dispid 20;
    property ObjectHasBeenSet: WordBool readonly dispid 21;
    property CustomerOrderTypeClassName: WideString readonly dispid 22;
  end;

// *********************************************************************//
// Interface :   ICheckDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7F1477F3-4D01-4034-952E-8093A94CB5F4}
// *********************************************************************//
  ICheckDataType = interface(IDispatch)
    ['{7F1477F3-4D01-4034-952E-8093A94CB5F4}']
    function Get_BankID: WideString; safecall;
    procedure Set_BankID(const pRetVal: WideString); safecall;
    function Get_AccountNumber: WideString; safecall;
    procedure Set_AccountNumber(const pRetVal: WideString); safecall;
    function Get_CheckNumber: WideString; safecall;
    procedure Set_CheckNumber(const pRetVal: WideString); safecall;
    function Get_TrackData: ITrackDataType; safecall;
    procedure _Set_TrackData(const pRetVal: ITrackDataType); safecall;
    function Get_CheckCardNumber: WideString; safecall;
    procedure Set_CheckCardNumber(const pRetVal: WideString); safecall;
    function Get_TypeCode: WideString; safecall;
    procedure Set_TypeCode(const pRetVal: WideString); safecall;
    function Get_Country: WideString; safecall;
    procedure Set_Country(const pRetVal: WideString); safecall;
    function Get_BankIDSpecified: WordBool; safecall;
    procedure Set_BankIDSpecified(pRetVal: WordBool); safecall;
    function Get_AccountNumberSpecified: WordBool; safecall;
    procedure Set_AccountNumberSpecified(pRetVal: WordBool); safecall;
    function Get_CheckNumberSpecified: WordBool; safecall;
    procedure Set_CheckNumberSpecified(pRetVal: WordBool); safecall;
    function Get_TrackDataSpecified: WordBool; safecall;
    procedure Set_TrackDataSpecified(pRetVal: WordBool); safecall;
    function Get_CheckCardNumberSpecified: WordBool; safecall;
    procedure Set_CheckCardNumberSpecified(pRetVal: WordBool); safecall;
    function Get_TypeCodeDefaultValue: WideString; safecall;
    function Get_TypeCodeSpecified: WordBool; safecall;
    procedure Set_TypeCodeSpecified(pRetVal: WordBool); safecall;
    function Get_CountrySpecified: WordBool; safecall;
    procedure Set_CountrySpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CheckDataTypeClassName: WideString; safecall;
    property BankID: WideString read Get_BankID write Set_BankID;
    property AccountNumber: WideString read Get_AccountNumber write Set_AccountNumber;
    property CheckNumber: WideString read Get_CheckNumber write Set_CheckNumber;
    property TrackData: ITrackDataType read Get_TrackData write _Set_TrackData;
    property CheckCardNumber: WideString read Get_CheckCardNumber write Set_CheckCardNumber;
    property TypeCode: WideString read Get_TypeCode write Set_TypeCode;
    property Country: WideString read Get_Country write Set_Country;
    property BankIDSpecified: WordBool read Get_BankIDSpecified write Set_BankIDSpecified;
    property AccountNumberSpecified: WordBool read Get_AccountNumberSpecified write Set_AccountNumberSpecified;
    property CheckNumberSpecified: WordBool read Get_CheckNumberSpecified write Set_CheckNumberSpecified;
    property TrackDataSpecified: WordBool read Get_TrackDataSpecified write Set_TrackDataSpecified;
    property CheckCardNumberSpecified: WordBool read Get_CheckCardNumberSpecified write Set_CheckCardNumberSpecified;
    property TypeCodeDefaultValue: WideString read Get_TypeCodeDefaultValue;
    property TypeCodeSpecified: WordBool read Get_TypeCodeSpecified write Set_TypeCodeSpecified;
    property CountrySpecified: WordBool read Get_CountrySpecified write Set_CountrySpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CheckDataTypeClassName: WideString read Get_CheckDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICheckDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7F1477F3-4D01-4034-952E-8093A94CB5F4}
// *********************************************************************//
  ICheckDataTypeDisp = dispinterface
    ['{7F1477F3-4D01-4034-952E-8093A94CB5F4}']
    property BankID: WideString dispid 2;
    property AccountNumber: WideString dispid 3;
    property CheckNumber: WideString dispid 4;
    property TrackData: ITrackDataType dispid 5;
    property CheckCardNumber: WideString dispid 6;
    property TypeCode: WideString dispid 7;
    property Country: WideString dispid 8;
    property BankIDSpecified: WordBool dispid 9;
    property AccountNumberSpecified: WordBool dispid 10;
    property CheckNumberSpecified: WordBool dispid 11;
    property TrackDataSpecified: WordBool dispid 12;
    property CheckCardNumberSpecified: WordBool dispid 13;
    property TypeCodeDefaultValue: WideString readonly dispid 14;
    property TypeCodeSpecified: WordBool dispid 15;
    property CountrySpecified: WordBool dispid 16;
    property ObjectHasBeenSet: WordBool readonly dispid 17;
    property CheckDataTypeClassName: WideString readonly dispid 18;
  end;

// *********************************************************************//
// Interface :   IMobileDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D8BB76DF-9CD9-47FE-918B-156DE29214E7}
// *********************************************************************//
  IMobileDataType = interface(IDispatch)
    ['{D8BB76DF-9CD9-47FE-918B-156DE29214E7}']
    function Get_MobileCountryCode: WideString; safecall;
    procedure Set_MobileCountryCode(const pRetVal: WideString); safecall;
    function Get_Geolocation: IGeolocationType; safecall;
    procedure _Set_Geolocation(const pRetVal: IGeolocationType); safecall;
    function Get_ProtectedMobileData: IContentInformationType; safecall;
    procedure _Set_ProtectedMobileData(const pRetVal: IContentInformationType); safecall;
    function Get_SensitiveMobileData: ISensitiveMobileDataType; safecall;
    procedure _Set_SensitiveMobileData(const pRetVal: ISensitiveMobileDataType); safecall;
    function Get_MobileNetworkCode: WideString; safecall;
    procedure Set_MobileNetworkCode(const pRetVal: WideString); safecall;
    function Get_MaskedMSISDN: WideString; safecall;
    procedure Set_MaskedMSISDN(const pRetVal: WideString); safecall;
    function Get_MobileCountryCodeSpecified: WordBool; safecall;
    procedure Set_MobileCountryCodeSpecified(pRetVal: WordBool); safecall;
    function Get_GeolocationSpecified: WordBool; safecall;
    procedure Set_GeolocationSpecified(pRetVal: WordBool); safecall;
    function Get_ProtectedMobileDataSpecified: WordBool; safecall;
    procedure Set_ProtectedMobileDataSpecified(pRetVal: WordBool); safecall;
    function Get_SensitiveMobileDataSpecified: WordBool; safecall;
    procedure Set_SensitiveMobileDataSpecified(pRetVal: WordBool); safecall;
    function Get_MobileNetworkCodeSpecified: WordBool; safecall;
    procedure Set_MobileNetworkCodeSpecified(pRetVal: WordBool); safecall;
    function Get_MaskedMSISDNSpecified: WordBool; safecall;
    procedure Set_MaskedMSISDNSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_MobileDataTypeClassName: WideString; safecall;
    property MobileCountryCode: WideString read Get_MobileCountryCode write Set_MobileCountryCode;
    property Geolocation: IGeolocationType read Get_Geolocation write _Set_Geolocation;
    property ProtectedMobileData: IContentInformationType read Get_ProtectedMobileData write _Set_ProtectedMobileData;
    property SensitiveMobileData: ISensitiveMobileDataType read Get_SensitiveMobileData write _Set_SensitiveMobileData;
    property MobileNetworkCode: WideString read Get_MobileNetworkCode write Set_MobileNetworkCode;
    property MaskedMSISDN: WideString read Get_MaskedMSISDN write Set_MaskedMSISDN;
    property MobileCountryCodeSpecified: WordBool read Get_MobileCountryCodeSpecified write Set_MobileCountryCodeSpecified;
    property GeolocationSpecified: WordBool read Get_GeolocationSpecified write Set_GeolocationSpecified;
    property ProtectedMobileDataSpecified: WordBool read Get_ProtectedMobileDataSpecified write Set_ProtectedMobileDataSpecified;
    property SensitiveMobileDataSpecified: WordBool read Get_SensitiveMobileDataSpecified write Set_SensitiveMobileDataSpecified;
    property MobileNetworkCodeSpecified: WordBool read Get_MobileNetworkCodeSpecified write Set_MobileNetworkCodeSpecified;
    property MaskedMSISDNSpecified: WordBool read Get_MaskedMSISDNSpecified write Set_MaskedMSISDNSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property MobileDataTypeClassName: WideString read Get_MobileDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IMobileDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D8BB76DF-9CD9-47FE-918B-156DE29214E7}
// *********************************************************************//
  IMobileDataTypeDisp = dispinterface
    ['{D8BB76DF-9CD9-47FE-918B-156DE29214E7}']
    property MobileCountryCode: WideString dispid 1;
    property Geolocation: IGeolocationType dispid 2;
    property ProtectedMobileData: IContentInformationType dispid 3;
    property SensitiveMobileData: ISensitiveMobileDataType dispid 4;
    property MobileNetworkCode: WideString dispid 5;
    property MaskedMSISDN: WideString dispid 6;
    property MobileCountryCodeSpecified: WordBool dispid 8;
    property GeolocationSpecified: WordBool dispid 9;
    property ProtectedMobileDataSpecified: WordBool dispid 10;
    property SensitiveMobileDataSpecified: WordBool dispid 11;
    property MobileNetworkCodeSpecified: WordBool dispid 12;
    property MaskedMSISDNSpecified: WordBool dispid 13;
    property ObjectHasBeenSet: WordBool readonly dispid 14;
    property MobileDataTypeClassName: WideString readonly dispid 15;
  end;

// *********************************************************************//
// Interface :   IGeolocationType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B6E87431-45BD-4D79-A606-7D9A0AD8D540}
// *********************************************************************//
  IGeolocationType = interface(IDispatch)
    ['{B6E87431-45BD-4D79-A606-7D9A0AD8D540}']
    function Get_GeographicCoordinates: IGeographicCoordinatesType; safecall;
    procedure _Set_GeographicCoordinates(const pRetVal: IGeographicCoordinatesType); safecall;
    function Get_UTMCoordinates: IUTMCoordinatesType; safecall;
    procedure _Set_UTMCoordinates(const pRetVal: IUTMCoordinatesType); safecall;
    function Get_GeographicCoordinatesSpecified: WordBool; safecall;
    procedure Set_GeographicCoordinatesSpecified(pRetVal: WordBool); safecall;
    function Get_UTMCoordinatesSpecified: WordBool; safecall;
    procedure Set_UTMCoordinatesSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_GeolocationTypeClassName: WideString; safecall;
    property GeographicCoordinates: IGeographicCoordinatesType read Get_GeographicCoordinates write _Set_GeographicCoordinates;
    property UTMCoordinates: IUTMCoordinatesType read Get_UTMCoordinates write _Set_UTMCoordinates;
    property GeographicCoordinatesSpecified: WordBool read Get_GeographicCoordinatesSpecified write Set_GeographicCoordinatesSpecified;
    property UTMCoordinatesSpecified: WordBool read Get_UTMCoordinatesSpecified write Set_UTMCoordinatesSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property GeolocationTypeClassName: WideString read Get_GeolocationTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IGeolocationTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B6E87431-45BD-4D79-A606-7D9A0AD8D540}
// *********************************************************************//
  IGeolocationTypeDisp = dispinterface
    ['{B6E87431-45BD-4D79-A606-7D9A0AD8D540}']
    property GeographicCoordinates: IGeographicCoordinatesType dispid 1;
    property UTMCoordinates: IUTMCoordinatesType dispid 2;
    property GeographicCoordinatesSpecified: WordBool dispid 4;
    property UTMCoordinatesSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property GeolocationTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IGeographicCoordinatesType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {75A95F94-3D54-44B0-A5A7-F87DFAD484E6}
// *********************************************************************//
  IGeographicCoordinatesType = interface(IDispatch)
    ['{75A95F94-3D54-44B0-A5A7-F87DFAD484E6}']
    function Get_Latitude: WideString; safecall;
    procedure Set_Latitude(const pRetVal: WideString); safecall;
    function Get_Longitude: WideString; safecall;
    procedure Set_Longitude(const pRetVal: WideString); safecall;
    function Get_LatitudeSpecified: WordBool; safecall;
    procedure Set_LatitudeSpecified(pRetVal: WordBool); safecall;
    function Get_LongitudeSpecified: WordBool; safecall;
    procedure Set_LongitudeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_GeographicCoordinatesTypeClassName: WideString; safecall;
    property Latitude: WideString read Get_Latitude write Set_Latitude;
    property Longitude: WideString read Get_Longitude write Set_Longitude;
    property LatitudeSpecified: WordBool read Get_LatitudeSpecified write Set_LatitudeSpecified;
    property LongitudeSpecified: WordBool read Get_LongitudeSpecified write Set_LongitudeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property GeographicCoordinatesTypeClassName: WideString read Get_GeographicCoordinatesTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IGeographicCoordinatesTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {75A95F94-3D54-44B0-A5A7-F87DFAD484E6}
// *********************************************************************//
  IGeographicCoordinatesTypeDisp = dispinterface
    ['{75A95F94-3D54-44B0-A5A7-F87DFAD484E6}']
    property Latitude: WideString dispid 1;
    property Longitude: WideString dispid 2;
    property LatitudeSpecified: WordBool dispid 4;
    property LongitudeSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property GeographicCoordinatesTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IUTMCoordinatesType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {FC4DE13C-DAB4-44F7-AB26-2F00A02C28F3}
// *********************************************************************//
  IUTMCoordinatesType = interface(IDispatch)
    ['{FC4DE13C-DAB4-44F7-AB26-2F00A02C28F3}']
    function Get_UTMZone: WideString; safecall;
    procedure Set_UTMZone(const pRetVal: WideString); safecall;
    function Get_UTMEastward: WideString; safecall;
    procedure Set_UTMEastward(const pRetVal: WideString); safecall;
    function Get_UTMNorthward: WideString; safecall;
    procedure Set_UTMNorthward(const pRetVal: WideString); safecall;
    function Get_UTMZoneSpecified: WordBool; safecall;
    procedure Set_UTMZoneSpecified(pRetVal: WordBool); safecall;
    function Get_UTMEastwardSpecified: WordBool; safecall;
    procedure Set_UTMEastwardSpecified(pRetVal: WordBool); safecall;
    function Get_UTMNorthwardSpecified: WordBool; safecall;
    procedure Set_UTMNorthwardSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_UTMCoordinatesTypeClassName: WideString; safecall;
    property UTMZone: WideString read Get_UTMZone write Set_UTMZone;
    property UTMEastward: WideString read Get_UTMEastward write Set_UTMEastward;
    property UTMNorthward: WideString read Get_UTMNorthward write Set_UTMNorthward;
    property UTMZoneSpecified: WordBool read Get_UTMZoneSpecified write Set_UTMZoneSpecified;
    property UTMEastwardSpecified: WordBool read Get_UTMEastwardSpecified write Set_UTMEastwardSpecified;
    property UTMNorthwardSpecified: WordBool read Get_UTMNorthwardSpecified write Set_UTMNorthwardSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property UTMCoordinatesTypeClassName: WideString read Get_UTMCoordinatesTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IUTMCoordinatesTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {FC4DE13C-DAB4-44F7-AB26-2F00A02C28F3}
// *********************************************************************//
  IUTMCoordinatesTypeDisp = dispinterface
    ['{FC4DE13C-DAB4-44F7-AB26-2F00A02C28F3}']
    property UTMZone: WideString dispid 1;
    property UTMEastward: WideString dispid 2;
    property UTMNorthward: WideString dispid 3;
    property UTMZoneSpecified: WordBool dispid 5;
    property UTMEastwardSpecified: WordBool dispid 6;
    property UTMNorthwardSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 8;
    property UTMCoordinatesTypeClassName: WideString readonly dispid 9;
  end;

// *********************************************************************//
// Interface :   ISensitiveMobileDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D8B41024-8FDC-4851-BEDF-905F4F13F63D}
// *********************************************************************//
  ISensitiveMobileDataType = interface(IDispatch)
    ['{D8B41024-8FDC-4851-BEDF-905F4F13F63D}']
    function Get_MSISDN: WideString; safecall;
    procedure Set_MSISDN(const pRetVal: WideString); safecall;
    function Get_IMSI: WideString; safecall;
    procedure Set_IMSI(const pRetVal: WideString); safecall;
    function Get_IMEI: WideString; safecall;
    procedure Set_IMEI(const pRetVal: WideString); safecall;
    function Get_MSISDNSpecified: WordBool; safecall;
    procedure Set_MSISDNSpecified(pRetVal: WordBool); safecall;
    function Get_IMSISpecified: WordBool; safecall;
    procedure Set_IMSISpecified(pRetVal: WordBool); safecall;
    function Get_IMEISpecified: WordBool; safecall;
    procedure Set_IMEISpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SensitiveMobileDataTypeClassName: WideString; safecall;
    property MSISDN: WideString read Get_MSISDN write Set_MSISDN;
    property IMSI: WideString read Get_IMSI write Set_IMSI;
    property IMEI: WideString read Get_IMEI write Set_IMEI;
    property MSISDNSpecified: WordBool read Get_MSISDNSpecified write Set_MSISDNSpecified;
    property IMSISpecified: WordBool read Get_IMSISpecified write Set_IMSISpecified;
    property IMEISpecified: WordBool read Get_IMEISpecified write Set_IMEISpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SensitiveMobileDataTypeClassName: WideString read Get_SensitiveMobileDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISensitiveMobileDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D8B41024-8FDC-4851-BEDF-905F4F13F63D}
// *********************************************************************//
  ISensitiveMobileDataTypeDisp = dispinterface
    ['{D8B41024-8FDC-4851-BEDF-905F4F13F63D}']
    property MSISDN: WideString dispid 1;
    property IMSI: WideString dispid 2;
    property IMEI: WideString dispid 3;
    property MSISDNSpecified: WordBool dispid 5;
    property IMSISpecified: WordBool dispid 6;
    property IMEISpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 8;
    property SensitiveMobileDataTypeClassName: WideString readonly dispid 9;
  end;

// *********************************************************************//
// Interface :   ILoyaltyAccountReqType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F7B69384-A00D-493F-BFAD-B7D82211788E}
// *********************************************************************//
  ILoyaltyAccountReqType = interface(IDispatch)
    ['{F7B69384-A00D-493F-BFAD-B7D82211788E}']
    function Get_CardAcquisitionReference: ITransactionIdentificationType; safecall;
    procedure _Set_CardAcquisitionReference(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_LoyaltyAccountID: ILoyaltyAccountIDType; safecall;
    procedure _Set_LoyaltyAccountID(const pRetVal: ILoyaltyAccountIDType); safecall;
    function Get_CardAcquisitionReferenceSpecified: WordBool; safecall;
    procedure Set_CardAcquisitionReferenceSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyAccountIDSpecified: WordBool; safecall;
    procedure Set_LoyaltyAccountIDSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LoyaltyAccountReqTypeClassName: WideString; safecall;
    property CardAcquisitionReference: ITransactionIdentificationType read Get_CardAcquisitionReference write _Set_CardAcquisitionReference;
    property LoyaltyAccountID: ILoyaltyAccountIDType read Get_LoyaltyAccountID write _Set_LoyaltyAccountID;
    property CardAcquisitionReferenceSpecified: WordBool read Get_CardAcquisitionReferenceSpecified write Set_CardAcquisitionReferenceSpecified;
    property LoyaltyAccountIDSpecified: WordBool read Get_LoyaltyAccountIDSpecified write Set_LoyaltyAccountIDSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LoyaltyAccountReqTypeClassName: WideString read Get_LoyaltyAccountReqTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyAccountReqTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F7B69384-A00D-493F-BFAD-B7D82211788E}
// *********************************************************************//
  ILoyaltyAccountReqTypeDisp = dispinterface
    ['{F7B69384-A00D-493F-BFAD-B7D82211788E}']
    property CardAcquisitionReference: ITransactionIdentificationType dispid 1;
    property LoyaltyAccountID: ILoyaltyAccountIDType dispid 2;
    property CardAcquisitionReferenceSpecified: WordBool dispid 4;
    property LoyaltyAccountIDSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property LoyaltyAccountReqTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   ILoyaltyAccountIDType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AE0BA3F9-3C53-412B-A668-90BA7AE626E4}
// *********************************************************************//
  ILoyaltyAccountIDType = interface(IDispatch)
    ['{AE0BA3F9-3C53-412B-A668-90BA7AE626E4}']
    function Get_EntryMode: PSafeArray; safecall;
    procedure Set_EntryMode(pRetVal: PSafeArray); safecall;
    function Get_IdentificationType: WideString; safecall;
    procedure Set_IdentificationType(const pRetVal: WideString); safecall;
    function Get_IdentificationSupport: WideString; safecall;
    procedure Set_IdentificationSupport(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_EntryModeSpecified: WordBool; safecall;
    procedure Set_EntryModeSpecified(pRetVal: WordBool); safecall;
    function Get_IdentificationTypeSpecified: WordBool; safecall;
    procedure Set_IdentificationTypeSpecified(pRetVal: WordBool); safecall;
    function Get_IdentificationSupportSpecified: WordBool; safecall;
    procedure Set_IdentificationSupportSpecified(pRetVal: WordBool); safecall;
    function Get_ValueSpecified: WordBool; safecall;
    procedure Set_ValueSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LoyaltyAccountIDTypeClassName: WideString; safecall;
    function EntryModeLength: Integer; safecall;
    function EntryModeGetItem(index: Integer): WideString; safecall;
    function EntryModeSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function EntryModeAddItem(const value: WideString): WordBool; safecall;
    function EntryModeRemoveItem(index: Integer): WordBool; safecall;
    function EntryModeInsertItem(index: Integer; const value: WideString): Integer; safecall;
    property EntryMode: PSafeArray read Get_EntryMode write Set_EntryMode;
    property IdentificationType: WideString read Get_IdentificationType write Set_IdentificationType;
    property IdentificationSupport: WideString read Get_IdentificationSupport write Set_IdentificationSupport;
    property value: WideString read Get_value write Set_value;
    property EntryModeSpecified: WordBool read Get_EntryModeSpecified write Set_EntryModeSpecified;
    property IdentificationTypeSpecified: WordBool read Get_IdentificationTypeSpecified write Set_IdentificationTypeSpecified;
    property IdentificationSupportSpecified: WordBool read Get_IdentificationSupportSpecified write Set_IdentificationSupportSpecified;
    property ValueSpecified: WordBool read Get_ValueSpecified write Set_ValueSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LoyaltyAccountIDTypeClassName: WideString read Get_LoyaltyAccountIDTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyAccountIDTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AE0BA3F9-3C53-412B-A668-90BA7AE626E4}
// *********************************************************************//
  ILoyaltyAccountIDTypeDisp = dispinterface
    ['{AE0BA3F9-3C53-412B-A668-90BA7AE626E4}']
    property EntryMode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property IdentificationType: WideString dispid 2;
    property IdentificationSupport: WideString dispid 3;
    property value: WideString dispid 4;
    property EntryModeSpecified: WordBool dispid 6;
    property IdentificationTypeSpecified: WordBool dispid 13;
    property IdentificationSupportSpecified: WordBool dispid 14;
    property ValueSpecified: WordBool dispid 15;
    property ObjectHasBeenSet: WordBool readonly dispid 16;
    property LoyaltyAccountIDTypeClassName: WideString readonly dispid 17;
    function EntryModeLength: Integer; dispid 7;
    function EntryModeGetItem(index: Integer): WideString; dispid 8;
    function EntryModeSetItem(index: Integer; const value: WideString): WordBool; dispid 9;
    function EntryModeAddItem(const value: WideString): WordBool; dispid 10;
    function EntryModeRemoveItem(index: Integer): WordBool; dispid 11;
    function EntryModeInsertItem(index: Integer; const value: WideString): Integer; dispid 12;
  end;

// *********************************************************************//
// Interface :   IBalanceInquiryResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3F09914B-781F-44B2-9EDD-A795E0D3D693}
// *********************************************************************//
  IBalanceInquiryResponseType = interface(IDispatch)
    ['{3F09914B-781F-44B2-9EDD-A795E0D3D693}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_PaymentAccountStatus: IPaymentAccountStatusType; safecall;
    procedure _Set_PaymentAccountStatus(const pRetVal: IPaymentAccountStatusType); safecall;
    function Get_LoyaltyAccountStatus: ILoyaltyAccountStatusType; safecall;
    procedure _Set_LoyaltyAccountStatus(const pRetVal: ILoyaltyAccountStatusType); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentAccountStatusSpecified: WordBool; safecall;
    procedure Set_PaymentAccountStatusSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyAccountStatusSpecified: WordBool; safecall;
    procedure Set_LoyaltyAccountStatusSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_BalanceInquiryResponseTypeClassName: WideString; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property PaymentAccountStatus: IPaymentAccountStatusType read Get_PaymentAccountStatus write _Set_PaymentAccountStatus;
    property LoyaltyAccountStatus: ILoyaltyAccountStatusType read Get_LoyaltyAccountStatus write _Set_LoyaltyAccountStatus;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property PaymentAccountStatusSpecified: WordBool read Get_PaymentAccountStatusSpecified write Set_PaymentAccountStatusSpecified;
    property LoyaltyAccountStatusSpecified: WordBool read Get_LoyaltyAccountStatusSpecified write Set_LoyaltyAccountStatusSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property BalanceInquiryResponseTypeClassName: WideString read Get_BalanceInquiryResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IBalanceInquiryResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3F09914B-781F-44B2-9EDD-A795E0D3D693}
// *********************************************************************//
  IBalanceInquiryResponseTypeDisp = dispinterface
    ['{3F09914B-781F-44B2-9EDD-A795E0D3D693}']
    property Response: IResponseType dispid 1;
    property PaymentAccountStatus: IPaymentAccountStatusType dispid 2;
    property LoyaltyAccountStatus: ILoyaltyAccountStatusType dispid 3;
    property ResponseSpecified: WordBool dispid 5;
    property PaymentAccountStatusSpecified: WordBool dispid 6;
    property LoyaltyAccountStatusSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 8;
    property BalanceInquiryResponseTypeClassName: WideString readonly dispid 9;
  end;

// *********************************************************************//
// Interface :   IPaymentAccountStatusType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1448777E-7FC7-4432-8368-16C00291586C}
// *********************************************************************//
  IPaymentAccountStatusType = interface(IDispatch)
    ['{1448777E-7FC7-4432-8368-16C00291586C}']
    function Get_PaymentInstrumentData: IPaymentInstrumentDataType; safecall;
    procedure _Set_PaymentInstrumentData(const pRetVal: IPaymentInstrumentDataType); safecall;
    function Get_PaymentAcquirerData: IPaymentAcquirerDataType; safecall;
    procedure _Set_PaymentAcquirerData(const pRetVal: IPaymentAcquirerDataType); safecall;
    function Get_LoyaltyAccountStatus: ILoyaltyAccountStatusType; safecall;
    procedure _Set_LoyaltyAccountStatus(const pRetVal: ILoyaltyAccountStatusType); safecall;
    function Get_Currency: WideString; safecall;
    procedure Set_Currency(const pRetVal: WideString); safecall;
    function Get_CurrentBalance: Double; safecall;
    procedure Set_CurrentBalance(pRetVal: Double); safecall;
    function Get_CurrentBalanceSpecified: WordBool; safecall;
    procedure Set_CurrentBalanceSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentInstrumentDataSpecified: WordBool; safecall;
    procedure Set_PaymentInstrumentDataSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentAcquirerDataSpecified: WordBool; safecall;
    procedure Set_PaymentAcquirerDataSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyAccountStatusSpecified: WordBool; safecall;
    procedure Set_LoyaltyAccountStatusSpecified(pRetVal: WordBool); safecall;
    function Get_CurrencySpecified: WordBool; safecall;
    procedure Set_CurrencySpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PaymentAccountStatusTypeClassName: WideString; safecall;
    property PaymentInstrumentData: IPaymentInstrumentDataType read Get_PaymentInstrumentData write _Set_PaymentInstrumentData;
    property PaymentAcquirerData: IPaymentAcquirerDataType read Get_PaymentAcquirerData write _Set_PaymentAcquirerData;
    property LoyaltyAccountStatus: ILoyaltyAccountStatusType read Get_LoyaltyAccountStatus write _Set_LoyaltyAccountStatus;
    property Currency: WideString read Get_Currency write Set_Currency;
    property CurrentBalance: Double read Get_CurrentBalance write Set_CurrentBalance;
    property CurrentBalanceSpecified: WordBool read Get_CurrentBalanceSpecified write Set_CurrentBalanceSpecified;
    property PaymentInstrumentDataSpecified: WordBool read Get_PaymentInstrumentDataSpecified write Set_PaymentInstrumentDataSpecified;
    property PaymentAcquirerDataSpecified: WordBool read Get_PaymentAcquirerDataSpecified write Set_PaymentAcquirerDataSpecified;
    property LoyaltyAccountStatusSpecified: WordBool read Get_LoyaltyAccountStatusSpecified write Set_LoyaltyAccountStatusSpecified;
    property CurrencySpecified: WordBool read Get_CurrencySpecified write Set_CurrencySpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PaymentAccountStatusTypeClassName: WideString read Get_PaymentAccountStatusTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPaymentAccountStatusTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1448777E-7FC7-4432-8368-16C00291586C}
// *********************************************************************//
  IPaymentAccountStatusTypeDisp = dispinterface
    ['{1448777E-7FC7-4432-8368-16C00291586C}']
    property PaymentInstrumentData: IPaymentInstrumentDataType dispid 1;
    property PaymentAcquirerData: IPaymentAcquirerDataType dispid 2;
    property LoyaltyAccountStatus: ILoyaltyAccountStatusType dispid 3;
    property Currency: WideString dispid 4;
    property CurrentBalance: Double dispid 5;
    property CurrentBalanceSpecified: WordBool dispid 6;
    property PaymentInstrumentDataSpecified: WordBool dispid 8;
    property PaymentAcquirerDataSpecified: WordBool dispid 9;
    property LoyaltyAccountStatusSpecified: WordBool dispid 10;
    property CurrencySpecified: WordBool dispid 11;
    property ObjectHasBeenSet: WordBool readonly dispid 12;
    property PaymentAccountStatusTypeClassName: WideString readonly dispid 13;
  end;

// *********************************************************************//
// Interface :   IPaymentAcquirerDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BAA66DE0-094E-4342-B50C-8F0BC39490C0}
// *********************************************************************//
  IPaymentAcquirerDataType = interface(IDispatch)
    ['{BAA66DE0-094E-4342-B50C-8F0BC39490C0}']
    function Get_AcquirerTransactionID: ITransactionIdentificationType; safecall;
    procedure _Set_AcquirerTransactionID(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_ApprovalCode: WideString; safecall;
    procedure Set_ApprovalCode(const pRetVal: WideString); safecall;
    function Get_AcquirerID: WideString; safecall;
    procedure Set_AcquirerID(const pRetVal: WideString); safecall;
    function Get_MerchantID: WideString; safecall;
    procedure Set_MerchantID(const pRetVal: WideString); safecall;
    function Get_AcquirerPOIID: WideString; safecall;
    procedure Set_AcquirerPOIID(const pRetVal: WideString); safecall;
    function Get_AcquirerTransactionIDSpecified: WordBool; safecall;
    procedure Set_AcquirerTransactionIDSpecified(pRetVal: WordBool); safecall;
    function Get_ApprovalCodeSpecified: WordBool; safecall;
    procedure Set_ApprovalCodeSpecified(pRetVal: WordBool); safecall;
    function Get_AcquirerIDSpecified: WordBool; safecall;
    procedure Set_AcquirerIDSpecified(pRetVal: WordBool); safecall;
    function Get_MerchantIDSpecified: WordBool; safecall;
    procedure Set_MerchantIDSpecified(pRetVal: WordBool); safecall;
    function Get_AcquirerPOIIDSpecified: WordBool; safecall;
    procedure Set_AcquirerPOIIDSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PaymentAcquirerDataTypeClassName: WideString; safecall;
    property AcquirerTransactionID: ITransactionIdentificationType read Get_AcquirerTransactionID write _Set_AcquirerTransactionID;
    property ApprovalCode: WideString read Get_ApprovalCode write Set_ApprovalCode;
    property AcquirerID: WideString read Get_AcquirerID write Set_AcquirerID;
    property MerchantID: WideString read Get_MerchantID write Set_MerchantID;
    property AcquirerPOIID: WideString read Get_AcquirerPOIID write Set_AcquirerPOIID;
    property AcquirerTransactionIDSpecified: WordBool read Get_AcquirerTransactionIDSpecified write Set_AcquirerTransactionIDSpecified;
    property ApprovalCodeSpecified: WordBool read Get_ApprovalCodeSpecified write Set_ApprovalCodeSpecified;
    property AcquirerIDSpecified: WordBool read Get_AcquirerIDSpecified write Set_AcquirerIDSpecified;
    property MerchantIDSpecified: WordBool read Get_MerchantIDSpecified write Set_MerchantIDSpecified;
    property AcquirerPOIIDSpecified: WordBool read Get_AcquirerPOIIDSpecified write Set_AcquirerPOIIDSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PaymentAcquirerDataTypeClassName: WideString read Get_PaymentAcquirerDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPaymentAcquirerDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BAA66DE0-094E-4342-B50C-8F0BC39490C0}
// *********************************************************************//
  IPaymentAcquirerDataTypeDisp = dispinterface
    ['{BAA66DE0-094E-4342-B50C-8F0BC39490C0}']
    property AcquirerTransactionID: ITransactionIdentificationType dispid 1;
    property ApprovalCode: WideString dispid 2;
    property AcquirerID: WideString dispid 3;
    property MerchantID: WideString dispid 4;
    property AcquirerPOIID: WideString dispid 5;
    property AcquirerTransactionIDSpecified: WordBool dispid 7;
    property ApprovalCodeSpecified: WordBool dispid 8;
    property AcquirerIDSpecified: WordBool dispid 9;
    property MerchantIDSpecified: WordBool dispid 10;
    property AcquirerPOIIDSpecified: WordBool dispid 11;
    property ObjectHasBeenSet: WordBool readonly dispid 12;
    property PaymentAcquirerDataTypeClassName: WideString readonly dispid 13;
  end;

// *********************************************************************//
// Interface :   ILoyaltyAccountStatusType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2418E103-B9AC-491E-B9C7-7DF036148C4B}
// *********************************************************************//
  ILoyaltyAccountStatusType = interface(IDispatch)
    ['{2418E103-B9AC-491E-B9C7-7DF036148C4B}']
    function Get_LoyaltyAccount: ILoyaltyAccountType; safecall;
    procedure _Set_LoyaltyAccount(const pRetVal: ILoyaltyAccountType); safecall;
    function Get_CurrentBalance: Double; safecall;
    procedure Set_CurrentBalance(pRetVal: Double); safecall;
    function Get_CurrentBalanceSpecified: WordBool; safecall;
    procedure Set_CurrentBalanceSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyUnit: WideString; safecall;
    procedure Set_LoyaltyUnit(const pRetVal: WideString); safecall;
    function Get_Currency: WideString; safecall;
    procedure Set_Currency(const pRetVal: WideString); safecall;
    function Get_LoyaltyAccountSpecified: WordBool; safecall;
    procedure Set_LoyaltyAccountSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyUnitDefaultValue: WideString; safecall;
    function Get_LoyaltyUnitSpecified: WordBool; safecall;
    procedure Set_LoyaltyUnitSpecified(pRetVal: WordBool); safecall;
    function Get_CurrencySpecified: WordBool; safecall;
    procedure Set_CurrencySpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LoyaltyAccountStatusTypeClassName: WideString; safecall;
    property LoyaltyAccount: ILoyaltyAccountType read Get_LoyaltyAccount write _Set_LoyaltyAccount;
    property CurrentBalance: Double read Get_CurrentBalance write Set_CurrentBalance;
    property CurrentBalanceSpecified: WordBool read Get_CurrentBalanceSpecified write Set_CurrentBalanceSpecified;
    property LoyaltyUnit: WideString read Get_LoyaltyUnit write Set_LoyaltyUnit;
    property Currency: WideString read Get_Currency write Set_Currency;
    property LoyaltyAccountSpecified: WordBool read Get_LoyaltyAccountSpecified write Set_LoyaltyAccountSpecified;
    property LoyaltyUnitDefaultValue: WideString read Get_LoyaltyUnitDefaultValue;
    property LoyaltyUnitSpecified: WordBool read Get_LoyaltyUnitSpecified write Set_LoyaltyUnitSpecified;
    property CurrencySpecified: WordBool read Get_CurrencySpecified write Set_CurrencySpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LoyaltyAccountStatusTypeClassName: WideString read Get_LoyaltyAccountStatusTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyAccountStatusTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2418E103-B9AC-491E-B9C7-7DF036148C4B}
// *********************************************************************//
  ILoyaltyAccountStatusTypeDisp = dispinterface
    ['{2418E103-B9AC-491E-B9C7-7DF036148C4B}']
    property LoyaltyAccount: ILoyaltyAccountType dispid 2;
    property CurrentBalance: Double dispid 3;
    property CurrentBalanceSpecified: WordBool dispid 4;
    property LoyaltyUnit: WideString dispid 5;
    property Currency: WideString dispid 6;
    property LoyaltyAccountSpecified: WordBool dispid 7;
    property LoyaltyUnitDefaultValue: WideString readonly dispid 8;
    property LoyaltyUnitSpecified: WordBool dispid 9;
    property CurrencySpecified: WordBool dispid 10;
    property ObjectHasBeenSet: WordBool readonly dispid 11;
    property LoyaltyAccountStatusTypeClassName: WideString readonly dispid 12;
  end;

// *********************************************************************//
// Interface :   ILoyaltyAccountType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {529438D2-90EA-42E1-B5E9-CFEBE746977D}
// *********************************************************************//
  ILoyaltyAccountType = interface(IDispatch)
    ['{529438D2-90EA-42E1-B5E9-CFEBE746977D}']
    function Get_LoyaltyAccountID: ILoyaltyAccountIDType; safecall;
    procedure _Set_LoyaltyAccountID(const pRetVal: ILoyaltyAccountIDType); safecall;
    function Get_LoyaltyBrand: WideString; safecall;
    procedure Set_LoyaltyBrand(const pRetVal: WideString); safecall;
    function Get_LoyaltyAccountIDSpecified: WordBool; safecall;
    procedure Set_LoyaltyAccountIDSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyBrandSpecified: WordBool; safecall;
    procedure Set_LoyaltyBrandSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LoyaltyAccountTypeClassName: WideString; safecall;
    property LoyaltyAccountID: ILoyaltyAccountIDType read Get_LoyaltyAccountID write _Set_LoyaltyAccountID;
    property LoyaltyBrand: WideString read Get_LoyaltyBrand write Set_LoyaltyBrand;
    property LoyaltyAccountIDSpecified: WordBool read Get_LoyaltyAccountIDSpecified write Set_LoyaltyAccountIDSpecified;
    property LoyaltyBrandSpecified: WordBool read Get_LoyaltyBrandSpecified write Set_LoyaltyBrandSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LoyaltyAccountTypeClassName: WideString read Get_LoyaltyAccountTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyAccountTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {529438D2-90EA-42E1-B5E9-CFEBE746977D}
// *********************************************************************//
  ILoyaltyAccountTypeDisp = dispinterface
    ['{529438D2-90EA-42E1-B5E9-CFEBE746977D}']
    property LoyaltyAccountID: ILoyaltyAccountIDType dispid 1;
    property LoyaltyBrand: WideString dispid 2;
    property LoyaltyAccountIDSpecified: WordBool dispid 4;
    property LoyaltyBrandSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property LoyaltyAccountTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IBatchRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0F0B4EF1-2596-45F9-A713-2A53BCFA5633}
// *********************************************************************//
  IBatchRequestType = interface(IDispatch)
    ['{0F0B4EF1-2596-45F9-A713-2A53BCFA5633}']
    function Get_TransactionToPerform: PSafeArray; safecall;
    procedure Set_TransactionToPerform(pRetVal: PSafeArray); safecall;
    function Get_RemoveAllFlag: WordBool; safecall;
    procedure Set_RemoveAllFlag(pRetVal: WordBool); safecall;
    function Get_RemoveAllFlagSpecified: WordBool; safecall;
    procedure Set_RemoveAllFlagSpecified(pRetVal: WordBool); safecall;
    function Get_TransactionToPerformSpecified: WordBool; safecall;
    procedure Set_TransactionToPerformSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_BatchRequestTypeClassName: WideString; safecall;
    function TransactionToPerformLength: Integer; safecall;
    function TransactionToPerformGetItem(index: Integer): ITransactionToPerformType; safecall;
    function TransactionToPerformSetItem(index: Integer; const value: ITransactionToPerformType): WordBool; safecall;
    function TransactionToPerformAddItem(const value: ITransactionToPerformType): WordBool; safecall;
    function TransactionToPerformRemoveItem(index: Integer): WordBool; safecall;
    function TransactionToPerformInsertItem(index: Integer; const value: ITransactionToPerformType): Integer; safecall;
    property TransactionToPerform: PSafeArray read Get_TransactionToPerform write Set_TransactionToPerform;
    property RemoveAllFlag: WordBool read Get_RemoveAllFlag write Set_RemoveAllFlag;
    property RemoveAllFlagSpecified: WordBool read Get_RemoveAllFlagSpecified write Set_RemoveAllFlagSpecified;
    property TransactionToPerformSpecified: WordBool read Get_TransactionToPerformSpecified write Set_TransactionToPerformSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property BatchRequestTypeClassName: WideString read Get_BatchRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IBatchRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0F0B4EF1-2596-45F9-A713-2A53BCFA5633}
// *********************************************************************//
  IBatchRequestTypeDisp = dispinterface
    ['{0F0B4EF1-2596-45F9-A713-2A53BCFA5633}']
    property TransactionToPerform: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property RemoveAllFlag: WordBool dispid 2;
    property RemoveAllFlagSpecified: WordBool dispid 3;
    property TransactionToPerformSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 12;
    property BatchRequestTypeClassName: WideString readonly dispid 13;
    function TransactionToPerformLength: Integer; dispid 6;
    function TransactionToPerformGetItem(index: Integer): ITransactionToPerformType; dispid 7;
    function TransactionToPerformSetItem(index: Integer; const value: ITransactionToPerformType): WordBool; dispid 8;
    function TransactionToPerformAddItem(const value: ITransactionToPerformType): WordBool; dispid 9;
    function TransactionToPerformRemoveItem(index: Integer): WordBool; dispid 10;
    function TransactionToPerformInsertItem(index: Integer; const value: ITransactionToPerformType): Integer; dispid 11;
  end;

// *********************************************************************//
// Interface :   ITransactionToPerformType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B3DF8448-8F7B-4A31-8A79-85603CA6A76C}
// *********************************************************************//
  ITransactionToPerformType = interface(IDispatch)
    ['{B3DF8448-8F7B-4A31-8A79-85603CA6A76C}']
    function Get_Item: OleVariant; safecall;
    procedure _Set_Item(pRetVal: OleVariant); safecall;
    function Get_ItemSpecified: WordBool; safecall;
    procedure Set_ItemSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_TransactionToPerformTypeClassName: WideString; safecall;
    property Item: OleVariant read Get_Item write _Set_Item;
    property ItemSpecified: WordBool read Get_ItemSpecified write Set_ItemSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property TransactionToPerformTypeClassName: WideString read Get_TransactionToPerformTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ITransactionToPerformTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B3DF8448-8F7B-4A31-8A79-85603CA6A76C}
// *********************************************************************//
  ITransactionToPerformTypeDisp = dispinterface
    ['{B3DF8448-8F7B-4A31-8A79-85603CA6A76C}']
    property Item: OleVariant dispid 1;
    property ItemSpecified: WordBool dispid 3;
    property ObjectHasBeenSet: WordBool readonly dispid 4;
    property TransactionToPerformTypeClassName: WideString readonly dispid 5;
  end;

// *********************************************************************//
// Interface :   ILoyaltyRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C29B3CAF-E468-4CBC-9E46-A9D723C5F649}
// *********************************************************************//
  ILoyaltyRequestType = interface(IDispatch)
    ['{C29B3CAF-E468-4CBC-9E46-A9D723C5F649}']
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_LoyaltyTransaction: ILoyaltyTransactionType; safecall;
    procedure _Set_LoyaltyTransaction(const pRetVal: ILoyaltyTransactionType); safecall;
    function Get_LoyaltyData: PSafeArray; safecall;
    procedure Set_LoyaltyData(pRetVal: PSafeArray); safecall;
    function Get_SaleDataSpecified: WordBool; safecall;
    procedure Set_SaleDataSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyTransactionSpecified: WordBool; safecall;
    procedure Set_LoyaltyTransactionSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyDataSpecified: WordBool; safecall;
    procedure Set_LoyaltyDataSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LoyaltyRequestTypeClassName: WideString; safecall;
    function LoyaltyDataLength: Integer; safecall;
    function LoyaltyDataGetItem(index: Integer): ILoyaltyDataType; safecall;
    function LoyaltyDataSetItem(index: Integer; const value: ILoyaltyDataType): WordBool; safecall;
    function LoyaltyDataAddItem(const value: ILoyaltyDataType): WordBool; safecall;
    function LoyaltyDataRemoveItem(index: Integer): WordBool; safecall;
    function LoyaltyDataInsertItem(index: Integer; const value: ILoyaltyDataType): Integer; safecall;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property LoyaltyTransaction: ILoyaltyTransactionType read Get_LoyaltyTransaction write _Set_LoyaltyTransaction;
    property LoyaltyData: PSafeArray read Get_LoyaltyData write Set_LoyaltyData;
    property SaleDataSpecified: WordBool read Get_SaleDataSpecified write Set_SaleDataSpecified;
    property LoyaltyTransactionSpecified: WordBool read Get_LoyaltyTransactionSpecified write Set_LoyaltyTransactionSpecified;
    property LoyaltyDataSpecified: WordBool read Get_LoyaltyDataSpecified write Set_LoyaltyDataSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LoyaltyRequestTypeClassName: WideString read Get_LoyaltyRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C29B3CAF-E468-4CBC-9E46-A9D723C5F649}
// *********************************************************************//
  ILoyaltyRequestTypeDisp = dispinterface
    ['{C29B3CAF-E468-4CBC-9E46-A9D723C5F649}']
    property SaleData: ISaleDataType dispid 1;
    property LoyaltyTransaction: ILoyaltyTransactionType dispid 2;
    property LoyaltyData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property SaleDataSpecified: WordBool dispid 5;
    property LoyaltyTransactionSpecified: WordBool dispid 6;
    property LoyaltyDataSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 14;
    property LoyaltyRequestTypeClassName: WideString readonly dispid 15;
    function LoyaltyDataLength: Integer; dispid 8;
    function LoyaltyDataGetItem(index: Integer): ILoyaltyDataType; dispid 9;
    function LoyaltyDataSetItem(index: Integer; const value: ILoyaltyDataType): WordBool; dispid 10;
    function LoyaltyDataAddItem(const value: ILoyaltyDataType): WordBool; dispid 11;
    function LoyaltyDataRemoveItem(index: Integer): WordBool; dispid 12;
    function LoyaltyDataInsertItem(index: Integer; const value: ILoyaltyDataType): Integer; dispid 13;
  end;

// *********************************************************************//
// Interface :   ISaleDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {928037B8-9871-4F26-A6F1-D50D45FBDAC3}
// *********************************************************************//
  ISaleDataType = interface(IDispatch)
    ['{928037B8-9871-4F26-A6F1-D50D45FBDAC3}']
    function Get_SaleTransactionID: ITransactionIdentificationType; safecall;
    procedure _Set_SaleTransactionID(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_SaleTerminalData: ISaleTerminalDataType; safecall;
    procedure _Set_SaleTerminalData(const pRetVal: ISaleTerminalDataType); safecall;
    function Get_SponsoredMerchant: PSafeArray; safecall;
    procedure Set_SponsoredMerchant(pRetVal: PSafeArray); safecall;
    function Get_SaleToPOIData: WideString; safecall;
    procedure Set_SaleToPOIData(const pRetVal: WideString); safecall;
    function Get_SaleToAcquirerData: WideString; safecall;
    procedure Set_SaleToAcquirerData(const pRetVal: WideString); safecall;
    function Get_SaleToIssuerData: ISaleToIssuerDataType; safecall;
    procedure _Set_SaleToIssuerData(const pRetVal: ISaleToIssuerDataType); safecall;
    function Get_OperatorID: WideString; safecall;
    procedure Set_OperatorID(const pRetVal: WideString); safecall;
    function Get_OperatorLanguage: WideString; safecall;
    procedure Set_OperatorLanguage(const pRetVal: WideString); safecall;
    function Get_ShiftNumber: WideString; safecall;
    procedure Set_ShiftNumber(const pRetVal: WideString); safecall;
    function Get_SaleReferenceID: WideString; safecall;
    procedure Set_SaleReferenceID(const pRetVal: WideString); safecall;
    function Get_TokenRequestedType: WideString; safecall;
    procedure Set_TokenRequestedType(const pRetVal: WideString); safecall;
    function Get_CustomerOrderID: WideString; safecall;
    procedure Set_CustomerOrderID(const pRetVal: WideString); safecall;
    function Get_CustomerOrderReq: PSafeArray; safecall;
    procedure Set_CustomerOrderReq(pRetVal: PSafeArray); safecall;
    function Get_SaleTransactionIDSpecified: WordBool; safecall;
    procedure Set_SaleTransactionIDSpecified(pRetVal: WordBool); safecall;
    function Get_SaleTerminalDataSpecified: WordBool; safecall;
    procedure Set_SaleTerminalDataSpecified(pRetVal: WordBool); safecall;
    function Get_SponsoredMerchantSpecified: WordBool; safecall;
    procedure Set_SponsoredMerchantSpecified(pRetVal: WordBool); safecall;
    function Get_SaleToPOIDataSpecified: WordBool; safecall;
    procedure Set_SaleToPOIDataSpecified(pRetVal: WordBool); safecall;
    function Get_SaleToAcquirerDataSpecified: WordBool; safecall;
    procedure Set_SaleToAcquirerDataSpecified(pRetVal: WordBool); safecall;
    function Get_SaleToIssuerDataSpecified: WordBool; safecall;
    procedure Set_SaleToIssuerDataSpecified(pRetVal: WordBool); safecall;
    function Get_OperatorIDSpecified: WordBool; safecall;
    procedure Set_OperatorIDSpecified(pRetVal: WordBool); safecall;
    function Get_OperatorLanguageSpecified: WordBool; safecall;
    procedure Set_OperatorLanguageSpecified(pRetVal: WordBool); safecall;
    function Get_ShiftNumberSpecified: WordBool; safecall;
    procedure Set_ShiftNumberSpecified(pRetVal: WordBool); safecall;
    function Get_SaleReferenceIDSpecified: WordBool; safecall;
    procedure Set_SaleReferenceIDSpecified(pRetVal: WordBool); safecall;
    function Get_TokenRequestedTypeSpecified: WordBool; safecall;
    procedure Set_TokenRequestedTypeSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerOrderIDSpecified: WordBool; safecall;
    procedure Set_CustomerOrderIDSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerOrderReqSpecified: WordBool; safecall;
    procedure Set_CustomerOrderReqSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SaleDataTypeClassName: WideString; safecall;
    function SponsoredMerchantLength: Integer; safecall;
    function SponsoredMerchantGetItem(index: Integer): ISponsoredMerchantType; safecall;
    function SponsoredMerchantSetItem(index: Integer; const value: ISponsoredMerchantType): WordBool; safecall;
    function SponsoredMerchantAddItem(const value: ISponsoredMerchantType): WordBool; safecall;
    function SponsoredMerchantRemoveItem(index: Integer): WordBool; safecall;
    function SponsoredMerchantInsertItem(index: Integer; const value: ISponsoredMerchantType): Integer; safecall;
    function CustomerOrderReqLength: Integer; safecall;
    function CustomerOrderReqGetItem(index: Integer): WideString; safecall;
    function CustomerOrderReqSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function CustomerOrderReqAddItem(const value: WideString): WordBool; safecall;
    function CustomerOrderReqRemoveItem(index: Integer): WordBool; safecall;
    function CustomerOrderReqInsertItem(index: Integer; const value: WideString): Integer; safecall;
    property SaleTransactionID: ITransactionIdentificationType read Get_SaleTransactionID write _Set_SaleTransactionID;
    property SaleTerminalData: ISaleTerminalDataType read Get_SaleTerminalData write _Set_SaleTerminalData;
    property SponsoredMerchant: PSafeArray read Get_SponsoredMerchant write Set_SponsoredMerchant;
    property SaleToPOIData: WideString read Get_SaleToPOIData write Set_SaleToPOIData;
    property SaleToAcquirerData: WideString read Get_SaleToAcquirerData write Set_SaleToAcquirerData;
    property SaleToIssuerData: ISaleToIssuerDataType read Get_SaleToIssuerData write _Set_SaleToIssuerData;
    property OperatorID: WideString read Get_OperatorID write Set_OperatorID;
    property OperatorLanguage: WideString read Get_OperatorLanguage write Set_OperatorLanguage;
    property ShiftNumber: WideString read Get_ShiftNumber write Set_ShiftNumber;
    property SaleReferenceID: WideString read Get_SaleReferenceID write Set_SaleReferenceID;
    property TokenRequestedType: WideString read Get_TokenRequestedType write Set_TokenRequestedType;
    property CustomerOrderID: WideString read Get_CustomerOrderID write Set_CustomerOrderID;
    property CustomerOrderReq: PSafeArray read Get_CustomerOrderReq write Set_CustomerOrderReq;
    property SaleTransactionIDSpecified: WordBool read Get_SaleTransactionIDSpecified write Set_SaleTransactionIDSpecified;
    property SaleTerminalDataSpecified: WordBool read Get_SaleTerminalDataSpecified write Set_SaleTerminalDataSpecified;
    property SponsoredMerchantSpecified: WordBool read Get_SponsoredMerchantSpecified write Set_SponsoredMerchantSpecified;
    property SaleToPOIDataSpecified: WordBool read Get_SaleToPOIDataSpecified write Set_SaleToPOIDataSpecified;
    property SaleToAcquirerDataSpecified: WordBool read Get_SaleToAcquirerDataSpecified write Set_SaleToAcquirerDataSpecified;
    property SaleToIssuerDataSpecified: WordBool read Get_SaleToIssuerDataSpecified write Set_SaleToIssuerDataSpecified;
    property OperatorIDSpecified: WordBool read Get_OperatorIDSpecified write Set_OperatorIDSpecified;
    property OperatorLanguageSpecified: WordBool read Get_OperatorLanguageSpecified write Set_OperatorLanguageSpecified;
    property ShiftNumberSpecified: WordBool read Get_ShiftNumberSpecified write Set_ShiftNumberSpecified;
    property SaleReferenceIDSpecified: WordBool read Get_SaleReferenceIDSpecified write Set_SaleReferenceIDSpecified;
    property TokenRequestedTypeSpecified: WordBool read Get_TokenRequestedTypeSpecified write Set_TokenRequestedTypeSpecified;
    property CustomerOrderIDSpecified: WordBool read Get_CustomerOrderIDSpecified write Set_CustomerOrderIDSpecified;
    property CustomerOrderReqSpecified: WordBool read Get_CustomerOrderReqSpecified write Set_CustomerOrderReqSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SaleDataTypeClassName: WideString read Get_SaleDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISaleDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {928037B8-9871-4F26-A6F1-D50D45FBDAC3}
// *********************************************************************//
  ISaleDataTypeDisp = dispinterface
    ['{928037B8-9871-4F26-A6F1-D50D45FBDAC3}']
    property SaleTransactionID: ITransactionIdentificationType dispid 1;
    property SaleTerminalData: ISaleTerminalDataType dispid 2;
    property SponsoredMerchant: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property SaleToPOIData: WideString dispid 4;
    property SaleToAcquirerData: WideString dispid 5;
    property SaleToIssuerData: ISaleToIssuerDataType dispid 6;
    property OperatorID: WideString dispid 7;
    property OperatorLanguage: WideString dispid 8;
    property ShiftNumber: WideString dispid 9;
    property SaleReferenceID: WideString dispid 10;
    property TokenRequestedType: WideString dispid 11;
    property CustomerOrderID: WideString dispid 12;
    property CustomerOrderReq: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 13;
    property SaleTransactionIDSpecified: WordBool dispid 15;
    property SaleTerminalDataSpecified: WordBool dispid 16;
    property SponsoredMerchantSpecified: WordBool dispid 17;
    property SaleToPOIDataSpecified: WordBool dispid 24;
    property SaleToAcquirerDataSpecified: WordBool dispid 25;
    property SaleToIssuerDataSpecified: WordBool dispid 26;
    property OperatorIDSpecified: WordBool dispid 27;
    property OperatorLanguageSpecified: WordBool dispid 28;
    property ShiftNumberSpecified: WordBool dispid 29;
    property SaleReferenceIDSpecified: WordBool dispid 30;
    property TokenRequestedTypeSpecified: WordBool dispid 31;
    property CustomerOrderIDSpecified: WordBool dispid 32;
    property CustomerOrderReqSpecified: WordBool dispid 33;
    property ObjectHasBeenSet: WordBool readonly dispid 40;
    property SaleDataTypeClassName: WideString readonly dispid 41;
    function SponsoredMerchantLength: Integer; dispid 18;
    function SponsoredMerchantGetItem(index: Integer): ISponsoredMerchantType; dispid 19;
    function SponsoredMerchantSetItem(index: Integer; const value: ISponsoredMerchantType): WordBool; dispid 20;
    function SponsoredMerchantAddItem(const value: ISponsoredMerchantType): WordBool; dispid 21;
    function SponsoredMerchantRemoveItem(index: Integer): WordBool; dispid 22;
    function SponsoredMerchantInsertItem(index: Integer; const value: ISponsoredMerchantType): Integer; dispid 23;
    function CustomerOrderReqLength: Integer; dispid 34;
    function CustomerOrderReqGetItem(index: Integer): WideString; dispid 35;
    function CustomerOrderReqSetItem(index: Integer; const value: WideString): WordBool; dispid 36;
    function CustomerOrderReqAddItem(const value: WideString): WordBool; dispid 37;
    function CustomerOrderReqRemoveItem(index: Integer): WordBool; dispid 38;
    function CustomerOrderReqInsertItem(index: Integer; const value: WideString): Integer; dispid 39;
  end;

// *********************************************************************//
// Interface :   ISaleTerminalDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F7F55843-9015-458D-B055-0004FA36EBCB}
// *********************************************************************//
  ISaleTerminalDataType = interface(IDispatch)
    ['{F7F55843-9015-458D-B055-0004FA36EBCB}']
    function Get_SaleCapabilities: WideString; safecall;
    procedure Set_SaleCapabilities(const pRetVal: WideString); safecall;
    function Get_SaleProfile: ISaleProfileType; safecall;
    procedure _Set_SaleProfile(const pRetVal: ISaleProfileType); safecall;
    function Get_TerminalEnvironment: WideString; safecall;
    procedure Set_TerminalEnvironment(const pRetVal: WideString); safecall;
    function Get_TotalsGroupID: WideString; safecall;
    procedure Set_TotalsGroupID(const pRetVal: WideString); safecall;
    function Get_SaleCapabilitiesSpecified: WordBool; safecall;
    procedure Set_SaleCapabilitiesSpecified(pRetVal: WordBool); safecall;
    function Get_SaleProfileSpecified: WordBool; safecall;
    procedure Set_SaleProfileSpecified(pRetVal: WordBool); safecall;
    function Get_TerminalEnvironmentSpecified: WordBool; safecall;
    procedure Set_TerminalEnvironmentSpecified(pRetVal: WordBool); safecall;
    function Get_TotalsGroupIDSpecified: WordBool; safecall;
    procedure Set_TotalsGroupIDSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SaleTerminalDataTypeClassName: WideString; safecall;
    property SaleCapabilities: WideString read Get_SaleCapabilities write Set_SaleCapabilities;
    property SaleProfile: ISaleProfileType read Get_SaleProfile write _Set_SaleProfile;
    property TerminalEnvironment: WideString read Get_TerminalEnvironment write Set_TerminalEnvironment;
    property TotalsGroupID: WideString read Get_TotalsGroupID write Set_TotalsGroupID;
    property SaleCapabilitiesSpecified: WordBool read Get_SaleCapabilitiesSpecified write Set_SaleCapabilitiesSpecified;
    property SaleProfileSpecified: WordBool read Get_SaleProfileSpecified write Set_SaleProfileSpecified;
    property TerminalEnvironmentSpecified: WordBool read Get_TerminalEnvironmentSpecified write Set_TerminalEnvironmentSpecified;
    property TotalsGroupIDSpecified: WordBool read Get_TotalsGroupIDSpecified write Set_TotalsGroupIDSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SaleTerminalDataTypeClassName: WideString read Get_SaleTerminalDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISaleTerminalDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F7F55843-9015-458D-B055-0004FA36EBCB}
// *********************************************************************//
  ISaleTerminalDataTypeDisp = dispinterface
    ['{F7F55843-9015-458D-B055-0004FA36EBCB}']
    property SaleCapabilities: WideString dispid 1;
    property SaleProfile: ISaleProfileType dispid 2;
    property TerminalEnvironment: WideString dispid 3;
    property TotalsGroupID: WideString dispid 4;
    property SaleCapabilitiesSpecified: WordBool dispid 6;
    property SaleProfileSpecified: WordBool dispid 7;
    property TerminalEnvironmentSpecified: WordBool dispid 8;
    property TotalsGroupIDSpecified: WordBool dispid 9;
    property ObjectHasBeenSet: WordBool readonly dispid 10;
    property SaleTerminalDataTypeClassName: WideString readonly dispid 11;
  end;

// *********************************************************************//
// Interface :   ISaleProfileType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {47553BC4-8B70-45BA-86BB-F1B46E3D2CA0}
// *********************************************************************//
  ISaleProfileType = interface(IDispatch)
    ['{47553BC4-8B70-45BA-86BB-F1B46E3D2CA0}']
    function Get_ServiceProfiles: WideString; safecall;
    procedure Set_ServiceProfiles(const pRetVal: WideString); safecall;
    function Get_GenericProfile: WideString; safecall;
    procedure Set_GenericProfile(const pRetVal: WideString); safecall;
    function Get_ServiceProfilesSpecified: WordBool; safecall;
    procedure Set_ServiceProfilesSpecified(pRetVal: WordBool); safecall;
    function Get_GenericProfileDefaultValue: WideString; safecall;
    function Get_GenericProfileSpecified: WordBool; safecall;
    procedure Set_GenericProfileSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SaleProfileTypeClassName: WideString; safecall;
    property ServiceProfiles: WideString read Get_ServiceProfiles write Set_ServiceProfiles;
    property GenericProfile: WideString read Get_GenericProfile write Set_GenericProfile;
    property ServiceProfilesSpecified: WordBool read Get_ServiceProfilesSpecified write Set_ServiceProfilesSpecified;
    property GenericProfileDefaultValue: WideString read Get_GenericProfileDefaultValue;
    property GenericProfileSpecified: WordBool read Get_GenericProfileSpecified write Set_GenericProfileSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SaleProfileTypeClassName: WideString read Get_SaleProfileTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISaleProfileTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {47553BC4-8B70-45BA-86BB-F1B46E3D2CA0}
// *********************************************************************//
  ISaleProfileTypeDisp = dispinterface
    ['{47553BC4-8B70-45BA-86BB-F1B46E3D2CA0}']
    property ServiceProfiles: WideString dispid 2;
    property GenericProfile: WideString dispid 3;
    property ServiceProfilesSpecified: WordBool dispid 4;
    property GenericProfileDefaultValue: WideString readonly dispid 5;
    property GenericProfileSpecified: WordBool dispid 6;
    property ObjectHasBeenSet: WordBool readonly dispid 7;
    property SaleProfileTypeClassName: WideString readonly dispid 8;
  end;

// *********************************************************************//
// Interface :   ISponsoredMerchantType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2F3091A4-0DB4-4EA1-8220-93537FB58258}
// *********************************************************************//
  ISponsoredMerchantType = interface(IDispatch)
    ['{2F3091A4-0DB4-4EA1-8220-93537FB58258}']
    function Get_MerchantName: WideString; safecall;
    procedure Set_MerchantName(const pRetVal: WideString); safecall;
    function Get_MerchantAddress: WideString; safecall;
    procedure Set_MerchantAddress(const pRetVal: WideString); safecall;
    function Get_MerchantCountry: WideString; safecall;
    procedure Set_MerchantCountry(const pRetVal: WideString); safecall;
    function Get_MerchantCategoryCode: WideString; safecall;
    procedure Set_MerchantCategoryCode(const pRetVal: WideString); safecall;
    function Get_RegistrationID: WideString; safecall;
    procedure Set_RegistrationID(const pRetVal: WideString); safecall;
    function Get_MerchantNameSpecified: WordBool; safecall;
    procedure Set_MerchantNameSpecified(pRetVal: WordBool); safecall;
    function Get_MerchantAddressSpecified: WordBool; safecall;
    procedure Set_MerchantAddressSpecified(pRetVal: WordBool); safecall;
    function Get_MerchantCountrySpecified: WordBool; safecall;
    procedure Set_MerchantCountrySpecified(pRetVal: WordBool); safecall;
    function Get_MerchantCategoryCodeSpecified: WordBool; safecall;
    procedure Set_MerchantCategoryCodeSpecified(pRetVal: WordBool); safecall;
    function Get_RegistrationIDSpecified: WordBool; safecall;
    procedure Set_RegistrationIDSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SponsoredMerchantTypeClassName: WideString; safecall;
    property MerchantName: WideString read Get_MerchantName write Set_MerchantName;
    property MerchantAddress: WideString read Get_MerchantAddress write Set_MerchantAddress;
    property MerchantCountry: WideString read Get_MerchantCountry write Set_MerchantCountry;
    property MerchantCategoryCode: WideString read Get_MerchantCategoryCode write Set_MerchantCategoryCode;
    property RegistrationID: WideString read Get_RegistrationID write Set_RegistrationID;
    property MerchantNameSpecified: WordBool read Get_MerchantNameSpecified write Set_MerchantNameSpecified;
    property MerchantAddressSpecified: WordBool read Get_MerchantAddressSpecified write Set_MerchantAddressSpecified;
    property MerchantCountrySpecified: WordBool read Get_MerchantCountrySpecified write Set_MerchantCountrySpecified;
    property MerchantCategoryCodeSpecified: WordBool read Get_MerchantCategoryCodeSpecified write Set_MerchantCategoryCodeSpecified;
    property RegistrationIDSpecified: WordBool read Get_RegistrationIDSpecified write Set_RegistrationIDSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SponsoredMerchantTypeClassName: WideString read Get_SponsoredMerchantTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISponsoredMerchantTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2F3091A4-0DB4-4EA1-8220-93537FB58258}
// *********************************************************************//
  ISponsoredMerchantTypeDisp = dispinterface
    ['{2F3091A4-0DB4-4EA1-8220-93537FB58258}']
    property MerchantName: WideString dispid 1;
    property MerchantAddress: WideString dispid 2;
    property MerchantCountry: WideString dispid 3;
    property MerchantCategoryCode: WideString dispid 4;
    property RegistrationID: WideString dispid 5;
    property MerchantNameSpecified: WordBool dispid 7;
    property MerchantAddressSpecified: WordBool dispid 8;
    property MerchantCountrySpecified: WordBool dispid 9;
    property MerchantCategoryCodeSpecified: WordBool dispid 10;
    property RegistrationIDSpecified: WordBool dispid 11;
    property ObjectHasBeenSet: WordBool readonly dispid 12;
    property SponsoredMerchantTypeClassName: WideString readonly dispid 13;
  end;

// *********************************************************************//
// Interface :   ISaleToIssuerDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B8FD31FF-75C7-469B-916F-894CDFB09687}
// *********************************************************************//
  ISaleToIssuerDataType = interface(IDispatch)
    ['{B8FD31FF-75C7-469B-916F-894CDFB09687}']
    function Get_StatementReference: WideString; safecall;
    procedure Set_StatementReference(const pRetVal: WideString); safecall;
    function Get_StatementReferenceSpecified: WordBool; safecall;
    procedure Set_StatementReferenceSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SaleToIssuerDataTypeClassName: WideString; safecall;
    property StatementReference: WideString read Get_StatementReference write Set_StatementReference;
    property StatementReferenceSpecified: WordBool read Get_StatementReferenceSpecified write Set_StatementReferenceSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SaleToIssuerDataTypeClassName: WideString read Get_SaleToIssuerDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISaleToIssuerDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B8FD31FF-75C7-469B-916F-894CDFB09687}
// *********************************************************************//
  ISaleToIssuerDataTypeDisp = dispinterface
    ['{B8FD31FF-75C7-469B-916F-894CDFB09687}']
    property StatementReference: WideString dispid 1;
    property StatementReferenceSpecified: WordBool dispid 3;
    property ObjectHasBeenSet: WordBool readonly dispid 4;
    property SaleToIssuerDataTypeClassName: WideString readonly dispid 5;
  end;

// *********************************************************************//
// Interface :   ILoyaltyTransactionType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {53FDFFF1-C31D-48A7-AFD4-24F67B9A1C3D}
// *********************************************************************//
  ILoyaltyTransactionType = interface(IDispatch)
    ['{53FDFFF1-C31D-48A7-AFD4-24F67B9A1C3D}']
    function Get_OriginalPOITransaction: IOriginalPOITransactionType; safecall;
    procedure _Set_OriginalPOITransaction(const pRetVal: IOriginalPOITransactionType); safecall;
    function Get_TransactionConditions: ITransactionConditionsType; safecall;
    procedure _Set_TransactionConditions(const pRetVal: ITransactionConditionsType); safecall;
    function Get_SaleItem: PSafeArray; safecall;
    procedure Set_SaleItem(pRetVal: PSafeArray); safecall;
    function Get_LoyaltyTransactionType1: WideString; safecall;
    procedure Set_LoyaltyTransactionType1(const pRetVal: WideString); safecall;
    function Get_Currency: WideString; safecall;
    procedure Set_Currency(const pRetVal: WideString); safecall;
    function Get_TotalAmount: Double; safecall;
    procedure Set_TotalAmount(pRetVal: Double); safecall;
    function Get_TotalAmountSpecified: WordBool; safecall;
    procedure Set_TotalAmountSpecified(pRetVal: WordBool); safecall;
    function Get_OriginalPOITransactionSpecified: WordBool; safecall;
    procedure Set_OriginalPOITransactionSpecified(pRetVal: WordBool); safecall;
    function Get_TransactionConditionsSpecified: WordBool; safecall;
    procedure Set_TransactionConditionsSpecified(pRetVal: WordBool); safecall;
    function Get_SaleItemSpecified: WordBool; safecall;
    procedure Set_SaleItemSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyTransactionType1Specified: WordBool; safecall;
    procedure Set_LoyaltyTransactionType1Specified(pRetVal: WordBool); safecall;
    function Get_CurrencySpecified: WordBool; safecall;
    procedure Set_CurrencySpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LoyaltyTransactionTypeClassName: WideString; safecall;
    function SaleItemLength: Integer; safecall;
    function SaleItemGetItem(index: Integer): ISaleItemType; safecall;
    function SaleItemSetItem(index: Integer; const value: ISaleItemType): WordBool; safecall;
    function SaleItemAddItem(const value: ISaleItemType): WordBool; safecall;
    function SaleItemRemoveItem(index: Integer): WordBool; safecall;
    function SaleItemInsertItem(index: Integer; const value: ISaleItemType): Integer; safecall;
    property OriginalPOITransaction: IOriginalPOITransactionType read Get_OriginalPOITransaction write _Set_OriginalPOITransaction;
    property TransactionConditions: ITransactionConditionsType read Get_TransactionConditions write _Set_TransactionConditions;
    property SaleItem: PSafeArray read Get_SaleItem write Set_SaleItem;
    property LoyaltyTransactionType1: WideString read Get_LoyaltyTransactionType1 write Set_LoyaltyTransactionType1;
    property Currency: WideString read Get_Currency write Set_Currency;
    property TotalAmount: Double read Get_TotalAmount write Set_TotalAmount;
    property TotalAmountSpecified: WordBool read Get_TotalAmountSpecified write Set_TotalAmountSpecified;
    property OriginalPOITransactionSpecified: WordBool read Get_OriginalPOITransactionSpecified write Set_OriginalPOITransactionSpecified;
    property TransactionConditionsSpecified: WordBool read Get_TransactionConditionsSpecified write Set_TransactionConditionsSpecified;
    property SaleItemSpecified: WordBool read Get_SaleItemSpecified write Set_SaleItemSpecified;
    property LoyaltyTransactionType1Specified: WordBool read Get_LoyaltyTransactionType1Specified write Set_LoyaltyTransactionType1Specified;
    property CurrencySpecified: WordBool read Get_CurrencySpecified write Set_CurrencySpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LoyaltyTransactionTypeClassName: WideString read Get_LoyaltyTransactionTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyTransactionTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {53FDFFF1-C31D-48A7-AFD4-24F67B9A1C3D}
// *********************************************************************//
  ILoyaltyTransactionTypeDisp = dispinterface
    ['{53FDFFF1-C31D-48A7-AFD4-24F67B9A1C3D}']
    property OriginalPOITransaction: IOriginalPOITransactionType dispid 1;
    property TransactionConditions: ITransactionConditionsType dispid 2;
    property SaleItem: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property LoyaltyTransactionType1: WideString dispid 4;
    property Currency: WideString dispid 5;
    property TotalAmount: Double dispid 6;
    property TotalAmountSpecified: WordBool dispid 7;
    property OriginalPOITransactionSpecified: WordBool dispid 9;
    property TransactionConditionsSpecified: WordBool dispid 10;
    property SaleItemSpecified: WordBool dispid 11;
    property LoyaltyTransactionType1Specified: WordBool dispid 18;
    property CurrencySpecified: WordBool dispid 19;
    property ObjectHasBeenSet: WordBool readonly dispid 20;
    property LoyaltyTransactionTypeClassName: WideString readonly dispid 21;
    function SaleItemLength: Integer; dispid 12;
    function SaleItemGetItem(index: Integer): ISaleItemType; dispid 13;
    function SaleItemSetItem(index: Integer; const value: ISaleItemType): WordBool; dispid 14;
    function SaleItemAddItem(const value: ISaleItemType): WordBool; dispid 15;
    function SaleItemRemoveItem(index: Integer): WordBool; dispid 16;
    function SaleItemInsertItem(index: Integer; const value: ISaleItemType): Integer; dispid 17;
  end;

// *********************************************************************//
// Interface :   IOriginalPOITransactionType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D775A0CB-DF82-4459-A11D-091B86B1A6BA}
// *********************************************************************//
  IOriginalPOITransactionType = interface(IDispatch)
    ['{D775A0CB-DF82-4459-A11D-091B86B1A6BA}']
    function Get_POITransactionID: ITransactionIdentificationType; safecall;
    procedure _Set_POITransactionID(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_ApprovalCode: WideString; safecall;
    procedure Set_ApprovalCode(const pRetVal: WideString); safecall;
    function Get_HostTransactionID: ITransactionIdentificationType; safecall;
    procedure _Set_HostTransactionID(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ReuseCardDataFlag: WordBool; safecall;
    procedure Set_ReuseCardDataFlag(pRetVal: WordBool); safecall;
    function Get_CustomerLanguage: WideString; safecall;
    procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
    function Get_AcquirerID: WideString; safecall;
    procedure Set_AcquirerID(const pRetVal: WideString); safecall;
    function Get_POITransactionIDSpecified: WordBool; safecall;
    procedure Set_POITransactionIDSpecified(pRetVal: WordBool); safecall;
    function Get_ApprovalCodeSpecified: WordBool; safecall;
    procedure Set_ApprovalCodeSpecified(pRetVal: WordBool); safecall;
    function Get_HostTransactionIDSpecified: WordBool; safecall;
    procedure Set_HostTransactionIDSpecified(pRetVal: WordBool); safecall;
    function Get_SaleIDSpecified: WordBool; safecall;
    procedure Set_SaleIDSpecified(pRetVal: WordBool); safecall;
    function Get_POIIDSpecified: WordBool; safecall;
    procedure Set_POIIDSpecified(pRetVal: WordBool); safecall;
    function Get_ReuseCardDataFlagDefaultValue: WordBool; safecall;
    function Get_ReuseCardDataFlagSpecified: WordBool; safecall;
    procedure Set_ReuseCardDataFlagSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerLanguageSpecified: WordBool; safecall;
    procedure Set_CustomerLanguageSpecified(pRetVal: WordBool); safecall;
    function Get_AcquirerIDSpecified: WordBool; safecall;
    procedure Set_AcquirerIDSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_OriginalPOITransactionTypeClassName: WideString; safecall;
    property POITransactionID: ITransactionIdentificationType read Get_POITransactionID write _Set_POITransactionID;
    property ApprovalCode: WideString read Get_ApprovalCode write Set_ApprovalCode;
    property HostTransactionID: ITransactionIdentificationType read Get_HostTransactionID write _Set_HostTransactionID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ReuseCardDataFlag: WordBool read Get_ReuseCardDataFlag write Set_ReuseCardDataFlag;
    property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
    property AcquirerID: WideString read Get_AcquirerID write Set_AcquirerID;
    property POITransactionIDSpecified: WordBool read Get_POITransactionIDSpecified write Set_POITransactionIDSpecified;
    property ApprovalCodeSpecified: WordBool read Get_ApprovalCodeSpecified write Set_ApprovalCodeSpecified;
    property HostTransactionIDSpecified: WordBool read Get_HostTransactionIDSpecified write Set_HostTransactionIDSpecified;
    property SaleIDSpecified: WordBool read Get_SaleIDSpecified write Set_SaleIDSpecified;
    property POIIDSpecified: WordBool read Get_POIIDSpecified write Set_POIIDSpecified;
    property ReuseCardDataFlagDefaultValue: WordBool read Get_ReuseCardDataFlagDefaultValue;
    property ReuseCardDataFlagSpecified: WordBool read Get_ReuseCardDataFlagSpecified write Set_ReuseCardDataFlagSpecified;
    property CustomerLanguageSpecified: WordBool read Get_CustomerLanguageSpecified write Set_CustomerLanguageSpecified;
    property AcquirerIDSpecified: WordBool read Get_AcquirerIDSpecified write Set_AcquirerIDSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property OriginalPOITransactionTypeClassName: WideString read Get_OriginalPOITransactionTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IOriginalPOITransactionTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D775A0CB-DF82-4459-A11D-091B86B1A6BA}
// *********************************************************************//
  IOriginalPOITransactionTypeDisp = dispinterface
    ['{D775A0CB-DF82-4459-A11D-091B86B1A6BA}']
    property POITransactionID: ITransactionIdentificationType dispid 2;
    property ApprovalCode: WideString dispid 3;
    property HostTransactionID: ITransactionIdentificationType dispid 4;
    property SaleID: WideString dispid 5;
    property POIID: WideString dispid 6;
    property ReuseCardDataFlag: WordBool dispid 7;
    property CustomerLanguage: WideString dispid 8;
    property AcquirerID: WideString dispid 9;
    property POITransactionIDSpecified: WordBool dispid 10;
    property ApprovalCodeSpecified: WordBool dispid 11;
    property HostTransactionIDSpecified: WordBool dispid 12;
    property SaleIDSpecified: WordBool dispid 13;
    property POIIDSpecified: WordBool dispid 14;
    property ReuseCardDataFlagDefaultValue: WordBool readonly dispid 15;
    property ReuseCardDataFlagSpecified: WordBool dispid 16;
    property CustomerLanguageSpecified: WordBool dispid 17;
    property AcquirerIDSpecified: WordBool dispid 18;
    property ObjectHasBeenSet: WordBool readonly dispid 19;
    property OriginalPOITransactionTypeClassName: WideString readonly dispid 20;
  end;

// *********************************************************************//
// Interface :   ITransactionConditionsType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {133DDFC1-383C-4E72-8B7C-F8B688901137}
// *********************************************************************//
  ITransactionConditionsType = interface(IDispatch)
    ['{133DDFC1-383C-4E72-8B7C-F8B688901137}']
    function Get_AllowedPaymentBrand: PSafeArray; safecall;
    procedure Set_AllowedPaymentBrand(pRetVal: PSafeArray); safecall;
    function Get_AcquirerID: PSafeArray; safecall;
    procedure Set_AcquirerID(pRetVal: PSafeArray); safecall;
    function Get_AllowedLoyaltyBrand: PSafeArray; safecall;
    procedure Set_AllowedLoyaltyBrand(pRetVal: PSafeArray); safecall;
    function Get_ForceEntryMode: PSafeArray; safecall;
    procedure Set_ForceEntryMode(pRetVal: PSafeArray); safecall;
    function Get_DebitPreferredFlag: WordBool; safecall;
    procedure Set_DebitPreferredFlag(pRetVal: WordBool); safecall;
    function Get_LoyaltyHandling: WideString; safecall;
    procedure Set_LoyaltyHandling(const pRetVal: WideString); safecall;
    function Get_CustomerLanguage: WideString; safecall;
    procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
    function Get_ForceOnlineFlag: WordBool; safecall;
    procedure Set_ForceOnlineFlag(pRetVal: WordBool); safecall;
    function Get_MerchantCategoryCode: WideString; safecall;
    procedure Set_MerchantCategoryCode(const pRetVal: WideString); safecall;
    function Get_AllowedPaymentBrandSpecified: WordBool; safecall;
    procedure Set_AllowedPaymentBrandSpecified(pRetVal: WordBool); safecall;
    function Get_AcquirerIDSpecified: WordBool; safecall;
    procedure Set_AcquirerIDSpecified(pRetVal: WordBool); safecall;
    function Get_AllowedLoyaltyBrandSpecified: WordBool; safecall;
    procedure Set_AllowedLoyaltyBrandSpecified(pRetVal: WordBool); safecall;
    function Get_ForceEntryModeSpecified: WordBool; safecall;
    procedure Set_ForceEntryModeSpecified(pRetVal: WordBool); safecall;
    function Get_DebitPreferredFlagDefaultValue: WordBool; safecall;
    function Get_DebitPreferredFlagSpecified: WordBool; safecall;
    procedure Set_DebitPreferredFlagSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyHandlingDefaultValue: WideString; safecall;
    function Get_LoyaltyHandlingSpecified: WordBool; safecall;
    procedure Set_LoyaltyHandlingSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerLanguageSpecified: WordBool; safecall;
    procedure Set_CustomerLanguageSpecified(pRetVal: WordBool); safecall;
    function Get_ForceOnlineFlagDefaultValue: WordBool; safecall;
    function Get_ForceOnlineFlagSpecified: WordBool; safecall;
    procedure Set_ForceOnlineFlagSpecified(pRetVal: WordBool); safecall;
    function Get_MerchantCategoryCodeSpecified: WordBool; safecall;
    procedure Set_MerchantCategoryCodeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_TransactionConditionsTypeClassName: WideString; safecall;
    function AllowedPaymentBrandLength: Integer; safecall;
    function AllowedPaymentBrandGetItem(index: Integer): WideString; safecall;
    function AllowedPaymentBrandSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function AllowedPaymentBrandAddItem(const value: WideString): WordBool; safecall;
    function AllowedPaymentBrandRemoveItem(index: Integer): WordBool; safecall;
    function AllowedPaymentBrandInsertItem(index: Integer; const value: WideString): Integer; safecall;
    function AcquirerIDLength: Integer; safecall;
    function AcquirerIDGetItem(index: Integer): WideString; safecall;
    function AcquirerIDSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function AcquirerIDAddItem(const value: WideString): WordBool; safecall;
    function AcquirerIDRemoveItem(index: Integer): WordBool; safecall;
    function AcquirerIDInsertItem(index: Integer; const value: WideString): Integer; safecall;
    function AllowedLoyaltyBrandLength: Integer; safecall;
    function AllowedLoyaltyBrandGetItem(index: Integer): WideString; safecall;
    function AllowedLoyaltyBrandSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function AllowedLoyaltyBrandAddItem(const value: WideString): WordBool; safecall;
    function AllowedLoyaltyBrandRemoveItem(index: Integer): WordBool; safecall;
    function AllowedLoyaltyBrandInsertItem(index: Integer; const value: WideString): Integer; safecall;
    function ForceEntryModeLength: Integer; safecall;
    function ForceEntryModeGetItem(index: Integer): WideString; safecall;
    function ForceEntryModeSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function ForceEntryModeAddItem(const value: WideString): WordBool; safecall;
    function ForceEntryModeRemoveItem(index: Integer): WordBool; safecall;
    function ForceEntryModeInsertItem(index: Integer; const value: WideString): Integer; safecall;
    property AllowedPaymentBrand: PSafeArray read Get_AllowedPaymentBrand write Set_AllowedPaymentBrand;
    property AcquirerID: PSafeArray read Get_AcquirerID write Set_AcquirerID;
    property AllowedLoyaltyBrand: PSafeArray read Get_AllowedLoyaltyBrand write Set_AllowedLoyaltyBrand;
    property ForceEntryMode: PSafeArray read Get_ForceEntryMode write Set_ForceEntryMode;
    property DebitPreferredFlag: WordBool read Get_DebitPreferredFlag write Set_DebitPreferredFlag;
    property LoyaltyHandling: WideString read Get_LoyaltyHandling write Set_LoyaltyHandling;
    property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
    property ForceOnlineFlag: WordBool read Get_ForceOnlineFlag write Set_ForceOnlineFlag;
    property MerchantCategoryCode: WideString read Get_MerchantCategoryCode write Set_MerchantCategoryCode;
    property AllowedPaymentBrandSpecified: WordBool read Get_AllowedPaymentBrandSpecified write Set_AllowedPaymentBrandSpecified;
    property AcquirerIDSpecified: WordBool read Get_AcquirerIDSpecified write Set_AcquirerIDSpecified;
    property AllowedLoyaltyBrandSpecified: WordBool read Get_AllowedLoyaltyBrandSpecified write Set_AllowedLoyaltyBrandSpecified;
    property ForceEntryModeSpecified: WordBool read Get_ForceEntryModeSpecified write Set_ForceEntryModeSpecified;
    property DebitPreferredFlagDefaultValue: WordBool read Get_DebitPreferredFlagDefaultValue;
    property DebitPreferredFlagSpecified: WordBool read Get_DebitPreferredFlagSpecified write Set_DebitPreferredFlagSpecified;
    property LoyaltyHandlingDefaultValue: WideString read Get_LoyaltyHandlingDefaultValue;
    property LoyaltyHandlingSpecified: WordBool read Get_LoyaltyHandlingSpecified write Set_LoyaltyHandlingSpecified;
    property CustomerLanguageSpecified: WordBool read Get_CustomerLanguageSpecified write Set_CustomerLanguageSpecified;
    property ForceOnlineFlagDefaultValue: WordBool read Get_ForceOnlineFlagDefaultValue;
    property ForceOnlineFlagSpecified: WordBool read Get_ForceOnlineFlagSpecified write Set_ForceOnlineFlagSpecified;
    property MerchantCategoryCodeSpecified: WordBool read Get_MerchantCategoryCodeSpecified write Set_MerchantCategoryCodeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property TransactionConditionsTypeClassName: WideString read Get_TransactionConditionsTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ITransactionConditionsTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {133DDFC1-383C-4E72-8B7C-F8B688901137}
// *********************************************************************//
  ITransactionConditionsTypeDisp = dispinterface
    ['{133DDFC1-383C-4E72-8B7C-F8B688901137}']
    property AllowedPaymentBrand: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property AcquirerID: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property AllowedLoyaltyBrand: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property ForceEntryMode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property DebitPreferredFlag: WordBool dispid 6;
    property LoyaltyHandling: WideString dispid 7;
    property CustomerLanguage: WideString dispid 8;
    property ForceOnlineFlag: WordBool dispid 9;
    property MerchantCategoryCode: WideString dispid 10;
    property AllowedPaymentBrandSpecified: WordBool dispid 11;
    property AcquirerIDSpecified: WordBool dispid 18;
    property AllowedLoyaltyBrandSpecified: WordBool dispid 25;
    property ForceEntryModeSpecified: WordBool dispid 32;
    property DebitPreferredFlagDefaultValue: WordBool readonly dispid 39;
    property DebitPreferredFlagSpecified: WordBool dispid 40;
    property LoyaltyHandlingDefaultValue: WideString readonly dispid 41;
    property LoyaltyHandlingSpecified: WordBool dispid 42;
    property CustomerLanguageSpecified: WordBool dispid 43;
    property ForceOnlineFlagDefaultValue: WordBool readonly dispid 44;
    property ForceOnlineFlagSpecified: WordBool dispid 45;
    property MerchantCategoryCodeSpecified: WordBool dispid 46;
    property ObjectHasBeenSet: WordBool readonly dispid 47;
    property TransactionConditionsTypeClassName: WideString readonly dispid 48;
    function AllowedPaymentBrandLength: Integer; dispid 12;
    function AllowedPaymentBrandGetItem(index: Integer): WideString; dispid 13;
    function AllowedPaymentBrandSetItem(index: Integer; const value: WideString): WordBool; dispid 14;
    function AllowedPaymentBrandAddItem(const value: WideString): WordBool; dispid 15;
    function AllowedPaymentBrandRemoveItem(index: Integer): WordBool; dispid 16;
    function AllowedPaymentBrandInsertItem(index: Integer; const value: WideString): Integer; dispid 17;
    function AcquirerIDLength: Integer; dispid 19;
    function AcquirerIDGetItem(index: Integer): WideString; dispid 20;
    function AcquirerIDSetItem(index: Integer; const value: WideString): WordBool; dispid 21;
    function AcquirerIDAddItem(const value: WideString): WordBool; dispid 22;
    function AcquirerIDRemoveItem(index: Integer): WordBool; dispid 23;
    function AcquirerIDInsertItem(index: Integer; const value: WideString): Integer; dispid 24;
    function AllowedLoyaltyBrandLength: Integer; dispid 26;
    function AllowedLoyaltyBrandGetItem(index: Integer): WideString; dispid 27;
    function AllowedLoyaltyBrandSetItem(index: Integer; const value: WideString): WordBool; dispid 28;
    function AllowedLoyaltyBrandAddItem(const value: WideString): WordBool; dispid 29;
    function AllowedLoyaltyBrandRemoveItem(index: Integer): WordBool; dispid 30;
    function AllowedLoyaltyBrandInsertItem(index: Integer; const value: WideString): Integer; dispid 31;
    function ForceEntryModeLength: Integer; dispid 33;
    function ForceEntryModeGetItem(index: Integer): WideString; dispid 34;
    function ForceEntryModeSetItem(index: Integer; const value: WideString): WordBool; dispid 35;
    function ForceEntryModeAddItem(const value: WideString): WordBool; dispid 36;
    function ForceEntryModeRemoveItem(index: Integer): WordBool; dispid 37;
    function ForceEntryModeInsertItem(index: Integer; const value: WideString): Integer; dispid 38;
  end;

// *********************************************************************//
// Interface :   ISaleItemType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B99F918F-A4AB-4D1C-AC75-B9D54223D68A}
// *********************************************************************//
  ISaleItemType = interface(IDispatch)
    ['{B99F918F-A4AB-4D1C-AC75-B9D54223D68A}']
    function Get_UnitOfMeasure: WideString; safecall;
    procedure Set_UnitOfMeasure(const pRetVal: WideString); safecall;
    function Get_Quantity: Double; safecall;
    procedure Set_Quantity(pRetVal: Double); safecall;
    function Get_QuantitySpecified: WordBool; safecall;
    procedure Set_QuantitySpecified(pRetVal: WordBool); safecall;
    function Get_UnitPrice: Double; safecall;
    procedure Set_UnitPrice(pRetVal: Double); safecall;
    function Get_UnitPriceSpecified: WordBool; safecall;
    procedure Set_UnitPriceSpecified(pRetVal: WordBool); safecall;
    function Get_TaxCode: WideString; safecall;
    procedure Set_TaxCode(const pRetVal: WideString); safecall;
    function Get_SaleChannel: WideString; safecall;
    procedure Set_SaleChannel(const pRetVal: WideString); safecall;
    function Get_ProductLabel: WideString; safecall;
    procedure Set_ProductLabel(const pRetVal: WideString); safecall;
    function Get_AdditionalProductInfo: WideString; safecall;
    procedure Set_AdditionalProductInfo(const pRetVal: WideString); safecall;
    function Get_ItemID: Integer; safecall;
    procedure Set_ItemID(pRetVal: Integer); safecall;
    function Get_ProductCode: WideString; safecall;
    procedure Set_ProductCode(const pRetVal: WideString); safecall;
    function Get_EanUpc: WideString; safecall;
    procedure Set_EanUpc(const pRetVal: WideString); safecall;
    function Get_ItemAmount: Double; safecall;
    procedure Set_ItemAmount(pRetVal: Double); safecall;
    function Get_UnitOfMeasureSpecified: WordBool; safecall;
    procedure Set_UnitOfMeasureSpecified(pRetVal: WordBool); safecall;
    function Get_TaxCodeSpecified: WordBool; safecall;
    procedure Set_TaxCodeSpecified(pRetVal: WordBool); safecall;
    function Get_SaleChannelSpecified: WordBool; safecall;
    procedure Set_SaleChannelSpecified(pRetVal: WordBool); safecall;
    function Get_ProductLabelSpecified: WordBool; safecall;
    procedure Set_ProductLabelSpecified(pRetVal: WordBool); safecall;
    function Get_AdditionalProductInfoSpecified: WordBool; safecall;
    procedure Set_AdditionalProductInfoSpecified(pRetVal: WordBool); safecall;
    function Get_ItemIDSpecified: WordBool; safecall;
    procedure Set_ItemIDSpecified(pRetVal: WordBool); safecall;
    function Get_ProductCodeSpecified: WordBool; safecall;
    procedure Set_ProductCodeSpecified(pRetVal: WordBool); safecall;
    function Get_EanUpcSpecified: WordBool; safecall;
    procedure Set_EanUpcSpecified(pRetVal: WordBool); safecall;
    function Get_ItemAmountSpecified: WordBool; safecall;
    procedure Set_ItemAmountSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SaleItemTypeClassName: WideString; safecall;
    property UnitOfMeasure: WideString read Get_UnitOfMeasure write Set_UnitOfMeasure;
    property Quantity: Double read Get_Quantity write Set_Quantity;
    property QuantitySpecified: WordBool read Get_QuantitySpecified write Set_QuantitySpecified;
    property UnitPrice: Double read Get_UnitPrice write Set_UnitPrice;
    property UnitPriceSpecified: WordBool read Get_UnitPriceSpecified write Set_UnitPriceSpecified;
    property TaxCode: WideString read Get_TaxCode write Set_TaxCode;
    property SaleChannel: WideString read Get_SaleChannel write Set_SaleChannel;
    property ProductLabel: WideString read Get_ProductLabel write Set_ProductLabel;
    property AdditionalProductInfo: WideString read Get_AdditionalProductInfo write Set_AdditionalProductInfo;
    property ItemID: Integer read Get_ItemID write Set_ItemID;
    property ProductCode: WideString read Get_ProductCode write Set_ProductCode;
    property EanUpc: WideString read Get_EanUpc write Set_EanUpc;
    property ItemAmount: Double read Get_ItemAmount write Set_ItemAmount;
    property UnitOfMeasureSpecified: WordBool read Get_UnitOfMeasureSpecified write Set_UnitOfMeasureSpecified;
    property TaxCodeSpecified: WordBool read Get_TaxCodeSpecified write Set_TaxCodeSpecified;
    property SaleChannelSpecified: WordBool read Get_SaleChannelSpecified write Set_SaleChannelSpecified;
    property ProductLabelSpecified: WordBool read Get_ProductLabelSpecified write Set_ProductLabelSpecified;
    property AdditionalProductInfoSpecified: WordBool read Get_AdditionalProductInfoSpecified write Set_AdditionalProductInfoSpecified;
    property ItemIDSpecified: WordBool read Get_ItemIDSpecified write Set_ItemIDSpecified;
    property ProductCodeSpecified: WordBool read Get_ProductCodeSpecified write Set_ProductCodeSpecified;
    property EanUpcSpecified: WordBool read Get_EanUpcSpecified write Set_EanUpcSpecified;
    property ItemAmountSpecified: WordBool read Get_ItemAmountSpecified write Set_ItemAmountSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SaleItemTypeClassName: WideString read Get_SaleItemTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISaleItemTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B99F918F-A4AB-4D1C-AC75-B9D54223D68A}
// *********************************************************************//
  ISaleItemTypeDisp = dispinterface
    ['{B99F918F-A4AB-4D1C-AC75-B9D54223D68A}']
    property UnitOfMeasure: WideString dispid 1;
    property Quantity: Double dispid 2;
    property QuantitySpecified: WordBool dispid 3;
    property UnitPrice: Double dispid 4;
    property UnitPriceSpecified: WordBool dispid 5;
    property TaxCode: WideString dispid 6;
    property SaleChannel: WideString dispid 7;
    property ProductLabel: WideString dispid 8;
    property AdditionalProductInfo: WideString dispid 9;
    property ItemID: Integer dispid 10;
    property ProductCode: WideString dispid 11;
    property EanUpc: WideString dispid 12;
    property ItemAmount: Double dispid 13;
    property UnitOfMeasureSpecified: WordBool dispid 15;
    property TaxCodeSpecified: WordBool dispid 16;
    property SaleChannelSpecified: WordBool dispid 17;
    property ProductLabelSpecified: WordBool dispid 18;
    property AdditionalProductInfoSpecified: WordBool dispid 19;
    property ItemIDSpecified: WordBool dispid 20;
    property ProductCodeSpecified: WordBool dispid 21;
    property EanUpcSpecified: WordBool dispid 22;
    property ItemAmountSpecified: WordBool dispid 23;
    property ObjectHasBeenSet: WordBool readonly dispid 24;
    property SaleItemTypeClassName: WideString readonly dispid 25;
  end;

// *********************************************************************//
// Interface :   ILoyaltyDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {75D37DD2-A2BC-444C-8372-F6F822BD238F}
// *********************************************************************//
  ILoyaltyDataType = interface(IDispatch)
    ['{75D37DD2-A2BC-444C-8372-F6F822BD238F}']
    function Get_CardAcquisitionReference: ITransactionIdentificationType; safecall;
    procedure _Set_CardAcquisitionReference(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_LoyaltyAccountID: ILoyaltyAccountIDType; safecall;
    procedure _Set_LoyaltyAccountID(const pRetVal: ILoyaltyAccountIDType); safecall;
    function Get_LoyaltyAmount: ILoyaltyAmountType; safecall;
    procedure _Set_LoyaltyAmount(const pRetVal: ILoyaltyAmountType); safecall;
    function Get_CardAcquisitionReferenceSpecified: WordBool; safecall;
    procedure Set_CardAcquisitionReferenceSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyAccountIDSpecified: WordBool; safecall;
    procedure Set_LoyaltyAccountIDSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyAmountSpecified: WordBool; safecall;
    procedure Set_LoyaltyAmountSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LoyaltyDataTypeClassName: WideString; safecall;
    property CardAcquisitionReference: ITransactionIdentificationType read Get_CardAcquisitionReference write _Set_CardAcquisitionReference;
    property LoyaltyAccountID: ILoyaltyAccountIDType read Get_LoyaltyAccountID write _Set_LoyaltyAccountID;
    property LoyaltyAmount: ILoyaltyAmountType read Get_LoyaltyAmount write _Set_LoyaltyAmount;
    property CardAcquisitionReferenceSpecified: WordBool read Get_CardAcquisitionReferenceSpecified write Set_CardAcquisitionReferenceSpecified;
    property LoyaltyAccountIDSpecified: WordBool read Get_LoyaltyAccountIDSpecified write Set_LoyaltyAccountIDSpecified;
    property LoyaltyAmountSpecified: WordBool read Get_LoyaltyAmountSpecified write Set_LoyaltyAmountSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LoyaltyDataTypeClassName: WideString read Get_LoyaltyDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {75D37DD2-A2BC-444C-8372-F6F822BD238F}
// *********************************************************************//
  ILoyaltyDataTypeDisp = dispinterface
    ['{75D37DD2-A2BC-444C-8372-F6F822BD238F}']
    property CardAcquisitionReference: ITransactionIdentificationType dispid 1;
    property LoyaltyAccountID: ILoyaltyAccountIDType dispid 2;
    property LoyaltyAmount: ILoyaltyAmountType dispid 3;
    property CardAcquisitionReferenceSpecified: WordBool dispid 5;
    property LoyaltyAccountIDSpecified: WordBool dispid 6;
    property LoyaltyAmountSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 8;
    property LoyaltyDataTypeClassName: WideString readonly dispid 9;
  end;

// *********************************************************************//
// Interface :   ILoyaltyAmountType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C4443224-2FA0-4E9F-8A74-43EADDDA34BC}
// *********************************************************************//
  ILoyaltyAmountType = interface(IDispatch)
    ['{C4443224-2FA0-4E9F-8A74-43EADDDA34BC}']
    function Get_LoyaltyUnit: WideString; safecall;
    procedure Set_LoyaltyUnit(const pRetVal: WideString); safecall;
    function Get_Currency: WideString; safecall;
    procedure Set_Currency(const pRetVal: WideString); safecall;
    function Get_value: Double; safecall;
    procedure Set_value(pRetVal: Double); safecall;
    function Get_LoyaltyUnitDefaultValue: WideString; safecall;
    function Get_LoyaltyUnitSpecified: WordBool; safecall;
    procedure Set_LoyaltyUnitSpecified(pRetVal: WordBool); safecall;
    function Get_CurrencySpecified: WordBool; safecall;
    procedure Set_CurrencySpecified(pRetVal: WordBool); safecall;
    function Get_ValueSpecified: WordBool; safecall;
    procedure Set_ValueSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LoyaltyAmountTypeClassName: WideString; safecall;
    property LoyaltyUnit: WideString read Get_LoyaltyUnit write Set_LoyaltyUnit;
    property Currency: WideString read Get_Currency write Set_Currency;
    property value: Double read Get_value write Set_value;
    property LoyaltyUnitDefaultValue: WideString read Get_LoyaltyUnitDefaultValue;
    property LoyaltyUnitSpecified: WordBool read Get_LoyaltyUnitSpecified write Set_LoyaltyUnitSpecified;
    property CurrencySpecified: WordBool read Get_CurrencySpecified write Set_CurrencySpecified;
    property ValueSpecified: WordBool read Get_ValueSpecified write Set_ValueSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LoyaltyAmountTypeClassName: WideString read Get_LoyaltyAmountTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyAmountTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C4443224-2FA0-4E9F-8A74-43EADDDA34BC}
// *********************************************************************//
  ILoyaltyAmountTypeDisp = dispinterface
    ['{C4443224-2FA0-4E9F-8A74-43EADDDA34BC}']
    property LoyaltyUnit: WideString dispid 2;
    property Currency: WideString dispid 3;
    property value: Double dispid 4;
    property LoyaltyUnitDefaultValue: WideString readonly dispid 5;
    property LoyaltyUnitSpecified: WordBool dispid 6;
    property CurrencySpecified: WordBool dispid 7;
    property ValueSpecified: WordBool dispid 8;
    property ObjectHasBeenSet: WordBool readonly dispid 9;
    property LoyaltyAmountTypeClassName: WideString readonly dispid 10;
  end;

// *********************************************************************//
// Interface :   IPaymentRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4909F2A0-ECE6-4938-81B2-AB9064D97565}
// *********************************************************************//
  IPaymentRequestType = interface(IDispatch)
    ['{4909F2A0-ECE6-4938-81B2-AB9064D97565}']
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_PaymentTransaction: IPaymentTransactionType; safecall;
    procedure _Set_PaymentTransaction(const pRetVal: IPaymentTransactionType); safecall;
    function Get_PaymentData: IPaymentDataType; safecall;
    procedure _Set_PaymentData(const pRetVal: IPaymentDataType); safecall;
    function Get_LoyaltyData: PSafeArray; safecall;
    procedure Set_LoyaltyData(pRetVal: PSafeArray); safecall;
    function Get_SaleDataSpecified: WordBool; safecall;
    procedure Set_SaleDataSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentTransactionSpecified: WordBool; safecall;
    procedure Set_PaymentTransactionSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentDataSpecified: WordBool; safecall;
    procedure Set_PaymentDataSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyDataSpecified: WordBool; safecall;
    procedure Set_LoyaltyDataSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PaymentRequestTypeClassName: WideString; safecall;
    function LoyaltyDataLength: Integer; safecall;
    function LoyaltyDataGetItem(index: Integer): ILoyaltyDataType; safecall;
    function LoyaltyDataSetItem(index: Integer; const value: ILoyaltyDataType): WordBool; safecall;
    function LoyaltyDataAddItem(const value: ILoyaltyDataType): WordBool; safecall;
    function LoyaltyDataRemoveItem(index: Integer): WordBool; safecall;
    function LoyaltyDataInsertItem(index: Integer; const value: ILoyaltyDataType): Integer; safecall;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property PaymentTransaction: IPaymentTransactionType read Get_PaymentTransaction write _Set_PaymentTransaction;
    property PaymentData: IPaymentDataType read Get_PaymentData write _Set_PaymentData;
    property LoyaltyData: PSafeArray read Get_LoyaltyData write Set_LoyaltyData;
    property SaleDataSpecified: WordBool read Get_SaleDataSpecified write Set_SaleDataSpecified;
    property PaymentTransactionSpecified: WordBool read Get_PaymentTransactionSpecified write Set_PaymentTransactionSpecified;
    property PaymentDataSpecified: WordBool read Get_PaymentDataSpecified write Set_PaymentDataSpecified;
    property LoyaltyDataSpecified: WordBool read Get_LoyaltyDataSpecified write Set_LoyaltyDataSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PaymentRequestTypeClassName: WideString read Get_PaymentRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPaymentRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4909F2A0-ECE6-4938-81B2-AB9064D97565}
// *********************************************************************//
  IPaymentRequestTypeDisp = dispinterface
    ['{4909F2A0-ECE6-4938-81B2-AB9064D97565}']
    property SaleData: ISaleDataType dispid 1;
    property PaymentTransaction: IPaymentTransactionType dispid 2;
    property PaymentData: IPaymentDataType dispid 3;
    property LoyaltyData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property SaleDataSpecified: WordBool dispid 6;
    property PaymentTransactionSpecified: WordBool dispid 7;
    property PaymentDataSpecified: WordBool dispid 8;
    property LoyaltyDataSpecified: WordBool dispid 9;
    property ObjectHasBeenSet: WordBool readonly dispid 16;
    property PaymentRequestTypeClassName: WideString readonly dispid 17;
    function LoyaltyDataLength: Integer; dispid 10;
    function LoyaltyDataGetItem(index: Integer): ILoyaltyDataType; dispid 11;
    function LoyaltyDataSetItem(index: Integer; const value: ILoyaltyDataType): WordBool; dispid 12;
    function LoyaltyDataAddItem(const value: ILoyaltyDataType): WordBool; dispid 13;
    function LoyaltyDataRemoveItem(index: Integer): WordBool; dispid 14;
    function LoyaltyDataInsertItem(index: Integer; const value: ILoyaltyDataType): Integer; dispid 15;
  end;

// *********************************************************************//
// Interface :   IPaymentTransactionType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {96EE7CC1-908D-4D89-B345-91069EBF6B22}
// *********************************************************************//
  IPaymentTransactionType = interface(IDispatch)
    ['{96EE7CC1-908D-4D89-B345-91069EBF6B22}']
    function Get_AmountsReq: IAmountsReqType; safecall;
    procedure _Set_AmountsReq(const pRetVal: IAmountsReqType); safecall;
    function Get_OriginalPOITransaction: IOriginalPOITransactionType; safecall;
    procedure _Set_OriginalPOITransaction(const pRetVal: IOriginalPOITransactionType); safecall;
    function Get_TransactionConditions: ITransactionConditionsType; safecall;
    procedure _Set_TransactionConditions(const pRetVal: ITransactionConditionsType); safecall;
    function Get_SaleItem: PSafeArray; safecall;
    procedure Set_SaleItem(pRetVal: PSafeArray); safecall;
    function Get_AmountsReqSpecified: WordBool; safecall;
    procedure Set_AmountsReqSpecified(pRetVal: WordBool); safecall;
    function Get_OriginalPOITransactionSpecified: WordBool; safecall;
    procedure Set_OriginalPOITransactionSpecified(pRetVal: WordBool); safecall;
    function Get_TransactionConditionsSpecified: WordBool; safecall;
    procedure Set_TransactionConditionsSpecified(pRetVal: WordBool); safecall;
    function Get_SaleItemSpecified: WordBool; safecall;
    procedure Set_SaleItemSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PaymentTransactionTypeClassName: WideString; safecall;
    function SaleItemLength: Integer; safecall;
    function SaleItemGetItem(index: Integer): ISaleItemType; safecall;
    function SaleItemSetItem(index: Integer; const value: ISaleItemType): WordBool; safecall;
    function SaleItemAddItem(const value: ISaleItemType): WordBool; safecall;
    function SaleItemRemoveItem(index: Integer): WordBool; safecall;
    function SaleItemInsertItem(index: Integer; const value: ISaleItemType): Integer; safecall;
    property AmountsReq: IAmountsReqType read Get_AmountsReq write _Set_AmountsReq;
    property OriginalPOITransaction: IOriginalPOITransactionType read Get_OriginalPOITransaction write _Set_OriginalPOITransaction;
    property TransactionConditions: ITransactionConditionsType read Get_TransactionConditions write _Set_TransactionConditions;
    property SaleItem: PSafeArray read Get_SaleItem write Set_SaleItem;
    property AmountsReqSpecified: WordBool read Get_AmountsReqSpecified write Set_AmountsReqSpecified;
    property OriginalPOITransactionSpecified: WordBool read Get_OriginalPOITransactionSpecified write Set_OriginalPOITransactionSpecified;
    property TransactionConditionsSpecified: WordBool read Get_TransactionConditionsSpecified write Set_TransactionConditionsSpecified;
    property SaleItemSpecified: WordBool read Get_SaleItemSpecified write Set_SaleItemSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PaymentTransactionTypeClassName: WideString read Get_PaymentTransactionTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPaymentTransactionTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {96EE7CC1-908D-4D89-B345-91069EBF6B22}
// *********************************************************************//
  IPaymentTransactionTypeDisp = dispinterface
    ['{96EE7CC1-908D-4D89-B345-91069EBF6B22}']
    property AmountsReq: IAmountsReqType dispid 1;
    property OriginalPOITransaction: IOriginalPOITransactionType dispid 2;
    property TransactionConditions: ITransactionConditionsType dispid 3;
    property SaleItem: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property AmountsReqSpecified: WordBool dispid 6;
    property OriginalPOITransactionSpecified: WordBool dispid 7;
    property TransactionConditionsSpecified: WordBool dispid 8;
    property SaleItemSpecified: WordBool dispid 9;
    property ObjectHasBeenSet: WordBool readonly dispid 16;
    property PaymentTransactionTypeClassName: WideString readonly dispid 17;
    function SaleItemLength: Integer; dispid 10;
    function SaleItemGetItem(index: Integer): ISaleItemType; dispid 11;
    function SaleItemSetItem(index: Integer; const value: ISaleItemType): WordBool; dispid 12;
    function SaleItemAddItem(const value: ISaleItemType): WordBool; dispid 13;
    function SaleItemRemoveItem(index: Integer): WordBool; dispid 14;
    function SaleItemInsertItem(index: Integer; const value: ISaleItemType): Integer; dispid 15;
  end;

// *********************************************************************//
// Interface :   IPaymentDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AF5206BF-B748-42AF-81D4-465BC2A070F2}
// *********************************************************************//
  IPaymentDataType = interface(IDispatch)
    ['{AF5206BF-B748-42AF-81D4-465BC2A070F2}']
    function Get_CardAcquisitionReference: ITransactionIdentificationType; safecall;
    procedure _Set_CardAcquisitionReference(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_RequestedValidityDate: WideString; safecall;
    procedure Set_RequestedValidityDate(const pRetVal: WideString); safecall;
    function Get_Instalment: IInstalmentType; safecall;
    procedure _Set_Instalment(const pRetVal: IInstalmentType); safecall;
    function Get_CustomerOrder: ICustomerOrderType; safecall;
    procedure _Set_CustomerOrder(const pRetVal: ICustomerOrderType); safecall;
    function Get_PaymentInstrumentData: IPaymentInstrumentDataType; safecall;
    procedure _Set_PaymentInstrumentData(const pRetVal: IPaymentInstrumentDataType); safecall;
    function Get_PaymentType: WideString; safecall;
    procedure Set_PaymentType(const pRetVal: WideString); safecall;
    function Get_SplitPaymentFlag: WordBool; safecall;
    procedure Set_SplitPaymentFlag(pRetVal: WordBool); safecall;
    function Get_CardAcquisitionReferenceSpecified: WordBool; safecall;
    procedure Set_CardAcquisitionReferenceSpecified(pRetVal: WordBool); safecall;
    function Get_RequestedValidityDateSpecified: WordBool; safecall;
    procedure Set_RequestedValidityDateSpecified(pRetVal: WordBool); safecall;
    function Get_InstalmentSpecified: WordBool; safecall;
    procedure Set_InstalmentSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerOrderSpecified: WordBool; safecall;
    procedure Set_CustomerOrderSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentInstrumentDataSpecified: WordBool; safecall;
    procedure Set_PaymentInstrumentDataSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentTypeDefaultValue: WideString; safecall;
    function Get_PaymentTypeSpecified: WordBool; safecall;
    procedure Set_PaymentTypeSpecified(pRetVal: WordBool); safecall;
    function Get_SplitPaymentFlagDefaultValue: WordBool; safecall;
    function Get_SplitPaymentFlagSpecified: WordBool; safecall;
    procedure Set_SplitPaymentFlagSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PaymentDataTypeClassName: WideString; safecall;
    property CardAcquisitionReference: ITransactionIdentificationType read Get_CardAcquisitionReference write _Set_CardAcquisitionReference;
    property RequestedValidityDate: WideString read Get_RequestedValidityDate write Set_RequestedValidityDate;
    property Instalment: IInstalmentType read Get_Instalment write _Set_Instalment;
    property CustomerOrder: ICustomerOrderType read Get_CustomerOrder write _Set_CustomerOrder;
    property PaymentInstrumentData: IPaymentInstrumentDataType read Get_PaymentInstrumentData write _Set_PaymentInstrumentData;
    property PaymentType: WideString read Get_PaymentType write Set_PaymentType;
    property SplitPaymentFlag: WordBool read Get_SplitPaymentFlag write Set_SplitPaymentFlag;
    property CardAcquisitionReferenceSpecified: WordBool read Get_CardAcquisitionReferenceSpecified write Set_CardAcquisitionReferenceSpecified;
    property RequestedValidityDateSpecified: WordBool read Get_RequestedValidityDateSpecified write Set_RequestedValidityDateSpecified;
    property InstalmentSpecified: WordBool read Get_InstalmentSpecified write Set_InstalmentSpecified;
    property CustomerOrderSpecified: WordBool read Get_CustomerOrderSpecified write Set_CustomerOrderSpecified;
    property PaymentInstrumentDataSpecified: WordBool read Get_PaymentInstrumentDataSpecified write Set_PaymentInstrumentDataSpecified;
    property PaymentTypeDefaultValue: WideString read Get_PaymentTypeDefaultValue;
    property PaymentTypeSpecified: WordBool read Get_PaymentTypeSpecified write Set_PaymentTypeSpecified;
    property SplitPaymentFlagDefaultValue: WordBool read Get_SplitPaymentFlagDefaultValue;
    property SplitPaymentFlagSpecified: WordBool read Get_SplitPaymentFlagSpecified write Set_SplitPaymentFlagSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PaymentDataTypeClassName: WideString read Get_PaymentDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPaymentDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AF5206BF-B748-42AF-81D4-465BC2A070F2}
// *********************************************************************//
  IPaymentDataTypeDisp = dispinterface
    ['{AF5206BF-B748-42AF-81D4-465BC2A070F2}']
    property CardAcquisitionReference: ITransactionIdentificationType dispid 2;
    property RequestedValidityDate: WideString dispid 3;
    property Instalment: IInstalmentType dispid 4;
    property CustomerOrder: ICustomerOrderType dispid 5;
    property PaymentInstrumentData: IPaymentInstrumentDataType dispid 6;
    property PaymentType: WideString dispid 7;
    property SplitPaymentFlag: WordBool dispid 8;
    property CardAcquisitionReferenceSpecified: WordBool dispid 9;
    property RequestedValidityDateSpecified: WordBool dispid 10;
    property InstalmentSpecified: WordBool dispid 11;
    property CustomerOrderSpecified: WordBool dispid 12;
    property PaymentInstrumentDataSpecified: WordBool dispid 13;
    property PaymentTypeDefaultValue: WideString readonly dispid 14;
    property PaymentTypeSpecified: WordBool dispid 15;
    property SplitPaymentFlagDefaultValue: WordBool readonly dispid 16;
    property SplitPaymentFlagSpecified: WordBool dispid 17;
    property ObjectHasBeenSet: WordBool readonly dispid 18;
    property PaymentDataTypeClassName: WideString readonly dispid 19;
  end;

// *********************************************************************//
// Interface :   IInstalmentType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {28A6109C-B874-475D-A715-02AD78C502A7}
// *********************************************************************//
  IInstalmentType = interface(IDispatch)
    ['{28A6109C-B874-475D-A715-02AD78C502A7}']
    function Get_InstalmentType1: WideString; safecall;
    procedure Set_InstalmentType1(const pRetVal: WideString); safecall;
    function Get_SequenceNumber: Integer; safecall;
    procedure Set_SequenceNumber(pRetVal: Integer); safecall;
    function Get_PlanID: WideString; safecall;
    procedure Set_PlanID(const pRetVal: WideString); safecall;
    function Get_Period: Integer; safecall;
    procedure Set_Period(pRetVal: Integer); safecall;
    function Get_PeriodUnit: WideString; safecall;
    procedure Set_PeriodUnit(const pRetVal: WideString); safecall;
    function Get_FirstPaymentDate: WideString; safecall;
    procedure Set_FirstPaymentDate(const pRetVal: WideString); safecall;
    function Get_TotalNbOfPayments: Integer; safecall;
    procedure Set_TotalNbOfPayments(pRetVal: Integer); safecall;
    function Get_CumulativeAmount: Double; safecall;
    procedure Set_CumulativeAmount(pRetVal: Double); safecall;
    function Get_CumulativeAmountSpecified: WordBool; safecall;
    procedure Set_CumulativeAmountSpecified(pRetVal: WordBool); safecall;
    function Get_FirstAmount: Double; safecall;
    procedure Set_FirstAmount(pRetVal: Double); safecall;
    function Get_FirstAmountSpecified: WordBool; safecall;
    procedure Set_FirstAmountSpecified(pRetVal: WordBool); safecall;
    function Get_Charges: Double; safecall;
    procedure Set_Charges(pRetVal: Double); safecall;
    function Get_ChargesSpecified: WordBool; safecall;
    procedure Set_ChargesSpecified(pRetVal: WordBool); safecall;
    function Get_InstalmentType1Specified: WordBool; safecall;
    procedure Set_InstalmentType1Specified(pRetVal: WordBool); safecall;
    function Get_SequenceNumberSpecified: WordBool; safecall;
    procedure Set_SequenceNumberSpecified(pRetVal: WordBool); safecall;
    function Get_PlanIDSpecified: WordBool; safecall;
    procedure Set_PlanIDSpecified(pRetVal: WordBool); safecall;
    function Get_PeriodSpecified: WordBool; safecall;
    procedure Set_PeriodSpecified(pRetVal: WordBool); safecall;
    function Get_PeriodUnitSpecified: WordBool; safecall;
    procedure Set_PeriodUnitSpecified(pRetVal: WordBool); safecall;
    function Get_FirstPaymentDateSpecified: WordBool; safecall;
    procedure Set_FirstPaymentDateSpecified(pRetVal: WordBool); safecall;
    function Get_TotalNbOfPaymentsSpecified: WordBool; safecall;
    procedure Set_TotalNbOfPaymentsSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_InstalmentTypeClassName: WideString; safecall;
    property InstalmentType1: WideString read Get_InstalmentType1 write Set_InstalmentType1;
    property SequenceNumber: Integer read Get_SequenceNumber write Set_SequenceNumber;
    property PlanID: WideString read Get_PlanID write Set_PlanID;
    property Period: Integer read Get_Period write Set_Period;
    property PeriodUnit: WideString read Get_PeriodUnit write Set_PeriodUnit;
    property FirstPaymentDate: WideString read Get_FirstPaymentDate write Set_FirstPaymentDate;
    property TotalNbOfPayments: Integer read Get_TotalNbOfPayments write Set_TotalNbOfPayments;
    property CumulativeAmount: Double read Get_CumulativeAmount write Set_CumulativeAmount;
    property CumulativeAmountSpecified: WordBool read Get_CumulativeAmountSpecified write Set_CumulativeAmountSpecified;
    property FirstAmount: Double read Get_FirstAmount write Set_FirstAmount;
    property FirstAmountSpecified: WordBool read Get_FirstAmountSpecified write Set_FirstAmountSpecified;
    property Charges: Double read Get_Charges write Set_Charges;
    property ChargesSpecified: WordBool read Get_ChargesSpecified write Set_ChargesSpecified;
    property InstalmentType1Specified: WordBool read Get_InstalmentType1Specified write Set_InstalmentType1Specified;
    property SequenceNumberSpecified: WordBool read Get_SequenceNumberSpecified write Set_SequenceNumberSpecified;
    property PlanIDSpecified: WordBool read Get_PlanIDSpecified write Set_PlanIDSpecified;
    property PeriodSpecified: WordBool read Get_PeriodSpecified write Set_PeriodSpecified;
    property PeriodUnitSpecified: WordBool read Get_PeriodUnitSpecified write Set_PeriodUnitSpecified;
    property FirstPaymentDateSpecified: WordBool read Get_FirstPaymentDateSpecified write Set_FirstPaymentDateSpecified;
    property TotalNbOfPaymentsSpecified: WordBool read Get_TotalNbOfPaymentsSpecified write Set_TotalNbOfPaymentsSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property InstalmentTypeClassName: WideString read Get_InstalmentTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IInstalmentTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {28A6109C-B874-475D-A715-02AD78C502A7}
// *********************************************************************//
  IInstalmentTypeDisp = dispinterface
    ['{28A6109C-B874-475D-A715-02AD78C502A7}']
    property InstalmentType1: WideString dispid 1;
    property SequenceNumber: Integer dispid 2;
    property PlanID: WideString dispid 3;
    property Period: Integer dispid 4;
    property PeriodUnit: WideString dispid 5;
    property FirstPaymentDate: WideString dispid 6;
    property TotalNbOfPayments: Integer dispid 7;
    property CumulativeAmount: Double dispid 8;
    property CumulativeAmountSpecified: WordBool dispid 9;
    property FirstAmount: Double dispid 10;
    property FirstAmountSpecified: WordBool dispid 11;
    property Charges: Double dispid 12;
    property ChargesSpecified: WordBool dispid 13;
    property InstalmentType1Specified: WordBool dispid 15;
    property SequenceNumberSpecified: WordBool dispid 16;
    property PlanIDSpecified: WordBool dispid 17;
    property PeriodSpecified: WordBool dispid 18;
    property PeriodUnitSpecified: WordBool dispid 19;
    property FirstPaymentDateSpecified: WordBool dispid 20;
    property TotalNbOfPaymentsSpecified: WordBool dispid 21;
    property ObjectHasBeenSet: WordBool readonly dispid 22;
    property InstalmentTypeClassName: WideString readonly dispid 23;
  end;

// *********************************************************************//
// Interface :   IReversalRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D26BADDF-73DF-40D4-9249-0ABD6EEF8583}
// *********************************************************************//
  IReversalRequestType = interface(IDispatch)
    ['{D26BADDF-73DF-40D4-9249-0ABD6EEF8583}']
    function Get_OriginalPOITransaction: IOriginalPOITransactionType; safecall;
    procedure _Set_OriginalPOITransaction(const pRetVal: IOriginalPOITransactionType); safecall;
    function Get_CustomerOrderID: ICustomerOrderType; safecall;
    procedure _Set_CustomerOrderID(const pRetVal: ICustomerOrderType); safecall;
    function Get_SaleReferenceID: WideString; safecall;
    procedure Set_SaleReferenceID(const pRetVal: WideString); safecall;
    function Get_ReversalReason: WideString; safecall;
    procedure Set_ReversalReason(const pRetVal: WideString); safecall;
    function Get_ReversedAmount: Double; safecall;
    procedure Set_ReversedAmount(pRetVal: Double); safecall;
    function Get_ReversedAmountSpecified: WordBool; safecall;
    procedure Set_ReversedAmountSpecified(pRetVal: WordBool); safecall;
    function Get_OriginalPOITransactionSpecified: WordBool; safecall;
    procedure Set_OriginalPOITransactionSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerOrderIDSpecified: WordBool; safecall;
    procedure Set_CustomerOrderIDSpecified(pRetVal: WordBool); safecall;
    function Get_SaleReferenceIDSpecified: WordBool; safecall;
    procedure Set_SaleReferenceIDSpecified(pRetVal: WordBool); safecall;
    function Get_ReversalReasonSpecified: WordBool; safecall;
    procedure Set_ReversalReasonSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_ReversalRequestTypeClassName: WideString; safecall;
    property OriginalPOITransaction: IOriginalPOITransactionType read Get_OriginalPOITransaction write _Set_OriginalPOITransaction;
    property CustomerOrderID: ICustomerOrderType read Get_CustomerOrderID write _Set_CustomerOrderID;
    property SaleReferenceID: WideString read Get_SaleReferenceID write Set_SaleReferenceID;
    property ReversalReason: WideString read Get_ReversalReason write Set_ReversalReason;
    property ReversedAmount: Double read Get_ReversedAmount write Set_ReversedAmount;
    property ReversedAmountSpecified: WordBool read Get_ReversedAmountSpecified write Set_ReversedAmountSpecified;
    property OriginalPOITransactionSpecified: WordBool read Get_OriginalPOITransactionSpecified write Set_OriginalPOITransactionSpecified;
    property CustomerOrderIDSpecified: WordBool read Get_CustomerOrderIDSpecified write Set_CustomerOrderIDSpecified;
    property SaleReferenceIDSpecified: WordBool read Get_SaleReferenceIDSpecified write Set_SaleReferenceIDSpecified;
    property ReversalReasonSpecified: WordBool read Get_ReversalReasonSpecified write Set_ReversalReasonSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property ReversalRequestTypeClassName: WideString read Get_ReversalRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IReversalRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D26BADDF-73DF-40D4-9249-0ABD6EEF8583}
// *********************************************************************//
  IReversalRequestTypeDisp = dispinterface
    ['{D26BADDF-73DF-40D4-9249-0ABD6EEF8583}']
    property OriginalPOITransaction: IOriginalPOITransactionType dispid 1;
    property CustomerOrderID: ICustomerOrderType dispid 2;
    property SaleReferenceID: WideString dispid 3;
    property ReversalReason: WideString dispid 4;
    property ReversedAmount: Double dispid 5;
    property ReversedAmountSpecified: WordBool dispid 6;
    property OriginalPOITransactionSpecified: WordBool dispid 8;
    property CustomerOrderIDSpecified: WordBool dispid 9;
    property SaleReferenceIDSpecified: WordBool dispid 10;
    property ReversalReasonSpecified: WordBool dispid 11;
    property ObjectHasBeenSet: WordBool readonly dispid 12;
    property ReversalRequestTypeClassName: WideString readonly dispid 13;
  end;

// *********************************************************************//
// Interface :   IBatchResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D59DBEAC-5D3C-4FF2-8C31-C2A41FAF7D90}
// *********************************************************************//
  IBatchResponseType = interface(IDispatch)
    ['{D59DBEAC-5D3C-4FF2-8C31-C2A41FAF7D90}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_PerformedTransaction: PSafeArray; safecall;
    procedure Set_PerformedTransaction(pRetVal: PSafeArray); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_PerformedTransactionSpecified: WordBool; safecall;
    procedure Set_PerformedTransactionSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_BatchResponseTypeClassName: WideString; safecall;
    function PerformedTransactionLength: Integer; safecall;
    function PerformedTransactionGetItem(index: Integer): IPerformedTransactionType; safecall;
    function PerformedTransactionSetItem(index: Integer; const value: IPerformedTransactionType): WordBool; safecall;
    function PerformedTransactionAddItem(const value: IPerformedTransactionType): WordBool; safecall;
    function PerformedTransactionRemoveItem(index: Integer): WordBool; safecall;
    function PerformedTransactionInsertItem(index: Integer; const value: IPerformedTransactionType): Integer; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property PerformedTransaction: PSafeArray read Get_PerformedTransaction write Set_PerformedTransaction;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property PerformedTransactionSpecified: WordBool read Get_PerformedTransactionSpecified write Set_PerformedTransactionSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property BatchResponseTypeClassName: WideString read Get_BatchResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IBatchResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D59DBEAC-5D3C-4FF2-8C31-C2A41FAF7D90}
// *********************************************************************//
  IBatchResponseTypeDisp = dispinterface
    ['{D59DBEAC-5D3C-4FF2-8C31-C2A41FAF7D90}']
    property Response: IResponseType dispid 1;
    property PerformedTransaction: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property ResponseSpecified: WordBool dispid 4;
    property PerformedTransactionSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 12;
    property BatchResponseTypeClassName: WideString readonly dispid 13;
    function PerformedTransactionLength: Integer; dispid 6;
    function PerformedTransactionGetItem(index: Integer): IPerformedTransactionType; dispid 7;
    function PerformedTransactionSetItem(index: Integer; const value: IPerformedTransactionType): WordBool; dispid 8;
    function PerformedTransactionAddItem(const value: IPerformedTransactionType): WordBool; dispid 9;
    function PerformedTransactionRemoveItem(index: Integer): WordBool; dispid 10;
    function PerformedTransactionInsertItem(index: Integer; const value: IPerformedTransactionType): Integer; dispid 11;
  end;

// *********************************************************************//
// Interface :   IPerformedTransactionType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {48B5F7E6-DFF7-4017-B07B-1A9C62FF8537}
// *********************************************************************//
  IPerformedTransactionType = interface(IDispatch)
    ['{48B5F7E6-DFF7-4017-B07B-1A9C62FF8537}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_POIData: IPOIDataType; safecall;
    procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
    function Get_PaymentResult: IPaymentResultType; safecall;
    procedure _Set_PaymentResult(const pRetVal: IPaymentResultType); safecall;
    function Get_LoyaltyResult: PSafeArray; safecall;
    procedure Set_LoyaltyResult(pRetVal: PSafeArray); safecall;
    function Get_ReversedAmount: Double; safecall;
    procedure Set_ReversedAmount(pRetVal: Double); safecall;
    function Get_ReversedAmountSpecified: WordBool; safecall;
    procedure Set_ReversedAmountSpecified(pRetVal: WordBool); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_SaleDataSpecified: WordBool; safecall;
    procedure Set_SaleDataSpecified(pRetVal: WordBool); safecall;
    function Get_POIDataSpecified: WordBool; safecall;
    procedure Set_POIDataSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentResultSpecified: WordBool; safecall;
    procedure Set_PaymentResultSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyResultSpecified: WordBool; safecall;
    procedure Set_LoyaltyResultSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PerformedTransactionTypeClassName: WideString; safecall;
    function LoyaltyResultLength: Integer; safecall;
    function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; safecall;
    function LoyaltyResultSetItem(index: Integer; const value: ILoyaltyResultType): WordBool; safecall;
    function LoyaltyResultAddItem(const value: ILoyaltyResultType): WordBool; safecall;
    function LoyaltyResultRemoveItem(index: Integer): WordBool; safecall;
    function LoyaltyResultInsertItem(index: Integer; const value: ILoyaltyResultType): Integer; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property POIData: IPOIDataType read Get_POIData write _Set_POIData;
    property PaymentResult: IPaymentResultType read Get_PaymentResult write _Set_PaymentResult;
    property LoyaltyResult: PSafeArray read Get_LoyaltyResult write Set_LoyaltyResult;
    property ReversedAmount: Double read Get_ReversedAmount write Set_ReversedAmount;
    property ReversedAmountSpecified: WordBool read Get_ReversedAmountSpecified write Set_ReversedAmountSpecified;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property SaleDataSpecified: WordBool read Get_SaleDataSpecified write Set_SaleDataSpecified;
    property POIDataSpecified: WordBool read Get_POIDataSpecified write Set_POIDataSpecified;
    property PaymentResultSpecified: WordBool read Get_PaymentResultSpecified write Set_PaymentResultSpecified;
    property LoyaltyResultSpecified: WordBool read Get_LoyaltyResultSpecified write Set_LoyaltyResultSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PerformedTransactionTypeClassName: WideString read Get_PerformedTransactionTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPerformedTransactionTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {48B5F7E6-DFF7-4017-B07B-1A9C62FF8537}
// *********************************************************************//
  IPerformedTransactionTypeDisp = dispinterface
    ['{48B5F7E6-DFF7-4017-B07B-1A9C62FF8537}']
    property Response: IResponseType dispid 1;
    property SaleData: ISaleDataType dispid 2;
    property POIData: IPOIDataType dispid 3;
    property PaymentResult: IPaymentResultType dispid 4;
    property LoyaltyResult: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property ReversedAmount: Double dispid 6;
    property ReversedAmountSpecified: WordBool dispid 7;
    property ResponseSpecified: WordBool dispid 9;
    property SaleDataSpecified: WordBool dispid 10;
    property POIDataSpecified: WordBool dispid 11;
    property PaymentResultSpecified: WordBool dispid 12;
    property LoyaltyResultSpecified: WordBool dispid 13;
    property ObjectHasBeenSet: WordBool readonly dispid 20;
    property PerformedTransactionTypeClassName: WideString readonly dispid 21;
    function LoyaltyResultLength: Integer; dispid 14;
    function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; dispid 15;
    function LoyaltyResultSetItem(index: Integer; const value: ILoyaltyResultType): WordBool; dispid 16;
    function LoyaltyResultAddItem(const value: ILoyaltyResultType): WordBool; dispid 17;
    function LoyaltyResultRemoveItem(index: Integer): WordBool; dispid 18;
    function LoyaltyResultInsertItem(index: Integer; const value: ILoyaltyResultType): Integer; dispid 19;
  end;

// *********************************************************************//
// Interface :   IPOIDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A0BFA89E-5DF1-4E5B-B27B-099F66AFC393}
// *********************************************************************//
  IPOIDataType = interface(IDispatch)
    ['{A0BFA89E-5DF1-4E5B-B27B-099F66AFC393}']
    function Get_POITransactionID: ITransactionIdentificationType; safecall;
    procedure _Set_POITransactionID(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_POIReconciliationID: WideString; safecall;
    procedure Set_POIReconciliationID(const pRetVal: WideString); safecall;
    function Get_POITransactionIDSpecified: WordBool; safecall;
    procedure Set_POITransactionIDSpecified(pRetVal: WordBool); safecall;
    function Get_POIReconciliationIDSpecified: WordBool; safecall;
    procedure Set_POIReconciliationIDSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_POIDataTypeClassName: WideString; safecall;
    property POITransactionID: ITransactionIdentificationType read Get_POITransactionID write _Set_POITransactionID;
    property POIReconciliationID: WideString read Get_POIReconciliationID write Set_POIReconciliationID;
    property POITransactionIDSpecified: WordBool read Get_POITransactionIDSpecified write Set_POITransactionIDSpecified;
    property POIReconciliationIDSpecified: WordBool read Get_POIReconciliationIDSpecified write Set_POIReconciliationIDSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property POIDataTypeClassName: WideString read Get_POIDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPOIDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A0BFA89E-5DF1-4E5B-B27B-099F66AFC393}
// *********************************************************************//
  IPOIDataTypeDisp = dispinterface
    ['{A0BFA89E-5DF1-4E5B-B27B-099F66AFC393}']
    property POITransactionID: ITransactionIdentificationType dispid 1;
    property POIReconciliationID: WideString dispid 2;
    property POITransactionIDSpecified: WordBool dispid 4;
    property POIReconciliationIDSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property POIDataTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IPaymentResultType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {051A8ECB-6F0C-4069-A1A6-D132C68704F7}
// *********************************************************************//
  IPaymentResultType = interface(IDispatch)
    ['{051A8ECB-6F0C-4069-A1A6-D132C68704F7}']
    function Get_PaymentInstrumentData: IPaymentInstrumentDataType; safecall;
    procedure _Set_PaymentInstrumentData(const pRetVal: IPaymentInstrumentDataType); safecall;
    function Get_AmountsResp: IAmountsRespType; safecall;
    procedure _Set_AmountsResp(const pRetVal: IAmountsRespType); safecall;
    function Get_Instalment: IInstalmentType; safecall;
    procedure _Set_Instalment(const pRetVal: IInstalmentType); safecall;
    function Get_CurrencyConversion: PSafeArray; safecall;
    procedure Set_CurrencyConversion(pRetVal: PSafeArray); safecall;
    function Get_CapturedSignature: ICapturedSignatureType; safecall;
    procedure _Set_CapturedSignature(const pRetVal: ICapturedSignatureType); safecall;
    function Get_ProtectedSignature: IContentInformationType; safecall;
    procedure _Set_ProtectedSignature(const pRetVal: IContentInformationType); safecall;
    function Get_PaymentAcquirerData: IPaymentAcquirerDataType; safecall;
    procedure _Set_PaymentAcquirerData(const pRetVal: IPaymentAcquirerDataType); safecall;
    function Get_PaymentType: WideString; safecall;
    procedure Set_PaymentType(const pRetVal: WideString); safecall;
    function Get_MerchantOverrideFlag: WordBool; safecall;
    procedure Set_MerchantOverrideFlag(pRetVal: WordBool); safecall;
    function Get_CustomerLanguage: WideString; safecall;
    procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
    function Get_OnlineFlag: WordBool; safecall;
    procedure Set_OnlineFlag(pRetVal: WordBool); safecall;
    function Get_AuthenticationMethod: PSafeArray; safecall;
    procedure Set_AuthenticationMethod(pRetVal: PSafeArray); safecall;
    function Get_ValidityDate: WideString; safecall;
    procedure Set_ValidityDate(const pRetVal: WideString); safecall;
    function Get_PaymentInstrumentDataSpecified: WordBool; safecall;
    procedure Set_PaymentInstrumentDataSpecified(pRetVal: WordBool); safecall;
    function Get_AmountsRespSpecified: WordBool; safecall;
    procedure Set_AmountsRespSpecified(pRetVal: WordBool); safecall;
    function Get_InstalmentSpecified: WordBool; safecall;
    procedure Set_InstalmentSpecified(pRetVal: WordBool); safecall;
    function Get_CurrencyConversionSpecified: WordBool; safecall;
    procedure Set_CurrencyConversionSpecified(pRetVal: WordBool); safecall;
    function Get_CapturedSignatureSpecified: WordBool; safecall;
    procedure Set_CapturedSignatureSpecified(pRetVal: WordBool); safecall;
    function Get_ProtectedSignatureSpecified: WordBool; safecall;
    procedure Set_ProtectedSignatureSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentAcquirerDataSpecified: WordBool; safecall;
    procedure Set_PaymentAcquirerDataSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentTypeDefaultValue: WideString; safecall;
    function Get_PaymentTypeSpecified: WordBool; safecall;
    procedure Set_PaymentTypeSpecified(pRetVal: WordBool); safecall;
    function Get_MerchantOverrideFlagDefaultValue: WordBool; safecall;
    function Get_MerchantOverrideFlagSpecified: WordBool; safecall;
    procedure Set_MerchantOverrideFlagSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerLanguageSpecified: WordBool; safecall;
    procedure Set_CustomerLanguageSpecified(pRetVal: WordBool); safecall;
    function Get_OnlineFlagDefaultValue: WordBool; safecall;
    function Get_OnlineFlagSpecified: WordBool; safecall;
    procedure Set_OnlineFlagSpecified(pRetVal: WordBool); safecall;
    function Get_AuthenticationMethodSpecified: WordBool; safecall;
    procedure Set_AuthenticationMethodSpecified(pRetVal: WordBool); safecall;
    function Get_ValidityDateSpecified: WordBool; safecall;
    procedure Set_ValidityDateSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PaymentResultTypeClassName: WideString; safecall;
    function CurrencyConversionLength: Integer; safecall;
    function CurrencyConversionGetItem(index: Integer): ICurrencyConversionType; safecall;
    function CurrencyConversionSetItem(index: Integer; const value: ICurrencyConversionType): WordBool; safecall;
    function CurrencyConversionAddItem(const value: ICurrencyConversionType): WordBool; safecall;
    function CurrencyConversionRemoveItem(index: Integer): WordBool; safecall;
    function CurrencyConversionInsertItem(index: Integer; const value: ICurrencyConversionType): Integer; safecall;
    function AuthenticationMethodLength: Integer; safecall;
    function AuthenticationMethodGetItem(index: Integer): WideString; safecall;
    function AuthenticationMethodSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function AuthenticationMethodAddItem(const value: WideString): WordBool; safecall;
    function AuthenticationMethodRemoveItem(index: Integer): WordBool; safecall;
    function AuthenticationMethodInsertItem(index: Integer; const value: WideString): Integer; safecall;
    property PaymentInstrumentData: IPaymentInstrumentDataType read Get_PaymentInstrumentData write _Set_PaymentInstrumentData;
    property AmountsResp: IAmountsRespType read Get_AmountsResp write _Set_AmountsResp;
    property Instalment: IInstalmentType read Get_Instalment write _Set_Instalment;
    property CurrencyConversion: PSafeArray read Get_CurrencyConversion write Set_CurrencyConversion;
    property CapturedSignature: ICapturedSignatureType read Get_CapturedSignature write _Set_CapturedSignature;
    property ProtectedSignature: IContentInformationType read Get_ProtectedSignature write _Set_ProtectedSignature;
    property PaymentAcquirerData: IPaymentAcquirerDataType read Get_PaymentAcquirerData write _Set_PaymentAcquirerData;
    property PaymentType: WideString read Get_PaymentType write Set_PaymentType;
    property MerchantOverrideFlag: WordBool read Get_MerchantOverrideFlag write Set_MerchantOverrideFlag;
    property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
    property OnlineFlag: WordBool read Get_OnlineFlag write Set_OnlineFlag;
    property AuthenticationMethod: PSafeArray read Get_AuthenticationMethod write Set_AuthenticationMethod;
    property ValidityDate: WideString read Get_ValidityDate write Set_ValidityDate;
    property PaymentInstrumentDataSpecified: WordBool read Get_PaymentInstrumentDataSpecified write Set_PaymentInstrumentDataSpecified;
    property AmountsRespSpecified: WordBool read Get_AmountsRespSpecified write Set_AmountsRespSpecified;
    property InstalmentSpecified: WordBool read Get_InstalmentSpecified write Set_InstalmentSpecified;
    property CurrencyConversionSpecified: WordBool read Get_CurrencyConversionSpecified write Set_CurrencyConversionSpecified;
    property CapturedSignatureSpecified: WordBool read Get_CapturedSignatureSpecified write Set_CapturedSignatureSpecified;
    property ProtectedSignatureSpecified: WordBool read Get_ProtectedSignatureSpecified write Set_ProtectedSignatureSpecified;
    property PaymentAcquirerDataSpecified: WordBool read Get_PaymentAcquirerDataSpecified write Set_PaymentAcquirerDataSpecified;
    property PaymentTypeDefaultValue: WideString read Get_PaymentTypeDefaultValue;
    property PaymentTypeSpecified: WordBool read Get_PaymentTypeSpecified write Set_PaymentTypeSpecified;
    property MerchantOverrideFlagDefaultValue: WordBool read Get_MerchantOverrideFlagDefaultValue;
    property MerchantOverrideFlagSpecified: WordBool read Get_MerchantOverrideFlagSpecified write Set_MerchantOverrideFlagSpecified;
    property CustomerLanguageSpecified: WordBool read Get_CustomerLanguageSpecified write Set_CustomerLanguageSpecified;
    property OnlineFlagDefaultValue: WordBool read Get_OnlineFlagDefaultValue;
    property OnlineFlagSpecified: WordBool read Get_OnlineFlagSpecified write Set_OnlineFlagSpecified;
    property AuthenticationMethodSpecified: WordBool read Get_AuthenticationMethodSpecified write Set_AuthenticationMethodSpecified;
    property ValidityDateSpecified: WordBool read Get_ValidityDateSpecified write Set_ValidityDateSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PaymentResultTypeClassName: WideString read Get_PaymentResultTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPaymentResultTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {051A8ECB-6F0C-4069-A1A6-D132C68704F7}
// *********************************************************************//
  IPaymentResultTypeDisp = dispinterface
    ['{051A8ECB-6F0C-4069-A1A6-D132C68704F7}']
    property PaymentInstrumentData: IPaymentInstrumentDataType dispid 2;
    property AmountsResp: IAmountsRespType dispid 3;
    property Instalment: IInstalmentType dispid 4;
    property CurrencyConversion: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property CapturedSignature: ICapturedSignatureType dispid 6;
    property ProtectedSignature: IContentInformationType dispid 7;
    property PaymentAcquirerData: IPaymentAcquirerDataType dispid 8;
    property PaymentType: WideString dispid 9;
    property MerchantOverrideFlag: WordBool dispid 10;
    property CustomerLanguage: WideString dispid 11;
    property OnlineFlag: WordBool dispid 12;
    property AuthenticationMethod: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 13;
    property ValidityDate: WideString dispid 14;
    property PaymentInstrumentDataSpecified: WordBool dispid 15;
    property AmountsRespSpecified: WordBool dispid 16;
    property InstalmentSpecified: WordBool dispid 17;
    property CurrencyConversionSpecified: WordBool dispid 18;
    property CapturedSignatureSpecified: WordBool dispid 25;
    property ProtectedSignatureSpecified: WordBool dispid 26;
    property PaymentAcquirerDataSpecified: WordBool dispid 27;
    property PaymentTypeDefaultValue: WideString readonly dispid 28;
    property PaymentTypeSpecified: WordBool dispid 29;
    property MerchantOverrideFlagDefaultValue: WordBool readonly dispid 30;
    property MerchantOverrideFlagSpecified: WordBool dispid 31;
    property CustomerLanguageSpecified: WordBool dispid 32;
    property OnlineFlagDefaultValue: WordBool readonly dispid 33;
    property OnlineFlagSpecified: WordBool dispid 34;
    property AuthenticationMethodSpecified: WordBool dispid 35;
    property ValidityDateSpecified: WordBool dispid 42;
    property ObjectHasBeenSet: WordBool readonly dispid 43;
    property PaymentResultTypeClassName: WideString readonly dispid 44;
    function CurrencyConversionLength: Integer; dispid 19;
    function CurrencyConversionGetItem(index: Integer): ICurrencyConversionType; dispid 20;
    function CurrencyConversionSetItem(index: Integer; const value: ICurrencyConversionType): WordBool; dispid 21;
    function CurrencyConversionAddItem(const value: ICurrencyConversionType): WordBool; dispid 22;
    function CurrencyConversionRemoveItem(index: Integer): WordBool; dispid 23;
    function CurrencyConversionInsertItem(index: Integer; const value: ICurrencyConversionType): Integer; dispid 24;
    function AuthenticationMethodLength: Integer; dispid 36;
    function AuthenticationMethodGetItem(index: Integer): WideString; dispid 37;
    function AuthenticationMethodSetItem(index: Integer; const value: WideString): WordBool; dispid 38;
    function AuthenticationMethodAddItem(const value: WideString): WordBool; dispid 39;
    function AuthenticationMethodRemoveItem(index: Integer): WordBool; dispid 40;
    function AuthenticationMethodInsertItem(index: Integer; const value: WideString): Integer; dispid 41;
  end;

// *********************************************************************//
// Interface :   ICurrencyConversionType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4CA716EB-FE0B-4D07-B676-F6F12F86B8C3}
// *********************************************************************//
  ICurrencyConversionType = interface(IDispatch)
    ['{4CA716EB-FE0B-4D07-B676-F6F12F86B8C3}']
    function Get_ConvertedAmount: IAmountType; safecall;
    procedure _Set_ConvertedAmount(const pRetVal: IAmountType); safecall;
    function Get_Commission: Double; safecall;
    procedure Set_Commission(pRetVal: Double); safecall;
    function Get_CommissionSpecified: WordBool; safecall;
    procedure Set_CommissionSpecified(pRetVal: WordBool); safecall;
    function Get_Declaration: WideString; safecall;
    procedure Set_Declaration(const pRetVal: WideString); safecall;
    function Get_CustomerApprovedFlag: WordBool; safecall;
    procedure Set_CustomerApprovedFlag(pRetVal: WordBool); safecall;
    function Get_Rate: Double; safecall;
    procedure Set_Rate(pRetVal: Double); safecall;
    function Get_RateSpecified: WordBool; safecall;
    procedure Set_RateSpecified(pRetVal: WordBool); safecall;
    function Get_Markup: Double; safecall;
    procedure Set_Markup(pRetVal: Double); safecall;
    function Get_MarkupSpecified: WordBool; safecall;
    procedure Set_MarkupSpecified(pRetVal: WordBool); safecall;
    function Get_ConvertedAmountSpecified: WordBool; safecall;
    procedure Set_ConvertedAmountSpecified(pRetVal: WordBool); safecall;
    function Get_DeclarationSpecified: WordBool; safecall;
    procedure Set_DeclarationSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerApprovedFlagDefaultValue: WordBool; safecall;
    function Get_CustomerApprovedFlagSpecified: WordBool; safecall;
    procedure Set_CustomerApprovedFlagSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CurrencyConversionTypeClassName: WideString; safecall;
    property ConvertedAmount: IAmountType read Get_ConvertedAmount write _Set_ConvertedAmount;
    property Commission: Double read Get_Commission write Set_Commission;
    property CommissionSpecified: WordBool read Get_CommissionSpecified write Set_CommissionSpecified;
    property Declaration: WideString read Get_Declaration write Set_Declaration;
    property CustomerApprovedFlag: WordBool read Get_CustomerApprovedFlag write Set_CustomerApprovedFlag;
    property Rate: Double read Get_Rate write Set_Rate;
    property RateSpecified: WordBool read Get_RateSpecified write Set_RateSpecified;
    property Markup: Double read Get_Markup write Set_Markup;
    property MarkupSpecified: WordBool read Get_MarkupSpecified write Set_MarkupSpecified;
    property ConvertedAmountSpecified: WordBool read Get_ConvertedAmountSpecified write Set_ConvertedAmountSpecified;
    property DeclarationSpecified: WordBool read Get_DeclarationSpecified write Set_DeclarationSpecified;
    property CustomerApprovedFlagDefaultValue: WordBool read Get_CustomerApprovedFlagDefaultValue;
    property CustomerApprovedFlagSpecified: WordBool read Get_CustomerApprovedFlagSpecified write Set_CustomerApprovedFlagSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CurrencyConversionTypeClassName: WideString read Get_CurrencyConversionTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICurrencyConversionTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4CA716EB-FE0B-4D07-B676-F6F12F86B8C3}
// *********************************************************************//
  ICurrencyConversionTypeDisp = dispinterface
    ['{4CA716EB-FE0B-4D07-B676-F6F12F86B8C3}']
    property ConvertedAmount: IAmountType dispid 2;
    property Commission: Double dispid 3;
    property CommissionSpecified: WordBool dispid 4;
    property Declaration: WideString dispid 5;
    property CustomerApprovedFlag: WordBool dispid 6;
    property Rate: Double dispid 7;
    property RateSpecified: WordBool dispid 8;
    property Markup: Double dispid 9;
    property MarkupSpecified: WordBool dispid 10;
    property ConvertedAmountSpecified: WordBool dispid 11;
    property DeclarationSpecified: WordBool dispid 12;
    property CustomerApprovedFlagDefaultValue: WordBool readonly dispid 13;
    property CustomerApprovedFlagSpecified: WordBool dispid 14;
    property ObjectHasBeenSet: WordBool readonly dispid 15;
    property CurrencyConversionTypeClassName: WideString readonly dispid 16;
  end;

// *********************************************************************//
// Interface :   IAmountType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {97C3AD17-3C4B-4D44-B028-356AD3F37752}
// *********************************************************************//
  IAmountType = interface(IDispatch)
    ['{97C3AD17-3C4B-4D44-B028-356AD3F37752}']
    function Get_Currency: WideString; safecall;
    procedure Set_Currency(const pRetVal: WideString); safecall;
    function Get_value: Double; safecall;
    procedure Set_value(pRetVal: Double); safecall;
    function Get_CurrencySpecified: WordBool; safecall;
    procedure Set_CurrencySpecified(pRetVal: WordBool); safecall;
    function Get_ValueSpecified: WordBool; safecall;
    procedure Set_ValueSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_AmountTypeClassName: WideString; safecall;
    property Currency: WideString read Get_Currency write Set_Currency;
    property value: Double read Get_value write Set_value;
    property CurrencySpecified: WordBool read Get_CurrencySpecified write Set_CurrencySpecified;
    property ValueSpecified: WordBool read Get_ValueSpecified write Set_ValueSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property AmountTypeClassName: WideString read Get_AmountTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IAmountTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {97C3AD17-3C4B-4D44-B028-356AD3F37752}
// *********************************************************************//
  IAmountTypeDisp = dispinterface
    ['{97C3AD17-3C4B-4D44-B028-356AD3F37752}']
    property Currency: WideString dispid 1;
    property value: Double dispid 2;
    property CurrencySpecified: WordBool dispid 4;
    property ValueSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property AmountTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   ICapturedSignatureType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CCB780A0-6CED-421C-975B-AF05CC625A8C}
// *********************************************************************//
  ICapturedSignatureType = interface(IDispatch)
    ['{CCB780A0-6CED-421C-975B-AF05CC625A8C}']
    function Get_AreaSize: IAreaSizeType; safecall;
    procedure _Set_AreaSize(const pRetVal: IAreaSizeType); safecall;
    function Get_SignaturePoint: PSafeArray; safecall;
    procedure Set_SignaturePoint(pRetVal: PSafeArray); safecall;
    function Get_AreaSizeSpecified: WordBool; safecall;
    procedure Set_AreaSizeSpecified(pRetVal: WordBool); safecall;
    function Get_SignaturePointSpecified: WordBool; safecall;
    procedure Set_SignaturePointSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CapturedSignatureTypeClassName: WideString; safecall;
    function SignaturePointLength: Integer; safecall;
    function SignaturePointGetItem(index: Integer): ISignaturePointType; safecall;
    function SignaturePointSetItem(index: Integer; const value: ISignaturePointType): WordBool; safecall;
    function SignaturePointAddItem(const value: ISignaturePointType): WordBool; safecall;
    function SignaturePointRemoveItem(index: Integer): WordBool; safecall;
    function SignaturePointInsertItem(index: Integer; const value: ISignaturePointType): Integer; safecall;
    property AreaSize: IAreaSizeType read Get_AreaSize write _Set_AreaSize;
    property SignaturePoint: PSafeArray read Get_SignaturePoint write Set_SignaturePoint;
    property AreaSizeSpecified: WordBool read Get_AreaSizeSpecified write Set_AreaSizeSpecified;
    property SignaturePointSpecified: WordBool read Get_SignaturePointSpecified write Set_SignaturePointSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CapturedSignatureTypeClassName: WideString read Get_CapturedSignatureTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICapturedSignatureTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CCB780A0-6CED-421C-975B-AF05CC625A8C}
// *********************************************************************//
  ICapturedSignatureTypeDisp = dispinterface
    ['{CCB780A0-6CED-421C-975B-AF05CC625A8C}']
    property AreaSize: IAreaSizeType dispid 1;
    property SignaturePoint: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property AreaSizeSpecified: WordBool dispid 4;
    property SignaturePointSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 12;
    property CapturedSignatureTypeClassName: WideString readonly dispid 13;
    function SignaturePointLength: Integer; dispid 6;
    function SignaturePointGetItem(index: Integer): ISignaturePointType; dispid 7;
    function SignaturePointSetItem(index: Integer; const value: ISignaturePointType): WordBool; dispid 8;
    function SignaturePointAddItem(const value: ISignaturePointType): WordBool; dispid 9;
    function SignaturePointRemoveItem(index: Integer): WordBool; dispid 10;
    function SignaturePointInsertItem(index: Integer; const value: ISignaturePointType): Integer; dispid 11;
  end;

// *********************************************************************//
// Interface :   ISignaturePointType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {85E59F11-91ED-42FF-A9A5-C34D937AB3E8}
// *********************************************************************//
  ISignaturePointType = interface(IDispatch)
    ['{85E59F11-91ED-42FF-A9A5-C34D937AB3E8}']
    function Get_X: WideString; safecall;
    procedure Set_X(const pRetVal: WideString); safecall;
    function Get_Y: WideString; safecall;
    procedure Set_Y(const pRetVal: WideString); safecall;
    function Get_XSpecified: WordBool; safecall;
    procedure Set_XSpecified(pRetVal: WordBool); safecall;
    function Get_YSpecified: WordBool; safecall;
    procedure Set_YSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SignaturePointTypeClassName: WideString; safecall;
    property X: WideString read Get_X write Set_X;
    property Y: WideString read Get_Y write Set_Y;
    property XSpecified: WordBool read Get_XSpecified write Set_XSpecified;
    property YSpecified: WordBool read Get_YSpecified write Set_YSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SignaturePointTypeClassName: WideString read Get_SignaturePointTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISignaturePointTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {85E59F11-91ED-42FF-A9A5-C34D937AB3E8}
// *********************************************************************//
  ISignaturePointTypeDisp = dispinterface
    ['{85E59F11-91ED-42FF-A9A5-C34D937AB3E8}']
    property X: WideString dispid 1;
    property Y: WideString dispid 2;
    property XSpecified: WordBool dispid 4;
    property YSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property SignaturePointTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   ILoyaltyResultType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F155AC4B-5C1D-4E45-AF77-C60C291E7E84}
// *********************************************************************//
  ILoyaltyResultType = interface(IDispatch)
    ['{F155AC4B-5C1D-4E45-AF77-C60C291E7E84}']
    function Get_LoyaltyAccount: ILoyaltyAccountType; safecall;
    procedure _Set_LoyaltyAccount(const pRetVal: ILoyaltyAccountType); safecall;
    function Get_LoyaltyAmount: ILoyaltyAmountType; safecall;
    procedure _Set_LoyaltyAmount(const pRetVal: ILoyaltyAmountType); safecall;
    function Get_LoyaltyAcquirerData: ILoyaltyAcquirerDataType; safecall;
    procedure _Set_LoyaltyAcquirerData(const pRetVal: ILoyaltyAcquirerDataType); safecall;
    function Get_Rebates: IRebatesType; safecall;
    procedure _Set_Rebates(const pRetVal: IRebatesType); safecall;
    function Get_CurrentBalance: Double; safecall;
    procedure Set_CurrentBalance(pRetVal: Double); safecall;
    function Get_CurrentBalanceSpecified: WordBool; safecall;
    procedure Set_CurrentBalanceSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyAccountSpecified: WordBool; safecall;
    procedure Set_LoyaltyAccountSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyAmountSpecified: WordBool; safecall;
    procedure Set_LoyaltyAmountSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyAcquirerDataSpecified: WordBool; safecall;
    procedure Set_LoyaltyAcquirerDataSpecified(pRetVal: WordBool); safecall;
    function Get_RebatesSpecified: WordBool; safecall;
    procedure Set_RebatesSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LoyaltyResultTypeClassName: WideString; safecall;
    property LoyaltyAccount: ILoyaltyAccountType read Get_LoyaltyAccount write _Set_LoyaltyAccount;
    property LoyaltyAmount: ILoyaltyAmountType read Get_LoyaltyAmount write _Set_LoyaltyAmount;
    property LoyaltyAcquirerData: ILoyaltyAcquirerDataType read Get_LoyaltyAcquirerData write _Set_LoyaltyAcquirerData;
    property Rebates: IRebatesType read Get_Rebates write _Set_Rebates;
    property CurrentBalance: Double read Get_CurrentBalance write Set_CurrentBalance;
    property CurrentBalanceSpecified: WordBool read Get_CurrentBalanceSpecified write Set_CurrentBalanceSpecified;
    property LoyaltyAccountSpecified: WordBool read Get_LoyaltyAccountSpecified write Set_LoyaltyAccountSpecified;
    property LoyaltyAmountSpecified: WordBool read Get_LoyaltyAmountSpecified write Set_LoyaltyAmountSpecified;
    property LoyaltyAcquirerDataSpecified: WordBool read Get_LoyaltyAcquirerDataSpecified write Set_LoyaltyAcquirerDataSpecified;
    property RebatesSpecified: WordBool read Get_RebatesSpecified write Set_RebatesSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LoyaltyResultTypeClassName: WideString read Get_LoyaltyResultTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyResultTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F155AC4B-5C1D-4E45-AF77-C60C291E7E84}
// *********************************************************************//
  ILoyaltyResultTypeDisp = dispinterface
    ['{F155AC4B-5C1D-4E45-AF77-C60C291E7E84}']
    property LoyaltyAccount: ILoyaltyAccountType dispid 1;
    property LoyaltyAmount: ILoyaltyAmountType dispid 2;
    property LoyaltyAcquirerData: ILoyaltyAcquirerDataType dispid 3;
    property Rebates: IRebatesType dispid 4;
    property CurrentBalance: Double dispid 5;
    property CurrentBalanceSpecified: WordBool dispid 6;
    property LoyaltyAccountSpecified: WordBool dispid 8;
    property LoyaltyAmountSpecified: WordBool dispid 9;
    property LoyaltyAcquirerDataSpecified: WordBool dispid 10;
    property RebatesSpecified: WordBool dispid 11;
    property ObjectHasBeenSet: WordBool readonly dispid 12;
    property LoyaltyResultTypeClassName: WideString readonly dispid 13;
  end;

// *********************************************************************//
// Interface :   ILoyaltyAcquirerDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {35A1C2CE-4E6A-4857-80A1-8308EBD18F65}
// *********************************************************************//
  ILoyaltyAcquirerDataType = interface(IDispatch)
    ['{35A1C2CE-4E6A-4857-80A1-8308EBD18F65}']
    function Get_ApprovalCode: WideString; safecall;
    procedure Set_ApprovalCode(const pRetVal: WideString); safecall;
    function Get_LoyaltyTransactionID: ITransactionIdentificationType; safecall;
    procedure _Set_LoyaltyTransactionID(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_LoyaltyAcquirerID: WideString; safecall;
    procedure Set_LoyaltyAcquirerID(const pRetVal: WideString); safecall;
    function Get_HostReconciliationID: WideString; safecall;
    procedure Set_HostReconciliationID(const pRetVal: WideString); safecall;
    function Get_ApprovalCodeSpecified: WordBool; safecall;
    procedure Set_ApprovalCodeSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyTransactionIDSpecified: WordBool; safecall;
    procedure Set_LoyaltyTransactionIDSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyAcquirerIDSpecified: WordBool; safecall;
    procedure Set_LoyaltyAcquirerIDSpecified(pRetVal: WordBool); safecall;
    function Get_HostReconciliationIDSpecified: WordBool; safecall;
    procedure Set_HostReconciliationIDSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LoyaltyAcquirerDataTypeClassName: WideString; safecall;
    property ApprovalCode: WideString read Get_ApprovalCode write Set_ApprovalCode;
    property LoyaltyTransactionID: ITransactionIdentificationType read Get_LoyaltyTransactionID write _Set_LoyaltyTransactionID;
    property LoyaltyAcquirerID: WideString read Get_LoyaltyAcquirerID write Set_LoyaltyAcquirerID;
    property HostReconciliationID: WideString read Get_HostReconciliationID write Set_HostReconciliationID;
    property ApprovalCodeSpecified: WordBool read Get_ApprovalCodeSpecified write Set_ApprovalCodeSpecified;
    property LoyaltyTransactionIDSpecified: WordBool read Get_LoyaltyTransactionIDSpecified write Set_LoyaltyTransactionIDSpecified;
    property LoyaltyAcquirerIDSpecified: WordBool read Get_LoyaltyAcquirerIDSpecified write Set_LoyaltyAcquirerIDSpecified;
    property HostReconciliationIDSpecified: WordBool read Get_HostReconciliationIDSpecified write Set_HostReconciliationIDSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LoyaltyAcquirerDataTypeClassName: WideString read Get_LoyaltyAcquirerDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyAcquirerDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {35A1C2CE-4E6A-4857-80A1-8308EBD18F65}
// *********************************************************************//
  ILoyaltyAcquirerDataTypeDisp = dispinterface
    ['{35A1C2CE-4E6A-4857-80A1-8308EBD18F65}']
    property ApprovalCode: WideString dispid 1;
    property LoyaltyTransactionID: ITransactionIdentificationType dispid 2;
    property LoyaltyAcquirerID: WideString dispid 3;
    property HostReconciliationID: WideString dispid 4;
    property ApprovalCodeSpecified: WordBool dispid 6;
    property LoyaltyTransactionIDSpecified: WordBool dispid 7;
    property LoyaltyAcquirerIDSpecified: WordBool dispid 8;
    property HostReconciliationIDSpecified: WordBool dispid 9;
    property ObjectHasBeenSet: WordBool readonly dispid 10;
    property LoyaltyAcquirerDataTypeClassName: WideString readonly dispid 11;
  end;

// *********************************************************************//
// Interface :   IRebatesType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AC0FF447-76B9-48B3-ACA1-B701AF9CCA3A}
// *********************************************************************//
  IRebatesType = interface(IDispatch)
    ['{AC0FF447-76B9-48B3-ACA1-B701AF9CCA3A}']
    function Get_TotalRebate: Double; safecall;
    procedure Set_TotalRebate(pRetVal: Double); safecall;
    function Get_TotalRebateSpecified: WordBool; safecall;
    procedure Set_TotalRebateSpecified(pRetVal: WordBool); safecall;
    function Get_RebateLabel: WideString; safecall;
    procedure Set_RebateLabel(const pRetVal: WideString); safecall;
    function Get_SaleItemRebate: PSafeArray; safecall;
    procedure Set_SaleItemRebate(pRetVal: PSafeArray); safecall;
    function Get_RebateLabelSpecified: WordBool; safecall;
    procedure Set_RebateLabelSpecified(pRetVal: WordBool); safecall;
    function Get_SaleItemRebateSpecified: WordBool; safecall;
    procedure Set_SaleItemRebateSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_RebatesTypeClassName: WideString; safecall;
    function SaleItemRebateLength: Integer; safecall;
    function SaleItemRebateGetItem(index: Integer): ISaleItemRebateType; safecall;
    function SaleItemRebateSetItem(index: Integer; const value: ISaleItemRebateType): WordBool; safecall;
    function SaleItemRebateAddItem(const value: ISaleItemRebateType): WordBool; safecall;
    function SaleItemRebateRemoveItem(index: Integer): WordBool; safecall;
    function SaleItemRebateInsertItem(index: Integer; const value: ISaleItemRebateType): Integer; safecall;
    property TotalRebate: Double read Get_TotalRebate write Set_TotalRebate;
    property TotalRebateSpecified: WordBool read Get_TotalRebateSpecified write Set_TotalRebateSpecified;
    property RebateLabel: WideString read Get_RebateLabel write Set_RebateLabel;
    property SaleItemRebate: PSafeArray read Get_SaleItemRebate write Set_SaleItemRebate;
    property RebateLabelSpecified: WordBool read Get_RebateLabelSpecified write Set_RebateLabelSpecified;
    property SaleItemRebateSpecified: WordBool read Get_SaleItemRebateSpecified write Set_SaleItemRebateSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property RebatesTypeClassName: WideString read Get_RebatesTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IRebatesTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AC0FF447-76B9-48B3-ACA1-B701AF9CCA3A}
// *********************************************************************//
  IRebatesTypeDisp = dispinterface
    ['{AC0FF447-76B9-48B3-ACA1-B701AF9CCA3A}']
    property TotalRebate: Double dispid 1;
    property TotalRebateSpecified: WordBool dispid 2;
    property RebateLabel: WideString dispid 3;
    property SaleItemRebate: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property RebateLabelSpecified: WordBool dispid 6;
    property SaleItemRebateSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 14;
    property RebatesTypeClassName: WideString readonly dispid 15;
    function SaleItemRebateLength: Integer; dispid 8;
    function SaleItemRebateGetItem(index: Integer): ISaleItemRebateType; dispid 9;
    function SaleItemRebateSetItem(index: Integer; const value: ISaleItemRebateType): WordBool; dispid 10;
    function SaleItemRebateAddItem(const value: ISaleItemRebateType): WordBool; dispid 11;
    function SaleItemRebateRemoveItem(index: Integer): WordBool; dispid 12;
    function SaleItemRebateInsertItem(index: Integer; const value: ISaleItemRebateType): Integer; dispid 13;
  end;

// *********************************************************************//
// Interface :   ISaleItemRebateType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F2B4CFF7-9A9B-4D5E-938B-8B7206A0ADA0}
// *********************************************************************//
  ISaleItemRebateType = interface(IDispatch)
    ['{F2B4CFF7-9A9B-4D5E-938B-8B7206A0ADA0}']
    function Get_UnitOfMeasure: WideString; safecall;
    procedure Set_UnitOfMeasure(const pRetVal: WideString); safecall;
    function Get_Quantity: Double; safecall;
    procedure Set_Quantity(pRetVal: Double); safecall;
    function Get_QuantitySpecified: WordBool; safecall;
    procedure Set_QuantitySpecified(pRetVal: WordBool); safecall;
    function Get_RebateLabel: WideString; safecall;
    procedure Set_RebateLabel(const pRetVal: WideString); safecall;
    function Get_ItemID: Integer; safecall;
    procedure Set_ItemID(pRetVal: Integer); safecall;
    function Get_ProductCode: WideString; safecall;
    procedure Set_ProductCode(const pRetVal: WideString); safecall;
    function Get_EanUpc: WideString; safecall;
    procedure Set_EanUpc(const pRetVal: WideString); safecall;
    function Get_ItemAmount: Double; safecall;
    procedure Set_ItemAmount(pRetVal: Double); safecall;
    function Get_ItemAmountSpecified: WordBool; safecall;
    procedure Set_ItemAmountSpecified(pRetVal: WordBool); safecall;
    function Get_UnitOfMeasureSpecified: WordBool; safecall;
    procedure Set_UnitOfMeasureSpecified(pRetVal: WordBool); safecall;
    function Get_RebateLabelSpecified: WordBool; safecall;
    procedure Set_RebateLabelSpecified(pRetVal: WordBool); safecall;
    function Get_ItemIDSpecified: WordBool; safecall;
    procedure Set_ItemIDSpecified(pRetVal: WordBool); safecall;
    function Get_ProductCodeSpecified: WordBool; safecall;
    procedure Set_ProductCodeSpecified(pRetVal: WordBool); safecall;
    function Get_EanUpcSpecified: WordBool; safecall;
    procedure Set_EanUpcSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SaleItemRebateTypeClassName: WideString; safecall;
    property UnitOfMeasure: WideString read Get_UnitOfMeasure write Set_UnitOfMeasure;
    property Quantity: Double read Get_Quantity write Set_Quantity;
    property QuantitySpecified: WordBool read Get_QuantitySpecified write Set_QuantitySpecified;
    property RebateLabel: WideString read Get_RebateLabel write Set_RebateLabel;
    property ItemID: Integer read Get_ItemID write Set_ItemID;
    property ProductCode: WideString read Get_ProductCode write Set_ProductCode;
    property EanUpc: WideString read Get_EanUpc write Set_EanUpc;
    property ItemAmount: Double read Get_ItemAmount write Set_ItemAmount;
    property ItemAmountSpecified: WordBool read Get_ItemAmountSpecified write Set_ItemAmountSpecified;
    property UnitOfMeasureSpecified: WordBool read Get_UnitOfMeasureSpecified write Set_UnitOfMeasureSpecified;
    property RebateLabelSpecified: WordBool read Get_RebateLabelSpecified write Set_RebateLabelSpecified;
    property ItemIDSpecified: WordBool read Get_ItemIDSpecified write Set_ItemIDSpecified;
    property ProductCodeSpecified: WordBool read Get_ProductCodeSpecified write Set_ProductCodeSpecified;
    property EanUpcSpecified: WordBool read Get_EanUpcSpecified write Set_EanUpcSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SaleItemRebateTypeClassName: WideString read Get_SaleItemRebateTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISaleItemRebateTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F2B4CFF7-9A9B-4D5E-938B-8B7206A0ADA0}
// *********************************************************************//
  ISaleItemRebateTypeDisp = dispinterface
    ['{F2B4CFF7-9A9B-4D5E-938B-8B7206A0ADA0}']
    property UnitOfMeasure: WideString dispid 1;
    property Quantity: Double dispid 2;
    property QuantitySpecified: WordBool dispid 3;
    property RebateLabel: WideString dispid 4;
    property ItemID: Integer dispid 5;
    property ProductCode: WideString dispid 6;
    property EanUpc: WideString dispid 7;
    property ItemAmount: Double dispid 8;
    property ItemAmountSpecified: WordBool dispid 9;
    property UnitOfMeasureSpecified: WordBool dispid 11;
    property RebateLabelSpecified: WordBool dispid 12;
    property ItemIDSpecified: WordBool dispid 13;
    property ProductCodeSpecified: WordBool dispid 14;
    property EanUpcSpecified: WordBool dispid 15;
    property ObjectHasBeenSet: WordBool readonly dispid 16;
    property SaleItemRebateTypeClassName: WideString readonly dispid 17;
  end;

// *********************************************************************//
// Interface :   ICardAcquisitionRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5E0D8D67-C7C2-46E8-9DB2-8CD93766C483}
// *********************************************************************//
  ICardAcquisitionRequestType = interface(IDispatch)
    ['{5E0D8D67-C7C2-46E8-9DB2-8CD93766C483}']
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_CardAcquisitionTransaction: ICardAcquisitionTransactionType; safecall;
    procedure _Set_CardAcquisitionTransaction(const pRetVal: ICardAcquisitionTransactionType); safecall;
    function Get_SaleDataSpecified: WordBool; safecall;
    procedure Set_SaleDataSpecified(pRetVal: WordBool); safecall;
    function Get_CardAcquisitionTransactionSpecified: WordBool; safecall;
    procedure Set_CardAcquisitionTransactionSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CardAcquisitionRequestTypeClassName: WideString; safecall;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property CardAcquisitionTransaction: ICardAcquisitionTransactionType read Get_CardAcquisitionTransaction write _Set_CardAcquisitionTransaction;
    property SaleDataSpecified: WordBool read Get_SaleDataSpecified write Set_SaleDataSpecified;
    property CardAcquisitionTransactionSpecified: WordBool read Get_CardAcquisitionTransactionSpecified write Set_CardAcquisitionTransactionSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CardAcquisitionRequestTypeClassName: WideString read Get_CardAcquisitionRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICardAcquisitionRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5E0D8D67-C7C2-46E8-9DB2-8CD93766C483}
// *********************************************************************//
  ICardAcquisitionRequestTypeDisp = dispinterface
    ['{5E0D8D67-C7C2-46E8-9DB2-8CD93766C483}']
    property SaleData: ISaleDataType dispid 1;
    property CardAcquisitionTransaction: ICardAcquisitionTransactionType dispid 2;
    property SaleDataSpecified: WordBool dispid 4;
    property CardAcquisitionTransactionSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property CardAcquisitionRequestTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   ICardAcquisitionTransactionType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CA286CA8-16EC-4983-80DA-94F7AB60BED2}
// *********************************************************************//
  ICardAcquisitionTransactionType = interface(IDispatch)
    ['{CA286CA8-16EC-4983-80DA-94F7AB60BED2}']
    function Get_AllowedPaymentBrand: PSafeArray; safecall;
    procedure Set_AllowedPaymentBrand(pRetVal: PSafeArray); safecall;
    function Get_AllowedLoyaltyBrand: PSafeArray; safecall;
    procedure Set_AllowedLoyaltyBrand(pRetVal: PSafeArray); safecall;
    function Get_ForceEntryMode: PSafeArray; safecall;
    procedure Set_ForceEntryMode(pRetVal: PSafeArray); safecall;
    function Get_LoyaltyHandling: WideString; safecall;
    procedure Set_LoyaltyHandling(const pRetVal: WideString); safecall;
    function Get_CustomerLanguage: WideString; safecall;
    procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
    function Get_ForceCustomerSelectionFlag: WordBool; safecall;
    procedure Set_ForceCustomerSelectionFlag(pRetVal: WordBool); safecall;
    function Get_TotalAmount: Double; safecall;
    procedure Set_TotalAmount(pRetVal: Double); safecall;
    function Get_TotalAmountSpecified: WordBool; safecall;
    procedure Set_TotalAmountSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentType: WideString; safecall;
    procedure Set_PaymentType(const pRetVal: WideString); safecall;
    function Get_CashBackFlag: WordBool; safecall;
    procedure Set_CashBackFlag(pRetVal: WordBool); safecall;
    function Get_CashBackFlagSpecified: WordBool; safecall;
    procedure Set_CashBackFlagSpecified(pRetVal: WordBool); safecall;
    function Get_AllowedPaymentBrandSpecified: WordBool; safecall;
    procedure Set_AllowedPaymentBrandSpecified(pRetVal: WordBool); safecall;
    function Get_AllowedLoyaltyBrandSpecified: WordBool; safecall;
    procedure Set_AllowedLoyaltyBrandSpecified(pRetVal: WordBool); safecall;
    function Get_ForceEntryModeSpecified: WordBool; safecall;
    procedure Set_ForceEntryModeSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyHandlingDefaultValue: WideString; safecall;
    function Get_LoyaltyHandlingSpecified: WordBool; safecall;
    procedure Set_LoyaltyHandlingSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerLanguageSpecified: WordBool; safecall;
    procedure Set_CustomerLanguageSpecified(pRetVal: WordBool); safecall;
    function Get_ForceCustomerSelectionFlagDefaultValue: WordBool; safecall;
    function Get_ForceCustomerSelectionFlagSpecified: WordBool; safecall;
    procedure Set_ForceCustomerSelectionFlagSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentTypeSpecified: WordBool; safecall;
    procedure Set_PaymentTypeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CardAcquisitionTransactionTypeClassName: WideString; safecall;
    function AllowedPaymentBrandLength: Integer; safecall;
    function AllowedPaymentBrandGetItem(index: Integer): WideString; safecall;
    function AllowedPaymentBrandSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function AllowedPaymentBrandAddItem(const value: WideString): WordBool; safecall;
    function AllowedPaymentBrandRemoveItem(index: Integer): WordBool; safecall;
    function AllowedPaymentBrandInsertItem(index: Integer; const value: WideString): Integer; safecall;
    function AllowedLoyaltyBrandLength: Integer; safecall;
    function AllowedLoyaltyBrandGetItem(index: Integer): WideString; safecall;
    function AllowedLoyaltyBrandSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function AllowedLoyaltyBrandAddItem(const value: WideString): WordBool; safecall;
    function AllowedLoyaltyBrandRemoveItem(index: Integer): WordBool; safecall;
    function AllowedLoyaltyBrandInsertItem(index: Integer; const value: WideString): Integer; safecall;
    function ForceEntryModeLength: Integer; safecall;
    function ForceEntryModeGetItem(index: Integer): WideString; safecall;
    function ForceEntryModeSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function ForceEntryModeAddItem(const value: WideString): WordBool; safecall;
    function ForceEntryModeRemoveItem(index: Integer): WordBool; safecall;
    function ForceEntryModeInsertItem(index: Integer; const value: WideString): Integer; safecall;
    property AllowedPaymentBrand: PSafeArray read Get_AllowedPaymentBrand write Set_AllowedPaymentBrand;
    property AllowedLoyaltyBrand: PSafeArray read Get_AllowedLoyaltyBrand write Set_AllowedLoyaltyBrand;
    property ForceEntryMode: PSafeArray read Get_ForceEntryMode write Set_ForceEntryMode;
    property LoyaltyHandling: WideString read Get_LoyaltyHandling write Set_LoyaltyHandling;
    property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
    property ForceCustomerSelectionFlag: WordBool read Get_ForceCustomerSelectionFlag write Set_ForceCustomerSelectionFlag;
    property TotalAmount: Double read Get_TotalAmount write Set_TotalAmount;
    property TotalAmountSpecified: WordBool read Get_TotalAmountSpecified write Set_TotalAmountSpecified;
    property PaymentType: WideString read Get_PaymentType write Set_PaymentType;
    property CashBackFlag: WordBool read Get_CashBackFlag write Set_CashBackFlag;
    property CashBackFlagSpecified: WordBool read Get_CashBackFlagSpecified write Set_CashBackFlagSpecified;
    property AllowedPaymentBrandSpecified: WordBool read Get_AllowedPaymentBrandSpecified write Set_AllowedPaymentBrandSpecified;
    property AllowedLoyaltyBrandSpecified: WordBool read Get_AllowedLoyaltyBrandSpecified write Set_AllowedLoyaltyBrandSpecified;
    property ForceEntryModeSpecified: WordBool read Get_ForceEntryModeSpecified write Set_ForceEntryModeSpecified;
    property LoyaltyHandlingDefaultValue: WideString read Get_LoyaltyHandlingDefaultValue;
    property LoyaltyHandlingSpecified: WordBool read Get_LoyaltyHandlingSpecified write Set_LoyaltyHandlingSpecified;
    property CustomerLanguageSpecified: WordBool read Get_CustomerLanguageSpecified write Set_CustomerLanguageSpecified;
    property ForceCustomerSelectionFlagDefaultValue: WordBool read Get_ForceCustomerSelectionFlagDefaultValue;
    property ForceCustomerSelectionFlagSpecified: WordBool read Get_ForceCustomerSelectionFlagSpecified write Set_ForceCustomerSelectionFlagSpecified;
    property PaymentTypeSpecified: WordBool read Get_PaymentTypeSpecified write Set_PaymentTypeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CardAcquisitionTransactionTypeClassName: WideString read Get_CardAcquisitionTransactionTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICardAcquisitionTransactionTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CA286CA8-16EC-4983-80DA-94F7AB60BED2}
// *********************************************************************//
  ICardAcquisitionTransactionTypeDisp = dispinterface
    ['{CA286CA8-16EC-4983-80DA-94F7AB60BED2}']
    property AllowedPaymentBrand: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property AllowedLoyaltyBrand: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property ForceEntryMode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property LoyaltyHandling: WideString dispid 5;
    property CustomerLanguage: WideString dispid 6;
    property ForceCustomerSelectionFlag: WordBool dispid 7;
    property TotalAmount: Double dispid 8;
    property TotalAmountSpecified: WordBool dispid 9;
    property PaymentType: WideString dispid 10;
    property CashBackFlag: WordBool dispid 11;
    property CashBackFlagSpecified: WordBool dispid 12;
    property AllowedPaymentBrandSpecified: WordBool dispid 13;
    property AllowedLoyaltyBrandSpecified: WordBool dispid 20;
    property ForceEntryModeSpecified: WordBool dispid 27;
    property LoyaltyHandlingDefaultValue: WideString readonly dispid 34;
    property LoyaltyHandlingSpecified: WordBool dispid 35;
    property CustomerLanguageSpecified: WordBool dispid 36;
    property ForceCustomerSelectionFlagDefaultValue: WordBool readonly dispid 37;
    property ForceCustomerSelectionFlagSpecified: WordBool dispid 38;
    property PaymentTypeSpecified: WordBool dispid 39;
    property ObjectHasBeenSet: WordBool readonly dispid 40;
    property CardAcquisitionTransactionTypeClassName: WideString readonly dispid 41;
    function AllowedPaymentBrandLength: Integer; dispid 14;
    function AllowedPaymentBrandGetItem(index: Integer): WideString; dispid 15;
    function AllowedPaymentBrandSetItem(index: Integer; const value: WideString): WordBool; dispid 16;
    function AllowedPaymentBrandAddItem(const value: WideString): WordBool; dispid 17;
    function AllowedPaymentBrandRemoveItem(index: Integer): WordBool; dispid 18;
    function AllowedPaymentBrandInsertItem(index: Integer; const value: WideString): Integer; dispid 19;
    function AllowedLoyaltyBrandLength: Integer; dispid 21;
    function AllowedLoyaltyBrandGetItem(index: Integer): WideString; dispid 22;
    function AllowedLoyaltyBrandSetItem(index: Integer; const value: WideString): WordBool; dispid 23;
    function AllowedLoyaltyBrandAddItem(const value: WideString): WordBool; dispid 24;
    function AllowedLoyaltyBrandRemoveItem(index: Integer): WordBool; dispid 25;
    function AllowedLoyaltyBrandInsertItem(index: Integer; const value: WideString): Integer; dispid 26;
    function ForceEntryModeLength: Integer; dispid 28;
    function ForceEntryModeGetItem(index: Integer): WideString; dispid 29;
    function ForceEntryModeSetItem(index: Integer; const value: WideString): WordBool; dispid 30;
    function ForceEntryModeAddItem(const value: WideString): WordBool; dispid 31;
    function ForceEntryModeRemoveItem(index: Integer): WordBool; dispid 32;
    function ForceEntryModeInsertItem(index: Integer; const value: WideString): Integer; dispid 33;
  end;

// *********************************************************************//
// Interface :   ICardAcquisitionResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F77F3BDC-9594-434A-80C3-A58CF00131DE}
// *********************************************************************//
  ICardAcquisitionResponseType = interface(IDispatch)
    ['{F77F3BDC-9594-434A-80C3-A58CF00131DE}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_POIData: IPOIDataType; safecall;
    procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
    function Get_PaymentBrand: PSafeArray; safecall;
    procedure Set_PaymentBrand(pRetVal: PSafeArray); safecall;
    function Get_PaymentInstrumentData: IPaymentInstrumentDataType; safecall;
    procedure _Set_PaymentInstrumentData(const pRetVal: IPaymentInstrumentDataType); safecall;
    function Get_LoyaltyAccount: PSafeArray; safecall;
    procedure Set_LoyaltyAccount(pRetVal: PSafeArray); safecall;
    function Get_CustomerOrder: PSafeArray; safecall;
    procedure Set_CustomerOrder(pRetVal: PSafeArray); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_SaleDataSpecified: WordBool; safecall;
    procedure Set_SaleDataSpecified(pRetVal: WordBool); safecall;
    function Get_POIDataSpecified: WordBool; safecall;
    procedure Set_POIDataSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentBrandSpecified: WordBool; safecall;
    procedure Set_PaymentBrandSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentInstrumentDataSpecified: WordBool; safecall;
    procedure Set_PaymentInstrumentDataSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyAccountSpecified: WordBool; safecall;
    procedure Set_LoyaltyAccountSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerOrderSpecified: WordBool; safecall;
    procedure Set_CustomerOrderSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CardAcquisitionResponseTypeClassName: WideString; safecall;
    function PaymentBrandLength: Integer; safecall;
    function PaymentBrandGetItem(index: Integer): WideString; safecall;
    function PaymentBrandSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function PaymentBrandAddItem(const value: WideString): WordBool; safecall;
    function PaymentBrandRemoveItem(index: Integer): WordBool; safecall;
    function PaymentBrandInsertItem(index: Integer; const value: WideString): Integer; safecall;
    function LoyaltyAccountLength: Integer; safecall;
    function LoyaltyAccountGetItem(index: Integer): ILoyaltyAccountType; safecall;
    function LoyaltyAccountSetItem(index: Integer; const value: ILoyaltyAccountType): WordBool; safecall;
    function LoyaltyAccountAddItem(const value: ILoyaltyAccountType): WordBool; safecall;
    function LoyaltyAccountRemoveItem(index: Integer): WordBool; safecall;
    function LoyaltyAccountInsertItem(index: Integer; const value: ILoyaltyAccountType): Integer; safecall;
    function CustomerOrderLength: Integer; safecall;
    function CustomerOrderGetItem(index: Integer): ICustomerOrderType; safecall;
    function CustomerOrderSetItem(index: Integer; const value: ICustomerOrderType): WordBool; safecall;
    function CustomerOrderAddItem(const value: ICustomerOrderType): WordBool; safecall;
    function CustomerOrderRemoveItem(index: Integer): WordBool; safecall;
    function CustomerOrderInsertItem(index: Integer; const value: ICustomerOrderType): Integer; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property POIData: IPOIDataType read Get_POIData write _Set_POIData;
    property PaymentBrand: PSafeArray read Get_PaymentBrand write Set_PaymentBrand;
    property PaymentInstrumentData: IPaymentInstrumentDataType read Get_PaymentInstrumentData write _Set_PaymentInstrumentData;
    property LoyaltyAccount: PSafeArray read Get_LoyaltyAccount write Set_LoyaltyAccount;
    property CustomerOrder: PSafeArray read Get_CustomerOrder write Set_CustomerOrder;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property SaleDataSpecified: WordBool read Get_SaleDataSpecified write Set_SaleDataSpecified;
    property POIDataSpecified: WordBool read Get_POIDataSpecified write Set_POIDataSpecified;
    property PaymentBrandSpecified: WordBool read Get_PaymentBrandSpecified write Set_PaymentBrandSpecified;
    property PaymentInstrumentDataSpecified: WordBool read Get_PaymentInstrumentDataSpecified write Set_PaymentInstrumentDataSpecified;
    property LoyaltyAccountSpecified: WordBool read Get_LoyaltyAccountSpecified write Set_LoyaltyAccountSpecified;
    property CustomerOrderSpecified: WordBool read Get_CustomerOrderSpecified write Set_CustomerOrderSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CardAcquisitionResponseTypeClassName: WideString read Get_CardAcquisitionResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICardAcquisitionResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F77F3BDC-9594-434A-80C3-A58CF00131DE}
// *********************************************************************//
  ICardAcquisitionResponseTypeDisp = dispinterface
    ['{F77F3BDC-9594-434A-80C3-A58CF00131DE}']
    property Response: IResponseType dispid 1;
    property SaleData: ISaleDataType dispid 2;
    property POIData: IPOIDataType dispid 3;
    property PaymentBrand: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property PaymentInstrumentData: IPaymentInstrumentDataType dispid 5;
    property LoyaltyAccount: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 6;
    property CustomerOrder: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 7;
    property ResponseSpecified: WordBool dispid 9;
    property SaleDataSpecified: WordBool dispid 10;
    property POIDataSpecified: WordBool dispid 11;
    property PaymentBrandSpecified: WordBool dispid 12;
    property PaymentInstrumentDataSpecified: WordBool dispid 19;
    property LoyaltyAccountSpecified: WordBool dispid 20;
    property CustomerOrderSpecified: WordBool dispid 27;
    property ObjectHasBeenSet: WordBool readonly dispid 34;
    property CardAcquisitionResponseTypeClassName: WideString readonly dispid 35;
    function PaymentBrandLength: Integer; dispid 13;
    function PaymentBrandGetItem(index: Integer): WideString; dispid 14;
    function PaymentBrandSetItem(index: Integer; const value: WideString): WordBool; dispid 15;
    function PaymentBrandAddItem(const value: WideString): WordBool; dispid 16;
    function PaymentBrandRemoveItem(index: Integer): WordBool; dispid 17;
    function PaymentBrandInsertItem(index: Integer; const value: WideString): Integer; dispid 18;
    function LoyaltyAccountLength: Integer; dispid 21;
    function LoyaltyAccountGetItem(index: Integer): ILoyaltyAccountType; dispid 22;
    function LoyaltyAccountSetItem(index: Integer; const value: ILoyaltyAccountType): WordBool; dispid 23;
    function LoyaltyAccountAddItem(const value: ILoyaltyAccountType): WordBool; dispid 24;
    function LoyaltyAccountRemoveItem(index: Integer): WordBool; dispid 25;
    function LoyaltyAccountInsertItem(index: Integer; const value: ILoyaltyAccountType): Integer; dispid 26;
    function CustomerOrderLength: Integer; dispid 28;
    function CustomerOrderGetItem(index: Integer): ICustomerOrderType; dispid 29;
    function CustomerOrderSetItem(index: Integer; const value: ICustomerOrderType): WordBool; dispid 30;
    function CustomerOrderAddItem(const value: ICustomerOrderType): WordBool; dispid 31;
    function CustomerOrderRemoveItem(index: Integer): WordBool; dispid 32;
    function CustomerOrderInsertItem(index: Integer; const value: ICustomerOrderType): Integer; dispid 33;
  end;

// *********************************************************************//
// Interface :   ICardholderPINType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {04D615D7-5B0D-4E94-8A27-CF46FE90BBB3}
// *********************************************************************//
  ICardholderPINType = interface(IDispatch)
    ['{04D615D7-5B0D-4E94-8A27-CF46FE90BBB3}']
    function Get_EncrPINBlock: IContentInformationType; safecall;
    procedure _Set_EncrPINBlock(const pRetVal: IContentInformationType); safecall;
    function Get_PINFormat: WideString; safecall;
    procedure Set_PINFormat(const pRetVal: WideString); safecall;
    function Get_AdditionalInput: WideString; safecall;
    procedure Set_AdditionalInput(const pRetVal: WideString); safecall;
    function Get_EncrPINBlockSpecified: WordBool; safecall;
    procedure Set_EncrPINBlockSpecified(pRetVal: WordBool); safecall;
    function Get_PINFormatSpecified: WordBool; safecall;
    procedure Set_PINFormatSpecified(pRetVal: WordBool); safecall;
    function Get_AdditionalInputSpecified: WordBool; safecall;
    procedure Set_AdditionalInputSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CardholderPINTypeClassName: WideString; safecall;
    property EncrPINBlock: IContentInformationType read Get_EncrPINBlock write _Set_EncrPINBlock;
    property PINFormat: WideString read Get_PINFormat write Set_PINFormat;
    property AdditionalInput: WideString read Get_AdditionalInput write Set_AdditionalInput;
    property EncrPINBlockSpecified: WordBool read Get_EncrPINBlockSpecified write Set_EncrPINBlockSpecified;
    property PINFormatSpecified: WordBool read Get_PINFormatSpecified write Set_PINFormatSpecified;
    property AdditionalInputSpecified: WordBool read Get_AdditionalInputSpecified write Set_AdditionalInputSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CardholderPINTypeClassName: WideString read Get_CardholderPINTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICardholderPINTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {04D615D7-5B0D-4E94-8A27-CF46FE90BBB3}
// *********************************************************************//
  ICardholderPINTypeDisp = dispinterface
    ['{04D615D7-5B0D-4E94-8A27-CF46FE90BBB3}']
    property EncrPINBlock: IContentInformationType dispid 1;
    property PINFormat: WideString dispid 2;
    property AdditionalInput: WideString dispid 3;
    property EncrPINBlockSpecified: WordBool dispid 5;
    property PINFormatSpecified: WordBool dispid 6;
    property AdditionalInputSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 8;
    property CardholderPINTypeClassName: WideString readonly dispid 9;
  end;

// *********************************************************************//
// Interface :   ICardReaderAPDURequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CF007910-C350-4607-A23B-91F05C4B6D0B}
// *********************************************************************//
  ICardReaderAPDURequestType = interface(IDispatch)
    ['{CF007910-C350-4607-A23B-91F05C4B6D0B}']
    function Get_APDUData: PSafeArray; safecall;
    procedure Set_APDUData(pRetVal: PSafeArray); safecall;
    function Get_APDUClass: PSafeArray; safecall;
    procedure Set_APDUClass(pRetVal: PSafeArray); safecall;
    function Get_APDUInstruction: PSafeArray; safecall;
    procedure Set_APDUInstruction(pRetVal: PSafeArray); safecall;
    function Get_APDUPar1: PSafeArray; safecall;
    procedure Set_APDUPar1(pRetVal: PSafeArray); safecall;
    function Get_APDUPar2: PSafeArray; safecall;
    procedure Set_APDUPar2(pRetVal: PSafeArray); safecall;
    function Get_APDUExpectedLength: PSafeArray; safecall;
    procedure Set_APDUExpectedLength(pRetVal: PSafeArray); safecall;
    function Get_APDUDataSpecified: WordBool; safecall;
    procedure Set_APDUDataSpecified(pRetVal: WordBool); safecall;
    function Get_APDUClassSpecified: WordBool; safecall;
    procedure Set_APDUClassSpecified(pRetVal: WordBool); safecall;
    function Get_APDUInstructionSpecified: WordBool; safecall;
    procedure Set_APDUInstructionSpecified(pRetVal: WordBool); safecall;
    function Get_APDUPar1Specified: WordBool; safecall;
    procedure Set_APDUPar1Specified(pRetVal: WordBool); safecall;
    function Get_APDUPar2Specified: WordBool; safecall;
    procedure Set_APDUPar2Specified(pRetVal: WordBool); safecall;
    function Get_APDUExpectedLengthSpecified: WordBool; safecall;
    procedure Set_APDUExpectedLengthSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CardReaderAPDURequestTypeClassName: WideString; safecall;
    function APDUDataLength: Integer; safecall;
    function APDUDataGetItem(index: Integer): Byte; safecall;
    function APDUDataSetItem(index: Integer; value: Byte): WordBool; safecall;
    function APDUDataAddItem(value: Byte): WordBool; safecall;
    function APDUDataRemoveItem(index: Integer): WordBool; safecall;
    function APDUDataInsertItem(index: Integer; value: Byte): Integer; safecall;
    function APDUClassLength: Integer; safecall;
    function APDUClassGetItem(index: Integer): Byte; safecall;
    function APDUClassSetItem(index: Integer; value: Byte): WordBool; safecall;
    function APDUClassAddItem(value: Byte): WordBool; safecall;
    function APDUClassRemoveItem(index: Integer): WordBool; safecall;
    function APDUClassInsertItem(index: Integer; value: Byte): Integer; safecall;
    function APDUInstructionLength: Integer; safecall;
    function APDUInstructionGetItem(index: Integer): Byte; safecall;
    function APDUInstructionSetItem(index: Integer; value: Byte): WordBool; safecall;
    function APDUInstructionAddItem(value: Byte): WordBool; safecall;
    function APDUInstructionRemoveItem(index: Integer): WordBool; safecall;
    function APDUInstructionInsertItem(index: Integer; value: Byte): Integer; safecall;
    function APDUPar1Length: Integer; safecall;
    function APDUPar1GetItem(index: Integer): Byte; safecall;
    function APDUPar1SetItem(index: Integer; value: Byte): WordBool; safecall;
    function APDUPar1AddItem(value: Byte): WordBool; safecall;
    function APDUPar1RemoveItem(index: Integer): WordBool; safecall;
    function APDUPar1InsertItem(index: Integer; value: Byte): Integer; safecall;
    function APDUPar2Length: Integer; safecall;
    function APDUPar2GetItem(index: Integer): Byte; safecall;
    function APDUPar2SetItem(index: Integer; value: Byte): WordBool; safecall;
    function APDUPar2AddItem(value: Byte): WordBool; safecall;
    function APDUPar2RemoveItem(index: Integer): WordBool; safecall;
    function APDUPar2InsertItem(index: Integer; value: Byte): Integer; safecall;
    function APDUExpectedLengthLength: Integer; safecall;
    function APDUExpectedLengthGetItem(index: Integer): Byte; safecall;
    function APDUExpectedLengthSetItem(index: Integer; value: Byte): WordBool; safecall;
    function APDUExpectedLengthAddItem(value: Byte): WordBool; safecall;
    function APDUExpectedLengthRemoveItem(index: Integer): WordBool; safecall;
    function APDUExpectedLengthInsertItem(index: Integer; value: Byte): Integer; safecall;
    property APDUData: PSafeArray read Get_APDUData write Set_APDUData;
    property APDUClass: PSafeArray read Get_APDUClass write Set_APDUClass;
    property APDUInstruction: PSafeArray read Get_APDUInstruction write Set_APDUInstruction;
    property APDUPar1: PSafeArray read Get_APDUPar1 write Set_APDUPar1;
    property APDUPar2: PSafeArray read Get_APDUPar2 write Set_APDUPar2;
    property APDUExpectedLength: PSafeArray read Get_APDUExpectedLength write Set_APDUExpectedLength;
    property APDUDataSpecified: WordBool read Get_APDUDataSpecified write Set_APDUDataSpecified;
    property APDUClassSpecified: WordBool read Get_APDUClassSpecified write Set_APDUClassSpecified;
    property APDUInstructionSpecified: WordBool read Get_APDUInstructionSpecified write Set_APDUInstructionSpecified;
    property APDUPar1Specified: WordBool read Get_APDUPar1Specified write Set_APDUPar1Specified;
    property APDUPar2Specified: WordBool read Get_APDUPar2Specified write Set_APDUPar2Specified;
    property APDUExpectedLengthSpecified: WordBool read Get_APDUExpectedLengthSpecified write Set_APDUExpectedLengthSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CardReaderAPDURequestTypeClassName: WideString read Get_CardReaderAPDURequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICardReaderAPDURequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CF007910-C350-4607-A23B-91F05C4B6D0B}
// *********************************************************************//
  ICardReaderAPDURequestTypeDisp = dispinterface
    ['{CF007910-C350-4607-A23B-91F05C4B6D0B}']
    property APDUData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property APDUClass: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property APDUInstruction: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property APDUPar1: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property APDUPar2: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property APDUExpectedLength: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 6;
    property APDUDataSpecified: WordBool dispid 8;
    property APDUClassSpecified: WordBool dispid 15;
    property APDUInstructionSpecified: WordBool dispid 22;
    property APDUPar1Specified: WordBool dispid 29;
    property APDUPar2Specified: WordBool dispid 36;
    property APDUExpectedLengthSpecified: WordBool dispid 43;
    property ObjectHasBeenSet: WordBool readonly dispid 50;
    property CardReaderAPDURequestTypeClassName: WideString readonly dispid 51;
    function APDUDataLength: Integer; dispid 9;
    function APDUDataGetItem(index: Integer): Byte; dispid 10;
    function APDUDataSetItem(index: Integer; value: Byte): WordBool; dispid 11;
    function APDUDataAddItem(value: Byte): WordBool; dispid 12;
    function APDUDataRemoveItem(index: Integer): WordBool; dispid 13;
    function APDUDataInsertItem(index: Integer; value: Byte): Integer; dispid 14;
    function APDUClassLength: Integer; dispid 16;
    function APDUClassGetItem(index: Integer): Byte; dispid 17;
    function APDUClassSetItem(index: Integer; value: Byte): WordBool; dispid 18;
    function APDUClassAddItem(value: Byte): WordBool; dispid 19;
    function APDUClassRemoveItem(index: Integer): WordBool; dispid 20;
    function APDUClassInsertItem(index: Integer; value: Byte): Integer; dispid 21;
    function APDUInstructionLength: Integer; dispid 23;
    function APDUInstructionGetItem(index: Integer): Byte; dispid 24;
    function APDUInstructionSetItem(index: Integer; value: Byte): WordBool; dispid 25;
    function APDUInstructionAddItem(value: Byte): WordBool; dispid 26;
    function APDUInstructionRemoveItem(index: Integer): WordBool; dispid 27;
    function APDUInstructionInsertItem(index: Integer; value: Byte): Integer; dispid 28;
    function APDUPar1Length: Integer; dispid 30;
    function APDUPar1GetItem(index: Integer): Byte; dispid 31;
    function APDUPar1SetItem(index: Integer; value: Byte): WordBool; dispid 32;
    function APDUPar1AddItem(value: Byte): WordBool; dispid 33;
    function APDUPar1RemoveItem(index: Integer): WordBool; dispid 34;
    function APDUPar1InsertItem(index: Integer; value: Byte): Integer; dispid 35;
    function APDUPar2Length: Integer; dispid 37;
    function APDUPar2GetItem(index: Integer): Byte; dispid 38;
    function APDUPar2SetItem(index: Integer; value: Byte): WordBool; dispid 39;
    function APDUPar2AddItem(value: Byte): WordBool; dispid 40;
    function APDUPar2RemoveItem(index: Integer): WordBool; dispid 41;
    function APDUPar2InsertItem(index: Integer; value: Byte): Integer; dispid 42;
    function APDUExpectedLengthLength: Integer; dispid 44;
    function APDUExpectedLengthGetItem(index: Integer): Byte; dispid 45;
    function APDUExpectedLengthSetItem(index: Integer; value: Byte): WordBool; dispid 46;
    function APDUExpectedLengthAddItem(value: Byte): WordBool; dispid 47;
    function APDUExpectedLengthRemoveItem(index: Integer): WordBool; dispid 48;
    function APDUExpectedLengthInsertItem(index: Integer; value: Byte): Integer; dispid 49;
  end;

// *********************************************************************//
// Interface :   ICardReaderAPDUResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2DB25B97-BF82-435F-99A8-877FA2C29092}
// *********************************************************************//
  ICardReaderAPDUResponseType = interface(IDispatch)
    ['{2DB25B97-BF82-435F-99A8-877FA2C29092}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_APDUData: PSafeArray; safecall;
    procedure Set_APDUData(pRetVal: PSafeArray); safecall;
    function Get_CardStatusWords: PSafeArray; safecall;
    procedure Set_CardStatusWords(pRetVal: PSafeArray); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_APDUDataSpecified: WordBool; safecall;
    procedure Set_APDUDataSpecified(pRetVal: WordBool); safecall;
    function Get_CardStatusWordsSpecified: WordBool; safecall;
    procedure Set_CardStatusWordsSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CardReaderAPDUResponseTypeClassName: WideString; safecall;
    function APDUDataLength: Integer; safecall;
    function APDUDataGetItem(index: Integer): Byte; safecall;
    function APDUDataSetItem(index: Integer; value: Byte): WordBool; safecall;
    function APDUDataAddItem(value: Byte): WordBool; safecall;
    function APDUDataRemoveItem(index: Integer): WordBool; safecall;
    function APDUDataInsertItem(index: Integer; value: Byte): Integer; safecall;
    function CardStatusWordsLength: Integer; safecall;
    function CardStatusWordsGetItem(index: Integer): Byte; safecall;
    function CardStatusWordsSetItem(index: Integer; value: Byte): WordBool; safecall;
    function CardStatusWordsAddItem(value: Byte): WordBool; safecall;
    function CardStatusWordsRemoveItem(index: Integer): WordBool; safecall;
    function CardStatusWordsInsertItem(index: Integer; value: Byte): Integer; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property APDUData: PSafeArray read Get_APDUData write Set_APDUData;
    property CardStatusWords: PSafeArray read Get_CardStatusWords write Set_CardStatusWords;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property APDUDataSpecified: WordBool read Get_APDUDataSpecified write Set_APDUDataSpecified;
    property CardStatusWordsSpecified: WordBool read Get_CardStatusWordsSpecified write Set_CardStatusWordsSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CardReaderAPDUResponseTypeClassName: WideString read Get_CardReaderAPDUResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICardReaderAPDUResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2DB25B97-BF82-435F-99A8-877FA2C29092}
// *********************************************************************//
  ICardReaderAPDUResponseTypeDisp = dispinterface
    ['{2DB25B97-BF82-435F-99A8-877FA2C29092}']
    property Response: IResponseType dispid 1;
    property APDUData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property CardStatusWords: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property ResponseSpecified: WordBool dispid 5;
    property APDUDataSpecified: WordBool dispid 6;
    property CardStatusWordsSpecified: WordBool dispid 13;
    property ObjectHasBeenSet: WordBool readonly dispid 20;
    property CardReaderAPDUResponseTypeClassName: WideString readonly dispid 21;
    function APDUDataLength: Integer; dispid 7;
    function APDUDataGetItem(index: Integer): Byte; dispid 8;
    function APDUDataSetItem(index: Integer; value: Byte): WordBool; dispid 9;
    function APDUDataAddItem(value: Byte): WordBool; dispid 10;
    function APDUDataRemoveItem(index: Integer): WordBool; dispid 11;
    function APDUDataInsertItem(index: Integer; value: Byte): Integer; dispid 12;
    function CardStatusWordsLength: Integer; dispid 14;
    function CardStatusWordsGetItem(index: Integer): Byte; dispid 15;
    function CardStatusWordsSetItem(index: Integer; value: Byte): WordBool; dispid 16;
    function CardStatusWordsAddItem(value: Byte): WordBool; dispid 17;
    function CardStatusWordsRemoveItem(index: Integer): WordBool; dispid 18;
    function CardStatusWordsInsertItem(index: Integer; value: Byte): Integer; dispid 19;
  end;

// *********************************************************************//
// Interface :   ICardReaderInitRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AD946B05-FC15-47BE-AA5E-09A7C25509AA}
// *********************************************************************//
  ICardReaderInitRequestType = interface(IDispatch)
    ['{AD946B05-FC15-47BE-AA5E-09A7C25509AA}']
    function Get_ForceEntryMode: PSafeArray; safecall;
    procedure Set_ForceEntryMode(pRetVal: PSafeArray); safecall;
    function Get_DisplayOutput: IDisplayOutputType; safecall;
    procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
    function Get_WarmResetFlag: WordBool; safecall;
    procedure Set_WarmResetFlag(pRetVal: WordBool); safecall;
    function Get_WarmResetFlagSpecified: WordBool; safecall;
    procedure Set_WarmResetFlagSpecified(pRetVal: WordBool); safecall;
    function Get_LeaveCardFlag: WordBool; safecall;
    procedure Set_LeaveCardFlag(pRetVal: WordBool); safecall;
    function Get_MaxWaitingTime: Integer; safecall;
    procedure Set_MaxWaitingTime(pRetVal: Integer); safecall;
    function Get_ForceEntryModeSpecified: WordBool; safecall;
    procedure Set_ForceEntryModeSpecified(pRetVal: WordBool); safecall;
    function Get_DisplayOutputSpecified: WordBool; safecall;
    procedure Set_DisplayOutputSpecified(pRetVal: WordBool); safecall;
    function Get_LeaveCardFlagDefaultValue: WordBool; safecall;
    function Get_LeaveCardFlagSpecified: WordBool; safecall;
    procedure Set_LeaveCardFlagSpecified(pRetVal: WordBool); safecall;
    function Get_MaxWaitingTimeSpecified: WordBool; safecall;
    procedure Set_MaxWaitingTimeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CardReaderInitRequestTypeClassName: WideString; safecall;
    function ForceEntryModeLength: Integer; safecall;
    function ForceEntryModeGetItem(index: Integer): WideString; safecall;
    function ForceEntryModeSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function ForceEntryModeAddItem(const value: WideString): WordBool; safecall;
    function ForceEntryModeRemoveItem(index: Integer): WordBool; safecall;
    function ForceEntryModeInsertItem(index: Integer; const value: WideString): Integer; safecall;
    property ForceEntryMode: PSafeArray read Get_ForceEntryMode write Set_ForceEntryMode;
    property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
    property WarmResetFlag: WordBool read Get_WarmResetFlag write Set_WarmResetFlag;
    property WarmResetFlagSpecified: WordBool read Get_WarmResetFlagSpecified write Set_WarmResetFlagSpecified;
    property LeaveCardFlag: WordBool read Get_LeaveCardFlag write Set_LeaveCardFlag;
    property MaxWaitingTime: Integer read Get_MaxWaitingTime write Set_MaxWaitingTime;
    property ForceEntryModeSpecified: WordBool read Get_ForceEntryModeSpecified write Set_ForceEntryModeSpecified;
    property DisplayOutputSpecified: WordBool read Get_DisplayOutputSpecified write Set_DisplayOutputSpecified;
    property LeaveCardFlagDefaultValue: WordBool read Get_LeaveCardFlagDefaultValue;
    property LeaveCardFlagSpecified: WordBool read Get_LeaveCardFlagSpecified write Set_LeaveCardFlagSpecified;
    property MaxWaitingTimeSpecified: WordBool read Get_MaxWaitingTimeSpecified write Set_MaxWaitingTimeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CardReaderInitRequestTypeClassName: WideString read Get_CardReaderInitRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICardReaderInitRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AD946B05-FC15-47BE-AA5E-09A7C25509AA}
// *********************************************************************//
  ICardReaderInitRequestTypeDisp = dispinterface
    ['{AD946B05-FC15-47BE-AA5E-09A7C25509AA}']
    property ForceEntryMode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property DisplayOutput: IDisplayOutputType dispid 3;
    property WarmResetFlag: WordBool dispid 4;
    property WarmResetFlagSpecified: WordBool dispid 5;
    property LeaveCardFlag: WordBool dispid 6;
    property MaxWaitingTime: Integer dispid 7;
    property ForceEntryModeSpecified: WordBool dispid 8;
    property DisplayOutputSpecified: WordBool dispid 15;
    property LeaveCardFlagDefaultValue: WordBool readonly dispid 16;
    property LeaveCardFlagSpecified: WordBool dispid 17;
    property MaxWaitingTimeSpecified: WordBool dispid 18;
    property ObjectHasBeenSet: WordBool readonly dispid 19;
    property CardReaderInitRequestTypeClassName: WideString readonly dispid 20;
    function ForceEntryModeLength: Integer; dispid 9;
    function ForceEntryModeGetItem(index: Integer): WideString; dispid 10;
    function ForceEntryModeSetItem(index: Integer; const value: WideString): WordBool; dispid 11;
    function ForceEntryModeAddItem(const value: WideString): WordBool; dispid 12;
    function ForceEntryModeRemoveItem(index: Integer): WordBool; dispid 13;
    function ForceEntryModeInsertItem(index: Integer; const value: WideString): Integer; dispid 14;
  end;

// *********************************************************************//
// Interface :   ICardReaderInitResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {35B0DB41-B025-4778-B323-C24198ED8759}
// *********************************************************************//
  ICardReaderInitResponseType = interface(IDispatch)
    ['{35B0DB41-B025-4778-B323-C24198ED8759}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_TrackData: PSafeArray; safecall;
    procedure Set_TrackData(pRetVal: PSafeArray); safecall;
    function Get_ICCResetData: IICCResetDataType; safecall;
    procedure _Set_ICCResetData(const pRetVal: IICCResetDataType); safecall;
    function Get_EntryMode: PSafeArray; safecall;
    procedure Set_EntryMode(pRetVal: PSafeArray); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_TrackDataSpecified: WordBool; safecall;
    procedure Set_TrackDataSpecified(pRetVal: WordBool); safecall;
    function Get_ICCResetDataSpecified: WordBool; safecall;
    procedure Set_ICCResetDataSpecified(pRetVal: WordBool); safecall;
    function Get_EntryModeSpecified: WordBool; safecall;
    procedure Set_EntryModeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CardReaderInitResponseTypeClassName: WideString; safecall;
    function TrackDataLength: Integer; safecall;
    function TrackDataGetItem(index: Integer): ITrackDataType; safecall;
    function TrackDataSetItem(index: Integer; const value: ITrackDataType): WordBool; safecall;
    function TrackDataAddItem(const value: ITrackDataType): WordBool; safecall;
    function TrackDataRemoveItem(index: Integer): WordBool; safecall;
    function TrackDataInsertItem(index: Integer; const value: ITrackDataType): Integer; safecall;
    function EntryModeLength: Integer; safecall;
    function EntryModeGetItem(index: Integer): WideString; safecall;
    function EntryModeSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function EntryModeAddItem(const value: WideString): WordBool; safecall;
    function EntryModeRemoveItem(index: Integer): WordBool; safecall;
    function EntryModeInsertItem(index: Integer; const value: WideString): Integer; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property TrackData: PSafeArray read Get_TrackData write Set_TrackData;
    property ICCResetData: IICCResetDataType read Get_ICCResetData write _Set_ICCResetData;
    property EntryMode: PSafeArray read Get_EntryMode write Set_EntryMode;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property TrackDataSpecified: WordBool read Get_TrackDataSpecified write Set_TrackDataSpecified;
    property ICCResetDataSpecified: WordBool read Get_ICCResetDataSpecified write Set_ICCResetDataSpecified;
    property EntryModeSpecified: WordBool read Get_EntryModeSpecified write Set_EntryModeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CardReaderInitResponseTypeClassName: WideString read Get_CardReaderInitResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICardReaderInitResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {35B0DB41-B025-4778-B323-C24198ED8759}
// *********************************************************************//
  ICardReaderInitResponseTypeDisp = dispinterface
    ['{35B0DB41-B025-4778-B323-C24198ED8759}']
    property Response: IResponseType dispid 1;
    property TrackData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property ICCResetData: IICCResetDataType dispid 3;
    property EntryMode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property ResponseSpecified: WordBool dispid 6;
    property TrackDataSpecified: WordBool dispid 7;
    property ICCResetDataSpecified: WordBool dispid 14;
    property EntryModeSpecified: WordBool dispid 15;
    property ObjectHasBeenSet: WordBool readonly dispid 22;
    property CardReaderInitResponseTypeClassName: WideString readonly dispid 23;
    function TrackDataLength: Integer; dispid 8;
    function TrackDataGetItem(index: Integer): ITrackDataType; dispid 9;
    function TrackDataSetItem(index: Integer; const value: ITrackDataType): WordBool; dispid 10;
    function TrackDataAddItem(const value: ITrackDataType): WordBool; dispid 11;
    function TrackDataRemoveItem(index: Integer): WordBool; dispid 12;
    function TrackDataInsertItem(index: Integer; const value: ITrackDataType): Integer; dispid 13;
    function EntryModeLength: Integer; dispid 16;
    function EntryModeGetItem(index: Integer): WideString; dispid 17;
    function EntryModeSetItem(index: Integer; const value: WideString): WordBool; dispid 18;
    function EntryModeAddItem(const value: WideString): WordBool; dispid 19;
    function EntryModeRemoveItem(index: Integer): WordBool; dispid 20;
    function EntryModeInsertItem(index: Integer; const value: WideString): Integer; dispid 21;
  end;

// *********************************************************************//
// Interface :   IICCResetDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2D93D1AA-44C1-46CA-A390-2B19322D07B7}
// *********************************************************************//
  IICCResetDataType = interface(IDispatch)
    ['{2D93D1AA-44C1-46CA-A390-2B19322D07B7}']
    function Get_ATRValue: PSafeArray; safecall;
    procedure Set_ATRValue(pRetVal: PSafeArray); safecall;
    function Get_CardStatusWords: PSafeArray; safecall;
    procedure Set_CardStatusWords(pRetVal: PSafeArray); safecall;
    function Get_ATRValueSpecified: WordBool; safecall;
    procedure Set_ATRValueSpecified(pRetVal: WordBool); safecall;
    function Get_CardStatusWordsSpecified: WordBool; safecall;
    procedure Set_CardStatusWordsSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_ICCResetDataTypeClassName: WideString; safecall;
    function ATRValueLength: Integer; safecall;
    function ATRValueGetItem(index: Integer): Byte; safecall;
    function ATRValueSetItem(index: Integer; value: Byte): WordBool; safecall;
    function ATRValueAddItem(value: Byte): WordBool; safecall;
    function ATRValueRemoveItem(index: Integer): WordBool; safecall;
    function ATRValueInsertItem(index: Integer; value: Byte): Integer; safecall;
    function CardStatusWordsLength: Integer; safecall;
    function CardStatusWordsGetItem(index: Integer): Byte; safecall;
    function CardStatusWordsSetItem(index: Integer; value: Byte): WordBool; safecall;
    function CardStatusWordsAddItem(value: Byte): WordBool; safecall;
    function CardStatusWordsRemoveItem(index: Integer): WordBool; safecall;
    function CardStatusWordsInsertItem(index: Integer; value: Byte): Integer; safecall;
    property ATRValue: PSafeArray read Get_ATRValue write Set_ATRValue;
    property CardStatusWords: PSafeArray read Get_CardStatusWords write Set_CardStatusWords;
    property ATRValueSpecified: WordBool read Get_ATRValueSpecified write Set_ATRValueSpecified;
    property CardStatusWordsSpecified: WordBool read Get_CardStatusWordsSpecified write Set_CardStatusWordsSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property ICCResetDataTypeClassName: WideString read Get_ICCResetDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IICCResetDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2D93D1AA-44C1-46CA-A390-2B19322D07B7}
// *********************************************************************//
  IICCResetDataTypeDisp = dispinterface
    ['{2D93D1AA-44C1-46CA-A390-2B19322D07B7}']
    property ATRValue: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property CardStatusWords: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property ATRValueSpecified: WordBool dispid 4;
    property CardStatusWordsSpecified: WordBool dispid 11;
    property ObjectHasBeenSet: WordBool readonly dispid 18;
    property ICCResetDataTypeClassName: WideString readonly dispid 19;
    function ATRValueLength: Integer; dispid 5;
    function ATRValueGetItem(index: Integer): Byte; dispid 6;
    function ATRValueSetItem(index: Integer; value: Byte): WordBool; dispid 7;
    function ATRValueAddItem(value: Byte): WordBool; dispid 8;
    function ATRValueRemoveItem(index: Integer): WordBool; dispid 9;
    function ATRValueInsertItem(index: Integer; value: Byte): Integer; dispid 10;
    function CardStatusWordsLength: Integer; dispid 12;
    function CardStatusWordsGetItem(index: Integer): Byte; dispid 13;
    function CardStatusWordsSetItem(index: Integer; value: Byte): WordBool; dispid 14;
    function CardStatusWordsAddItem(value: Byte): WordBool; dispid 15;
    function CardStatusWordsRemoveItem(index: Integer): WordBool; dispid 16;
    function CardStatusWordsInsertItem(index: Integer; value: Byte): Integer; dispid 17;
  end;

// *********************************************************************//
// Interface :   ICardReaderPowerOffRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6B383DD8-C8D5-44A9-98F1-D1C8F39BCCC0}
// *********************************************************************//
  ICardReaderPowerOffRequestType = interface(IDispatch)
    ['{6B383DD8-C8D5-44A9-98F1-D1C8F39BCCC0}']
    function Get_DisplayOutput: IDisplayOutputType; safecall;
    procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
    function Get_MaxWaitingTime: Integer; safecall;
    procedure Set_MaxWaitingTime(pRetVal: Integer); safecall;
    function Get_DisplayOutputSpecified: WordBool; safecall;
    procedure Set_DisplayOutputSpecified(pRetVal: WordBool); safecall;
    function Get_MaxWaitingTimeSpecified: WordBool; safecall;
    procedure Set_MaxWaitingTimeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CardReaderPowerOffRequestTypeClassName: WideString; safecall;
    property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
    property MaxWaitingTime: Integer read Get_MaxWaitingTime write Set_MaxWaitingTime;
    property DisplayOutputSpecified: WordBool read Get_DisplayOutputSpecified write Set_DisplayOutputSpecified;
    property MaxWaitingTimeSpecified: WordBool read Get_MaxWaitingTimeSpecified write Set_MaxWaitingTimeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CardReaderPowerOffRequestTypeClassName: WideString read Get_CardReaderPowerOffRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICardReaderPowerOffRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6B383DD8-C8D5-44A9-98F1-D1C8F39BCCC0}
// *********************************************************************//
  ICardReaderPowerOffRequestTypeDisp = dispinterface
    ['{6B383DD8-C8D5-44A9-98F1-D1C8F39BCCC0}']
    property DisplayOutput: IDisplayOutputType dispid 1;
    property MaxWaitingTime: Integer dispid 2;
    property DisplayOutputSpecified: WordBool dispid 4;
    property MaxWaitingTimeSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property CardReaderPowerOffRequestTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   ICardReaderPowerOffResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {91322460-3578-4B03-9593-457F6C84F1C4}
// *********************************************************************//
  ICardReaderPowerOffResponseType = interface(IDispatch)
    ['{91322460-3578-4B03-9593-457F6C84F1C4}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CardReaderPowerOffResponseTypeClassName: WideString; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CardReaderPowerOffResponseTypeClassName: WideString read Get_CardReaderPowerOffResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICardReaderPowerOffResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {91322460-3578-4B03-9593-457F6C84F1C4}
// *********************************************************************//
  ICardReaderPowerOffResponseTypeDisp = dispinterface
    ['{91322460-3578-4B03-9593-457F6C84F1C4}']
    property Response: IResponseType dispid 1;
    property ResponseSpecified: WordBool dispid 3;
    property ObjectHasBeenSet: WordBool readonly dispid 4;
    property CardReaderPowerOffResponseTypeClassName: WideString readonly dispid 5;
  end;

// *********************************************************************//
// Interface :   ICashHandlingDeviceType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {11C6588E-7F40-494D-AD60-CC497176CD26}
// *********************************************************************//
  ICashHandlingDeviceType = interface(IDispatch)
    ['{11C6588E-7F40-494D-AD60-CC497176CD26}']
    function Get_CoinsOrBills: PSafeArray; safecall;
    procedure Set_CoinsOrBills(pRetVal: PSafeArray); safecall;
    function Get_CashHandlingOKFlag: WordBool; safecall;
    procedure Set_CashHandlingOKFlag(pRetVal: WordBool); safecall;
    function Get_Currency: WideString; safecall;
    procedure Set_Currency(const pRetVal: WideString); safecall;
    function Get_CoinsOrBillsSpecified: WordBool; safecall;
    procedure Set_CoinsOrBillsSpecified(pRetVal: WordBool); safecall;
    function Get_CashHandlingOKFlagSpecified: WordBool; safecall;
    procedure Set_CashHandlingOKFlagSpecified(pRetVal: WordBool); safecall;
    function Get_CurrencySpecified: WordBool; safecall;
    procedure Set_CurrencySpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CashHandlingDeviceTypeClassName: WideString; safecall;
    function CoinsOrBillsLength: Integer; safecall;
    function CoinsOrBillsGetItem(index: Integer): ICoinsOrBillsType; safecall;
    function CoinsOrBillsSetItem(index: Integer; const value: ICoinsOrBillsType): WordBool; safecall;
    function CoinsOrBillsAddItem(const value: ICoinsOrBillsType): WordBool; safecall;
    function CoinsOrBillsRemoveItem(index: Integer): WordBool; safecall;
    function CoinsOrBillsInsertItem(index: Integer; const value: ICoinsOrBillsType): Integer; safecall;
    property CoinsOrBills: PSafeArray read Get_CoinsOrBills write Set_CoinsOrBills;
    property CashHandlingOKFlag: WordBool read Get_CashHandlingOKFlag write Set_CashHandlingOKFlag;
    property Currency: WideString read Get_Currency write Set_Currency;
    property CoinsOrBillsSpecified: WordBool read Get_CoinsOrBillsSpecified write Set_CoinsOrBillsSpecified;
    property CashHandlingOKFlagSpecified: WordBool read Get_CashHandlingOKFlagSpecified write Set_CashHandlingOKFlagSpecified;
    property CurrencySpecified: WordBool read Get_CurrencySpecified write Set_CurrencySpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CashHandlingDeviceTypeClassName: WideString read Get_CashHandlingDeviceTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICashHandlingDeviceTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {11C6588E-7F40-494D-AD60-CC497176CD26}
// *********************************************************************//
  ICashHandlingDeviceTypeDisp = dispinterface
    ['{11C6588E-7F40-494D-AD60-CC497176CD26}']
    property CoinsOrBills: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property CashHandlingOKFlag: WordBool dispid 2;
    property Currency: WideString dispid 3;
    property CoinsOrBillsSpecified: WordBool dispid 5;
    property CashHandlingOKFlagSpecified: WordBool dispid 12;
    property CurrencySpecified: WordBool dispid 13;
    property ObjectHasBeenSet: WordBool readonly dispid 14;
    property CashHandlingDeviceTypeClassName: WideString readonly dispid 15;
    function CoinsOrBillsLength: Integer; dispid 6;
    function CoinsOrBillsGetItem(index: Integer): ICoinsOrBillsType; dispid 7;
    function CoinsOrBillsSetItem(index: Integer; const value: ICoinsOrBillsType): WordBool; dispid 8;
    function CoinsOrBillsAddItem(const value: ICoinsOrBillsType): WordBool; dispid 9;
    function CoinsOrBillsRemoveItem(index: Integer): WordBool; dispid 10;
    function CoinsOrBillsInsertItem(index: Integer; const value: ICoinsOrBillsType): Integer; dispid 11;
  end;

// *********************************************************************//
// Interface :   ICoinsOrBillsType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4FAE8FC8-7E75-4244-911F-BCDD67CE836A}
// *********************************************************************//
  ICoinsOrBillsType = interface(IDispatch)
    ['{4FAE8FC8-7E75-4244-911F-BCDD67CE836A}']
    function Get_UnitValue: Double; safecall;
    procedure Set_UnitValue(pRetVal: Double); safecall;
    function Get_Number: Integer; safecall;
    procedure Set_Number(pRetVal: Integer); safecall;
    function Get_UnitValueSpecified: WordBool; safecall;
    procedure Set_UnitValueSpecified(pRetVal: WordBool); safecall;
    function Get_NumberSpecified: WordBool; safecall;
    procedure Set_NumberSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_CoinsOrBillsTypeClassName: WideString; safecall;
    property UnitValue: Double read Get_UnitValue write Set_UnitValue;
    property Number: Integer read Get_Number write Set_Number;
    property UnitValueSpecified: WordBool read Get_UnitValueSpecified write Set_UnitValueSpecified;
    property NumberSpecified: WordBool read Get_NumberSpecified write Set_NumberSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property CoinsOrBillsTypeClassName: WideString read Get_CoinsOrBillsTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ICoinsOrBillsTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4FAE8FC8-7E75-4244-911F-BCDD67CE836A}
// *********************************************************************//
  ICoinsOrBillsTypeDisp = dispinterface
    ['{4FAE8FC8-7E75-4244-911F-BCDD67CE836A}']
    property UnitValue: Double dispid 1;
    property Number: Integer dispid 2;
    property UnitValueSpecified: WordBool dispid 4;
    property NumberSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property CoinsOrBillsTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IDiagnosisRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0F133523-DA58-43BC-8DF7-4B3E0AAB645D}
// *********************************************************************//
  IDiagnosisRequestType = interface(IDispatch)
    ['{0F133523-DA58-43BC-8DF7-4B3E0AAB645D}']
    function Get_AcquirerID: PSafeArray; safecall;
    procedure Set_AcquirerID(pRetVal: PSafeArray); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_HostDiagnosisFlag: WordBool; safecall;
    procedure Set_HostDiagnosisFlag(pRetVal: WordBool); safecall;
    function Get_AcquirerIDSpecified: WordBool; safecall;
    procedure Set_AcquirerIDSpecified(pRetVal: WordBool); safecall;
    function Get_POIIDSpecified: WordBool; safecall;
    procedure Set_POIIDSpecified(pRetVal: WordBool); safecall;
    function Get_HostDiagnosisFlagDefaultValue: WordBool; safecall;
    function Get_HostDiagnosisFlagSpecified: WordBool; safecall;
    procedure Set_HostDiagnosisFlagSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_DiagnosisRequestTypeClassName: WideString; safecall;
    function AcquirerIDLength: Integer; safecall;
    function AcquirerIDGetItem(index: Integer): WideString; safecall;
    function AcquirerIDSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function AcquirerIDAddItem(const value: WideString): WordBool; safecall;
    function AcquirerIDRemoveItem(index: Integer): WordBool; safecall;
    function AcquirerIDInsertItem(index: Integer; const value: WideString): Integer; safecall;
    property AcquirerID: PSafeArray read Get_AcquirerID write Set_AcquirerID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property HostDiagnosisFlag: WordBool read Get_HostDiagnosisFlag write Set_HostDiagnosisFlag;
    property AcquirerIDSpecified: WordBool read Get_AcquirerIDSpecified write Set_AcquirerIDSpecified;
    property POIIDSpecified: WordBool read Get_POIIDSpecified write Set_POIIDSpecified;
    property HostDiagnosisFlagDefaultValue: WordBool read Get_HostDiagnosisFlagDefaultValue;
    property HostDiagnosisFlagSpecified: WordBool read Get_HostDiagnosisFlagSpecified write Set_HostDiagnosisFlagSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property DiagnosisRequestTypeClassName: WideString read Get_DiagnosisRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IDiagnosisRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0F133523-DA58-43BC-8DF7-4B3E0AAB645D}
// *********************************************************************//
  IDiagnosisRequestTypeDisp = dispinterface
    ['{0F133523-DA58-43BC-8DF7-4B3E0AAB645D}']
    property AcquirerID: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property POIID: WideString dispid 3;
    property HostDiagnosisFlag: WordBool dispid 4;
    property AcquirerIDSpecified: WordBool dispid 5;
    property POIIDSpecified: WordBool dispid 12;
    property HostDiagnosisFlagDefaultValue: WordBool readonly dispid 13;
    property HostDiagnosisFlagSpecified: WordBool dispid 14;
    property ObjectHasBeenSet: WordBool readonly dispid 15;
    property DiagnosisRequestTypeClassName: WideString readonly dispid 16;
    function AcquirerIDLength: Integer; dispid 6;
    function AcquirerIDGetItem(index: Integer): WideString; dispid 7;
    function AcquirerIDSetItem(index: Integer; const value: WideString): WordBool; dispid 8;
    function AcquirerIDAddItem(const value: WideString): WordBool; dispid 9;
    function AcquirerIDRemoveItem(index: Integer): WordBool; dispid 10;
    function AcquirerIDInsertItem(index: Integer; const value: WideString): Integer; dispid 11;
  end;

// *********************************************************************//
// Interface :   IDiagnosisResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {82FF8BB4-2464-41AE-B6CD-840EB1088FE4}
// *********************************************************************//
  IDiagnosisResponseType = interface(IDispatch)
    ['{82FF8BB4-2464-41AE-B6CD-840EB1088FE4}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_LoggedSaleID: PSafeArray; safecall;
    procedure Set_LoggedSaleID(pRetVal: PSafeArray); safecall;
    function Get_POIStatus: IPOIStatusType; safecall;
    procedure _Set_POIStatus(const pRetVal: IPOIStatusType); safecall;
    function Get_HostStatus: PSafeArray; safecall;
    procedure Set_HostStatus(pRetVal: PSafeArray); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_LoggedSaleIDSpecified: WordBool; safecall;
    procedure Set_LoggedSaleIDSpecified(pRetVal: WordBool); safecall;
    function Get_POIStatusSpecified: WordBool; safecall;
    procedure Set_POIStatusSpecified(pRetVal: WordBool); safecall;
    function Get_HostStatusSpecified: WordBool; safecall;
    procedure Set_HostStatusSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_DiagnosisResponseTypeClassName: WideString; safecall;
    function LoggedSaleIDLength: Integer; safecall;
    function LoggedSaleIDGetItem(index: Integer): WideString; safecall;
    function LoggedSaleIDSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function LoggedSaleIDAddItem(const value: WideString): WordBool; safecall;
    function LoggedSaleIDRemoveItem(index: Integer): WordBool; safecall;
    function LoggedSaleIDInsertItem(index: Integer; const value: WideString): Integer; safecall;
    function HostStatusLength: Integer; safecall;
    function HostStatusGetItem(index: Integer): IHostStatusType; safecall;
    function HostStatusSetItem(index: Integer; const value: IHostStatusType): WordBool; safecall;
    function HostStatusAddItem(const value: IHostStatusType): WordBool; safecall;
    function HostStatusRemoveItem(index: Integer): WordBool; safecall;
    function HostStatusInsertItem(index: Integer; const value: IHostStatusType): Integer; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property LoggedSaleID: PSafeArray read Get_LoggedSaleID write Set_LoggedSaleID;
    property POIStatus: IPOIStatusType read Get_POIStatus write _Set_POIStatus;
    property HostStatus: PSafeArray read Get_HostStatus write Set_HostStatus;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property LoggedSaleIDSpecified: WordBool read Get_LoggedSaleIDSpecified write Set_LoggedSaleIDSpecified;
    property POIStatusSpecified: WordBool read Get_POIStatusSpecified write Set_POIStatusSpecified;
    property HostStatusSpecified: WordBool read Get_HostStatusSpecified write Set_HostStatusSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property DiagnosisResponseTypeClassName: WideString read Get_DiagnosisResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IDiagnosisResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {82FF8BB4-2464-41AE-B6CD-840EB1088FE4}
// *********************************************************************//
  IDiagnosisResponseTypeDisp = dispinterface
    ['{82FF8BB4-2464-41AE-B6CD-840EB1088FE4}']
    property Response: IResponseType dispid 1;
    property LoggedSaleID: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property POIStatus: IPOIStatusType dispid 3;
    property HostStatus: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property ResponseSpecified: WordBool dispid 6;
    property LoggedSaleIDSpecified: WordBool dispid 7;
    property POIStatusSpecified: WordBool dispid 14;
    property HostStatusSpecified: WordBool dispid 15;
    property ObjectHasBeenSet: WordBool readonly dispid 22;
    property DiagnosisResponseTypeClassName: WideString readonly dispid 23;
    function LoggedSaleIDLength: Integer; dispid 8;
    function LoggedSaleIDGetItem(index: Integer): WideString; dispid 9;
    function LoggedSaleIDSetItem(index: Integer; const value: WideString): WordBool; dispid 10;
    function LoggedSaleIDAddItem(const value: WideString): WordBool; dispid 11;
    function LoggedSaleIDRemoveItem(index: Integer): WordBool; dispid 12;
    function LoggedSaleIDInsertItem(index: Integer; const value: WideString): Integer; dispid 13;
    function HostStatusLength: Integer; dispid 16;
    function HostStatusGetItem(index: Integer): IHostStatusType; dispid 17;
    function HostStatusSetItem(index: Integer; const value: IHostStatusType): WordBool; dispid 18;
    function HostStatusAddItem(const value: IHostStatusType): WordBool; dispid 19;
    function HostStatusRemoveItem(index: Integer): WordBool; dispid 20;
    function HostStatusInsertItem(index: Integer; const value: IHostStatusType): Integer; dispid 21;
  end;

// *********************************************************************//
// Interface :   IPOIStatusType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F2E98977-D861-48B7-BB38-EF0A63F89266}
// *********************************************************************//
  IPOIStatusType = interface(IDispatch)
    ['{F2E98977-D861-48B7-BB38-EF0A63F89266}']
    function Get_CashHandlingDevice: PSafeArray; safecall;
    procedure Set_CashHandlingDevice(pRetVal: PSafeArray); safecall;
    function Get_GlobalStatus: WideString; safecall;
    procedure Set_GlobalStatus(const pRetVal: WideString); safecall;
    function Get_SecurityOKFlag: WordBool; safecall;
    procedure Set_SecurityOKFlag(pRetVal: WordBool); safecall;
    function Get_SecurityOKFlagSpecified: WordBool; safecall;
    procedure Set_SecurityOKFlagSpecified(pRetVal: WordBool); safecall;
    function Get_PEDOKFlag: WordBool; safecall;
    procedure Set_PEDOKFlag(pRetVal: WordBool); safecall;
    function Get_PEDOKFlagSpecified: WordBool; safecall;
    procedure Set_PEDOKFlagSpecified(pRetVal: WordBool); safecall;
    function Get_CardReaderOKFlag: WordBool; safecall;
    procedure Set_CardReaderOKFlag(pRetVal: WordBool); safecall;
    function Get_CardReaderOKFlagSpecified: WordBool; safecall;
    procedure Set_CardReaderOKFlagSpecified(pRetVal: WordBool); safecall;
    function Get_PrinterStatus: WideString; safecall;
    procedure Set_PrinterStatus(const pRetVal: WideString); safecall;
    function Get_CommunicationOKFlag: WordBool; safecall;
    procedure Set_CommunicationOKFlag(pRetVal: WordBool); safecall;
    function Get_CommunicationOKFlagSpecified: WordBool; safecall;
    procedure Set_CommunicationOKFlagSpecified(pRetVal: WordBool); safecall;
    function Get_FraudPreventionFlag: WordBool; safecall;
    procedure Set_FraudPreventionFlag(pRetVal: WordBool); safecall;
    function Get_FraudPreventionFlagSpecified: WordBool; safecall;
    procedure Set_FraudPreventionFlagSpecified(pRetVal: WordBool); safecall;
    function Get_CashHandlingDeviceSpecified: WordBool; safecall;
    procedure Set_CashHandlingDeviceSpecified(pRetVal: WordBool); safecall;
    function Get_GlobalStatusSpecified: WordBool; safecall;
    procedure Set_GlobalStatusSpecified(pRetVal: WordBool); safecall;
    function Get_PrinterStatusSpecified: WordBool; safecall;
    procedure Set_PrinterStatusSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_POIStatusTypeClassName: WideString; safecall;
    function CashHandlingDeviceLength: Integer; safecall;
    function CashHandlingDeviceGetItem(index: Integer): ICashHandlingDeviceType; safecall;
    function CashHandlingDeviceSetItem(index: Integer; const value: ICashHandlingDeviceType): WordBool; safecall;
    function CashHandlingDeviceAddItem(const value: ICashHandlingDeviceType): WordBool; safecall;
    function CashHandlingDeviceRemoveItem(index: Integer): WordBool; safecall;
    function CashHandlingDeviceInsertItem(index: Integer; const value: ICashHandlingDeviceType): Integer; safecall;
    property CashHandlingDevice: PSafeArray read Get_CashHandlingDevice write Set_CashHandlingDevice;
    property GlobalStatus: WideString read Get_GlobalStatus write Set_GlobalStatus;
    property SecurityOKFlag: WordBool read Get_SecurityOKFlag write Set_SecurityOKFlag;
    property SecurityOKFlagSpecified: WordBool read Get_SecurityOKFlagSpecified write Set_SecurityOKFlagSpecified;
    property PEDOKFlag: WordBool read Get_PEDOKFlag write Set_PEDOKFlag;
    property PEDOKFlagSpecified: WordBool read Get_PEDOKFlagSpecified write Set_PEDOKFlagSpecified;
    property CardReaderOKFlag: WordBool read Get_CardReaderOKFlag write Set_CardReaderOKFlag;
    property CardReaderOKFlagSpecified: WordBool read Get_CardReaderOKFlagSpecified write Set_CardReaderOKFlagSpecified;
    property PrinterStatus: WideString read Get_PrinterStatus write Set_PrinterStatus;
    property CommunicationOKFlag: WordBool read Get_CommunicationOKFlag write Set_CommunicationOKFlag;
    property CommunicationOKFlagSpecified: WordBool read Get_CommunicationOKFlagSpecified write Set_CommunicationOKFlagSpecified;
    property FraudPreventionFlag: WordBool read Get_FraudPreventionFlag write Set_FraudPreventionFlag;
    property FraudPreventionFlagSpecified: WordBool read Get_FraudPreventionFlagSpecified write Set_FraudPreventionFlagSpecified;
    property CashHandlingDeviceSpecified: WordBool read Get_CashHandlingDeviceSpecified write Set_CashHandlingDeviceSpecified;
    property GlobalStatusSpecified: WordBool read Get_GlobalStatusSpecified write Set_GlobalStatusSpecified;
    property PrinterStatusSpecified: WordBool read Get_PrinterStatusSpecified write Set_PrinterStatusSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property POIStatusTypeClassName: WideString read Get_POIStatusTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPOIStatusTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F2E98977-D861-48B7-BB38-EF0A63F89266}
// *********************************************************************//
  IPOIStatusTypeDisp = dispinterface
    ['{F2E98977-D861-48B7-BB38-EF0A63F89266}']
    property CashHandlingDevice: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property GlobalStatus: WideString dispid 2;
    property SecurityOKFlag: WordBool dispid 3;
    property SecurityOKFlagSpecified: WordBool dispid 4;
    property PEDOKFlag: WordBool dispid 5;
    property PEDOKFlagSpecified: WordBool dispid 6;
    property CardReaderOKFlag: WordBool dispid 7;
    property CardReaderOKFlagSpecified: WordBool dispid 8;
    property PrinterStatus: WideString dispid 9;
    property CommunicationOKFlag: WordBool dispid 10;
    property CommunicationOKFlagSpecified: WordBool dispid 11;
    property FraudPreventionFlag: WordBool dispid 12;
    property FraudPreventionFlagSpecified: WordBool dispid 13;
    property CashHandlingDeviceSpecified: WordBool dispid 15;
    property GlobalStatusSpecified: WordBool dispid 22;
    property PrinterStatusSpecified: WordBool dispid 23;
    property ObjectHasBeenSet: WordBool readonly dispid 24;
    property POIStatusTypeClassName: WideString readonly dispid 25;
    function CashHandlingDeviceLength: Integer; dispid 16;
    function CashHandlingDeviceGetItem(index: Integer): ICashHandlingDeviceType; dispid 17;
    function CashHandlingDeviceSetItem(index: Integer; const value: ICashHandlingDeviceType): WordBool; dispid 18;
    function CashHandlingDeviceAddItem(const value: ICashHandlingDeviceType): WordBool; dispid 19;
    function CashHandlingDeviceRemoveItem(index: Integer): WordBool; dispid 20;
    function CashHandlingDeviceInsertItem(index: Integer; const value: ICashHandlingDeviceType): Integer; dispid 21;
  end;

// *********************************************************************//
// Interface :   IHostStatusType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AE1AC4DC-DC78-4182-97BA-CA72AD7A7C40}
// *********************************************************************//
  IHostStatusType = interface(IDispatch)
    ['{AE1AC4DC-DC78-4182-97BA-CA72AD7A7C40}']
    function Get_AcquirerID: WideString; safecall;
    procedure Set_AcquirerID(const pRetVal: WideString); safecall;
    function Get_IsReachableFlag: WordBool; safecall;
    procedure Set_IsReachableFlag(pRetVal: WordBool); safecall;
    function Get_AcquirerIDSpecified: WordBool; safecall;
    procedure Set_AcquirerIDSpecified(pRetVal: WordBool); safecall;
    function Get_IsReachableFlagDefaultValue: WordBool; safecall;
    function Get_IsReachableFlagSpecified: WordBool; safecall;
    procedure Set_IsReachableFlagSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_HostStatusTypeClassName: WideString; safecall;
    property AcquirerID: WideString read Get_AcquirerID write Set_AcquirerID;
    property IsReachableFlag: WordBool read Get_IsReachableFlag write Set_IsReachableFlag;
    property AcquirerIDSpecified: WordBool read Get_AcquirerIDSpecified write Set_AcquirerIDSpecified;
    property IsReachableFlagDefaultValue: WordBool read Get_IsReachableFlagDefaultValue;
    property IsReachableFlagSpecified: WordBool read Get_IsReachableFlagSpecified write Set_IsReachableFlagSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property HostStatusTypeClassName: WideString read Get_HostStatusTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IHostStatusTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AE1AC4DC-DC78-4182-97BA-CA72AD7A7C40}
// *********************************************************************//
  IHostStatusTypeDisp = dispinterface
    ['{AE1AC4DC-DC78-4182-97BA-CA72AD7A7C40}']
    property AcquirerID: WideString dispid 2;
    property IsReachableFlag: WordBool dispid 3;
    property AcquirerIDSpecified: WordBool dispid 4;
    property IsReachableFlagDefaultValue: WordBool readonly dispid 5;
    property IsReachableFlagSpecified: WordBool dispid 6;
    property ObjectHasBeenSet: WordBool readonly dispid 7;
    property HostStatusTypeClassName: WideString readonly dispid 8;
  end;

// *********************************************************************//
// Interface :   IEnableServiceRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3070A5FD-C29D-445B-A59B-9CAD9B47A3A4}
// *********************************************************************//
  IEnableServiceRequestType = interface(IDispatch)
    ['{3070A5FD-C29D-445B-A59B-9CAD9B47A3A4}']
    function Get_ServicesEnabled: WideString; safecall;
    procedure Set_ServicesEnabled(const pRetVal: WideString); safecall;
    function Get_DisplayOutput: IDisplayOutputType; safecall;
    procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
    function Get_TransactionAction: WideString; safecall;
    procedure Set_TransactionAction(const pRetVal: WideString); safecall;
    function Get_ServicesEnabledSpecified: WordBool; safecall;
    procedure Set_ServicesEnabledSpecified(pRetVal: WordBool); safecall;
    function Get_DisplayOutputSpecified: WordBool; safecall;
    procedure Set_DisplayOutputSpecified(pRetVal: WordBool); safecall;
    function Get_TransactionActionSpecified: WordBool; safecall;
    procedure Set_TransactionActionSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_EnableServiceRequestTypeClassName: WideString; safecall;
    property ServicesEnabled: WideString read Get_ServicesEnabled write Set_ServicesEnabled;
    property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
    property TransactionAction: WideString read Get_TransactionAction write Set_TransactionAction;
    property ServicesEnabledSpecified: WordBool read Get_ServicesEnabledSpecified write Set_ServicesEnabledSpecified;
    property DisplayOutputSpecified: WordBool read Get_DisplayOutputSpecified write Set_DisplayOutputSpecified;
    property TransactionActionSpecified: WordBool read Get_TransactionActionSpecified write Set_TransactionActionSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property EnableServiceRequestTypeClassName: WideString read Get_EnableServiceRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IEnableServiceRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3070A5FD-C29D-445B-A59B-9CAD9B47A3A4}
// *********************************************************************//
  IEnableServiceRequestTypeDisp = dispinterface
    ['{3070A5FD-C29D-445B-A59B-9CAD9B47A3A4}']
    property ServicesEnabled: WideString dispid 1;
    property DisplayOutput: IDisplayOutputType dispid 2;
    property TransactionAction: WideString dispid 3;
    property ServicesEnabledSpecified: WordBool dispid 5;
    property DisplayOutputSpecified: WordBool dispid 6;
    property TransactionActionSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 8;
    property EnableServiceRequestTypeClassName: WideString readonly dispid 9;
  end;

// *********************************************************************//
// Interface :   IEnableServiceResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D1A24F83-DDA3-42CA-90E7-896510211325}
// *********************************************************************//
  IEnableServiceResponseType = interface(IDispatch)
    ['{D1A24F83-DDA3-42CA-90E7-896510211325}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_EnableServiceResponseTypeClassName: WideString; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property EnableServiceResponseTypeClassName: WideString read Get_EnableServiceResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IEnableServiceResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D1A24F83-DDA3-42CA-90E7-896510211325}
// *********************************************************************//
  IEnableServiceResponseTypeDisp = dispinterface
    ['{D1A24F83-DDA3-42CA-90E7-896510211325}']
    property Response: IResponseType dispid 1;
    property ResponseSpecified: WordBool dispid 3;
    property ObjectHasBeenSet: WordBool readonly dispid 4;
    property EnableServiceResponseTypeClassName: WideString readonly dispid 5;
  end;

// *********************************************************************//
// Interface :   IEventNotificationType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {07E7CD95-DB29-4715-BA9D-5C2EAFC6794D}
// *********************************************************************//
  IEventNotificationType = interface(IDispatch)
    ['{07E7CD95-DB29-4715-BA9D-5C2EAFC6794D}']
    function Get_EventDetails: WideString; safecall;
    procedure Set_EventDetails(const pRetVal: WideString); safecall;
    function Get_RejectedMessage: PSafeArray; safecall;
    procedure Set_RejectedMessage(pRetVal: PSafeArray); safecall;
    function Get_DisplayOutput: IDisplayOutputType; safecall;
    procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
    function Get_TimeStamp: WideString; safecall;
    procedure Set_TimeStamp(const pRetVal: WideString); safecall;
    function Get_EventToNotify: WideString; safecall;
    procedure Set_EventToNotify(const pRetVal: WideString); safecall;
    function Get_MaintenanceRequiredFlag: WordBool; safecall;
    procedure Set_MaintenanceRequiredFlag(pRetVal: WordBool); safecall;
    function Get_CustomerLanguage: WideString; safecall;
    procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
    function Get_EventDetailsSpecified: WordBool; safecall;
    procedure Set_EventDetailsSpecified(pRetVal: WordBool); safecall;
    function Get_RejectedMessageSpecified: WordBool; safecall;
    procedure Set_RejectedMessageSpecified(pRetVal: WordBool); safecall;
    function Get_DisplayOutputSpecified: WordBool; safecall;
    procedure Set_DisplayOutputSpecified(pRetVal: WordBool); safecall;
    function Get_TimeStampSpecified: WordBool; safecall;
    procedure Set_TimeStampSpecified(pRetVal: WordBool); safecall;
    function Get_EventToNotifySpecified: WordBool; safecall;
    procedure Set_EventToNotifySpecified(pRetVal: WordBool); safecall;
    function Get_MaintenanceRequiredFlagDefaultValue: WordBool; safecall;
    function Get_MaintenanceRequiredFlagSpecified: WordBool; safecall;
    procedure Set_MaintenanceRequiredFlagSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerLanguageSpecified: WordBool; safecall;
    procedure Set_CustomerLanguageSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_EventNotificationTypeClassName: WideString; safecall;
    function RejectedMessageLength: Integer; safecall;
    function RejectedMessageGetItem(index: Integer): Byte; safecall;
    function RejectedMessageSetItem(index: Integer; value: Byte): WordBool; safecall;
    function RejectedMessageAddItem(value: Byte): WordBool; safecall;
    function RejectedMessageRemoveItem(index: Integer): WordBool; safecall;
    function RejectedMessageInsertItem(index: Integer; value: Byte): Integer; safecall;
    property EventDetails: WideString read Get_EventDetails write Set_EventDetails;
    property RejectedMessage: PSafeArray read Get_RejectedMessage write Set_RejectedMessage;
    property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
    property TimeStamp: WideString read Get_TimeStamp write Set_TimeStamp;
    property EventToNotify: WideString read Get_EventToNotify write Set_EventToNotify;
    property MaintenanceRequiredFlag: WordBool read Get_MaintenanceRequiredFlag write Set_MaintenanceRequiredFlag;
    property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
    property EventDetailsSpecified: WordBool read Get_EventDetailsSpecified write Set_EventDetailsSpecified;
    property RejectedMessageSpecified: WordBool read Get_RejectedMessageSpecified write Set_RejectedMessageSpecified;
    property DisplayOutputSpecified: WordBool read Get_DisplayOutputSpecified write Set_DisplayOutputSpecified;
    property TimeStampSpecified: WordBool read Get_TimeStampSpecified write Set_TimeStampSpecified;
    property EventToNotifySpecified: WordBool read Get_EventToNotifySpecified write Set_EventToNotifySpecified;
    property MaintenanceRequiredFlagDefaultValue: WordBool read Get_MaintenanceRequiredFlagDefaultValue;
    property MaintenanceRequiredFlagSpecified: WordBool read Get_MaintenanceRequiredFlagSpecified write Set_MaintenanceRequiredFlagSpecified;
    property CustomerLanguageSpecified: WordBool read Get_CustomerLanguageSpecified write Set_CustomerLanguageSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property EventNotificationTypeClassName: WideString read Get_EventNotificationTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IEventNotificationTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {07E7CD95-DB29-4715-BA9D-5C2EAFC6794D}
// *********************************************************************//
  IEventNotificationTypeDisp = dispinterface
    ['{07E7CD95-DB29-4715-BA9D-5C2EAFC6794D}']
    property EventDetails: WideString dispid 2;
    property RejectedMessage: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property DisplayOutput: IDisplayOutputType dispid 4;
    property TimeStamp: WideString dispid 5;
    property EventToNotify: WideString dispid 6;
    property MaintenanceRequiredFlag: WordBool dispid 7;
    property CustomerLanguage: WideString dispid 8;
    property EventDetailsSpecified: WordBool dispid 9;
    property RejectedMessageSpecified: WordBool dispid 10;
    property DisplayOutputSpecified: WordBool dispid 17;
    property TimeStampSpecified: WordBool dispid 18;
    property EventToNotifySpecified: WordBool dispid 19;
    property MaintenanceRequiredFlagDefaultValue: WordBool readonly dispid 20;
    property MaintenanceRequiredFlagSpecified: WordBool dispid 21;
    property CustomerLanguageSpecified: WordBool dispid 22;
    property ObjectHasBeenSet: WordBool readonly dispid 23;
    property EventNotificationTypeClassName: WideString readonly dispid 24;
    function RejectedMessageLength: Integer; dispid 11;
    function RejectedMessageGetItem(index: Integer): Byte; dispid 12;
    function RejectedMessageSetItem(index: Integer; value: Byte): WordBool; dispid 13;
    function RejectedMessageAddItem(value: Byte): WordBool; dispid 14;
    function RejectedMessageRemoveItem(index: Integer): WordBool; dispid 15;
    function RejectedMessageInsertItem(index: Integer; value: Byte): Integer; dispid 16;
  end;

// *********************************************************************//
// Interface :   IGetTotalsRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {889C8943-7330-4BB3-A49D-DAD06E0272C9}
// *********************************************************************//
  IGetTotalsRequestType = interface(IDispatch)
    ['{889C8943-7330-4BB3-A49D-DAD06E0272C9}']
    function Get_TotalDetails: WideString; safecall;
    procedure Set_TotalDetails(const pRetVal: WideString); safecall;
    function Get_TotalFilter: ITotalFilterType; safecall;
    procedure _Set_TotalFilter(const pRetVal: ITotalFilterType); safecall;
    function Get_TotalDetailsSpecified: WordBool; safecall;
    procedure Set_TotalDetailsSpecified(pRetVal: WordBool); safecall;
    function Get_TotalFilterSpecified: WordBool; safecall;
    procedure Set_TotalFilterSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_GetTotalsRequestTypeClassName: WideString; safecall;
    property TotalDetails: WideString read Get_TotalDetails write Set_TotalDetails;
    property TotalFilter: ITotalFilterType read Get_TotalFilter write _Set_TotalFilter;
    property TotalDetailsSpecified: WordBool read Get_TotalDetailsSpecified write Set_TotalDetailsSpecified;
    property TotalFilterSpecified: WordBool read Get_TotalFilterSpecified write Set_TotalFilterSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property GetTotalsRequestTypeClassName: WideString read Get_GetTotalsRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IGetTotalsRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {889C8943-7330-4BB3-A49D-DAD06E0272C9}
// *********************************************************************//
  IGetTotalsRequestTypeDisp = dispinterface
    ['{889C8943-7330-4BB3-A49D-DAD06E0272C9}']
    property TotalDetails: WideString dispid 1;
    property TotalFilter: ITotalFilterType dispid 2;
    property TotalDetailsSpecified: WordBool dispid 4;
    property TotalFilterSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property GetTotalsRequestTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   ITotalFilterType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {68213F0F-3150-4E28-8C6A-F5FAE854636E}
// *********************************************************************//
  ITotalFilterType = interface(IDispatch)
    ['{68213F0F-3150-4E28-8C6A-F5FAE854636E}']
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_OperatorID: WideString; safecall;
    procedure Set_OperatorID(const pRetVal: WideString); safecall;
    function Get_ShiftNumber: WideString; safecall;
    procedure Set_ShiftNumber(const pRetVal: WideString); safecall;
    function Get_TotalsGroupID: WideString; safecall;
    procedure Set_TotalsGroupID(const pRetVal: WideString); safecall;
    function Get_POIIDSpecified: WordBool; safecall;
    procedure Set_POIIDSpecified(pRetVal: WordBool); safecall;
    function Get_SaleIDSpecified: WordBool; safecall;
    procedure Set_SaleIDSpecified(pRetVal: WordBool); safecall;
    function Get_OperatorIDSpecified: WordBool; safecall;
    procedure Set_OperatorIDSpecified(pRetVal: WordBool); safecall;
    function Get_ShiftNumberSpecified: WordBool; safecall;
    procedure Set_ShiftNumberSpecified(pRetVal: WordBool); safecall;
    function Get_TotalsGroupIDSpecified: WordBool; safecall;
    procedure Set_TotalsGroupIDSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_TotalFilterTypeClassName: WideString; safecall;
    property POIID: WideString read Get_POIID write Set_POIID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property OperatorID: WideString read Get_OperatorID write Set_OperatorID;
    property ShiftNumber: WideString read Get_ShiftNumber write Set_ShiftNumber;
    property TotalsGroupID: WideString read Get_TotalsGroupID write Set_TotalsGroupID;
    property POIIDSpecified: WordBool read Get_POIIDSpecified write Set_POIIDSpecified;
    property SaleIDSpecified: WordBool read Get_SaleIDSpecified write Set_SaleIDSpecified;
    property OperatorIDSpecified: WordBool read Get_OperatorIDSpecified write Set_OperatorIDSpecified;
    property ShiftNumberSpecified: WordBool read Get_ShiftNumberSpecified write Set_ShiftNumberSpecified;
    property TotalsGroupIDSpecified: WordBool read Get_TotalsGroupIDSpecified write Set_TotalsGroupIDSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property TotalFilterTypeClassName: WideString read Get_TotalFilterTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ITotalFilterTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {68213F0F-3150-4E28-8C6A-F5FAE854636E}
// *********************************************************************//
  ITotalFilterTypeDisp = dispinterface
    ['{68213F0F-3150-4E28-8C6A-F5FAE854636E}']
    property POIID: WideString dispid 1;
    property SaleID: WideString dispid 2;
    property OperatorID: WideString dispid 3;
    property ShiftNumber: WideString dispid 4;
    property TotalsGroupID: WideString dispid 5;
    property POIIDSpecified: WordBool dispid 7;
    property SaleIDSpecified: WordBool dispid 8;
    property OperatorIDSpecified: WordBool dispid 9;
    property ShiftNumberSpecified: WordBool dispid 10;
    property TotalsGroupIDSpecified: WordBool dispid 11;
    property ObjectHasBeenSet: WordBool readonly dispid 12;
    property TotalFilterTypeClassName: WideString readonly dispid 13;
  end;

// *********************************************************************//
// Interface :   IGetTotalsResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {874A07DF-469B-4E98-B91E-E6B0B12720B8}
// *********************************************************************//
  IGetTotalsResponseType = interface(IDispatch)
    ['{874A07DF-469B-4E98-B91E-E6B0B12720B8}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_TransactionTotals: PSafeArray; safecall;
    procedure Set_TransactionTotals(pRetVal: PSafeArray); safecall;
    function Get_POIReconciliationID: WideString; safecall;
    procedure Set_POIReconciliationID(const pRetVal: WideString); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_TransactionTotalsSpecified: WordBool; safecall;
    procedure Set_TransactionTotalsSpecified(pRetVal: WordBool); safecall;
    function Get_POIReconciliationIDSpecified: WordBool; safecall;
    procedure Set_POIReconciliationIDSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_GetTotalsResponseTypeClassName: WideString; safecall;
    function TransactionTotalsLength: Integer; safecall;
    function TransactionTotalsGetItem(index: Integer): ITransactionTotalsType; safecall;
    function TransactionTotalsSetItem(index: Integer; const value: ITransactionTotalsType): WordBool; safecall;
    function TransactionTotalsAddItem(const value: ITransactionTotalsType): WordBool; safecall;
    function TransactionTotalsRemoveItem(index: Integer): WordBool; safecall;
    function TransactionTotalsInsertItem(index: Integer; const value: ITransactionTotalsType): Integer; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property TransactionTotals: PSafeArray read Get_TransactionTotals write Set_TransactionTotals;
    property POIReconciliationID: WideString read Get_POIReconciliationID write Set_POIReconciliationID;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property TransactionTotalsSpecified: WordBool read Get_TransactionTotalsSpecified write Set_TransactionTotalsSpecified;
    property POIReconciliationIDSpecified: WordBool read Get_POIReconciliationIDSpecified write Set_POIReconciliationIDSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property GetTotalsResponseTypeClassName: WideString read Get_GetTotalsResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IGetTotalsResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {874A07DF-469B-4E98-B91E-E6B0B12720B8}
// *********************************************************************//
  IGetTotalsResponseTypeDisp = dispinterface
    ['{874A07DF-469B-4E98-B91E-E6B0B12720B8}']
    property Response: IResponseType dispid 1;
    property TransactionTotals: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property POIReconciliationID: WideString dispid 3;
    property ResponseSpecified: WordBool dispid 5;
    property TransactionTotalsSpecified: WordBool dispid 6;
    property POIReconciliationIDSpecified: WordBool dispid 13;
    property ObjectHasBeenSet: WordBool readonly dispid 14;
    property GetTotalsResponseTypeClassName: WideString readonly dispid 15;
    function TransactionTotalsLength: Integer; dispid 7;
    function TransactionTotalsGetItem(index: Integer): ITransactionTotalsType; dispid 8;
    function TransactionTotalsSetItem(index: Integer; const value: ITransactionTotalsType): WordBool; dispid 9;
    function TransactionTotalsAddItem(const value: ITransactionTotalsType): WordBool; dispid 10;
    function TransactionTotalsRemoveItem(index: Integer): WordBool; dispid 11;
    function TransactionTotalsInsertItem(index: Integer; const value: ITransactionTotalsType): Integer; dispid 12;
  end;

// *********************************************************************//
// Interface :   ITransactionTotalsType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {68910793-5EA2-4309-9F4A-830C9451BC97}
// *********************************************************************//
  ITransactionTotalsType = interface(IDispatch)
    ['{68910793-5EA2-4309-9F4A-830C9451BC97}']
    function Get_PaymentTotals: PSafeArray; safecall;
    procedure Set_PaymentTotals(pRetVal: PSafeArray); safecall;
    function Get_LoyaltyTotals: PSafeArray; safecall;
    procedure Set_LoyaltyTotals(pRetVal: PSafeArray); safecall;
    function Get_PaymentInstrumentType: WideString; safecall;
    procedure Set_PaymentInstrumentType(const pRetVal: WideString); safecall;
    function Get_AcquirerID: WideString; safecall;
    procedure Set_AcquirerID(const pRetVal: WideString); safecall;
    function Get_ErrorCondition: WideString; safecall;
    procedure Set_ErrorCondition(const pRetVal: WideString); safecall;
    function Get_HostReconciliationID: WideString; safecall;
    procedure Set_HostReconciliationID(const pRetVal: WideString); safecall;
    function Get_CardBrand: WideString; safecall;
    procedure Set_CardBrand(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_OperatorID: WideString; safecall;
    procedure Set_OperatorID(const pRetVal: WideString); safecall;
    function Get_ShiftNumber: WideString; safecall;
    procedure Set_ShiftNumber(const pRetVal: WideString); safecall;
    function Get_TotalsGroupID: WideString; safecall;
    procedure Set_TotalsGroupID(const pRetVal: WideString); safecall;
    function Get_PaymentCurrency: WideString; safecall;
    procedure Set_PaymentCurrency(const pRetVal: WideString); safecall;
    function Get_LoyaltyUnit: WideString; safecall;
    procedure Set_LoyaltyUnit(const pRetVal: WideString); safecall;
    function Get_LoyaltyCurrency: WideString; safecall;
    procedure Set_LoyaltyCurrency(const pRetVal: WideString); safecall;
    function Get_PaymentTotalsSpecified: WordBool; safecall;
    procedure Set_PaymentTotalsSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyTotalsSpecified: WordBool; safecall;
    procedure Set_LoyaltyTotalsSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentInstrumentTypeSpecified: WordBool; safecall;
    procedure Set_PaymentInstrumentTypeSpecified(pRetVal: WordBool); safecall;
    function Get_AcquirerIDSpecified: WordBool; safecall;
    procedure Set_AcquirerIDSpecified(pRetVal: WordBool); safecall;
    function Get_ErrorConditionSpecified: WordBool; safecall;
    procedure Set_ErrorConditionSpecified(pRetVal: WordBool); safecall;
    function Get_HostReconciliationIDSpecified: WordBool; safecall;
    procedure Set_HostReconciliationIDSpecified(pRetVal: WordBool); safecall;
    function Get_CardBrandSpecified: WordBool; safecall;
    procedure Set_CardBrandSpecified(pRetVal: WordBool); safecall;
    function Get_POIIDSpecified: WordBool; safecall;
    procedure Set_POIIDSpecified(pRetVal: WordBool); safecall;
    function Get_SaleIDSpecified: WordBool; safecall;
    procedure Set_SaleIDSpecified(pRetVal: WordBool); safecall;
    function Get_OperatorIDSpecified: WordBool; safecall;
    procedure Set_OperatorIDSpecified(pRetVal: WordBool); safecall;
    function Get_ShiftNumberSpecified: WordBool; safecall;
    procedure Set_ShiftNumberSpecified(pRetVal: WordBool); safecall;
    function Get_TotalsGroupIDSpecified: WordBool; safecall;
    procedure Set_TotalsGroupIDSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentCurrencySpecified: WordBool; safecall;
    procedure Set_PaymentCurrencySpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyUnitDefaultValue: WideString; safecall;
    function Get_LoyaltyUnitSpecified: WordBool; safecall;
    procedure Set_LoyaltyUnitSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyCurrencySpecified: WordBool; safecall;
    procedure Set_LoyaltyCurrencySpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_TransactionTotalsTypeClassName: WideString; safecall;
    function PaymentTotalsLength: Integer; safecall;
    function PaymentTotalsGetItem(index: Integer): IPaymentTotalsType; safecall;
    function PaymentTotalsSetItem(index: Integer; const value: IPaymentTotalsType): WordBool; safecall;
    function PaymentTotalsAddItem(const value: IPaymentTotalsType): WordBool; safecall;
    function PaymentTotalsRemoveItem(index: Integer): WordBool; safecall;
    function PaymentTotalsInsertItem(index: Integer; const value: IPaymentTotalsType): Integer; safecall;
    function LoyaltyTotalsLength: Integer; safecall;
    function LoyaltyTotalsGetItem(index: Integer): ILoyaltyTotalsType; safecall;
    function LoyaltyTotalsSetItem(index: Integer; const value: ILoyaltyTotalsType): WordBool; safecall;
    function LoyaltyTotalsAddItem(const value: ILoyaltyTotalsType): WordBool; safecall;
    function LoyaltyTotalsRemoveItem(index: Integer): WordBool; safecall;
    function LoyaltyTotalsInsertItem(index: Integer; const value: ILoyaltyTotalsType): Integer; safecall;
    property PaymentTotals: PSafeArray read Get_PaymentTotals write Set_PaymentTotals;
    property LoyaltyTotals: PSafeArray read Get_LoyaltyTotals write Set_LoyaltyTotals;
    property PaymentInstrumentType: WideString read Get_PaymentInstrumentType write Set_PaymentInstrumentType;
    property AcquirerID: WideString read Get_AcquirerID write Set_AcquirerID;
    property ErrorCondition: WideString read Get_ErrorCondition write Set_ErrorCondition;
    property HostReconciliationID: WideString read Get_HostReconciliationID write Set_HostReconciliationID;
    property CardBrand: WideString read Get_CardBrand write Set_CardBrand;
    property POIID: WideString read Get_POIID write Set_POIID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property OperatorID: WideString read Get_OperatorID write Set_OperatorID;
    property ShiftNumber: WideString read Get_ShiftNumber write Set_ShiftNumber;
    property TotalsGroupID: WideString read Get_TotalsGroupID write Set_TotalsGroupID;
    property PaymentCurrency: WideString read Get_PaymentCurrency write Set_PaymentCurrency;
    property LoyaltyUnit: WideString read Get_LoyaltyUnit write Set_LoyaltyUnit;
    property LoyaltyCurrency: WideString read Get_LoyaltyCurrency write Set_LoyaltyCurrency;
    property PaymentTotalsSpecified: WordBool read Get_PaymentTotalsSpecified write Set_PaymentTotalsSpecified;
    property LoyaltyTotalsSpecified: WordBool read Get_LoyaltyTotalsSpecified write Set_LoyaltyTotalsSpecified;
    property PaymentInstrumentTypeSpecified: WordBool read Get_PaymentInstrumentTypeSpecified write Set_PaymentInstrumentTypeSpecified;
    property AcquirerIDSpecified: WordBool read Get_AcquirerIDSpecified write Set_AcquirerIDSpecified;
    property ErrorConditionSpecified: WordBool read Get_ErrorConditionSpecified write Set_ErrorConditionSpecified;
    property HostReconciliationIDSpecified: WordBool read Get_HostReconciliationIDSpecified write Set_HostReconciliationIDSpecified;
    property CardBrandSpecified: WordBool read Get_CardBrandSpecified write Set_CardBrandSpecified;
    property POIIDSpecified: WordBool read Get_POIIDSpecified write Set_POIIDSpecified;
    property SaleIDSpecified: WordBool read Get_SaleIDSpecified write Set_SaleIDSpecified;
    property OperatorIDSpecified: WordBool read Get_OperatorIDSpecified write Set_OperatorIDSpecified;
    property ShiftNumberSpecified: WordBool read Get_ShiftNumberSpecified write Set_ShiftNumberSpecified;
    property TotalsGroupIDSpecified: WordBool read Get_TotalsGroupIDSpecified write Set_TotalsGroupIDSpecified;
    property PaymentCurrencySpecified: WordBool read Get_PaymentCurrencySpecified write Set_PaymentCurrencySpecified;
    property LoyaltyUnitDefaultValue: WideString read Get_LoyaltyUnitDefaultValue;
    property LoyaltyUnitSpecified: WordBool read Get_LoyaltyUnitSpecified write Set_LoyaltyUnitSpecified;
    property LoyaltyCurrencySpecified: WordBool read Get_LoyaltyCurrencySpecified write Set_LoyaltyCurrencySpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property TransactionTotalsTypeClassName: WideString read Get_TransactionTotalsTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ITransactionTotalsTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {68910793-5EA2-4309-9F4A-830C9451BC97}
// *********************************************************************//
  ITransactionTotalsTypeDisp = dispinterface
    ['{68910793-5EA2-4309-9F4A-830C9451BC97}']
    property PaymentTotals: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property LoyaltyTotals: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property PaymentInstrumentType: WideString dispid 4;
    property AcquirerID: WideString dispid 5;
    property ErrorCondition: WideString dispid 6;
    property HostReconciliationID: WideString dispid 7;
    property CardBrand: WideString dispid 8;
    property POIID: WideString dispid 9;
    property SaleID: WideString dispid 10;
    property OperatorID: WideString dispid 11;
    property ShiftNumber: WideString dispid 12;
    property TotalsGroupID: WideString dispid 13;
    property PaymentCurrency: WideString dispid 14;
    property LoyaltyUnit: WideString dispid 15;
    property LoyaltyCurrency: WideString dispid 16;
    property PaymentTotalsSpecified: WordBool dispid 17;
    property LoyaltyTotalsSpecified: WordBool dispid 24;
    property PaymentInstrumentTypeSpecified: WordBool dispid 31;
    property AcquirerIDSpecified: WordBool dispid 32;
    property ErrorConditionSpecified: WordBool dispid 33;
    property HostReconciliationIDSpecified: WordBool dispid 34;
    property CardBrandSpecified: WordBool dispid 35;
    property POIIDSpecified: WordBool dispid 36;
    property SaleIDSpecified: WordBool dispid 37;
    property OperatorIDSpecified: WordBool dispid 38;
    property ShiftNumberSpecified: WordBool dispid 39;
    property TotalsGroupIDSpecified: WordBool dispid 40;
    property PaymentCurrencySpecified: WordBool dispid 41;
    property LoyaltyUnitDefaultValue: WideString readonly dispid 42;
    property LoyaltyUnitSpecified: WordBool dispid 43;
    property LoyaltyCurrencySpecified: WordBool dispid 44;
    property ObjectHasBeenSet: WordBool readonly dispid 45;
    property TransactionTotalsTypeClassName: WideString readonly dispid 46;
    function PaymentTotalsLength: Integer; dispid 18;
    function PaymentTotalsGetItem(index: Integer): IPaymentTotalsType; dispid 19;
    function PaymentTotalsSetItem(index: Integer; const value: IPaymentTotalsType): WordBool; dispid 20;
    function PaymentTotalsAddItem(const value: IPaymentTotalsType): WordBool; dispid 21;
    function PaymentTotalsRemoveItem(index: Integer): WordBool; dispid 22;
    function PaymentTotalsInsertItem(index: Integer; const value: IPaymentTotalsType): Integer; dispid 23;
    function LoyaltyTotalsLength: Integer; dispid 25;
    function LoyaltyTotalsGetItem(index: Integer): ILoyaltyTotalsType; dispid 26;
    function LoyaltyTotalsSetItem(index: Integer; const value: ILoyaltyTotalsType): WordBool; dispid 27;
    function LoyaltyTotalsAddItem(const value: ILoyaltyTotalsType): WordBool; dispid 28;
    function LoyaltyTotalsRemoveItem(index: Integer): WordBool; dispid 29;
    function LoyaltyTotalsInsertItem(index: Integer; const value: ILoyaltyTotalsType): Integer; dispid 30;
  end;

// *********************************************************************//
// Interface :   IPaymentTotalsType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {75D39E45-A5ED-4BA4-B7B3-5F477414D419}
// *********************************************************************//
  IPaymentTotalsType = interface(IDispatch)
    ['{75D39E45-A5ED-4BA4-B7B3-5F477414D419}']
    function Get_TransactionType: WideString; safecall;
    procedure Set_TransactionType(const pRetVal: WideString); safecall;
    function Get_TransactionCount: Integer; safecall;
    procedure Set_TransactionCount(pRetVal: Integer); safecall;
    function Get_TransactionAmount: Double; safecall;
    procedure Set_TransactionAmount(pRetVal: Double); safecall;
    function Get_TransactionTypeSpecified: WordBool; safecall;
    procedure Set_TransactionTypeSpecified(pRetVal: WordBool); safecall;
    function Get_TransactionCountSpecified: WordBool; safecall;
    procedure Set_TransactionCountSpecified(pRetVal: WordBool); safecall;
    function Get_TransactionAmountSpecified: WordBool; safecall;
    procedure Set_TransactionAmountSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PaymentTotalsTypeClassName: WideString; safecall;
    property TransactionType: WideString read Get_TransactionType write Set_TransactionType;
    property TransactionCount: Integer read Get_TransactionCount write Set_TransactionCount;
    property TransactionAmount: Double read Get_TransactionAmount write Set_TransactionAmount;
    property TransactionTypeSpecified: WordBool read Get_TransactionTypeSpecified write Set_TransactionTypeSpecified;
    property TransactionCountSpecified: WordBool read Get_TransactionCountSpecified write Set_TransactionCountSpecified;
    property TransactionAmountSpecified: WordBool read Get_TransactionAmountSpecified write Set_TransactionAmountSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PaymentTotalsTypeClassName: WideString read Get_PaymentTotalsTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPaymentTotalsTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {75D39E45-A5ED-4BA4-B7B3-5F477414D419}
// *********************************************************************//
  IPaymentTotalsTypeDisp = dispinterface
    ['{75D39E45-A5ED-4BA4-B7B3-5F477414D419}']
    property TransactionType: WideString dispid 1;
    property TransactionCount: Integer dispid 2;
    property TransactionAmount: Double dispid 3;
    property TransactionTypeSpecified: WordBool dispid 5;
    property TransactionCountSpecified: WordBool dispid 6;
    property TransactionAmountSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 8;
    property PaymentTotalsTypeClassName: WideString readonly dispid 9;
  end;

// *********************************************************************//
// Interface :   ILoyaltyTotalsType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {82C28D37-7499-46A7-B033-127D0B97C24C}
// *********************************************************************//
  ILoyaltyTotalsType = interface(IDispatch)
    ['{82C28D37-7499-46A7-B033-127D0B97C24C}']
    function Get_TransactionType: WideString; safecall;
    procedure Set_TransactionType(const pRetVal: WideString); safecall;
    function Get_TransactionCount: Integer; safecall;
    procedure Set_TransactionCount(pRetVal: Integer); safecall;
    function Get_TransactionAmount: Double; safecall;
    procedure Set_TransactionAmount(pRetVal: Double); safecall;
    function Get_TransactionTypeSpecified: WordBool; safecall;
    procedure Set_TransactionTypeSpecified(pRetVal: WordBool); safecall;
    function Get_TransactionCountSpecified: WordBool; safecall;
    procedure Set_TransactionCountSpecified(pRetVal: WordBool); safecall;
    function Get_TransactionAmountSpecified: WordBool; safecall;
    procedure Set_TransactionAmountSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LoyaltyTotalsTypeClassName: WideString; safecall;
    property TransactionType: WideString read Get_TransactionType write Set_TransactionType;
    property TransactionCount: Integer read Get_TransactionCount write Set_TransactionCount;
    property TransactionAmount: Double read Get_TransactionAmount write Set_TransactionAmount;
    property TransactionTypeSpecified: WordBool read Get_TransactionTypeSpecified write Set_TransactionTypeSpecified;
    property TransactionCountSpecified: WordBool read Get_TransactionCountSpecified write Set_TransactionCountSpecified;
    property TransactionAmountSpecified: WordBool read Get_TransactionAmountSpecified write Set_TransactionAmountSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LoyaltyTotalsTypeClassName: WideString read Get_LoyaltyTotalsTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyTotalsTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {82C28D37-7499-46A7-B033-127D0B97C24C}
// *********************************************************************//
  ILoyaltyTotalsTypeDisp = dispinterface
    ['{82C28D37-7499-46A7-B033-127D0B97C24C}']
    property TransactionType: WideString dispid 1;
    property TransactionCount: Integer dispid 2;
    property TransactionAmount: Double dispid 3;
    property TransactionTypeSpecified: WordBool dispid 5;
    property TransactionCountSpecified: WordBool dispid 6;
    property TransactionAmountSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 8;
    property LoyaltyTotalsTypeClassName: WideString readonly dispid 9;
  end;

// *********************************************************************//
// Interface :   IInputType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {FD31DF8B-72CA-49F1-A226-7A6F35FA712E}
// *********************************************************************//
  IInputType = interface(IDispatch)
    ['{FD31DF8B-72CA-49F1-A226-7A6F35FA712E}']
    function Get_ConfirmedFlag: WordBool; safecall;
    procedure Set_ConfirmedFlag(pRetVal: WordBool); safecall;
    function Get_ConfirmedFlagSpecified: WordBool; safecall;
    procedure Set_ConfirmedFlagSpecified(pRetVal: WordBool); safecall;
    function Get_FunctionKey: WideString; safecall;
    procedure Set_FunctionKey(const pRetVal: WideString); safecall;
    function Get_TextInput: WideString; safecall;
    procedure Set_TextInput(const pRetVal: WideString); safecall;
    function Get_DigitInput: WideString; safecall;
    procedure Set_DigitInput(const pRetVal: WideString); safecall;
    function Get_Password: IContentInformationType; safecall;
    procedure _Set_Password(const pRetVal: IContentInformationType); safecall;
    function Get_MenuEntryNumber: WideString; safecall;
    procedure Set_MenuEntryNumber(const pRetVal: WideString); safecall;
    function Get_InputCommand: WideString; safecall;
    procedure Set_InputCommand(const pRetVal: WideString); safecall;
    function Get_FunctionKeySpecified: WordBool; safecall;
    procedure Set_FunctionKeySpecified(pRetVal: WordBool); safecall;
    function Get_TextInputSpecified: WordBool; safecall;
    procedure Set_TextInputSpecified(pRetVal: WordBool); safecall;
    function Get_DigitInputSpecified: WordBool; safecall;
    procedure Set_DigitInputSpecified(pRetVal: WordBool); safecall;
    function Get_PasswordSpecified: WordBool; safecall;
    procedure Set_PasswordSpecified(pRetVal: WordBool); safecall;
    function Get_MenuEntryNumberSpecified: WordBool; safecall;
    procedure Set_MenuEntryNumberSpecified(pRetVal: WordBool); safecall;
    function Get_InputCommandSpecified: WordBool; safecall;
    procedure Set_InputCommandSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_InputTypeClassName: WideString; safecall;
    property ConfirmedFlag: WordBool read Get_ConfirmedFlag write Set_ConfirmedFlag;
    property ConfirmedFlagSpecified: WordBool read Get_ConfirmedFlagSpecified write Set_ConfirmedFlagSpecified;
    property FunctionKey: WideString read Get_FunctionKey write Set_FunctionKey;
    property TextInput: WideString read Get_TextInput write Set_TextInput;
    property DigitInput: WideString read Get_DigitInput write Set_DigitInput;
    property Password: IContentInformationType read Get_Password write _Set_Password;
    property MenuEntryNumber: WideString read Get_MenuEntryNumber write Set_MenuEntryNumber;
    property InputCommand: WideString read Get_InputCommand write Set_InputCommand;
    property FunctionKeySpecified: WordBool read Get_FunctionKeySpecified write Set_FunctionKeySpecified;
    property TextInputSpecified: WordBool read Get_TextInputSpecified write Set_TextInputSpecified;
    property DigitInputSpecified: WordBool read Get_DigitInputSpecified write Set_DigitInputSpecified;
    property PasswordSpecified: WordBool read Get_PasswordSpecified write Set_PasswordSpecified;
    property MenuEntryNumberSpecified: WordBool read Get_MenuEntryNumberSpecified write Set_MenuEntryNumberSpecified;
    property InputCommandSpecified: WordBool read Get_InputCommandSpecified write Set_InputCommandSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property InputTypeClassName: WideString read Get_InputTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IInputTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {FD31DF8B-72CA-49F1-A226-7A6F35FA712E}
// *********************************************************************//
  IInputTypeDisp = dispinterface
    ['{FD31DF8B-72CA-49F1-A226-7A6F35FA712E}']
    property ConfirmedFlag: WordBool dispid 1;
    property ConfirmedFlagSpecified: WordBool dispid 2;
    property FunctionKey: WideString dispid 3;
    property TextInput: WideString dispid 4;
    property DigitInput: WideString dispid 5;
    property Password: IContentInformationType dispid 6;
    property MenuEntryNumber: WideString dispid 7;
    property InputCommand: WideString dispid 8;
    property FunctionKeySpecified: WordBool dispid 10;
    property TextInputSpecified: WordBool dispid 11;
    property DigitInputSpecified: WordBool dispid 12;
    property PasswordSpecified: WordBool dispid 13;
    property MenuEntryNumberSpecified: WordBool dispid 14;
    property InputCommandSpecified: WordBool dispid 15;
    property ObjectHasBeenSet: WordBool readonly dispid 16;
    property InputTypeClassName: WideString readonly dispid 17;
  end;

// *********************************************************************//
// Interface :   IInputDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5C98539A-61A0-42FB-B997-894650DFFDAA}
// *********************************************************************//
  IInputDataType = interface(IDispatch)
    ['{5C98539A-61A0-42FB-B997-894650DFFDAA}']
    function Get_DefaultInputString: WideString; safecall;
    procedure Set_DefaultInputString(const pRetVal: WideString); safecall;
    function Get_StringMask: WideString; safecall;
    procedure Set_StringMask(const pRetVal: WideString); safecall;
    function Get_Device: WideString; safecall;
    procedure Set_Device(const pRetVal: WideString); safecall;
    function Get_InfoQualify: WideString; safecall;
    procedure Set_InfoQualify(const pRetVal: WideString); safecall;
    function Get_InputCommand: WideString; safecall;
    procedure Set_InputCommand(const pRetVal: WideString); safecall;
    function Get_NotifyCardInputFlag: WordBool; safecall;
    procedure Set_NotifyCardInputFlag(pRetVal: WordBool); safecall;
    function Get_MaxInputTime: Integer; safecall;
    procedure Set_MaxInputTime(pRetVal: Integer); safecall;
    function Get_ImmediateResponseFlag: WordBool; safecall;
    procedure Set_ImmediateResponseFlag(pRetVal: WordBool); safecall;
    function Get_MinLength: Integer; safecall;
    procedure Set_MinLength(pRetVal: Integer); safecall;
    function Get_MaxLength: Integer; safecall;
    procedure Set_MaxLength(pRetVal: Integer); safecall;
    function Get_MaxDecimalLength: Integer; safecall;
    procedure Set_MaxDecimalLength(pRetVal: Integer); safecall;
    function Get_WaitUserValidationFlag: WordBool; safecall;
    procedure Set_WaitUserValidationFlag(pRetVal: WordBool); safecall;
    function Get_FromRightToLeftFlag: WordBool; safecall;
    procedure Set_FromRightToLeftFlag(pRetVal: WordBool); safecall;
    function Get_MaskCharactersFlag: WordBool; safecall;
    procedure Set_MaskCharactersFlag(pRetVal: WordBool); safecall;
    function Get_BeepKeyFlag: WordBool; safecall;
    procedure Set_BeepKeyFlag(pRetVal: WordBool); safecall;
    function Get_GlobalCorrectionFlag: WordBool; safecall;
    procedure Set_GlobalCorrectionFlag(pRetVal: WordBool); safecall;
    function Get_DisableCancelFlag: WordBool; safecall;
    procedure Set_DisableCancelFlag(pRetVal: WordBool); safecall;
    function Get_DisableCorrectFlag: WordBool; safecall;
    procedure Set_DisableCorrectFlag(pRetVal: WordBool); safecall;
    function Get_DisableValidFlag: WordBool; safecall;
    procedure Set_DisableValidFlag(pRetVal: WordBool); safecall;
    function Get_MenuBackFlag: WordBool; safecall;
    procedure Set_MenuBackFlag(pRetVal: WordBool); safecall;
    function Get_DefaultInputStringSpecified: WordBool; safecall;
    procedure Set_DefaultInputStringSpecified(pRetVal: WordBool); safecall;
    function Get_StringMaskSpecified: WordBool; safecall;
    procedure Set_StringMaskSpecified(pRetVal: WordBool); safecall;
    function Get_DeviceSpecified: WordBool; safecall;
    procedure Set_DeviceSpecified(pRetVal: WordBool); safecall;
    function Get_InfoQualifySpecified: WordBool; safecall;
    procedure Set_InfoQualifySpecified(pRetVal: WordBool); safecall;
    function Get_InputCommandSpecified: WordBool; safecall;
    procedure Set_InputCommandSpecified(pRetVal: WordBool); safecall;
    function Get_NotifyCardInputFlagDefaultValue: WordBool; safecall;
    function Get_NotifyCardInputFlagSpecified: WordBool; safecall;
    procedure Set_NotifyCardInputFlagSpecified(pRetVal: WordBool); safecall;
    function Get_MaxInputTimeSpecified: WordBool; safecall;
    procedure Set_MaxInputTimeSpecified(pRetVal: WordBool); safecall;
    function Get_ImmediateResponseFlagDefaultValue: WordBool; safecall;
    function Get_ImmediateResponseFlagSpecified: WordBool; safecall;
    procedure Set_ImmediateResponseFlagSpecified(pRetVal: WordBool); safecall;
    function Get_MinLengthSpecified: WordBool; safecall;
    procedure Set_MinLengthSpecified(pRetVal: WordBool); safecall;
    function Get_MaxLengthSpecified: WordBool; safecall;
    procedure Set_MaxLengthSpecified(pRetVal: WordBool); safecall;
    function Get_MaxDecimalLengthSpecified: WordBool; safecall;
    procedure Set_MaxDecimalLengthSpecified(pRetVal: WordBool); safecall;
    function Get_WaitUserValidationFlagDefaultValue: WordBool; safecall;
    function Get_WaitUserValidationFlagSpecified: WordBool; safecall;
    procedure Set_WaitUserValidationFlagSpecified(pRetVal: WordBool); safecall;
    function Get_FromRightToLeftFlagDefaultValue: WordBool; safecall;
    function Get_FromRightToLeftFlagSpecified: WordBool; safecall;
    procedure Set_FromRightToLeftFlagSpecified(pRetVal: WordBool); safecall;
    function Get_MaskCharactersFlagDefaultValue: WordBool; safecall;
    function Get_MaskCharactersFlagSpecified: WordBool; safecall;
    procedure Set_MaskCharactersFlagSpecified(pRetVal: WordBool); safecall;
    function Get_BeepKeyFlagDefaultValue: WordBool; safecall;
    function Get_BeepKeyFlagSpecified: WordBool; safecall;
    procedure Set_BeepKeyFlagSpecified(pRetVal: WordBool); safecall;
    function Get_GlobalCorrectionFlagDefaultValue: WordBool; safecall;
    function Get_GlobalCorrectionFlagSpecified: WordBool; safecall;
    procedure Set_GlobalCorrectionFlagSpecified(pRetVal: WordBool); safecall;
    function Get_DisableCancelFlagDefaultValue: WordBool; safecall;
    function Get_DisableCancelFlagSpecified: WordBool; safecall;
    procedure Set_DisableCancelFlagSpecified(pRetVal: WordBool); safecall;
    function Get_DisableCorrectFlagDefaultValue: WordBool; safecall;
    function Get_DisableCorrectFlagSpecified: WordBool; safecall;
    procedure Set_DisableCorrectFlagSpecified(pRetVal: WordBool); safecall;
    function Get_DisableValidFlagDefaultValue: WordBool; safecall;
    function Get_DisableValidFlagSpecified: WordBool; safecall;
    procedure Set_DisableValidFlagSpecified(pRetVal: WordBool); safecall;
    function Get_MenuBackFlagDefaultValue: WordBool; safecall;
    function Get_MenuBackFlagSpecified: WordBool; safecall;
    procedure Set_MenuBackFlagSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_InputDataTypeClassName: WideString; safecall;
    property DefaultInputString: WideString read Get_DefaultInputString write Set_DefaultInputString;
    property StringMask: WideString read Get_StringMask write Set_StringMask;
    property Device: WideString read Get_Device write Set_Device;
    property InfoQualify: WideString read Get_InfoQualify write Set_InfoQualify;
    property InputCommand: WideString read Get_InputCommand write Set_InputCommand;
    property NotifyCardInputFlag: WordBool read Get_NotifyCardInputFlag write Set_NotifyCardInputFlag;
    property MaxInputTime: Integer read Get_MaxInputTime write Set_MaxInputTime;
    property ImmediateResponseFlag: WordBool read Get_ImmediateResponseFlag write Set_ImmediateResponseFlag;
    property MinLength: Integer read Get_MinLength write Set_MinLength;
    property MaxLength: Integer read Get_MaxLength write Set_MaxLength;
    property MaxDecimalLength: Integer read Get_MaxDecimalLength write Set_MaxDecimalLength;
    property WaitUserValidationFlag: WordBool read Get_WaitUserValidationFlag write Set_WaitUserValidationFlag;
    property FromRightToLeftFlag: WordBool read Get_FromRightToLeftFlag write Set_FromRightToLeftFlag;
    property MaskCharactersFlag: WordBool read Get_MaskCharactersFlag write Set_MaskCharactersFlag;
    property BeepKeyFlag: WordBool read Get_BeepKeyFlag write Set_BeepKeyFlag;
    property GlobalCorrectionFlag: WordBool read Get_GlobalCorrectionFlag write Set_GlobalCorrectionFlag;
    property DisableCancelFlag: WordBool read Get_DisableCancelFlag write Set_DisableCancelFlag;
    property DisableCorrectFlag: WordBool read Get_DisableCorrectFlag write Set_DisableCorrectFlag;
    property DisableValidFlag: WordBool read Get_DisableValidFlag write Set_DisableValidFlag;
    property MenuBackFlag: WordBool read Get_MenuBackFlag write Set_MenuBackFlag;
    property DefaultInputStringSpecified: WordBool read Get_DefaultInputStringSpecified write Set_DefaultInputStringSpecified;
    property StringMaskSpecified: WordBool read Get_StringMaskSpecified write Set_StringMaskSpecified;
    property DeviceSpecified: WordBool read Get_DeviceSpecified write Set_DeviceSpecified;
    property InfoQualifySpecified: WordBool read Get_InfoQualifySpecified write Set_InfoQualifySpecified;
    property InputCommandSpecified: WordBool read Get_InputCommandSpecified write Set_InputCommandSpecified;
    property NotifyCardInputFlagDefaultValue: WordBool read Get_NotifyCardInputFlagDefaultValue;
    property NotifyCardInputFlagSpecified: WordBool read Get_NotifyCardInputFlagSpecified write Set_NotifyCardInputFlagSpecified;
    property MaxInputTimeSpecified: WordBool read Get_MaxInputTimeSpecified write Set_MaxInputTimeSpecified;
    property ImmediateResponseFlagDefaultValue: WordBool read Get_ImmediateResponseFlagDefaultValue;
    property ImmediateResponseFlagSpecified: WordBool read Get_ImmediateResponseFlagSpecified write Set_ImmediateResponseFlagSpecified;
    property MinLengthSpecified: WordBool read Get_MinLengthSpecified write Set_MinLengthSpecified;
    property MaxLengthSpecified: WordBool read Get_MaxLengthSpecified write Set_MaxLengthSpecified;
    property MaxDecimalLengthSpecified: WordBool read Get_MaxDecimalLengthSpecified write Set_MaxDecimalLengthSpecified;
    property WaitUserValidationFlagDefaultValue: WordBool read Get_WaitUserValidationFlagDefaultValue;
    property WaitUserValidationFlagSpecified: WordBool read Get_WaitUserValidationFlagSpecified write Set_WaitUserValidationFlagSpecified;
    property FromRightToLeftFlagDefaultValue: WordBool read Get_FromRightToLeftFlagDefaultValue;
    property FromRightToLeftFlagSpecified: WordBool read Get_FromRightToLeftFlagSpecified write Set_FromRightToLeftFlagSpecified;
    property MaskCharactersFlagDefaultValue: WordBool read Get_MaskCharactersFlagDefaultValue;
    property MaskCharactersFlagSpecified: WordBool read Get_MaskCharactersFlagSpecified write Set_MaskCharactersFlagSpecified;
    property BeepKeyFlagDefaultValue: WordBool read Get_BeepKeyFlagDefaultValue;
    property BeepKeyFlagSpecified: WordBool read Get_BeepKeyFlagSpecified write Set_BeepKeyFlagSpecified;
    property GlobalCorrectionFlagDefaultValue: WordBool read Get_GlobalCorrectionFlagDefaultValue;
    property GlobalCorrectionFlagSpecified: WordBool read Get_GlobalCorrectionFlagSpecified write Set_GlobalCorrectionFlagSpecified;
    property DisableCancelFlagDefaultValue: WordBool read Get_DisableCancelFlagDefaultValue;
    property DisableCancelFlagSpecified: WordBool read Get_DisableCancelFlagSpecified write Set_DisableCancelFlagSpecified;
    property DisableCorrectFlagDefaultValue: WordBool read Get_DisableCorrectFlagDefaultValue;
    property DisableCorrectFlagSpecified: WordBool read Get_DisableCorrectFlagSpecified write Set_DisableCorrectFlagSpecified;
    property DisableValidFlagDefaultValue: WordBool read Get_DisableValidFlagDefaultValue;
    property DisableValidFlagSpecified: WordBool read Get_DisableValidFlagSpecified write Set_DisableValidFlagSpecified;
    property MenuBackFlagDefaultValue: WordBool read Get_MenuBackFlagDefaultValue;
    property MenuBackFlagSpecified: WordBool read Get_MenuBackFlagSpecified write Set_MenuBackFlagSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property InputDataTypeClassName: WideString read Get_InputDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IInputDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5C98539A-61A0-42FB-B997-894650DFFDAA}
// *********************************************************************//
  IInputDataTypeDisp = dispinterface
    ['{5C98539A-61A0-42FB-B997-894650DFFDAA}']
    property DefaultInputString: WideString dispid 2;
    property StringMask: WideString dispid 3;
    property Device: WideString dispid 4;
    property InfoQualify: WideString dispid 5;
    property InputCommand: WideString dispid 6;
    property NotifyCardInputFlag: WordBool dispid 7;
    property MaxInputTime: Integer dispid 8;
    property ImmediateResponseFlag: WordBool dispid 9;
    property MinLength: Integer dispid 10;
    property MaxLength: Integer dispid 11;
    property MaxDecimalLength: Integer dispid 12;
    property WaitUserValidationFlag: WordBool dispid 13;
    property FromRightToLeftFlag: WordBool dispid 14;
    property MaskCharactersFlag: WordBool dispid 15;
    property BeepKeyFlag: WordBool dispid 16;
    property GlobalCorrectionFlag: WordBool dispid 17;
    property DisableCancelFlag: WordBool dispid 18;
    property DisableCorrectFlag: WordBool dispid 19;
    property DisableValidFlag: WordBool dispid 20;
    property MenuBackFlag: WordBool dispid 21;
    property DefaultInputStringSpecified: WordBool dispid 22;
    property StringMaskSpecified: WordBool dispid 23;
    property DeviceSpecified: WordBool dispid 24;
    property InfoQualifySpecified: WordBool dispid 25;
    property InputCommandSpecified: WordBool dispid 26;
    property NotifyCardInputFlagDefaultValue: WordBool readonly dispid 27;
    property NotifyCardInputFlagSpecified: WordBool dispid 28;
    property MaxInputTimeSpecified: WordBool dispid 29;
    property ImmediateResponseFlagDefaultValue: WordBool readonly dispid 30;
    property ImmediateResponseFlagSpecified: WordBool dispid 31;
    property MinLengthSpecified: WordBool dispid 32;
    property MaxLengthSpecified: WordBool dispid 33;
    property MaxDecimalLengthSpecified: WordBool dispid 34;
    property WaitUserValidationFlagDefaultValue: WordBool readonly dispid 35;
    property WaitUserValidationFlagSpecified: WordBool dispid 36;
    property FromRightToLeftFlagDefaultValue: WordBool readonly dispid 37;
    property FromRightToLeftFlagSpecified: WordBool dispid 38;
    property MaskCharactersFlagDefaultValue: WordBool readonly dispid 39;
    property MaskCharactersFlagSpecified: WordBool dispid 40;
    property BeepKeyFlagDefaultValue: WordBool readonly dispid 41;
    property BeepKeyFlagSpecified: WordBool dispid 42;
    property GlobalCorrectionFlagDefaultValue: WordBool readonly dispid 43;
    property GlobalCorrectionFlagSpecified: WordBool dispid 44;
    property DisableCancelFlagDefaultValue: WordBool readonly dispid 45;
    property DisableCancelFlagSpecified: WordBool dispid 46;
    property DisableCorrectFlagDefaultValue: WordBool readonly dispid 47;
    property DisableCorrectFlagSpecified: WordBool dispid 48;
    property DisableValidFlagDefaultValue: WordBool readonly dispid 49;
    property DisableValidFlagSpecified: WordBool dispid 50;
    property MenuBackFlagDefaultValue: WordBool readonly dispid 51;
    property MenuBackFlagSpecified: WordBool dispid 52;
    property ObjectHasBeenSet: WordBool readonly dispid 53;
    property InputDataTypeClassName: WideString readonly dispid 54;
  end;

// *********************************************************************//
// Interface :   IInputRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1AD04AEF-FD79-4E1B-AC25-FA0756697193}
// *********************************************************************//
  IInputRequestType = interface(IDispatch)
    ['{1AD04AEF-FD79-4E1B-AC25-FA0756697193}']
    function Get_DisplayOutput: IDisplayOutputType; safecall;
    procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
    function Get_InputData: IInputDataType; safecall;
    procedure _Set_InputData(const pRetVal: IInputDataType); safecall;
    function Get_DisplayOutputSpecified: WordBool; safecall;
    procedure Set_DisplayOutputSpecified(pRetVal: WordBool); safecall;
    function Get_InputDataSpecified: WordBool; safecall;
    procedure Set_InputDataSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_InputRequestTypeClassName: WideString; safecall;
    property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
    property InputData: IInputDataType read Get_InputData write _Set_InputData;
    property DisplayOutputSpecified: WordBool read Get_DisplayOutputSpecified write Set_DisplayOutputSpecified;
    property InputDataSpecified: WordBool read Get_InputDataSpecified write Set_InputDataSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property InputRequestTypeClassName: WideString read Get_InputRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IInputRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1AD04AEF-FD79-4E1B-AC25-FA0756697193}
// *********************************************************************//
  IInputRequestTypeDisp = dispinterface
    ['{1AD04AEF-FD79-4E1B-AC25-FA0756697193}']
    property DisplayOutput: IDisplayOutputType dispid 1;
    property InputData: IInputDataType dispid 2;
    property DisplayOutputSpecified: WordBool dispid 4;
    property InputDataSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property InputRequestTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IInputResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3D94CD95-987C-4FCF-A12E-6C78F0F39F58}
// *********************************************************************//
  IInputResponseType = interface(IDispatch)
    ['{3D94CD95-987C-4FCF-A12E-6C78F0F39F58}']
    function Get_OutputResult: IOutputResultType; safecall;
    procedure _Set_OutputResult(const pRetVal: IOutputResultType); safecall;
    function Get_InputResult: IInputResultType; safecall;
    procedure _Set_InputResult(const pRetVal: IInputResultType); safecall;
    function Get_OutputResultSpecified: WordBool; safecall;
    procedure Set_OutputResultSpecified(pRetVal: WordBool); safecall;
    function Get_InputResultSpecified: WordBool; safecall;
    procedure Set_InputResultSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_InputResponseTypeClassName: WideString; safecall;
    property OutputResult: IOutputResultType read Get_OutputResult write _Set_OutputResult;
    property InputResult: IInputResultType read Get_InputResult write _Set_InputResult;
    property OutputResultSpecified: WordBool read Get_OutputResultSpecified write Set_OutputResultSpecified;
    property InputResultSpecified: WordBool read Get_InputResultSpecified write Set_InputResultSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property InputResponseTypeClassName: WideString read Get_InputResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IInputResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3D94CD95-987C-4FCF-A12E-6C78F0F39F58}
// *********************************************************************//
  IInputResponseTypeDisp = dispinterface
    ['{3D94CD95-987C-4FCF-A12E-6C78F0F39F58}']
    property OutputResult: IOutputResultType dispid 1;
    property InputResult: IInputResultType dispid 2;
    property OutputResultSpecified: WordBool dispid 4;
    property InputResultSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property InputResponseTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IInputResultType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3E961B38-E333-4C63-90EF-DE823DDD6EFC}
// *********************************************************************//
  IInputResultType = interface(IDispatch)
    ['{3E961B38-E333-4C63-90EF-DE823DDD6EFC}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_Input: IInputType; safecall;
    procedure _Set_Input(const pRetVal: IInputType); safecall;
    function Get_Device: WideString; safecall;
    procedure Set_Device(const pRetVal: WideString); safecall;
    function Get_InfoQualify: WideString; safecall;
    procedure Set_InfoQualify(const pRetVal: WideString); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_InputSpecified: WordBool; safecall;
    procedure Set_InputSpecified(pRetVal: WordBool); safecall;
    function Get_DeviceSpecified: WordBool; safecall;
    procedure Set_DeviceSpecified(pRetVal: WordBool); safecall;
    function Get_InfoQualifySpecified: WordBool; safecall;
    procedure Set_InfoQualifySpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_InputResultTypeClassName: WideString; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property Input: IInputType read Get_Input write _Set_Input;
    property Device: WideString read Get_Device write Set_Device;
    property InfoQualify: WideString read Get_InfoQualify write Set_InfoQualify;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property InputSpecified: WordBool read Get_InputSpecified write Set_InputSpecified;
    property DeviceSpecified: WordBool read Get_DeviceSpecified write Set_DeviceSpecified;
    property InfoQualifySpecified: WordBool read Get_InfoQualifySpecified write Set_InfoQualifySpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property InputResultTypeClassName: WideString read Get_InputResultTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IInputResultTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3E961B38-E333-4C63-90EF-DE823DDD6EFC}
// *********************************************************************//
  IInputResultTypeDisp = dispinterface
    ['{3E961B38-E333-4C63-90EF-DE823DDD6EFC}']
    property Response: IResponseType dispid 1;
    property Input: IInputType dispid 2;
    property Device: WideString dispid 3;
    property InfoQualify: WideString dispid 4;
    property ResponseSpecified: WordBool dispid 6;
    property InputSpecified: WordBool dispid 7;
    property DeviceSpecified: WordBool dispid 8;
    property InfoQualifySpecified: WordBool dispid 9;
    property ObjectHasBeenSet: WordBool readonly dispid 10;
    property InputResultTypeClassName: WideString readonly dispid 11;
  end;

// *********************************************************************//
// Interface :   IInputUpdateType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5FEE78E4-19D3-469A-8289-E2C927788460}
// *********************************************************************//
  IInputUpdateType = interface(IDispatch)
    ['{5FEE78E4-19D3-469A-8289-E2C927788460}']
    function Get_MessageReference: IMessageReferenceType; safecall;
    procedure _Set_MessageReference(const pRetVal: IMessageReferenceType); safecall;
    function Get_OutputContent: IOutputContentType; safecall;
    procedure _Set_OutputContent(const pRetVal: IOutputContentType); safecall;
    function Get_MenuEntry: PSafeArray; safecall;
    procedure Set_MenuEntry(pRetVal: PSafeArray); safecall;
    function Get_OutputSignature: PSafeArray; safecall;
    procedure Set_OutputSignature(pRetVal: PSafeArray); safecall;
    function Get_MinLength: Integer; safecall;
    procedure Set_MinLength(pRetVal: Integer); safecall;
    function Get_MaxLength: Integer; safecall;
    procedure Set_MaxLength(pRetVal: Integer); safecall;
    function Get_MaxDecimalLength: Integer; safecall;
    procedure Set_MaxDecimalLength(pRetVal: Integer); safecall;
    function Get_MessageReferenceSpecified: WordBool; safecall;
    procedure Set_MessageReferenceSpecified(pRetVal: WordBool); safecall;
    function Get_OutputContentSpecified: WordBool; safecall;
    procedure Set_OutputContentSpecified(pRetVal: WordBool); safecall;
    function Get_MenuEntrySpecified: WordBool; safecall;
    procedure Set_MenuEntrySpecified(pRetVal: WordBool); safecall;
    function Get_OutputSignatureSpecified: WordBool; safecall;
    procedure Set_OutputSignatureSpecified(pRetVal: WordBool); safecall;
    function Get_MinLengthSpecified: WordBool; safecall;
    procedure Set_MinLengthSpecified(pRetVal: WordBool); safecall;
    function Get_MaxLengthSpecified: WordBool; safecall;
    procedure Set_MaxLengthSpecified(pRetVal: WordBool); safecall;
    function Get_MaxDecimalLengthSpecified: WordBool; safecall;
    procedure Set_MaxDecimalLengthSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_InputUpdateTypeClassName: WideString; safecall;
    function MenuEntryLength: Integer; safecall;
    function MenuEntryGetItem(index: Integer): IMenuEntryType; safecall;
    function MenuEntrySetItem(index: Integer; const value: IMenuEntryType): WordBool; safecall;
    function MenuEntryAddItem(const value: IMenuEntryType): WordBool; safecall;
    function MenuEntryRemoveItem(index: Integer): WordBool; safecall;
    function MenuEntryInsertItem(index: Integer; const value: IMenuEntryType): Integer; safecall;
    function OutputSignatureLength: Integer; safecall;
    function OutputSignatureGetItem(index: Integer): Byte; safecall;
    function OutputSignatureSetItem(index: Integer; value: Byte): WordBool; safecall;
    function OutputSignatureAddItem(value: Byte): WordBool; safecall;
    function OutputSignatureRemoveItem(index: Integer): WordBool; safecall;
    function OutputSignatureInsertItem(index: Integer; value: Byte): Integer; safecall;
    property MessageReference: IMessageReferenceType read Get_MessageReference write _Set_MessageReference;
    property OutputContent: IOutputContentType read Get_OutputContent write _Set_OutputContent;
    property MenuEntry: PSafeArray read Get_MenuEntry write Set_MenuEntry;
    property OutputSignature: PSafeArray read Get_OutputSignature write Set_OutputSignature;
    property MinLength: Integer read Get_MinLength write Set_MinLength;
    property MaxLength: Integer read Get_MaxLength write Set_MaxLength;
    property MaxDecimalLength: Integer read Get_MaxDecimalLength write Set_MaxDecimalLength;
    property MessageReferenceSpecified: WordBool read Get_MessageReferenceSpecified write Set_MessageReferenceSpecified;
    property OutputContentSpecified: WordBool read Get_OutputContentSpecified write Set_OutputContentSpecified;
    property MenuEntrySpecified: WordBool read Get_MenuEntrySpecified write Set_MenuEntrySpecified;
    property OutputSignatureSpecified: WordBool read Get_OutputSignatureSpecified write Set_OutputSignatureSpecified;
    property MinLengthSpecified: WordBool read Get_MinLengthSpecified write Set_MinLengthSpecified;
    property MaxLengthSpecified: WordBool read Get_MaxLengthSpecified write Set_MaxLengthSpecified;
    property MaxDecimalLengthSpecified: WordBool read Get_MaxDecimalLengthSpecified write Set_MaxDecimalLengthSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property InputUpdateTypeClassName: WideString read Get_InputUpdateTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IInputUpdateTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5FEE78E4-19D3-469A-8289-E2C927788460}
// *********************************************************************//
  IInputUpdateTypeDisp = dispinterface
    ['{5FEE78E4-19D3-469A-8289-E2C927788460}']
    property MessageReference: IMessageReferenceType dispid 1;
    property OutputContent: IOutputContentType dispid 2;
    property MenuEntry: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property OutputSignature: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property MinLength: Integer dispid 5;
    property MaxLength: Integer dispid 6;
    property MaxDecimalLength: Integer dispid 7;
    property MessageReferenceSpecified: WordBool dispid 9;
    property OutputContentSpecified: WordBool dispid 10;
    property MenuEntrySpecified: WordBool dispid 11;
    property OutputSignatureSpecified: WordBool dispid 18;
    property MinLengthSpecified: WordBool dispid 25;
    property MaxLengthSpecified: WordBool dispid 26;
    property MaxDecimalLengthSpecified: WordBool dispid 27;
    property ObjectHasBeenSet: WordBool readonly dispid 28;
    property InputUpdateTypeClassName: WideString readonly dispid 29;
    function MenuEntryLength: Integer; dispid 12;
    function MenuEntryGetItem(index: Integer): IMenuEntryType; dispid 13;
    function MenuEntrySetItem(index: Integer; const value: IMenuEntryType): WordBool; dispid 14;
    function MenuEntryAddItem(const value: IMenuEntryType): WordBool; dispid 15;
    function MenuEntryRemoveItem(index: Integer): WordBool; dispid 16;
    function MenuEntryInsertItem(index: Integer; const value: IMenuEntryType): Integer; dispid 17;
    function OutputSignatureLength: Integer; dispid 19;
    function OutputSignatureGetItem(index: Integer): Byte; dispid 20;
    function OutputSignatureSetItem(index: Integer; value: Byte): WordBool; dispid 21;
    function OutputSignatureAddItem(value: Byte): WordBool; dispid 22;
    function OutputSignatureRemoveItem(index: Integer): WordBool; dispid 23;
    function OutputSignatureInsertItem(index: Integer; value: Byte): Integer; dispid 24;
  end;

// *********************************************************************//
// Interface :   ILoginRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6C103E7C-CBAB-4ECF-BD7D-D3A3ED5CC617}
// *********************************************************************//
  ILoginRequestType = interface(IDispatch)
    ['{6C103E7C-CBAB-4ECF-BD7D-D3A3ED5CC617}']
    function Get_DateTime: WideString; safecall;
    procedure Set_DateTime(const pRetVal: WideString); safecall;
    function Get_SaleSoftware: ISaleSoftwareType; safecall;
    procedure _Set_SaleSoftware(const pRetVal: ISaleSoftwareType); safecall;
    function Get_SaleTerminalData: ISaleTerminalDataType; safecall;
    procedure _Set_SaleTerminalData(const pRetVal: ISaleTerminalDataType); safecall;
    function Get_TrainingModeFlag: WordBool; safecall;
    procedure Set_TrainingModeFlag(pRetVal: WordBool); safecall;
    function Get_OperatorLanguage: WideString; safecall;
    procedure Set_OperatorLanguage(const pRetVal: WideString); safecall;
    function Get_OperatorID: WideString; safecall;
    procedure Set_OperatorID(const pRetVal: WideString); safecall;
    function Get_ShiftNumber: WideString; safecall;
    procedure Set_ShiftNumber(const pRetVal: WideString); safecall;
    function Get_TokenRequestedType: WideString; safecall;
    procedure Set_TokenRequestedType(const pRetVal: WideString); safecall;
    function Get_CustomerOrderReq: PSafeArray; safecall;
    procedure Set_CustomerOrderReq(pRetVal: PSafeArray); safecall;
    function Get_POISerialNumber: WideString; safecall;
    procedure Set_POISerialNumber(const pRetVal: WideString); safecall;
    function Get_DateTimeSpecified: WordBool; safecall;
    procedure Set_DateTimeSpecified(pRetVal: WordBool); safecall;
    function Get_SaleSoftwareSpecified: WordBool; safecall;
    procedure Set_SaleSoftwareSpecified(pRetVal: WordBool); safecall;
    function Get_SaleTerminalDataSpecified: WordBool; safecall;
    procedure Set_SaleTerminalDataSpecified(pRetVal: WordBool); safecall;
    function Get_TrainingModeFlagDefaultValue: WordBool; safecall;
    function Get_TrainingModeFlagSpecified: WordBool; safecall;
    procedure Set_TrainingModeFlagSpecified(pRetVal: WordBool); safecall;
    function Get_OperatorLanguageSpecified: WordBool; safecall;
    procedure Set_OperatorLanguageSpecified(pRetVal: WordBool); safecall;
    function Get_OperatorIDSpecified: WordBool; safecall;
    procedure Set_OperatorIDSpecified(pRetVal: WordBool); safecall;
    function Get_ShiftNumberSpecified: WordBool; safecall;
    procedure Set_ShiftNumberSpecified(pRetVal: WordBool); safecall;
    function Get_TokenRequestedTypeSpecified: WordBool; safecall;
    procedure Set_TokenRequestedTypeSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerOrderReqSpecified: WordBool; safecall;
    procedure Set_CustomerOrderReqSpecified(pRetVal: WordBool); safecall;
    function Get_POISerialNumberSpecified: WordBool; safecall;
    procedure Set_POISerialNumberSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LoginRequestTypeClassName: WideString; safecall;
    function CustomerOrderReqLength: Integer; safecall;
    function CustomerOrderReqGetItem(index: Integer): WideString; safecall;
    function CustomerOrderReqSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function CustomerOrderReqAddItem(const value: WideString): WordBool; safecall;
    function CustomerOrderReqRemoveItem(index: Integer): WordBool; safecall;
    function CustomerOrderReqInsertItem(index: Integer; const value: WideString): Integer; safecall;
    property DateTime: WideString read Get_DateTime write Set_DateTime;
    property SaleSoftware: ISaleSoftwareType read Get_SaleSoftware write _Set_SaleSoftware;
    property SaleTerminalData: ISaleTerminalDataType read Get_SaleTerminalData write _Set_SaleTerminalData;
    property TrainingModeFlag: WordBool read Get_TrainingModeFlag write Set_TrainingModeFlag;
    property OperatorLanguage: WideString read Get_OperatorLanguage write Set_OperatorLanguage;
    property OperatorID: WideString read Get_OperatorID write Set_OperatorID;
    property ShiftNumber: WideString read Get_ShiftNumber write Set_ShiftNumber;
    property TokenRequestedType: WideString read Get_TokenRequestedType write Set_TokenRequestedType;
    property CustomerOrderReq: PSafeArray read Get_CustomerOrderReq write Set_CustomerOrderReq;
    property POISerialNumber: WideString read Get_POISerialNumber write Set_POISerialNumber;
    property DateTimeSpecified: WordBool read Get_DateTimeSpecified write Set_DateTimeSpecified;
    property SaleSoftwareSpecified: WordBool read Get_SaleSoftwareSpecified write Set_SaleSoftwareSpecified;
    property SaleTerminalDataSpecified: WordBool read Get_SaleTerminalDataSpecified write Set_SaleTerminalDataSpecified;
    property TrainingModeFlagDefaultValue: WordBool read Get_TrainingModeFlagDefaultValue;
    property TrainingModeFlagSpecified: WordBool read Get_TrainingModeFlagSpecified write Set_TrainingModeFlagSpecified;
    property OperatorLanguageSpecified: WordBool read Get_OperatorLanguageSpecified write Set_OperatorLanguageSpecified;
    property OperatorIDSpecified: WordBool read Get_OperatorIDSpecified write Set_OperatorIDSpecified;
    property ShiftNumberSpecified: WordBool read Get_ShiftNumberSpecified write Set_ShiftNumberSpecified;
    property TokenRequestedTypeSpecified: WordBool read Get_TokenRequestedTypeSpecified write Set_TokenRequestedTypeSpecified;
    property CustomerOrderReqSpecified: WordBool read Get_CustomerOrderReqSpecified write Set_CustomerOrderReqSpecified;
    property POISerialNumberSpecified: WordBool read Get_POISerialNumberSpecified write Set_POISerialNumberSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LoginRequestTypeClassName: WideString read Get_LoginRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILoginRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6C103E7C-CBAB-4ECF-BD7D-D3A3ED5CC617}
// *********************************************************************//
  ILoginRequestTypeDisp = dispinterface
    ['{6C103E7C-CBAB-4ECF-BD7D-D3A3ED5CC617}']
    property DateTime: WideString dispid 2;
    property SaleSoftware: ISaleSoftwareType dispid 3;
    property SaleTerminalData: ISaleTerminalDataType dispid 4;
    property TrainingModeFlag: WordBool dispid 5;
    property OperatorLanguage: WideString dispid 6;
    property OperatorID: WideString dispid 7;
    property ShiftNumber: WideString dispid 8;
    property TokenRequestedType: WideString dispid 9;
    property CustomerOrderReq: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 10;
    property POISerialNumber: WideString dispid 11;
    property DateTimeSpecified: WordBool dispid 12;
    property SaleSoftwareSpecified: WordBool dispid 13;
    property SaleTerminalDataSpecified: WordBool dispid 14;
    property TrainingModeFlagDefaultValue: WordBool readonly dispid 15;
    property TrainingModeFlagSpecified: WordBool dispid 16;
    property OperatorLanguageSpecified: WordBool dispid 17;
    property OperatorIDSpecified: WordBool dispid 18;
    property ShiftNumberSpecified: WordBool dispid 19;
    property TokenRequestedTypeSpecified: WordBool dispid 20;
    property CustomerOrderReqSpecified: WordBool dispid 21;
    property POISerialNumberSpecified: WordBool dispid 28;
    property ObjectHasBeenSet: WordBool readonly dispid 29;
    property LoginRequestTypeClassName: WideString readonly dispid 30;
    function CustomerOrderReqLength: Integer; dispid 22;
    function CustomerOrderReqGetItem(index: Integer): WideString; dispid 23;
    function CustomerOrderReqSetItem(index: Integer; const value: WideString): WordBool; dispid 24;
    function CustomerOrderReqAddItem(const value: WideString): WordBool; dispid 25;
    function CustomerOrderReqRemoveItem(index: Integer): WordBool; dispid 26;
    function CustomerOrderReqInsertItem(index: Integer; const value: WideString): Integer; dispid 27;
  end;

// *********************************************************************//
// Interface :   ISaleSoftwareType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4BD56095-E485-4DB0-A985-4FB160FC3415}
// *********************************************************************//
  ISaleSoftwareType = interface(IDispatch)
    ['{4BD56095-E485-4DB0-A985-4FB160FC3415}']
    function Get_ManufacturerID: WideString; safecall;
    procedure Set_ManufacturerID(const pRetVal: WideString); safecall;
    function Get_ApplicationName: WideString; safecall;
    procedure Set_ApplicationName(const pRetVal: WideString); safecall;
    function Get_SoftwareVersion: WideString; safecall;
    procedure Set_SoftwareVersion(const pRetVal: WideString); safecall;
    function Get_CertificationCode: WideString; safecall;
    procedure Set_CertificationCode(const pRetVal: WideString); safecall;
    function Get_ManufacturerIDSpecified: WordBool; safecall;
    procedure Set_ManufacturerIDSpecified(pRetVal: WordBool); safecall;
    function Get_ApplicationNameSpecified: WordBool; safecall;
    procedure Set_ApplicationNameSpecified(pRetVal: WordBool); safecall;
    function Get_SoftwareVersionSpecified: WordBool; safecall;
    procedure Set_SoftwareVersionSpecified(pRetVal: WordBool); safecall;
    function Get_CertificationCodeSpecified: WordBool; safecall;
    procedure Set_CertificationCodeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SaleSoftwareTypeClassName: WideString; safecall;
    property ManufacturerID: WideString read Get_ManufacturerID write Set_ManufacturerID;
    property ApplicationName: WideString read Get_ApplicationName write Set_ApplicationName;
    property SoftwareVersion: WideString read Get_SoftwareVersion write Set_SoftwareVersion;
    property CertificationCode: WideString read Get_CertificationCode write Set_CertificationCode;
    property ManufacturerIDSpecified: WordBool read Get_ManufacturerIDSpecified write Set_ManufacturerIDSpecified;
    property ApplicationNameSpecified: WordBool read Get_ApplicationNameSpecified write Set_ApplicationNameSpecified;
    property SoftwareVersionSpecified: WordBool read Get_SoftwareVersionSpecified write Set_SoftwareVersionSpecified;
    property CertificationCodeSpecified: WordBool read Get_CertificationCodeSpecified write Set_CertificationCodeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SaleSoftwareTypeClassName: WideString read Get_SaleSoftwareTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISaleSoftwareTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4BD56095-E485-4DB0-A985-4FB160FC3415}
// *********************************************************************//
  ISaleSoftwareTypeDisp = dispinterface
    ['{4BD56095-E485-4DB0-A985-4FB160FC3415}']
    property ManufacturerID: WideString dispid 1;
    property ApplicationName: WideString dispid 2;
    property SoftwareVersion: WideString dispid 3;
    property CertificationCode: WideString dispid 4;
    property ManufacturerIDSpecified: WordBool dispid 6;
    property ApplicationNameSpecified: WordBool dispid 7;
    property SoftwareVersionSpecified: WordBool dispid 8;
    property CertificationCodeSpecified: WordBool dispid 9;
    property ObjectHasBeenSet: WordBool readonly dispid 10;
    property SaleSoftwareTypeClassName: WideString readonly dispid 11;
  end;

// *********************************************************************//
// Interface :   ILoginResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {511E650D-E483-4CD8-82D1-20CE93A4E2E4}
// *********************************************************************//
  ILoginResponseType = interface(IDispatch)
    ['{511E650D-E483-4CD8-82D1-20CE93A4E2E4}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_POISystemData: IPOISystemDataType; safecall;
    procedure _Set_POISystemData(const pRetVal: IPOISystemDataType); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_POISystemDataSpecified: WordBool; safecall;
    procedure Set_POISystemDataSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LoginResponseTypeClassName: WideString; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property POISystemData: IPOISystemDataType read Get_POISystemData write _Set_POISystemData;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property POISystemDataSpecified: WordBool read Get_POISystemDataSpecified write Set_POISystemDataSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LoginResponseTypeClassName: WideString read Get_LoginResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILoginResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {511E650D-E483-4CD8-82D1-20CE93A4E2E4}
// *********************************************************************//
  ILoginResponseTypeDisp = dispinterface
    ['{511E650D-E483-4CD8-82D1-20CE93A4E2E4}']
    property Response: IResponseType dispid 1;
    property POISystemData: IPOISystemDataType dispid 2;
    property ResponseSpecified: WordBool dispid 4;
    property POISystemDataSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property LoginResponseTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IPOISystemDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D6226E98-1E51-492E-904A-4D6AF6CB305A}
// *********************************************************************//
  IPOISystemDataType = interface(IDispatch)
    ['{D6226E98-1E51-492E-904A-4D6AF6CB305A}']
    function Get_DateTime: WideString; safecall;
    procedure Set_DateTime(const pRetVal: WideString); safecall;
    function Get_POISoftware: IPOISoftwareType; safecall;
    procedure _Set_POISoftware(const pRetVal: IPOISoftwareType); safecall;
    function Get_POITerminalData: IPOITerminalDataType; safecall;
    procedure _Set_POITerminalData(const pRetVal: IPOITerminalDataType); safecall;
    function Get_POIStatus: IPOIStatusType; safecall;
    procedure _Set_POIStatus(const pRetVal: IPOIStatusType); safecall;
    function Get_DateTimeSpecified: WordBool; safecall;
    procedure Set_DateTimeSpecified(pRetVal: WordBool); safecall;
    function Get_POISoftwareSpecified: WordBool; safecall;
    procedure Set_POISoftwareSpecified(pRetVal: WordBool); safecall;
    function Get_POITerminalDataSpecified: WordBool; safecall;
    procedure Set_POITerminalDataSpecified(pRetVal: WordBool); safecall;
    function Get_POIStatusSpecified: WordBool; safecall;
    procedure Set_POIStatusSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_POISystemDataTypeClassName: WideString; safecall;
    property DateTime: WideString read Get_DateTime write Set_DateTime;
    property POISoftware: IPOISoftwareType read Get_POISoftware write _Set_POISoftware;
    property POITerminalData: IPOITerminalDataType read Get_POITerminalData write _Set_POITerminalData;
    property POIStatus: IPOIStatusType read Get_POIStatus write _Set_POIStatus;
    property DateTimeSpecified: WordBool read Get_DateTimeSpecified write Set_DateTimeSpecified;
    property POISoftwareSpecified: WordBool read Get_POISoftwareSpecified write Set_POISoftwareSpecified;
    property POITerminalDataSpecified: WordBool read Get_POITerminalDataSpecified write Set_POITerminalDataSpecified;
    property POIStatusSpecified: WordBool read Get_POIStatusSpecified write Set_POIStatusSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property POISystemDataTypeClassName: WideString read Get_POISystemDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPOISystemDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D6226E98-1E51-492E-904A-4D6AF6CB305A}
// *********************************************************************//
  IPOISystemDataTypeDisp = dispinterface
    ['{D6226E98-1E51-492E-904A-4D6AF6CB305A}']
    property DateTime: WideString dispid 1;
    property POISoftware: IPOISoftwareType dispid 2;
    property POITerminalData: IPOITerminalDataType dispid 3;
    property POIStatus: IPOIStatusType dispid 4;
    property DateTimeSpecified: WordBool dispid 6;
    property POISoftwareSpecified: WordBool dispid 7;
    property POITerminalDataSpecified: WordBool dispid 8;
    property POIStatusSpecified: WordBool dispid 9;
    property ObjectHasBeenSet: WordBool readonly dispid 10;
    property POISystemDataTypeClassName: WideString readonly dispid 11;
  end;

// *********************************************************************//
// Interface :   IPOISoftwareType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9968E83D-D609-4BD2-9904-3F5BF201EBFB}
// *********************************************************************//
  IPOISoftwareType = interface(IDispatch)
    ['{9968E83D-D609-4BD2-9904-3F5BF201EBFB}']
    function Get_ManufacturerID: WideString; safecall;
    procedure Set_ManufacturerID(const pRetVal: WideString); safecall;
    function Get_ApplicationName: WideString; safecall;
    procedure Set_ApplicationName(const pRetVal: WideString); safecall;
    function Get_SoftwareVersion: WideString; safecall;
    procedure Set_SoftwareVersion(const pRetVal: WideString); safecall;
    function Get_CertificationCode: WideString; safecall;
    procedure Set_CertificationCode(const pRetVal: WideString); safecall;
    function Get_ManufacturerIDSpecified: WordBool; safecall;
    procedure Set_ManufacturerIDSpecified(pRetVal: WordBool); safecall;
    function Get_ApplicationNameSpecified: WordBool; safecall;
    procedure Set_ApplicationNameSpecified(pRetVal: WordBool); safecall;
    function Get_SoftwareVersionSpecified: WordBool; safecall;
    procedure Set_SoftwareVersionSpecified(pRetVal: WordBool); safecall;
    function Get_CertificationCodeSpecified: WordBool; safecall;
    procedure Set_CertificationCodeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_POISoftwareTypeClassName: WideString; safecall;
    property ManufacturerID: WideString read Get_ManufacturerID write Set_ManufacturerID;
    property ApplicationName: WideString read Get_ApplicationName write Set_ApplicationName;
    property SoftwareVersion: WideString read Get_SoftwareVersion write Set_SoftwareVersion;
    property CertificationCode: WideString read Get_CertificationCode write Set_CertificationCode;
    property ManufacturerIDSpecified: WordBool read Get_ManufacturerIDSpecified write Set_ManufacturerIDSpecified;
    property ApplicationNameSpecified: WordBool read Get_ApplicationNameSpecified write Set_ApplicationNameSpecified;
    property SoftwareVersionSpecified: WordBool read Get_SoftwareVersionSpecified write Set_SoftwareVersionSpecified;
    property CertificationCodeSpecified: WordBool read Get_CertificationCodeSpecified write Set_CertificationCodeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property POISoftwareTypeClassName: WideString read Get_POISoftwareTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPOISoftwareTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9968E83D-D609-4BD2-9904-3F5BF201EBFB}
// *********************************************************************//
  IPOISoftwareTypeDisp = dispinterface
    ['{9968E83D-D609-4BD2-9904-3F5BF201EBFB}']
    property ManufacturerID: WideString dispid 1;
    property ApplicationName: WideString dispid 2;
    property SoftwareVersion: WideString dispid 3;
    property CertificationCode: WideString dispid 4;
    property ManufacturerIDSpecified: WordBool dispid 6;
    property ApplicationNameSpecified: WordBool dispid 7;
    property SoftwareVersionSpecified: WordBool dispid 8;
    property CertificationCodeSpecified: WordBool dispid 9;
    property ObjectHasBeenSet: WordBool readonly dispid 10;
    property POISoftwareTypeClassName: WideString readonly dispid 11;
  end;

// *********************************************************************//
// Interface :   IPOITerminalDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0E309C97-C517-4A5A-A6F3-6568CD60DEA0}
// *********************************************************************//
  IPOITerminalDataType = interface(IDispatch)
    ['{0E309C97-C517-4A5A-A6F3-6568CD60DEA0}']
    function Get_POICapabilities: WideString; safecall;
    procedure Set_POICapabilities(const pRetVal: WideString); safecall;
    function Get_POIProfile: IPOIProfileType; safecall;
    procedure _Set_POIProfile(const pRetVal: IPOIProfileType); safecall;
    function Get_TerminalEnvironment: WideString; safecall;
    procedure Set_TerminalEnvironment(const pRetVal: WideString); safecall;
    function Get_POISerialNumber: WideString; safecall;
    procedure Set_POISerialNumber(const pRetVal: WideString); safecall;
    function Get_POICapabilitiesSpecified: WordBool; safecall;
    procedure Set_POICapabilitiesSpecified(pRetVal: WordBool); safecall;
    function Get_POIProfileSpecified: WordBool; safecall;
    procedure Set_POIProfileSpecified(pRetVal: WordBool); safecall;
    function Get_TerminalEnvironmentSpecified: WordBool; safecall;
    procedure Set_TerminalEnvironmentSpecified(pRetVal: WordBool); safecall;
    function Get_POISerialNumberSpecified: WordBool; safecall;
    procedure Set_POISerialNumberSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_POITerminalDataTypeClassName: WideString; safecall;
    property POICapabilities: WideString read Get_POICapabilities write Set_POICapabilities;
    property POIProfile: IPOIProfileType read Get_POIProfile write _Set_POIProfile;
    property TerminalEnvironment: WideString read Get_TerminalEnvironment write Set_TerminalEnvironment;
    property POISerialNumber: WideString read Get_POISerialNumber write Set_POISerialNumber;
    property POICapabilitiesSpecified: WordBool read Get_POICapabilitiesSpecified write Set_POICapabilitiesSpecified;
    property POIProfileSpecified: WordBool read Get_POIProfileSpecified write Set_POIProfileSpecified;
    property TerminalEnvironmentSpecified: WordBool read Get_TerminalEnvironmentSpecified write Set_TerminalEnvironmentSpecified;
    property POISerialNumberSpecified: WordBool read Get_POISerialNumberSpecified write Set_POISerialNumberSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property POITerminalDataTypeClassName: WideString read Get_POITerminalDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPOITerminalDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0E309C97-C517-4A5A-A6F3-6568CD60DEA0}
// *********************************************************************//
  IPOITerminalDataTypeDisp = dispinterface
    ['{0E309C97-C517-4A5A-A6F3-6568CD60DEA0}']
    property POICapabilities: WideString dispid 1;
    property POIProfile: IPOIProfileType dispid 2;
    property TerminalEnvironment: WideString dispid 3;
    property POISerialNumber: WideString dispid 4;
    property POICapabilitiesSpecified: WordBool dispid 6;
    property POIProfileSpecified: WordBool dispid 7;
    property TerminalEnvironmentSpecified: WordBool dispid 8;
    property POISerialNumberSpecified: WordBool dispid 9;
    property ObjectHasBeenSet: WordBool readonly dispid 10;
    property POITerminalDataTypeClassName: WideString readonly dispid 11;
  end;

// *********************************************************************//
// Interface :   IPOIProfileType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7C6DB8C6-1F8C-4157-96FA-B3B22137D8DD}
// *********************************************************************//
  IPOIProfileType = interface(IDispatch)
    ['{7C6DB8C6-1F8C-4157-96FA-B3B22137D8DD}']
    function Get_ServiceProfiles: WideString; safecall;
    procedure Set_ServiceProfiles(const pRetVal: WideString); safecall;
    function Get_GenericProfile: WideString; safecall;
    procedure Set_GenericProfile(const pRetVal: WideString); safecall;
    function Get_ServiceProfilesSpecified: WordBool; safecall;
    procedure Set_ServiceProfilesSpecified(pRetVal: WordBool); safecall;
    function Get_GenericProfileDefaultValue: WideString; safecall;
    function Get_GenericProfileSpecified: WordBool; safecall;
    procedure Set_GenericProfileSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_POIProfileTypeClassName: WideString; safecall;
    property ServiceProfiles: WideString read Get_ServiceProfiles write Set_ServiceProfiles;
    property GenericProfile: WideString read Get_GenericProfile write Set_GenericProfile;
    property ServiceProfilesSpecified: WordBool read Get_ServiceProfilesSpecified write Set_ServiceProfilesSpecified;
    property GenericProfileDefaultValue: WideString read Get_GenericProfileDefaultValue;
    property GenericProfileSpecified: WordBool read Get_GenericProfileSpecified write Set_GenericProfileSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property POIProfileTypeClassName: WideString read Get_POIProfileTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPOIProfileTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7C6DB8C6-1F8C-4157-96FA-B3B22137D8DD}
// *********************************************************************//
  IPOIProfileTypeDisp = dispinterface
    ['{7C6DB8C6-1F8C-4157-96FA-B3B22137D8DD}']
    property ServiceProfiles: WideString dispid 2;
    property GenericProfile: WideString dispid 3;
    property ServiceProfilesSpecified: WordBool dispid 4;
    property GenericProfileDefaultValue: WideString readonly dispid 5;
    property GenericProfileSpecified: WordBool dispid 6;
    property ObjectHasBeenSet: WordBool readonly dispid 7;
    property POIProfileTypeClassName: WideString readonly dispid 8;
  end;

// *********************************************************************//
// Interface :   ILogoutRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C515784E-39AF-472C-B5D9-08D1653277AB}
// *********************************************************************//
  ILogoutRequestType = interface(IDispatch)
    ['{C515784E-39AF-472C-B5D9-08D1653277AB}']
    function Get_MaintenanceAllowed: WordBool; safecall;
    procedure Set_MaintenanceAllowed(pRetVal: WordBool); safecall;
    function Get_MaintenanceAllowedDefaultValue: WordBool; safecall;
    function Get_MaintenanceAllowedSpecified: WordBool; safecall;
    procedure Set_MaintenanceAllowedSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LogoutRequestTypeClassName: WideString; safecall;
    property MaintenanceAllowed: WordBool read Get_MaintenanceAllowed write Set_MaintenanceAllowed;
    property MaintenanceAllowedDefaultValue: WordBool read Get_MaintenanceAllowedDefaultValue;
    property MaintenanceAllowedSpecified: WordBool read Get_MaintenanceAllowedSpecified write Set_MaintenanceAllowedSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LogoutRequestTypeClassName: WideString read Get_LogoutRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILogoutRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C515784E-39AF-472C-B5D9-08D1653277AB}
// *********************************************************************//
  ILogoutRequestTypeDisp = dispinterface
    ['{C515784E-39AF-472C-B5D9-08D1653277AB}']
    property MaintenanceAllowed: WordBool dispid 2;
    property MaintenanceAllowedDefaultValue: WordBool readonly dispid 3;
    property MaintenanceAllowedSpecified: WordBool dispid 4;
    property ObjectHasBeenSet: WordBool readonly dispid 5;
    property LogoutRequestTypeClassName: WideString readonly dispid 6;
  end;

// *********************************************************************//
// Interface :   ILogoutResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {849AB9F4-43D8-4DB5-B0A7-915D380AB89C}
// *********************************************************************//
  ILogoutResponseType = interface(IDispatch)
    ['{849AB9F4-43D8-4DB5-B0A7-915D380AB89C}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LogoutResponseTypeClassName: WideString; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LogoutResponseTypeClassName: WideString read Get_LogoutResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILogoutResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {849AB9F4-43D8-4DB5-B0A7-915D380AB89C}
// *********************************************************************//
  ILogoutResponseTypeDisp = dispinterface
    ['{849AB9F4-43D8-4DB5-B0A7-915D380AB89C}']
    property Response: IResponseType dispid 1;
    property ResponseSpecified: WordBool dispid 3;
    property ObjectHasBeenSet: WordBool readonly dispid 4;
    property LogoutResponseTypeClassName: WideString readonly dispid 5;
  end;

// *********************************************************************//
// Interface :   ILoyaltyResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A9653AC2-1361-4132-8725-F1F6784FCA85}
// *********************************************************************//
  ILoyaltyResponseType = interface(IDispatch)
    ['{A9653AC2-1361-4132-8725-F1F6784FCA85}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_POIData: IPOIDataType; safecall;
    procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
    function Get_LoyaltyResult: PSafeArray; safecall;
    procedure Set_LoyaltyResult(pRetVal: PSafeArray); safecall;
    function Get_PaymentReceipt: PSafeArray; safecall;
    procedure Set_PaymentReceipt(pRetVal: PSafeArray); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_SaleDataSpecified: WordBool; safecall;
    procedure Set_SaleDataSpecified(pRetVal: WordBool); safecall;
    function Get_POIDataSpecified: WordBool; safecall;
    procedure Set_POIDataSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyResultSpecified: WordBool; safecall;
    procedure Set_LoyaltyResultSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentReceiptSpecified: WordBool; safecall;
    procedure Set_PaymentReceiptSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_LoyaltyResponseTypeClassName: WideString; safecall;
    function LoyaltyResultLength: Integer; safecall;
    function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; safecall;
    function LoyaltyResultSetItem(index: Integer; const value: ILoyaltyResultType): WordBool; safecall;
    function LoyaltyResultAddItem(const value: ILoyaltyResultType): WordBool; safecall;
    function LoyaltyResultRemoveItem(index: Integer): WordBool; safecall;
    function LoyaltyResultInsertItem(index: Integer; const value: ILoyaltyResultType): Integer; safecall;
    function PaymentReceiptLength: Integer; safecall;
    function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; safecall;
    function PaymentReceiptSetItem(index: Integer; const value: IPaymentReceiptType): WordBool; safecall;
    function PaymentReceiptAddItem(const value: IPaymentReceiptType): WordBool; safecall;
    function PaymentReceiptRemoveItem(index: Integer): WordBool; safecall;
    function PaymentReceiptInsertItem(index: Integer; const value: IPaymentReceiptType): Integer; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property POIData: IPOIDataType read Get_POIData write _Set_POIData;
    property LoyaltyResult: PSafeArray read Get_LoyaltyResult write Set_LoyaltyResult;
    property PaymentReceipt: PSafeArray read Get_PaymentReceipt write Set_PaymentReceipt;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property SaleDataSpecified: WordBool read Get_SaleDataSpecified write Set_SaleDataSpecified;
    property POIDataSpecified: WordBool read Get_POIDataSpecified write Set_POIDataSpecified;
    property LoyaltyResultSpecified: WordBool read Get_LoyaltyResultSpecified write Set_LoyaltyResultSpecified;
    property PaymentReceiptSpecified: WordBool read Get_PaymentReceiptSpecified write Set_PaymentReceiptSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property LoyaltyResponseTypeClassName: WideString read Get_LoyaltyResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A9653AC2-1361-4132-8725-F1F6784FCA85}
// *********************************************************************//
  ILoyaltyResponseTypeDisp = dispinterface
    ['{A9653AC2-1361-4132-8725-F1F6784FCA85}']
    property Response: IResponseType dispid 1;
    property SaleData: ISaleDataType dispid 2;
    property POIData: IPOIDataType dispid 3;
    property LoyaltyResult: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property PaymentReceipt: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property ResponseSpecified: WordBool dispid 7;
    property SaleDataSpecified: WordBool dispid 8;
    property POIDataSpecified: WordBool dispid 9;
    property LoyaltyResultSpecified: WordBool dispid 10;
    property PaymentReceiptSpecified: WordBool dispid 17;
    property ObjectHasBeenSet: WordBool readonly dispid 24;
    property LoyaltyResponseTypeClassName: WideString readonly dispid 25;
    function LoyaltyResultLength: Integer; dispid 11;
    function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; dispid 12;
    function LoyaltyResultSetItem(index: Integer; const value: ILoyaltyResultType): WordBool; dispid 13;
    function LoyaltyResultAddItem(const value: ILoyaltyResultType): WordBool; dispid 14;
    function LoyaltyResultRemoveItem(index: Integer): WordBool; dispid 15;
    function LoyaltyResultInsertItem(index: Integer; const value: ILoyaltyResultType): Integer; dispid 16;
    function PaymentReceiptLength: Integer; dispid 18;
    function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; dispid 19;
    function PaymentReceiptSetItem(index: Integer; const value: IPaymentReceiptType): WordBool; dispid 20;
    function PaymentReceiptAddItem(const value: IPaymentReceiptType): WordBool; dispid 21;
    function PaymentReceiptRemoveItem(index: Integer): WordBool; dispid 22;
    function PaymentReceiptInsertItem(index: Integer; const value: IPaymentReceiptType): Integer; dispid 23;
  end;

// *********************************************************************//
// Interface :   IPaymentReceiptType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {748651C3-36D4-4549-89F9-289F4A5E4A78}
// *********************************************************************//
  IPaymentReceiptType = interface(IDispatch)
    ['{748651C3-36D4-4549-89F9-289F4A5E4A78}']
    function Get_OutputContent: IOutputContentType; safecall;
    procedure _Set_OutputContent(const pRetVal: IOutputContentType); safecall;
    function Get_DocumentQualifier: WideString; safecall;
    procedure Set_DocumentQualifier(const pRetVal: WideString); safecall;
    function Get_IntegratedPrintFlag: WordBool; safecall;
    procedure Set_IntegratedPrintFlag(pRetVal: WordBool); safecall;
    function Get_RequiredSignatureFlag: WordBool; safecall;
    procedure Set_RequiredSignatureFlag(pRetVal: WordBool); safecall;
    function Get_OutputContentSpecified: WordBool; safecall;
    procedure Set_OutputContentSpecified(pRetVal: WordBool); safecall;
    function Get_DocumentQualifierSpecified: WordBool; safecall;
    procedure Set_DocumentQualifierSpecified(pRetVal: WordBool); safecall;
    function Get_IntegratedPrintFlagDefaultValue: WordBool; safecall;
    function Get_IntegratedPrintFlagSpecified: WordBool; safecall;
    procedure Set_IntegratedPrintFlagSpecified(pRetVal: WordBool); safecall;
    function Get_RequiredSignatureFlagDefaultValue: WordBool; safecall;
    function Get_RequiredSignatureFlagSpecified: WordBool; safecall;
    procedure Set_RequiredSignatureFlagSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PaymentReceiptTypeClassName: WideString; safecall;
    property OutputContent: IOutputContentType read Get_OutputContent write _Set_OutputContent;
    property DocumentQualifier: WideString read Get_DocumentQualifier write Set_DocumentQualifier;
    property IntegratedPrintFlag: WordBool read Get_IntegratedPrintFlag write Set_IntegratedPrintFlag;
    property RequiredSignatureFlag: WordBool read Get_RequiredSignatureFlag write Set_RequiredSignatureFlag;
    property OutputContentSpecified: WordBool read Get_OutputContentSpecified write Set_OutputContentSpecified;
    property DocumentQualifierSpecified: WordBool read Get_DocumentQualifierSpecified write Set_DocumentQualifierSpecified;
    property IntegratedPrintFlagDefaultValue: WordBool read Get_IntegratedPrintFlagDefaultValue;
    property IntegratedPrintFlagSpecified: WordBool read Get_IntegratedPrintFlagSpecified write Set_IntegratedPrintFlagSpecified;
    property RequiredSignatureFlagDefaultValue: WordBool read Get_RequiredSignatureFlagDefaultValue;
    property RequiredSignatureFlagSpecified: WordBool read Get_RequiredSignatureFlagSpecified write Set_RequiredSignatureFlagSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PaymentReceiptTypeClassName: WideString read Get_PaymentReceiptTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPaymentReceiptTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {748651C3-36D4-4549-89F9-289F4A5E4A78}
// *********************************************************************//
  IPaymentReceiptTypeDisp = dispinterface
    ['{748651C3-36D4-4549-89F9-289F4A5E4A78}']
    property OutputContent: IOutputContentType dispid 2;
    property DocumentQualifier: WideString dispid 3;
    property IntegratedPrintFlag: WordBool dispid 4;
    property RequiredSignatureFlag: WordBool dispid 5;
    property OutputContentSpecified: WordBool dispid 6;
    property DocumentQualifierSpecified: WordBool dispid 7;
    property IntegratedPrintFlagDefaultValue: WordBool readonly dispid 8;
    property IntegratedPrintFlagSpecified: WordBool dispid 9;
    property RequiredSignatureFlagDefaultValue: WordBool readonly dispid 10;
    property RequiredSignatureFlagSpecified: WordBool dispid 11;
    property ObjectHasBeenSet: WordBool readonly dispid 12;
    property PaymentReceiptTypeClassName: WideString readonly dispid 13;
  end;

// *********************************************************************//
// Interface :   IMessageHeaderType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {54DF973A-937C-4215-A6B2-D5D12C1E8437}
// *********************************************************************//
  IMessageHeaderType = interface(IDispatch)
    ['{54DF973A-937C-4215-A6B2-D5D12C1E8437}']
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_MessageClass: WideString; safecall;
    procedure Set_MessageClass(const pRetVal: WideString); safecall;
    function Get_MessageCategory: WideString; safecall;
    procedure Set_MessageCategory(const pRetVal: WideString); safecall;
    function Get_MessageType: WideString; safecall;
    procedure Set_MessageType(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ProtocolVersionSpecified: WordBool; safecall;
    procedure Set_ProtocolVersionSpecified(pRetVal: WordBool); safecall;
    function Get_MessageClassSpecified: WordBool; safecall;
    procedure Set_MessageClassSpecified(pRetVal: WordBool); safecall;
    function Get_MessageCategorySpecified: WordBool; safecall;
    procedure Set_MessageCategorySpecified(pRetVal: WordBool); safecall;
    function Get_MessageTypeSpecified: WordBool; safecall;
    procedure Set_MessageTypeSpecified(pRetVal: WordBool); safecall;
    function Get_ServiceIDSpecified: WordBool; safecall;
    procedure Set_ServiceIDSpecified(pRetVal: WordBool); safecall;
    function Get_DeviceIDSpecified: WordBool; safecall;
    procedure Set_DeviceIDSpecified(pRetVal: WordBool); safecall;
    function Get_SaleIDSpecified: WordBool; safecall;
    procedure Set_SaleIDSpecified(pRetVal: WordBool); safecall;
    function Get_POIIDSpecified: WordBool; safecall;
    procedure Set_POIIDSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_MessageHeaderTypeClassName: WideString; safecall;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property MessageClass: WideString read Get_MessageClass write Set_MessageClass;
    property MessageCategory: WideString read Get_MessageCategory write Set_MessageCategory;
    property MessageType: WideString read Get_MessageType write Set_MessageType;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ProtocolVersionSpecified: WordBool read Get_ProtocolVersionSpecified write Set_ProtocolVersionSpecified;
    property MessageClassSpecified: WordBool read Get_MessageClassSpecified write Set_MessageClassSpecified;
    property MessageCategorySpecified: WordBool read Get_MessageCategorySpecified write Set_MessageCategorySpecified;
    property MessageTypeSpecified: WordBool read Get_MessageTypeSpecified write Set_MessageTypeSpecified;
    property ServiceIDSpecified: WordBool read Get_ServiceIDSpecified write Set_ServiceIDSpecified;
    property DeviceIDSpecified: WordBool read Get_DeviceIDSpecified write Set_DeviceIDSpecified;
    property SaleIDSpecified: WordBool read Get_SaleIDSpecified write Set_SaleIDSpecified;
    property POIIDSpecified: WordBool read Get_POIIDSpecified write Set_POIIDSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property MessageHeaderTypeClassName: WideString read Get_MessageHeaderTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IMessageHeaderTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {54DF973A-937C-4215-A6B2-D5D12C1E8437}
// *********************************************************************//
  IMessageHeaderTypeDisp = dispinterface
    ['{54DF973A-937C-4215-A6B2-D5D12C1E8437}']
    property ProtocolVersion: WideString dispid 1;
    property MessageClass: WideString dispid 2;
    property MessageCategory: WideString dispid 3;
    property MessageType: WideString dispid 4;
    property ServiceID: WideString dispid 5;
    property DeviceID: WideString dispid 6;
    property SaleID: WideString dispid 7;
    property POIID: WideString dispid 8;
    property ProtocolVersionSpecified: WordBool dispid 10;
    property MessageClassSpecified: WordBool dispid 11;
    property MessageCategorySpecified: WordBool dispid 12;
    property MessageTypeSpecified: WordBool dispid 13;
    property ServiceIDSpecified: WordBool dispid 14;
    property DeviceIDSpecified: WordBool dispid 15;
    property SaleIDSpecified: WordBool dispid 16;
    property POIIDSpecified: WordBool dispid 17;
    property ObjectHasBeenSet: WordBool readonly dispid 18;
    property MessageHeaderTypeClassName: WideString readonly dispid 19;
  end;

// *********************************************************************//
// Interface :   IPaymentResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6E6C8F03-1795-40ED-9272-66215979B95D}
// *********************************************************************//
  IPaymentResponseType = interface(IDispatch)
    ['{6E6C8F03-1795-40ED-9272-66215979B95D}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_POIData: IPOIDataType; safecall;
    procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
    function Get_PaymentResult: IPaymentResultType; safecall;
    procedure _Set_PaymentResult(const pRetVal: IPaymentResultType); safecall;
    function Get_LoyaltyResult: PSafeArray; safecall;
    procedure Set_LoyaltyResult(pRetVal: PSafeArray); safecall;
    function Get_PaymentReceipt: PSafeArray; safecall;
    procedure Set_PaymentReceipt(pRetVal: PSafeArray); safecall;
    function Get_CustomerOrder: PSafeArray; safecall;
    procedure Set_CustomerOrder(pRetVal: PSafeArray); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_SaleDataSpecified: WordBool; safecall;
    procedure Set_SaleDataSpecified(pRetVal: WordBool); safecall;
    function Get_POIDataSpecified: WordBool; safecall;
    procedure Set_POIDataSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentResultSpecified: WordBool; safecall;
    procedure Set_PaymentResultSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyResultSpecified: WordBool; safecall;
    procedure Set_LoyaltyResultSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentReceiptSpecified: WordBool; safecall;
    procedure Set_PaymentReceiptSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerOrderSpecified: WordBool; safecall;
    procedure Set_CustomerOrderSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PaymentResponseTypeClassName: WideString; safecall;
    function LoyaltyResultLength: Integer; safecall;
    function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; safecall;
    function LoyaltyResultSetItem(index: Integer; const value: ILoyaltyResultType): WordBool; safecall;
    function LoyaltyResultAddItem(const value: ILoyaltyResultType): WordBool; safecall;
    function LoyaltyResultRemoveItem(index: Integer): WordBool; safecall;
    function LoyaltyResultInsertItem(index: Integer; const value: ILoyaltyResultType): Integer; safecall;
    function PaymentReceiptLength: Integer; safecall;
    function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; safecall;
    function PaymentReceiptSetItem(index: Integer; const value: IPaymentReceiptType): WordBool; safecall;
    function PaymentReceiptAddItem(const value: IPaymentReceiptType): WordBool; safecall;
    function PaymentReceiptRemoveItem(index: Integer): WordBool; safecall;
    function PaymentReceiptInsertItem(index: Integer; const value: IPaymentReceiptType): Integer; safecall;
    function CustomerOrderLength: Integer; safecall;
    function CustomerOrderGetItem(index: Integer): ICustomerOrderType; safecall;
    function CustomerOrderSetItem(index: Integer; const value: ICustomerOrderType): WordBool; safecall;
    function CustomerOrderAddItem(const value: ICustomerOrderType): WordBool; safecall;
    function CustomerOrderRemoveItem(index: Integer): WordBool; safecall;
    function CustomerOrderInsertItem(index: Integer; const value: ICustomerOrderType): Integer; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property POIData: IPOIDataType read Get_POIData write _Set_POIData;
    property PaymentResult: IPaymentResultType read Get_PaymentResult write _Set_PaymentResult;
    property LoyaltyResult: PSafeArray read Get_LoyaltyResult write Set_LoyaltyResult;
    property PaymentReceipt: PSafeArray read Get_PaymentReceipt write Set_PaymentReceipt;
    property CustomerOrder: PSafeArray read Get_CustomerOrder write Set_CustomerOrder;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property SaleDataSpecified: WordBool read Get_SaleDataSpecified write Set_SaleDataSpecified;
    property POIDataSpecified: WordBool read Get_POIDataSpecified write Set_POIDataSpecified;
    property PaymentResultSpecified: WordBool read Get_PaymentResultSpecified write Set_PaymentResultSpecified;
    property LoyaltyResultSpecified: WordBool read Get_LoyaltyResultSpecified write Set_LoyaltyResultSpecified;
    property PaymentReceiptSpecified: WordBool read Get_PaymentReceiptSpecified write Set_PaymentReceiptSpecified;
    property CustomerOrderSpecified: WordBool read Get_CustomerOrderSpecified write Set_CustomerOrderSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PaymentResponseTypeClassName: WideString read Get_PaymentResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPaymentResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6E6C8F03-1795-40ED-9272-66215979B95D}
// *********************************************************************//
  IPaymentResponseTypeDisp = dispinterface
    ['{6E6C8F03-1795-40ED-9272-66215979B95D}']
    property Response: IResponseType dispid 1;
    property SaleData: ISaleDataType dispid 2;
    property POIData: IPOIDataType dispid 3;
    property PaymentResult: IPaymentResultType dispid 4;
    property LoyaltyResult: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property PaymentReceipt: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 6;
    property CustomerOrder: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 7;
    property ResponseSpecified: WordBool dispid 9;
    property SaleDataSpecified: WordBool dispid 10;
    property POIDataSpecified: WordBool dispid 11;
    property PaymentResultSpecified: WordBool dispid 12;
    property LoyaltyResultSpecified: WordBool dispid 13;
    property PaymentReceiptSpecified: WordBool dispid 20;
    property CustomerOrderSpecified: WordBool dispid 27;
    property ObjectHasBeenSet: WordBool readonly dispid 34;
    property PaymentResponseTypeClassName: WideString readonly dispid 35;
    function LoyaltyResultLength: Integer; dispid 14;
    function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; dispid 15;
    function LoyaltyResultSetItem(index: Integer; const value: ILoyaltyResultType): WordBool; dispid 16;
    function LoyaltyResultAddItem(const value: ILoyaltyResultType): WordBool; dispid 17;
    function LoyaltyResultRemoveItem(index: Integer): WordBool; dispid 18;
    function LoyaltyResultInsertItem(index: Integer; const value: ILoyaltyResultType): Integer; dispid 19;
    function PaymentReceiptLength: Integer; dispid 21;
    function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; dispid 22;
    function PaymentReceiptSetItem(index: Integer; const value: IPaymentReceiptType): WordBool; dispid 23;
    function PaymentReceiptAddItem(const value: IPaymentReceiptType): WordBool; dispid 24;
    function PaymentReceiptRemoveItem(index: Integer): WordBool; dispid 25;
    function PaymentReceiptInsertItem(index: Integer; const value: IPaymentReceiptType): Integer; dispid 26;
    function CustomerOrderLength: Integer; dispid 28;
    function CustomerOrderGetItem(index: Integer): ICustomerOrderType; dispid 29;
    function CustomerOrderSetItem(index: Integer; const value: ICustomerOrderType): WordBool; dispid 30;
    function CustomerOrderAddItem(const value: ICustomerOrderType): WordBool; dispid 31;
    function CustomerOrderRemoveItem(index: Integer): WordBool; dispid 32;
    function CustomerOrderInsertItem(index: Integer; const value: ICustomerOrderType): Integer; dispid 33;
  end;

// *********************************************************************//
// Interface :   IPINRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {91C77CE3-2021-45AA-AF40-FB2AC5E74082}
// *********************************************************************//
  IPINRequestType = interface(IDispatch)
    ['{91C77CE3-2021-45AA-AF40-FB2AC5E74082}']
    function Get_CardholderPIN: ICardholderPINType; safecall;
    procedure _Set_CardholderPIN(const pRetVal: ICardholderPINType); safecall;
    function Get_PINRequestType1: WideString; safecall;
    procedure Set_PINRequestType1(const pRetVal: WideString); safecall;
    function Get_PINVerifMethod: WideString; safecall;
    procedure Set_PINVerifMethod(const pRetVal: WideString); safecall;
    function Get_AdditionalInput: WideString; safecall;
    procedure Set_AdditionalInput(const pRetVal: WideString); safecall;
    function Get_PINEncAlgorithm: WideString; safecall;
    procedure Set_PINEncAlgorithm(const pRetVal: WideString); safecall;
    function Get_PINFormat: WideString; safecall;
    procedure Set_PINFormat(const pRetVal: WideString); safecall;
    function Get_KeyReference: WideString; safecall;
    procedure Set_KeyReference(const pRetVal: WideString); safecall;
    function Get_MaxWaitingTime: Integer; safecall;
    procedure Set_MaxWaitingTime(pRetVal: Integer); safecall;
    function Get_CardholderPINSpecified: WordBool; safecall;
    procedure Set_CardholderPINSpecified(pRetVal: WordBool); safecall;
    function Get_PINRequestType1Specified: WordBool; safecall;
    procedure Set_PINRequestType1Specified(pRetVal: WordBool); safecall;
    function Get_PINVerifMethodSpecified: WordBool; safecall;
    procedure Set_PINVerifMethodSpecified(pRetVal: WordBool); safecall;
    function Get_AdditionalInputSpecified: WordBool; safecall;
    procedure Set_AdditionalInputSpecified(pRetVal: WordBool); safecall;
    function Get_PINEncAlgorithmSpecified: WordBool; safecall;
    procedure Set_PINEncAlgorithmSpecified(pRetVal: WordBool); safecall;
    function Get_PINFormatSpecified: WordBool; safecall;
    procedure Set_PINFormatSpecified(pRetVal: WordBool); safecall;
    function Get_KeyReferenceSpecified: WordBool; safecall;
    procedure Set_KeyReferenceSpecified(pRetVal: WordBool); safecall;
    function Get_MaxWaitingTimeSpecified: WordBool; safecall;
    procedure Set_MaxWaitingTimeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PINRequestTypeClassName: WideString; safecall;
    property CardholderPIN: ICardholderPINType read Get_CardholderPIN write _Set_CardholderPIN;
    property PINRequestType1: WideString read Get_PINRequestType1 write Set_PINRequestType1;
    property PINVerifMethod: WideString read Get_PINVerifMethod write Set_PINVerifMethod;
    property AdditionalInput: WideString read Get_AdditionalInput write Set_AdditionalInput;
    property PINEncAlgorithm: WideString read Get_PINEncAlgorithm write Set_PINEncAlgorithm;
    property PINFormat: WideString read Get_PINFormat write Set_PINFormat;
    property KeyReference: WideString read Get_KeyReference write Set_KeyReference;
    property MaxWaitingTime: Integer read Get_MaxWaitingTime write Set_MaxWaitingTime;
    property CardholderPINSpecified: WordBool read Get_CardholderPINSpecified write Set_CardholderPINSpecified;
    property PINRequestType1Specified: WordBool read Get_PINRequestType1Specified write Set_PINRequestType1Specified;
    property PINVerifMethodSpecified: WordBool read Get_PINVerifMethodSpecified write Set_PINVerifMethodSpecified;
    property AdditionalInputSpecified: WordBool read Get_AdditionalInputSpecified write Set_AdditionalInputSpecified;
    property PINEncAlgorithmSpecified: WordBool read Get_PINEncAlgorithmSpecified write Set_PINEncAlgorithmSpecified;
    property PINFormatSpecified: WordBool read Get_PINFormatSpecified write Set_PINFormatSpecified;
    property KeyReferenceSpecified: WordBool read Get_KeyReferenceSpecified write Set_KeyReferenceSpecified;
    property MaxWaitingTimeSpecified: WordBool read Get_MaxWaitingTimeSpecified write Set_MaxWaitingTimeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PINRequestTypeClassName: WideString read Get_PINRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPINRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {91C77CE3-2021-45AA-AF40-FB2AC5E74082}
// *********************************************************************//
  IPINRequestTypeDisp = dispinterface
    ['{91C77CE3-2021-45AA-AF40-FB2AC5E74082}']
    property CardholderPIN: ICardholderPINType dispid 1;
    property PINRequestType1: WideString dispid 2;
    property PINVerifMethod: WideString dispid 3;
    property AdditionalInput: WideString dispid 4;
    property PINEncAlgorithm: WideString dispid 5;
    property PINFormat: WideString dispid 6;
    property KeyReference: WideString dispid 7;
    property MaxWaitingTime: Integer dispid 8;
    property CardholderPINSpecified: WordBool dispid 10;
    property PINRequestType1Specified: WordBool dispid 11;
    property PINVerifMethodSpecified: WordBool dispid 12;
    property AdditionalInputSpecified: WordBool dispid 13;
    property PINEncAlgorithmSpecified: WordBool dispid 14;
    property PINFormatSpecified: WordBool dispid 15;
    property KeyReferenceSpecified: WordBool dispid 16;
    property MaxWaitingTimeSpecified: WordBool dispid 17;
    property ObjectHasBeenSet: WordBool readonly dispid 18;
    property PINRequestTypeClassName: WideString readonly dispid 19;
  end;

// *********************************************************************//
// Interface :   IPINResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2D042C76-B917-4CB4-A49A-75BCF03493BA}
// *********************************************************************//
  IPINResponseType = interface(IDispatch)
    ['{2D042C76-B917-4CB4-A49A-75BCF03493BA}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_CardholderPIN: ICardholderPINType; safecall;
    procedure _Set_CardholderPIN(const pRetVal: ICardholderPINType); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_CardholderPINSpecified: WordBool; safecall;
    procedure Set_CardholderPINSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PINResponseTypeClassName: WideString; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property CardholderPIN: ICardholderPINType read Get_CardholderPIN write _Set_CardholderPIN;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property CardholderPINSpecified: WordBool read Get_CardholderPINSpecified write Set_CardholderPINSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PINResponseTypeClassName: WideString read Get_PINResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPINResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2D042C76-B917-4CB4-A49A-75BCF03493BA}
// *********************************************************************//
  IPINResponseTypeDisp = dispinterface
    ['{2D042C76-B917-4CB4-A49A-75BCF03493BA}']
    property Response: IResponseType dispid 1;
    property CardholderPIN: ICardholderPINType dispid 2;
    property ResponseSpecified: WordBool dispid 4;
    property CardholderPINSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property PINResponseTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IPrintOutputType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CD1A7CDC-2E94-4163-BBDE-184D575214C9}
// *********************************************************************//
  IPrintOutputType = interface(IDispatch)
    ['{CD1A7CDC-2E94-4163-BBDE-184D575214C9}']
    function Get_OutputContent: IOutputContentType; safecall;
    procedure _Set_OutputContent(const pRetVal: IOutputContentType); safecall;
    function Get_OutputSignature: PSafeArray; safecall;
    procedure Set_OutputSignature(pRetVal: PSafeArray); safecall;
    function Get_DocumentQualifier: WideString; safecall;
    procedure Set_DocumentQualifier(const pRetVal: WideString); safecall;
    function Get_ResponseMode: WideString; safecall;
    procedure Set_ResponseMode(const pRetVal: WideString); safecall;
    function Get_IntegratedPrintFlag: WordBool; safecall;
    procedure Set_IntegratedPrintFlag(pRetVal: WordBool); safecall;
    function Get_RequiredSignatureFlag: WordBool; safecall;
    procedure Set_RequiredSignatureFlag(pRetVal: WordBool); safecall;
    function Get_OutputContentSpecified: WordBool; safecall;
    procedure Set_OutputContentSpecified(pRetVal: WordBool); safecall;
    function Get_OutputSignatureSpecified: WordBool; safecall;
    procedure Set_OutputSignatureSpecified(pRetVal: WordBool); safecall;
    function Get_DocumentQualifierSpecified: WordBool; safecall;
    procedure Set_DocumentQualifierSpecified(pRetVal: WordBool); safecall;
    function Get_ResponseModeSpecified: WordBool; safecall;
    procedure Set_ResponseModeSpecified(pRetVal: WordBool); safecall;
    function Get_IntegratedPrintFlagDefaultValue: WordBool; safecall;
    function Get_IntegratedPrintFlagSpecified: WordBool; safecall;
    procedure Set_IntegratedPrintFlagSpecified(pRetVal: WordBool); safecall;
    function Get_RequiredSignatureFlagDefaultValue: WordBool; safecall;
    function Get_RequiredSignatureFlagSpecified: WordBool; safecall;
    procedure Set_RequiredSignatureFlagSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PrintOutputTypeClassName: WideString; safecall;
    function OutputSignatureLength: Integer; safecall;
    function OutputSignatureGetItem(index: Integer): Byte; safecall;
    function OutputSignatureSetItem(index: Integer; value: Byte): WordBool; safecall;
    function OutputSignatureAddItem(value: Byte): WordBool; safecall;
    function OutputSignatureRemoveItem(index: Integer): WordBool; safecall;
    function OutputSignatureInsertItem(index: Integer; value: Byte): Integer; safecall;
    property OutputContent: IOutputContentType read Get_OutputContent write _Set_OutputContent;
    property OutputSignature: PSafeArray read Get_OutputSignature write Set_OutputSignature;
    property DocumentQualifier: WideString read Get_DocumentQualifier write Set_DocumentQualifier;
    property ResponseMode: WideString read Get_ResponseMode write Set_ResponseMode;
    property IntegratedPrintFlag: WordBool read Get_IntegratedPrintFlag write Set_IntegratedPrintFlag;
    property RequiredSignatureFlag: WordBool read Get_RequiredSignatureFlag write Set_RequiredSignatureFlag;
    property OutputContentSpecified: WordBool read Get_OutputContentSpecified write Set_OutputContentSpecified;
    property OutputSignatureSpecified: WordBool read Get_OutputSignatureSpecified write Set_OutputSignatureSpecified;
    property DocumentQualifierSpecified: WordBool read Get_DocumentQualifierSpecified write Set_DocumentQualifierSpecified;
    property ResponseModeSpecified: WordBool read Get_ResponseModeSpecified write Set_ResponseModeSpecified;
    property IntegratedPrintFlagDefaultValue: WordBool read Get_IntegratedPrintFlagDefaultValue;
    property IntegratedPrintFlagSpecified: WordBool read Get_IntegratedPrintFlagSpecified write Set_IntegratedPrintFlagSpecified;
    property RequiredSignatureFlagDefaultValue: WordBool read Get_RequiredSignatureFlagDefaultValue;
    property RequiredSignatureFlagSpecified: WordBool read Get_RequiredSignatureFlagSpecified write Set_RequiredSignatureFlagSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PrintOutputTypeClassName: WideString read Get_PrintOutputTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPrintOutputTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CD1A7CDC-2E94-4163-BBDE-184D575214C9}
// *********************************************************************//
  IPrintOutputTypeDisp = dispinterface
    ['{CD1A7CDC-2E94-4163-BBDE-184D575214C9}']
    property OutputContent: IOutputContentType dispid 2;
    property OutputSignature: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property DocumentQualifier: WideString dispid 4;
    property ResponseMode: WideString dispid 5;
    property IntegratedPrintFlag: WordBool dispid 6;
    property RequiredSignatureFlag: WordBool dispid 7;
    property OutputContentSpecified: WordBool dispid 8;
    property OutputSignatureSpecified: WordBool dispid 9;
    property DocumentQualifierSpecified: WordBool dispid 16;
    property ResponseModeSpecified: WordBool dispid 17;
    property IntegratedPrintFlagDefaultValue: WordBool readonly dispid 18;
    property IntegratedPrintFlagSpecified: WordBool dispid 19;
    property RequiredSignatureFlagDefaultValue: WordBool readonly dispid 20;
    property RequiredSignatureFlagSpecified: WordBool dispid 21;
    property ObjectHasBeenSet: WordBool readonly dispid 22;
    property PrintOutputTypeClassName: WideString readonly dispid 23;
    function OutputSignatureLength: Integer; dispid 10;
    function OutputSignatureGetItem(index: Integer): Byte; dispid 11;
    function OutputSignatureSetItem(index: Integer; value: Byte): WordBool; dispid 12;
    function OutputSignatureAddItem(value: Byte): WordBool; dispid 13;
    function OutputSignatureRemoveItem(index: Integer): WordBool; dispid 14;
    function OutputSignatureInsertItem(index: Integer; value: Byte): Integer; dispid 15;
  end;

// *********************************************************************//
// Interface :   IPrintRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {43C3875C-C57B-4111-955B-728C48157233}
// *********************************************************************//
  IPrintRequestType = interface(IDispatch)
    ['{43C3875C-C57B-4111-955B-728C48157233}']
    function Get_PrintOutput: IPrintOutputType; safecall;
    procedure _Set_PrintOutput(const pRetVal: IPrintOutputType); safecall;
    function Get_PrintOutputSpecified: WordBool; safecall;
    procedure Set_PrintOutputSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PrintRequestTypeClassName: WideString; safecall;
    property PrintOutput: IPrintOutputType read Get_PrintOutput write _Set_PrintOutput;
    property PrintOutputSpecified: WordBool read Get_PrintOutputSpecified write Set_PrintOutputSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PrintRequestTypeClassName: WideString read Get_PrintRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPrintRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {43C3875C-C57B-4111-955B-728C48157233}
// *********************************************************************//
  IPrintRequestTypeDisp = dispinterface
    ['{43C3875C-C57B-4111-955B-728C48157233}']
    property PrintOutput: IPrintOutputType dispid 1;
    property PrintOutputSpecified: WordBool dispid 3;
    property ObjectHasBeenSet: WordBool readonly dispid 4;
    property PrintRequestTypeClassName: WideString readonly dispid 5;
  end;

// *********************************************************************//
// Interface :   IPrintResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {72BD5626-CCB3-46E9-96D6-B6BFA68B5368}
// *********************************************************************//
  IPrintResponseType = interface(IDispatch)
    ['{72BD5626-CCB3-46E9-96D6-B6BFA68B5368}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_DocumentQualifier: WideString; safecall;
    procedure Set_DocumentQualifier(const pRetVal: WideString); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_DocumentQualifierSpecified: WordBool; safecall;
    procedure Set_DocumentQualifierSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_PrintResponseTypeClassName: WideString; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property DocumentQualifier: WideString read Get_DocumentQualifier write Set_DocumentQualifier;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property DocumentQualifierSpecified: WordBool read Get_DocumentQualifierSpecified write Set_DocumentQualifierSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property PrintResponseTypeClassName: WideString read Get_PrintResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IPrintResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {72BD5626-CCB3-46E9-96D6-B6BFA68B5368}
// *********************************************************************//
  IPrintResponseTypeDisp = dispinterface
    ['{72BD5626-CCB3-46E9-96D6-B6BFA68B5368}']
    property Response: IResponseType dispid 1;
    property DocumentQualifier: WideString dispid 2;
    property ResponseSpecified: WordBool dispid 4;
    property DocumentQualifierSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property PrintResponseTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IReconciliationRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7B016B80-F6C8-4997-8843-D1F23955BC46}
// *********************************************************************//
  IReconciliationRequestType = interface(IDispatch)
    ['{7B016B80-F6C8-4997-8843-D1F23955BC46}']
    function Get_AcquirerID: PSafeArray; safecall;
    procedure Set_AcquirerID(pRetVal: PSafeArray); safecall;
    function Get_ReconciliationType: WideString; safecall;
    procedure Set_ReconciliationType(const pRetVal: WideString); safecall;
    function Get_POIReconciliationID: WideString; safecall;
    procedure Set_POIReconciliationID(const pRetVal: WideString); safecall;
    function Get_AcquirerIDSpecified: WordBool; safecall;
    procedure Set_AcquirerIDSpecified(pRetVal: WordBool); safecall;
    function Get_ReconciliationTypeSpecified: WordBool; safecall;
    procedure Set_ReconciliationTypeSpecified(pRetVal: WordBool); safecall;
    function Get_POIReconciliationIDSpecified: WordBool; safecall;
    procedure Set_POIReconciliationIDSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_ReconciliationRequestTypeClassName: WideString; safecall;
    function AcquirerIDLength: Integer; safecall;
    function AcquirerIDGetItem(index: Integer): WideString; safecall;
    function AcquirerIDSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function AcquirerIDAddItem(const value: WideString): WordBool; safecall;
    function AcquirerIDRemoveItem(index: Integer): WordBool; safecall;
    function AcquirerIDInsertItem(index: Integer; const value: WideString): Integer; safecall;
    property AcquirerID: PSafeArray read Get_AcquirerID write Set_AcquirerID;
    property ReconciliationType: WideString read Get_ReconciliationType write Set_ReconciliationType;
    property POIReconciliationID: WideString read Get_POIReconciliationID write Set_POIReconciliationID;
    property AcquirerIDSpecified: WordBool read Get_AcquirerIDSpecified write Set_AcquirerIDSpecified;
    property ReconciliationTypeSpecified: WordBool read Get_ReconciliationTypeSpecified write Set_ReconciliationTypeSpecified;
    property POIReconciliationIDSpecified: WordBool read Get_POIReconciliationIDSpecified write Set_POIReconciliationIDSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property ReconciliationRequestTypeClassName: WideString read Get_ReconciliationRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IReconciliationRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7B016B80-F6C8-4997-8843-D1F23955BC46}
// *********************************************************************//
  IReconciliationRequestTypeDisp = dispinterface
    ['{7B016B80-F6C8-4997-8843-D1F23955BC46}']
    property AcquirerID: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property ReconciliationType: WideString dispid 2;
    property POIReconciliationID: WideString dispid 3;
    property AcquirerIDSpecified: WordBool dispid 5;
    property ReconciliationTypeSpecified: WordBool dispid 12;
    property POIReconciliationIDSpecified: WordBool dispid 13;
    property ObjectHasBeenSet: WordBool readonly dispid 14;
    property ReconciliationRequestTypeClassName: WideString readonly dispid 15;
    function AcquirerIDLength: Integer; dispid 6;
    function AcquirerIDGetItem(index: Integer): WideString; dispid 7;
    function AcquirerIDSetItem(index: Integer; const value: WideString): WordBool; dispid 8;
    function AcquirerIDAddItem(const value: WideString): WordBool; dispid 9;
    function AcquirerIDRemoveItem(index: Integer): WordBool; dispid 10;
    function AcquirerIDInsertItem(index: Integer; const value: WideString): Integer; dispid 11;
  end;

// *********************************************************************//
// Interface :   IReconciliationResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C10C603C-DEED-4B39-86E9-2229287E3FD2}
// *********************************************************************//
  IReconciliationResponseType = interface(IDispatch)
    ['{C10C603C-DEED-4B39-86E9-2229287E3FD2}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_TransactionTotals: PSafeArray; safecall;
    procedure Set_TransactionTotals(pRetVal: PSafeArray); safecall;
    function Get_ReconciliationType: WideString; safecall;
    procedure Set_ReconciliationType(const pRetVal: WideString); safecall;
    function Get_POIReconciliationID: WideString; safecall;
    procedure Set_POIReconciliationID(const pRetVal: WideString); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_TransactionTotalsSpecified: WordBool; safecall;
    procedure Set_TransactionTotalsSpecified(pRetVal: WordBool); safecall;
    function Get_ReconciliationTypeSpecified: WordBool; safecall;
    procedure Set_ReconciliationTypeSpecified(pRetVal: WordBool); safecall;
    function Get_POIReconciliationIDSpecified: WordBool; safecall;
    procedure Set_POIReconciliationIDSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_ReconciliationResponseTypeClassName: WideString; safecall;
    function TransactionTotalsLength: Integer; safecall;
    function TransactionTotalsGetItem(index: Integer): ITransactionTotalsType; safecall;
    function TransactionTotalsSetItem(index: Integer; const value: ITransactionTotalsType): WordBool; safecall;
    function TransactionTotalsAddItem(const value: ITransactionTotalsType): WordBool; safecall;
    function TransactionTotalsRemoveItem(index: Integer): WordBool; safecall;
    function TransactionTotalsInsertItem(index: Integer; const value: ITransactionTotalsType): Integer; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property TransactionTotals: PSafeArray read Get_TransactionTotals write Set_TransactionTotals;
    property ReconciliationType: WideString read Get_ReconciliationType write Set_ReconciliationType;
    property POIReconciliationID: WideString read Get_POIReconciliationID write Set_POIReconciliationID;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property TransactionTotalsSpecified: WordBool read Get_TransactionTotalsSpecified write Set_TransactionTotalsSpecified;
    property ReconciliationTypeSpecified: WordBool read Get_ReconciliationTypeSpecified write Set_ReconciliationTypeSpecified;
    property POIReconciliationIDSpecified: WordBool read Get_POIReconciliationIDSpecified write Set_POIReconciliationIDSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property ReconciliationResponseTypeClassName: WideString read Get_ReconciliationResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IReconciliationResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C10C603C-DEED-4B39-86E9-2229287E3FD2}
// *********************************************************************//
  IReconciliationResponseTypeDisp = dispinterface
    ['{C10C603C-DEED-4B39-86E9-2229287E3FD2}']
    property Response: IResponseType dispid 1;
    property TransactionTotals: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property ReconciliationType: WideString dispid 3;
    property POIReconciliationID: WideString dispid 4;
    property ResponseSpecified: WordBool dispid 6;
    property TransactionTotalsSpecified: WordBool dispid 7;
    property ReconciliationTypeSpecified: WordBool dispid 14;
    property POIReconciliationIDSpecified: WordBool dispid 15;
    property ObjectHasBeenSet: WordBool readonly dispid 16;
    property ReconciliationResponseTypeClassName: WideString readonly dispid 17;
    function TransactionTotalsLength: Integer; dispid 8;
    function TransactionTotalsGetItem(index: Integer): ITransactionTotalsType; dispid 9;
    function TransactionTotalsSetItem(index: Integer; const value: ITransactionTotalsType): WordBool; dispid 10;
    function TransactionTotalsAddItem(const value: ITransactionTotalsType): WordBool; dispid 11;
    function TransactionTotalsRemoveItem(index: Integer): WordBool; dispid 12;
    function TransactionTotalsInsertItem(index: Integer; const value: ITransactionTotalsType): Integer; dispid 13;
  end;

// *********************************************************************//
// Interface :   IRepeatedMessageResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {10E09274-9BBB-4EB6-B76C-267DCD654668}
// *********************************************************************//
  IRepeatedMessageResponseType = interface(IDispatch)
    ['{10E09274-9BBB-4EB6-B76C-267DCD654668}']
    function Get_MessageHeader: IMessageHeaderType; safecall;
    procedure _Set_MessageHeader(const pRetVal: IMessageHeaderType); safecall;
    function Get_Item: OleVariant; safecall;
    procedure _Set_Item(pRetVal: OleVariant); safecall;
    function Get_MessageHeaderSpecified: WordBool; safecall;
    procedure Set_MessageHeaderSpecified(pRetVal: WordBool); safecall;
    function Get_ItemSpecified: WordBool; safecall;
    procedure Set_ItemSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_RepeatedMessageResponseTypeClassName: WideString; safecall;
    property MessageHeader: IMessageHeaderType read Get_MessageHeader write _Set_MessageHeader;
    property Item: OleVariant read Get_Item write _Set_Item;
    property MessageHeaderSpecified: WordBool read Get_MessageHeaderSpecified write Set_MessageHeaderSpecified;
    property ItemSpecified: WordBool read Get_ItemSpecified write Set_ItemSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property RepeatedMessageResponseTypeClassName: WideString read Get_RepeatedMessageResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IRepeatedMessageResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {10E09274-9BBB-4EB6-B76C-267DCD654668}
// *********************************************************************//
  IRepeatedMessageResponseTypeDisp = dispinterface
    ['{10E09274-9BBB-4EB6-B76C-267DCD654668}']
    property MessageHeader: IMessageHeaderType dispid 1;
    property Item: OleVariant dispid 2;
    property MessageHeaderSpecified: WordBool dispid 4;
    property ItemSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property RepeatedMessageResponseTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IReversalResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6030420F-0FB4-4E08-81AB-CB51E516D81E}
// *********************************************************************//
  IReversalResponseType = interface(IDispatch)
    ['{6030420F-0FB4-4E08-81AB-CB51E516D81E}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_POIData: IPOIDataType; safecall;
    procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
    function Get_OriginalPOITransaction: IOriginalPOITransactionType; safecall;
    procedure _Set_OriginalPOITransaction(const pRetVal: IOriginalPOITransactionType); safecall;
    function Get_PaymentReceipt: PSafeArray; safecall;
    procedure Set_PaymentReceipt(pRetVal: PSafeArray); safecall;
    function Get_ReversedAmount: Double; safecall;
    procedure Set_ReversedAmount(pRetVal: Double); safecall;
    function Get_ReversedAmountSpecified: WordBool; safecall;
    procedure Set_ReversedAmountSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerOrderID: WideString; safecall;
    procedure Set_CustomerOrderID(const pRetVal: WideString); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_POIDataSpecified: WordBool; safecall;
    procedure Set_POIDataSpecified(pRetVal: WordBool); safecall;
    function Get_OriginalPOITransactionSpecified: WordBool; safecall;
    procedure Set_OriginalPOITransactionSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentReceiptSpecified: WordBool; safecall;
    procedure Set_PaymentReceiptSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerOrderIDSpecified: WordBool; safecall;
    procedure Set_CustomerOrderIDSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_ReversalResponseTypeClassName: WideString; safecall;
    function PaymentReceiptLength: Integer; safecall;
    function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; safecall;
    function PaymentReceiptSetItem(index: Integer; const value: IPaymentReceiptType): WordBool; safecall;
    function PaymentReceiptAddItem(const value: IPaymentReceiptType): WordBool; safecall;
    function PaymentReceiptRemoveItem(index: Integer): WordBool; safecall;
    function PaymentReceiptInsertItem(index: Integer; const value: IPaymentReceiptType): Integer; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property POIData: IPOIDataType read Get_POIData write _Set_POIData;
    property OriginalPOITransaction: IOriginalPOITransactionType read Get_OriginalPOITransaction write _Set_OriginalPOITransaction;
    property PaymentReceipt: PSafeArray read Get_PaymentReceipt write Set_PaymentReceipt;
    property ReversedAmount: Double read Get_ReversedAmount write Set_ReversedAmount;
    property ReversedAmountSpecified: WordBool read Get_ReversedAmountSpecified write Set_ReversedAmountSpecified;
    property CustomerOrderID: WideString read Get_CustomerOrderID write Set_CustomerOrderID;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property POIDataSpecified: WordBool read Get_POIDataSpecified write Set_POIDataSpecified;
    property OriginalPOITransactionSpecified: WordBool read Get_OriginalPOITransactionSpecified write Set_OriginalPOITransactionSpecified;
    property PaymentReceiptSpecified: WordBool read Get_PaymentReceiptSpecified write Set_PaymentReceiptSpecified;
    property CustomerOrderIDSpecified: WordBool read Get_CustomerOrderIDSpecified write Set_CustomerOrderIDSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property ReversalResponseTypeClassName: WideString read Get_ReversalResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IReversalResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6030420F-0FB4-4E08-81AB-CB51E516D81E}
// *********************************************************************//
  IReversalResponseTypeDisp = dispinterface
    ['{6030420F-0FB4-4E08-81AB-CB51E516D81E}']
    property Response: IResponseType dispid 1;
    property POIData: IPOIDataType dispid 2;
    property OriginalPOITransaction: IOriginalPOITransactionType dispid 3;
    property PaymentReceipt: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property ReversedAmount: Double dispid 5;
    property ReversedAmountSpecified: WordBool dispid 6;
    property CustomerOrderID: WideString dispid 7;
    property ResponseSpecified: WordBool dispid 9;
    property POIDataSpecified: WordBool dispid 10;
    property OriginalPOITransactionSpecified: WordBool dispid 11;
    property PaymentReceiptSpecified: WordBool dispid 12;
    property CustomerOrderIDSpecified: WordBool dispid 19;
    property ObjectHasBeenSet: WordBool readonly dispid 20;
    property ReversalResponseTypeClassName: WideString readonly dispid 21;
    function PaymentReceiptLength: Integer; dispid 13;
    function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; dispid 14;
    function PaymentReceiptSetItem(index: Integer; const value: IPaymentReceiptType): WordBool; dispid 15;
    function PaymentReceiptAddItem(const value: IPaymentReceiptType): WordBool; dispid 16;
    function PaymentReceiptRemoveItem(index: Integer): WordBool; dispid 17;
    function PaymentReceiptInsertItem(index: Integer; const value: IPaymentReceiptType): Integer; dispid 18;
  end;

// *********************************************************************//
// Interface :   IStoredValueResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3BFA916A-B48C-4780-ACF9-A45A7CED5974}
// *********************************************************************//
  IStoredValueResponseType = interface(IDispatch)
    ['{3BFA916A-B48C-4780-ACF9-A45A7CED5974}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_POIData: IPOIDataType; safecall;
    procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
    function Get_StoredValueResult: PSafeArray; safecall;
    procedure Set_StoredValueResult(pRetVal: PSafeArray); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_SaleDataSpecified: WordBool; safecall;
    procedure Set_SaleDataSpecified(pRetVal: WordBool); safecall;
    function Get_POIDataSpecified: WordBool; safecall;
    procedure Set_POIDataSpecified(pRetVal: WordBool); safecall;
    function Get_StoredValueResultSpecified: WordBool; safecall;
    procedure Set_StoredValueResultSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_StoredValueResponseTypeClassName: WideString; safecall;
    function StoredValueResultLength: Integer; safecall;
    function StoredValueResultGetItem(index: Integer): IStoredValueResultType; safecall;
    function StoredValueResultSetItem(index: Integer; const value: IStoredValueResultType): WordBool; safecall;
    function StoredValueResultAddItem(const value: IStoredValueResultType): WordBool; safecall;
    function StoredValueResultRemoveItem(index: Integer): WordBool; safecall;
    function StoredValueResultInsertItem(index: Integer; const value: IStoredValueResultType): Integer; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property POIData: IPOIDataType read Get_POIData write _Set_POIData;
    property StoredValueResult: PSafeArray read Get_StoredValueResult write Set_StoredValueResult;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property SaleDataSpecified: WordBool read Get_SaleDataSpecified write Set_SaleDataSpecified;
    property POIDataSpecified: WordBool read Get_POIDataSpecified write Set_POIDataSpecified;
    property StoredValueResultSpecified: WordBool read Get_StoredValueResultSpecified write Set_StoredValueResultSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property StoredValueResponseTypeClassName: WideString read Get_StoredValueResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IStoredValueResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3BFA916A-B48C-4780-ACF9-A45A7CED5974}
// *********************************************************************//
  IStoredValueResponseTypeDisp = dispinterface
    ['{3BFA916A-B48C-4780-ACF9-A45A7CED5974}']
    property Response: IResponseType dispid 1;
    property SaleData: ISaleDataType dispid 2;
    property POIData: IPOIDataType dispid 3;
    property StoredValueResult: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property ResponseSpecified: WordBool dispid 6;
    property SaleDataSpecified: WordBool dispid 7;
    property POIDataSpecified: WordBool dispid 8;
    property StoredValueResultSpecified: WordBool dispid 9;
    property ObjectHasBeenSet: WordBool readonly dispid 16;
    property StoredValueResponseTypeClassName: WideString readonly dispid 17;
    function StoredValueResultLength: Integer; dispid 10;
    function StoredValueResultGetItem(index: Integer): IStoredValueResultType; dispid 11;
    function StoredValueResultSetItem(index: Integer; const value: IStoredValueResultType): WordBool; dispid 12;
    function StoredValueResultAddItem(const value: IStoredValueResultType): WordBool; dispid 13;
    function StoredValueResultRemoveItem(index: Integer): WordBool; dispid 14;
    function StoredValueResultInsertItem(index: Integer; const value: IStoredValueResultType): Integer; dispid 15;
  end;

// *********************************************************************//
// Interface :   IStoredValueResultType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BAC06B76-2D47-4812-9136-69EF1D9FC265}
// *********************************************************************//
  IStoredValueResultType = interface(IDispatch)
    ['{BAC06B76-2D47-4812-9136-69EF1D9FC265}']
    function Get_StoredValueAccountStatus: IStoredValueAccountStatusType; safecall;
    procedure _Set_StoredValueAccountStatus(const pRetVal: IStoredValueAccountStatusType); safecall;
    function Get_HostTransactionID: ITransactionIdentificationType; safecall;
    procedure _Set_HostTransactionID(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_StoredValueTransactionType: WideString; safecall;
    procedure Set_StoredValueTransactionType(const pRetVal: WideString); safecall;
    function Get_ProductCode: WideString; safecall;
    procedure Set_ProductCode(const pRetVal: WideString); safecall;
    function Get_EanUpc: WideString; safecall;
    procedure Set_EanUpc(const pRetVal: WideString); safecall;
    function Get_ItemAmount: Double; safecall;
    procedure Set_ItemAmount(pRetVal: Double); safecall;
    function Get_Currency: WideString; safecall;
    procedure Set_Currency(const pRetVal: WideString); safecall;
    function Get_StoredValueAccountStatusSpecified: WordBool; safecall;
    procedure Set_StoredValueAccountStatusSpecified(pRetVal: WordBool); safecall;
    function Get_HostTransactionIDSpecified: WordBool; safecall;
    procedure Set_HostTransactionIDSpecified(pRetVal: WordBool); safecall;
    function Get_StoredValueTransactionTypeSpecified: WordBool; safecall;
    procedure Set_StoredValueTransactionTypeSpecified(pRetVal: WordBool); safecall;
    function Get_ProductCodeSpecified: WordBool; safecall;
    procedure Set_ProductCodeSpecified(pRetVal: WordBool); safecall;
    function Get_EanUpcSpecified: WordBool; safecall;
    procedure Set_EanUpcSpecified(pRetVal: WordBool); safecall;
    function Get_ItemAmountSpecified: WordBool; safecall;
    procedure Set_ItemAmountSpecified(pRetVal: WordBool); safecall;
    function Get_CurrencySpecified: WordBool; safecall;
    procedure Set_CurrencySpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_StoredValueResultTypeClassName: WideString; safecall;
    property StoredValueAccountStatus: IStoredValueAccountStatusType read Get_StoredValueAccountStatus write _Set_StoredValueAccountStatus;
    property HostTransactionID: ITransactionIdentificationType read Get_HostTransactionID write _Set_HostTransactionID;
    property StoredValueTransactionType: WideString read Get_StoredValueTransactionType write Set_StoredValueTransactionType;
    property ProductCode: WideString read Get_ProductCode write Set_ProductCode;
    property EanUpc: WideString read Get_EanUpc write Set_EanUpc;
    property ItemAmount: Double read Get_ItemAmount write Set_ItemAmount;
    property Currency: WideString read Get_Currency write Set_Currency;
    property StoredValueAccountStatusSpecified: WordBool read Get_StoredValueAccountStatusSpecified write Set_StoredValueAccountStatusSpecified;
    property HostTransactionIDSpecified: WordBool read Get_HostTransactionIDSpecified write Set_HostTransactionIDSpecified;
    property StoredValueTransactionTypeSpecified: WordBool read Get_StoredValueTransactionTypeSpecified write Set_StoredValueTransactionTypeSpecified;
    property ProductCodeSpecified: WordBool read Get_ProductCodeSpecified write Set_ProductCodeSpecified;
    property EanUpcSpecified: WordBool read Get_EanUpcSpecified write Set_EanUpcSpecified;
    property ItemAmountSpecified: WordBool read Get_ItemAmountSpecified write Set_ItemAmountSpecified;
    property CurrencySpecified: WordBool read Get_CurrencySpecified write Set_CurrencySpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property StoredValueResultTypeClassName: WideString read Get_StoredValueResultTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IStoredValueResultTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BAC06B76-2D47-4812-9136-69EF1D9FC265}
// *********************************************************************//
  IStoredValueResultTypeDisp = dispinterface
    ['{BAC06B76-2D47-4812-9136-69EF1D9FC265}']
    property StoredValueAccountStatus: IStoredValueAccountStatusType dispid 1;
    property HostTransactionID: ITransactionIdentificationType dispid 2;
    property StoredValueTransactionType: WideString dispid 3;
    property ProductCode: WideString dispid 4;
    property EanUpc: WideString dispid 5;
    property ItemAmount: Double dispid 6;
    property Currency: WideString dispid 7;
    property StoredValueAccountStatusSpecified: WordBool dispid 9;
    property HostTransactionIDSpecified: WordBool dispid 10;
    property StoredValueTransactionTypeSpecified: WordBool dispid 11;
    property ProductCodeSpecified: WordBool dispid 12;
    property EanUpcSpecified: WordBool dispid 13;
    property ItemAmountSpecified: WordBool dispid 14;
    property CurrencySpecified: WordBool dispid 15;
    property ObjectHasBeenSet: WordBool readonly dispid 16;
    property StoredValueResultTypeClassName: WideString readonly dispid 17;
  end;

// *********************************************************************//
// Interface :   IStoredValueAccountStatusType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9281C705-2DC0-4928-A78B-2A865FFBCAED}
// *********************************************************************//
  IStoredValueAccountStatusType = interface(IDispatch)
    ['{9281C705-2DC0-4928-A78B-2A865FFBCAED}']
    function Get_StoredValueAccountID: IStoredValueAccountIDType; safecall;
    procedure _Set_StoredValueAccountID(const pRetVal: IStoredValueAccountIDType); safecall;
    function Get_CurrentBalance: Double; safecall;
    procedure Set_CurrentBalance(pRetVal: Double); safecall;
    function Get_CurrentBalanceSpecified: WordBool; safecall;
    procedure Set_CurrentBalanceSpecified(pRetVal: WordBool); safecall;
    function Get_StoredValueAccountIDSpecified: WordBool; safecall;
    procedure Set_StoredValueAccountIDSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_StoredValueAccountStatusTypeClassName: WideString; safecall;
    property StoredValueAccountID: IStoredValueAccountIDType read Get_StoredValueAccountID write _Set_StoredValueAccountID;
    property CurrentBalance: Double read Get_CurrentBalance write Set_CurrentBalance;
    property CurrentBalanceSpecified: WordBool read Get_CurrentBalanceSpecified write Set_CurrentBalanceSpecified;
    property StoredValueAccountIDSpecified: WordBool read Get_StoredValueAccountIDSpecified write Set_StoredValueAccountIDSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property StoredValueAccountStatusTypeClassName: WideString read Get_StoredValueAccountStatusTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IStoredValueAccountStatusTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9281C705-2DC0-4928-A78B-2A865FFBCAED}
// *********************************************************************//
  IStoredValueAccountStatusTypeDisp = dispinterface
    ['{9281C705-2DC0-4928-A78B-2A865FFBCAED}']
    property StoredValueAccountID: IStoredValueAccountIDType dispid 1;
    property CurrentBalance: Double dispid 2;
    property CurrentBalanceSpecified: WordBool dispid 3;
    property StoredValueAccountIDSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 6;
    property StoredValueAccountStatusTypeClassName: WideString readonly dispid 7;
  end;

// *********************************************************************//
// Interface :   IStoredValueAccountIDType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C38D5E21-2294-4D12-8D50-B986C77A69E5}
// *********************************************************************//
  IStoredValueAccountIDType = interface(IDispatch)
    ['{C38D5E21-2294-4D12-8D50-B986C77A69E5}']
    function Get_StoredValueAccountType: WideString; safecall;
    procedure Set_StoredValueAccountType(const pRetVal: WideString); safecall;
    function Get_StoredValueProvider: WideString; safecall;
    procedure Set_StoredValueProvider(const pRetVal: WideString); safecall;
    function Get_OwnerName: WideString; safecall;
    procedure Set_OwnerName(const pRetVal: WideString); safecall;
    function Get_ExpiryDate: WideString; safecall;
    procedure Set_ExpiryDate(const pRetVal: WideString); safecall;
    function Get_EntryMode: PSafeArray; safecall;
    procedure Set_EntryMode(pRetVal: PSafeArray); safecall;
    function Get_IdentificationType: WideString; safecall;
    procedure Set_IdentificationType(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_StoredValueAccountTypeSpecified: WordBool; safecall;
    procedure Set_StoredValueAccountTypeSpecified(pRetVal: WordBool); safecall;
    function Get_StoredValueProviderSpecified: WordBool; safecall;
    procedure Set_StoredValueProviderSpecified(pRetVal: WordBool); safecall;
    function Get_OwnerNameSpecified: WordBool; safecall;
    procedure Set_OwnerNameSpecified(pRetVal: WordBool); safecall;
    function Get_ExpiryDateSpecified: WordBool; safecall;
    procedure Set_ExpiryDateSpecified(pRetVal: WordBool); safecall;
    function Get_EntryModeSpecified: WordBool; safecall;
    procedure Set_EntryModeSpecified(pRetVal: WordBool); safecall;
    function Get_IdentificationTypeSpecified: WordBool; safecall;
    procedure Set_IdentificationTypeSpecified(pRetVal: WordBool); safecall;
    function Get_ValueSpecified: WordBool; safecall;
    procedure Set_ValueSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_StoredValueAccountIDTypeClassName: WideString; safecall;
    function EntryModeLength: Integer; safecall;
    function EntryModeGetItem(index: Integer): WideString; safecall;
    function EntryModeSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function EntryModeAddItem(const value: WideString): WordBool; safecall;
    function EntryModeRemoveItem(index: Integer): WordBool; safecall;
    function EntryModeInsertItem(index: Integer; const value: WideString): Integer; safecall;
    property StoredValueAccountType: WideString read Get_StoredValueAccountType write Set_StoredValueAccountType;
    property StoredValueProvider: WideString read Get_StoredValueProvider write Set_StoredValueProvider;
    property OwnerName: WideString read Get_OwnerName write Set_OwnerName;
    property ExpiryDate: WideString read Get_ExpiryDate write Set_ExpiryDate;
    property EntryMode: PSafeArray read Get_EntryMode write Set_EntryMode;
    property IdentificationType: WideString read Get_IdentificationType write Set_IdentificationType;
    property value: WideString read Get_value write Set_value;
    property StoredValueAccountTypeSpecified: WordBool read Get_StoredValueAccountTypeSpecified write Set_StoredValueAccountTypeSpecified;
    property StoredValueProviderSpecified: WordBool read Get_StoredValueProviderSpecified write Set_StoredValueProviderSpecified;
    property OwnerNameSpecified: WordBool read Get_OwnerNameSpecified write Set_OwnerNameSpecified;
    property ExpiryDateSpecified: WordBool read Get_ExpiryDateSpecified write Set_ExpiryDateSpecified;
    property EntryModeSpecified: WordBool read Get_EntryModeSpecified write Set_EntryModeSpecified;
    property IdentificationTypeSpecified: WordBool read Get_IdentificationTypeSpecified write Set_IdentificationTypeSpecified;
    property ValueSpecified: WordBool read Get_ValueSpecified write Set_ValueSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property StoredValueAccountIDTypeClassName: WideString read Get_StoredValueAccountIDTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IStoredValueAccountIDTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C38D5E21-2294-4D12-8D50-B986C77A69E5}
// *********************************************************************//
  IStoredValueAccountIDTypeDisp = dispinterface
    ['{C38D5E21-2294-4D12-8D50-B986C77A69E5}']
    property StoredValueAccountType: WideString dispid 1;
    property StoredValueProvider: WideString dispid 2;
    property OwnerName: WideString dispid 3;
    property ExpiryDate: WideString dispid 4;
    property EntryMode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property IdentificationType: WideString dispid 6;
    property value: WideString dispid 7;
    property StoredValueAccountTypeSpecified: WordBool dispid 9;
    property StoredValueProviderSpecified: WordBool dispid 10;
    property OwnerNameSpecified: WordBool dispid 11;
    property ExpiryDateSpecified: WordBool dispid 12;
    property EntryModeSpecified: WordBool dispid 13;
    property IdentificationTypeSpecified: WordBool dispid 20;
    property ValueSpecified: WordBool dispid 21;
    property ObjectHasBeenSet: WordBool readonly dispid 22;
    property StoredValueAccountIDTypeClassName: WideString readonly dispid 23;
    function EntryModeLength: Integer; dispid 14;
    function EntryModeGetItem(index: Integer): WideString; dispid 15;
    function EntryModeSetItem(index: Integer; const value: WideString): WordBool; dispid 16;
    function EntryModeAddItem(const value: WideString): WordBool; dispid 17;
    function EntryModeRemoveItem(index: Integer): WordBool; dispid 18;
    function EntryModeInsertItem(index: Integer; const value: WideString): Integer; dispid 19;
  end;

// *********************************************************************//
// Interface :   ISoundContentType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C1E19E70-7B28-4A45-B0F2-7BBD263896C1}
// *********************************************************************//
  ISoundContentType = interface(IDispatch)
    ['{C1E19E70-7B28-4A45-B0F2-7BBD263896C1}']
    function Get_SoundFormat: WideString; safecall;
    procedure Set_SoundFormat(const pRetVal: WideString); safecall;
    function Get_Language: WideString; safecall;
    procedure Set_Language(const pRetVal: WideString); safecall;
    function Get_ReferenceID: WideString; safecall;
    procedure Set_ReferenceID(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_SoundFormatSpecified: WordBool; safecall;
    procedure Set_SoundFormatSpecified(pRetVal: WordBool); safecall;
    function Get_LanguageSpecified: WordBool; safecall;
    procedure Set_LanguageSpecified(pRetVal: WordBool); safecall;
    function Get_ReferenceIDSpecified: WordBool; safecall;
    procedure Set_ReferenceIDSpecified(pRetVal: WordBool); safecall;
    function Get_ValueSpecified: WordBool; safecall;
    procedure Set_ValueSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SoundContentTypeClassName: WideString; safecall;
    property SoundFormat: WideString read Get_SoundFormat write Set_SoundFormat;
    property Language: WideString read Get_Language write Set_Language;
    property ReferenceID: WideString read Get_ReferenceID write Set_ReferenceID;
    property value: WideString read Get_value write Set_value;
    property SoundFormatSpecified: WordBool read Get_SoundFormatSpecified write Set_SoundFormatSpecified;
    property LanguageSpecified: WordBool read Get_LanguageSpecified write Set_LanguageSpecified;
    property ReferenceIDSpecified: WordBool read Get_ReferenceIDSpecified write Set_ReferenceIDSpecified;
    property ValueSpecified: WordBool read Get_ValueSpecified write Set_ValueSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SoundContentTypeClassName: WideString read Get_SoundContentTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISoundContentTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C1E19E70-7B28-4A45-B0F2-7BBD263896C1}
// *********************************************************************//
  ISoundContentTypeDisp = dispinterface
    ['{C1E19E70-7B28-4A45-B0F2-7BBD263896C1}']
    property SoundFormat: WideString dispid 1;
    property Language: WideString dispid 2;
    property ReferenceID: WideString dispid 3;
    property value: WideString dispid 4;
    property SoundFormatSpecified: WordBool dispid 6;
    property LanguageSpecified: WordBool dispid 7;
    property ReferenceIDSpecified: WordBool dispid 8;
    property ValueSpecified: WordBool dispid 9;
    property ObjectHasBeenSet: WordBool readonly dispid 10;
    property SoundContentTypeClassName: WideString readonly dispid 11;
  end;

// *********************************************************************//
// Interface :   ISoundRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6F65F431-0C07-4B3F-BA97-8EA228A0F3AC}
// *********************************************************************//
  ISoundRequestType = interface(IDispatch)
    ['{6F65F431-0C07-4B3F-BA97-8EA228A0F3AC}']
    function Get_SoundContent: ISoundContentType; safecall;
    procedure _Set_SoundContent(const pRetVal: ISoundContentType); safecall;
    function Get_ResponseMode: WideString; safecall;
    procedure Set_ResponseMode(const pRetVal: WideString); safecall;
    function Get_SoundAction: WideString; safecall;
    procedure Set_SoundAction(const pRetVal: WideString); safecall;
    function Get_SoundVolume: Integer; safecall;
    procedure Set_SoundVolume(pRetVal: Integer); safecall;
    function Get_SoundContentSpecified: WordBool; safecall;
    procedure Set_SoundContentSpecified(pRetVal: WordBool); safecall;
    function Get_ResponseModeDefaultValue: WideString; safecall;
    function Get_ResponseModeSpecified: WordBool; safecall;
    procedure Set_ResponseModeSpecified(pRetVal: WordBool); safecall;
    function Get_SoundActionSpecified: WordBool; safecall;
    procedure Set_SoundActionSpecified(pRetVal: WordBool); safecall;
    function Get_SoundVolumeSpecified: WordBool; safecall;
    procedure Set_SoundVolumeSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SoundRequestTypeClassName: WideString; safecall;
    property SoundContent: ISoundContentType read Get_SoundContent write _Set_SoundContent;
    property ResponseMode: WideString read Get_ResponseMode write Set_ResponseMode;
    property SoundAction: WideString read Get_SoundAction write Set_SoundAction;
    property SoundVolume: Integer read Get_SoundVolume write Set_SoundVolume;
    property SoundContentSpecified: WordBool read Get_SoundContentSpecified write Set_SoundContentSpecified;
    property ResponseModeDefaultValue: WideString read Get_ResponseModeDefaultValue;
    property ResponseModeSpecified: WordBool read Get_ResponseModeSpecified write Set_ResponseModeSpecified;
    property SoundActionSpecified: WordBool read Get_SoundActionSpecified write Set_SoundActionSpecified;
    property SoundVolumeSpecified: WordBool read Get_SoundVolumeSpecified write Set_SoundVolumeSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SoundRequestTypeClassName: WideString read Get_SoundRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISoundRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6F65F431-0C07-4B3F-BA97-8EA228A0F3AC}
// *********************************************************************//
  ISoundRequestTypeDisp = dispinterface
    ['{6F65F431-0C07-4B3F-BA97-8EA228A0F3AC}']
    property SoundContent: ISoundContentType dispid 2;
    property ResponseMode: WideString dispid 3;
    property SoundAction: WideString dispid 4;
    property SoundVolume: Integer dispid 5;
    property SoundContentSpecified: WordBool dispid 6;
    property ResponseModeDefaultValue: WideString readonly dispid 7;
    property ResponseModeSpecified: WordBool dispid 8;
    property SoundActionSpecified: WordBool dispid 9;
    property SoundVolumeSpecified: WordBool dispid 10;
    property ObjectHasBeenSet: WordBool readonly dispid 11;
    property SoundRequestTypeClassName: WideString readonly dispid 12;
  end;

// *********************************************************************//
// Interface :   ISoundResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9B29B4CC-C4F7-4C58-A2DE-C0DE7220AF5F}
// *********************************************************************//
  ISoundResponseType = interface(IDispatch)
    ['{9B29B4CC-C4F7-4C58-A2DE-C0DE7220AF5F}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SoundResponseTypeClassName: WideString; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SoundResponseTypeClassName: WideString read Get_SoundResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ISoundResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9B29B4CC-C4F7-4C58-A2DE-C0DE7220AF5F}
// *********************************************************************//
  ISoundResponseTypeDisp = dispinterface
    ['{9B29B4CC-C4F7-4C58-A2DE-C0DE7220AF5F}']
    property Response: IResponseType dispid 1;
    property ResponseSpecified: WordBool dispid 3;
    property ObjectHasBeenSet: WordBool readonly dispid 4;
    property SoundResponseTypeClassName: WideString readonly dispid 5;
  end;

// *********************************************************************//
// Interface :   IStoredValueDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1F0727A8-5984-4015-84FB-DFDAAC71544F}
// *********************************************************************//
  IStoredValueDataType = interface(IDispatch)
    ['{1F0727A8-5984-4015-84FB-DFDAAC71544F}']
    function Get_StoredValueAccountID: IStoredValueAccountIDType; safecall;
    procedure _Set_StoredValueAccountID(const pRetVal: IStoredValueAccountIDType); safecall;
    function Get_OriginalPOITransaction: IOriginalPOITransactionType; safecall;
    procedure _Set_OriginalPOITransaction(const pRetVal: IOriginalPOITransactionType); safecall;
    function Get_StoredValueProvider: WideString; safecall;
    procedure Set_StoredValueProvider(const pRetVal: WideString); safecall;
    function Get_StoredValueTransactionType: WideString; safecall;
    procedure Set_StoredValueTransactionType(const pRetVal: WideString); safecall;
    function Get_ProductCode: WideString; safecall;
    procedure Set_ProductCode(const pRetVal: WideString); safecall;
    function Get_EanUpc: WideString; safecall;
    procedure Set_EanUpc(const pRetVal: WideString); safecall;
    function Get_ItemAmount: Double; safecall;
    procedure Set_ItemAmount(pRetVal: Double); safecall;
    function Get_Currency: WideString; safecall;
    procedure Set_Currency(const pRetVal: WideString); safecall;
    function Get_StoredValueAccountIDSpecified: WordBool; safecall;
    procedure Set_StoredValueAccountIDSpecified(pRetVal: WordBool); safecall;
    function Get_OriginalPOITransactionSpecified: WordBool; safecall;
    procedure Set_OriginalPOITransactionSpecified(pRetVal: WordBool); safecall;
    function Get_StoredValueProviderSpecified: WordBool; safecall;
    procedure Set_StoredValueProviderSpecified(pRetVal: WordBool); safecall;
    function Get_StoredValueTransactionTypeSpecified: WordBool; safecall;
    procedure Set_StoredValueTransactionTypeSpecified(pRetVal: WordBool); safecall;
    function Get_ProductCodeSpecified: WordBool; safecall;
    procedure Set_ProductCodeSpecified(pRetVal: WordBool); safecall;
    function Get_EanUpcSpecified: WordBool; safecall;
    procedure Set_EanUpcSpecified(pRetVal: WordBool); safecall;
    function Get_ItemAmountSpecified: WordBool; safecall;
    procedure Set_ItemAmountSpecified(pRetVal: WordBool); safecall;
    function Get_CurrencySpecified: WordBool; safecall;
    procedure Set_CurrencySpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_StoredValueDataTypeClassName: WideString; safecall;
    property StoredValueAccountID: IStoredValueAccountIDType read Get_StoredValueAccountID write _Set_StoredValueAccountID;
    property OriginalPOITransaction: IOriginalPOITransactionType read Get_OriginalPOITransaction write _Set_OriginalPOITransaction;
    property StoredValueProvider: WideString read Get_StoredValueProvider write Set_StoredValueProvider;
    property StoredValueTransactionType: WideString read Get_StoredValueTransactionType write Set_StoredValueTransactionType;
    property ProductCode: WideString read Get_ProductCode write Set_ProductCode;
    property EanUpc: WideString read Get_EanUpc write Set_EanUpc;
    property ItemAmount: Double read Get_ItemAmount write Set_ItemAmount;
    property Currency: WideString read Get_Currency write Set_Currency;
    property StoredValueAccountIDSpecified: WordBool read Get_StoredValueAccountIDSpecified write Set_StoredValueAccountIDSpecified;
    property OriginalPOITransactionSpecified: WordBool read Get_OriginalPOITransactionSpecified write Set_OriginalPOITransactionSpecified;
    property StoredValueProviderSpecified: WordBool read Get_StoredValueProviderSpecified write Set_StoredValueProviderSpecified;
    property StoredValueTransactionTypeSpecified: WordBool read Get_StoredValueTransactionTypeSpecified write Set_StoredValueTransactionTypeSpecified;
    property ProductCodeSpecified: WordBool read Get_ProductCodeSpecified write Set_ProductCodeSpecified;
    property EanUpcSpecified: WordBool read Get_EanUpcSpecified write Set_EanUpcSpecified;
    property ItemAmountSpecified: WordBool read Get_ItemAmountSpecified write Set_ItemAmountSpecified;
    property CurrencySpecified: WordBool read Get_CurrencySpecified write Set_CurrencySpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property StoredValueDataTypeClassName: WideString read Get_StoredValueDataTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IStoredValueDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1F0727A8-5984-4015-84FB-DFDAAC71544F}
// *********************************************************************//
  IStoredValueDataTypeDisp = dispinterface
    ['{1F0727A8-5984-4015-84FB-DFDAAC71544F}']
    property StoredValueAccountID: IStoredValueAccountIDType dispid 1;
    property OriginalPOITransaction: IOriginalPOITransactionType dispid 2;
    property StoredValueProvider: WideString dispid 3;
    property StoredValueTransactionType: WideString dispid 4;
    property ProductCode: WideString dispid 5;
    property EanUpc: WideString dispid 6;
    property ItemAmount: Double dispid 7;
    property Currency: WideString dispid 8;
    property StoredValueAccountIDSpecified: WordBool dispid 10;
    property OriginalPOITransactionSpecified: WordBool dispid 11;
    property StoredValueProviderSpecified: WordBool dispid 12;
    property StoredValueTransactionTypeSpecified: WordBool dispid 13;
    property ProductCodeSpecified: WordBool dispid 14;
    property EanUpcSpecified: WordBool dispid 15;
    property ItemAmountSpecified: WordBool dispid 16;
    property CurrencySpecified: WordBool dispid 17;
    property ObjectHasBeenSet: WordBool readonly dispid 18;
    property StoredValueDataTypeClassName: WideString readonly dispid 19;
  end;

// *********************************************************************//
// Interface :   IStoredValueRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {86F6A0DA-B826-4237-BE3F-71EF0CE09875}
// *********************************************************************//
  IStoredValueRequestType = interface(IDispatch)
    ['{86F6A0DA-B826-4237-BE3F-71EF0CE09875}']
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_StoredValueData: PSafeArray; safecall;
    procedure Set_StoredValueData(pRetVal: PSafeArray); safecall;
    function Get_CustomerLanguage: WideString; safecall;
    procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
    function Get_SaleDataSpecified: WordBool; safecall;
    procedure Set_SaleDataSpecified(pRetVal: WordBool); safecall;
    function Get_StoredValueDataSpecified: WordBool; safecall;
    procedure Set_StoredValueDataSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerLanguageSpecified: WordBool; safecall;
    procedure Set_CustomerLanguageSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_StoredValueRequestTypeClassName: WideString; safecall;
    function StoredValueDataLength: Integer; safecall;
    function StoredValueDataGetItem(index: Integer): IStoredValueDataType; safecall;
    function StoredValueDataSetItem(index: Integer; const value: IStoredValueDataType): WordBool; safecall;
    function StoredValueDataAddItem(const value: IStoredValueDataType): WordBool; safecall;
    function StoredValueDataRemoveItem(index: Integer): WordBool; safecall;
    function StoredValueDataInsertItem(index: Integer; const value: IStoredValueDataType): Integer; safecall;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property StoredValueData: PSafeArray read Get_StoredValueData write Set_StoredValueData;
    property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
    property SaleDataSpecified: WordBool read Get_SaleDataSpecified write Set_SaleDataSpecified;
    property StoredValueDataSpecified: WordBool read Get_StoredValueDataSpecified write Set_StoredValueDataSpecified;
    property CustomerLanguageSpecified: WordBool read Get_CustomerLanguageSpecified write Set_CustomerLanguageSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property StoredValueRequestTypeClassName: WideString read Get_StoredValueRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    IStoredValueRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {86F6A0DA-B826-4237-BE3F-71EF0CE09875}
// *********************************************************************//
  IStoredValueRequestTypeDisp = dispinterface
    ['{86F6A0DA-B826-4237-BE3F-71EF0CE09875}']
    property SaleData: ISaleDataType dispid 1;
    property StoredValueData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property CustomerLanguage: WideString dispid 3;
    property SaleDataSpecified: WordBool dispid 5;
    property StoredValueDataSpecified: WordBool dispid 6;
    property CustomerLanguageSpecified: WordBool dispid 13;
    property ObjectHasBeenSet: WordBool readonly dispid 14;
    property StoredValueRequestTypeClassName: WideString readonly dispid 15;
    function StoredValueDataLength: Integer; dispid 7;
    function StoredValueDataGetItem(index: Integer): IStoredValueDataType; dispid 8;
    function StoredValueDataSetItem(index: Integer; const value: IStoredValueDataType): WordBool; dispid 9;
    function StoredValueDataAddItem(const value: IStoredValueDataType): WordBool; dispid 10;
    function StoredValueDataRemoveItem(index: Integer): WordBool; dispid 11;
    function StoredValueDataInsertItem(index: Integer; const value: IStoredValueDataType): Integer; dispid 12;
  end;

// *********************************************************************//
// Interface :   ITransmitRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2CF8A131-259D-47A7-972F-969D6D7D7972}
// *********************************************************************//
  ITransmitRequestType = interface(IDispatch)
    ['{2CF8A131-259D-47A7-972F-969D6D7D7972}']
    function Get_Message: PSafeArray; safecall;
    procedure Set_Message(pRetVal: PSafeArray); safecall;
    function Get_WaitResponseFlag: WordBool; safecall;
    procedure Set_WaitResponseFlag(pRetVal: WordBool); safecall;
    function Get_MaximumTransmitTime: Integer; safecall;
    procedure Set_MaximumTransmitTime(pRetVal: Integer); safecall;
    function Get_DestinationAddress: WideString; safecall;
    procedure Set_DestinationAddress(const pRetVal: WideString); safecall;
    function Get_MessageSpecified: WordBool; safecall;
    procedure Set_MessageSpecified(pRetVal: WordBool); safecall;
    function Get_WaitResponseFlagDefaultValue: WordBool; safecall;
    function Get_WaitResponseFlagSpecified: WordBool; safecall;
    procedure Set_WaitResponseFlagSpecified(pRetVal: WordBool); safecall;
    function Get_MaximumTransmitTimeSpecified: WordBool; safecall;
    procedure Set_MaximumTransmitTimeSpecified(pRetVal: WordBool); safecall;
    function Get_DestinationAddressSpecified: WordBool; safecall;
    procedure Set_DestinationAddressSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_TransmitRequestTypeClassName: WideString; safecall;
    function MessageLength: Integer; safecall;
    function MessageGetItem(index: Integer): Byte; safecall;
    function MessageSetItem(index: Integer; value: Byte): WordBool; safecall;
    function MessageAddItem(value: Byte): WordBool; safecall;
    function MessageRemoveItem(index: Integer): WordBool; safecall;
    function MessageInsertItem(index: Integer; value: Byte): Integer; safecall;
    property Message: PSafeArray read Get_Message write Set_Message;
    property WaitResponseFlag: WordBool read Get_WaitResponseFlag write Set_WaitResponseFlag;
    property MaximumTransmitTime: Integer read Get_MaximumTransmitTime write Set_MaximumTransmitTime;
    property DestinationAddress: WideString read Get_DestinationAddress write Set_DestinationAddress;
    property MessageSpecified: WordBool read Get_MessageSpecified write Set_MessageSpecified;
    property WaitResponseFlagDefaultValue: WordBool read Get_WaitResponseFlagDefaultValue;
    property WaitResponseFlagSpecified: WordBool read Get_WaitResponseFlagSpecified write Set_WaitResponseFlagSpecified;
    property MaximumTransmitTimeSpecified: WordBool read Get_MaximumTransmitTimeSpecified write Set_MaximumTransmitTimeSpecified;
    property DestinationAddressSpecified: WordBool read Get_DestinationAddressSpecified write Set_DestinationAddressSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property TransmitRequestTypeClassName: WideString read Get_TransmitRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ITransmitRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2CF8A131-259D-47A7-972F-969D6D7D7972}
// *********************************************************************//
  ITransmitRequestTypeDisp = dispinterface
    ['{2CF8A131-259D-47A7-972F-969D6D7D7972}']
    property Message: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property WaitResponseFlag: WordBool dispid 3;
    property MaximumTransmitTime: Integer dispid 4;
    property DestinationAddress: WideString dispid 5;
    property MessageSpecified: WordBool dispid 6;
    property WaitResponseFlagDefaultValue: WordBool readonly dispid 13;
    property WaitResponseFlagSpecified: WordBool dispid 14;
    property MaximumTransmitTimeSpecified: WordBool dispid 15;
    property DestinationAddressSpecified: WordBool dispid 16;
    property ObjectHasBeenSet: WordBool readonly dispid 17;
    property TransmitRequestTypeClassName: WideString readonly dispid 18;
    function MessageLength: Integer; dispid 7;
    function MessageGetItem(index: Integer): Byte; dispid 8;
    function MessageSetItem(index: Integer; value: Byte): WordBool; dispid 9;
    function MessageAddItem(value: Byte): WordBool; dispid 10;
    function MessageRemoveItem(index: Integer): WordBool; dispid 11;
    function MessageInsertItem(index: Integer; value: Byte): Integer; dispid 12;
  end;

// *********************************************************************//
// Interface :   ITransmitResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2E221958-BF24-43A8-B59C-27AA9A4AA026}
// *********************************************************************//
  ITransmitResponseType = interface(IDispatch)
    ['{2E221958-BF24-43A8-B59C-27AA9A4AA026}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_Message: PSafeArray; safecall;
    procedure Set_Message(pRetVal: PSafeArray); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_MessageSpecified: WordBool; safecall;
    procedure Set_MessageSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_TransmitResponseTypeClassName: WideString; safecall;
    function MessageLength: Integer; safecall;
    function MessageGetItem(index: Integer): Byte; safecall;
    function MessageSetItem(index: Integer; value: Byte): WordBool; safecall;
    function MessageAddItem(value: Byte): WordBool; safecall;
    function MessageRemoveItem(index: Integer): WordBool; safecall;
    function MessageInsertItem(index: Integer; value: Byte): Integer; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property Message: PSafeArray read Get_Message write Set_Message;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property MessageSpecified: WordBool read Get_MessageSpecified write Set_MessageSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property TransmitResponseTypeClassName: WideString read Get_TransmitResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ITransmitResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2E221958-BF24-43A8-B59C-27AA9A4AA026}
// *********************************************************************//
  ITransmitResponseTypeDisp = dispinterface
    ['{2E221958-BF24-43A8-B59C-27AA9A4AA026}']
    property Response: IResponseType dispid 1;
    property Message: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property ResponseSpecified: WordBool dispid 4;
    property MessageSpecified: WordBool dispid 5;
    property ObjectHasBeenSet: WordBool readonly dispid 12;
    property TransmitResponseTypeClassName: WideString readonly dispid 13;
    function MessageLength: Integer; dispid 6;
    function MessageGetItem(index: Integer): Byte; dispid 7;
    function MessageSetItem(index: Integer; value: Byte): WordBool; dispid 8;
    function MessageAddItem(value: Byte): WordBool; dispid 9;
    function MessageRemoveItem(index: Integer): WordBool; dispid 10;
    function MessageInsertItem(index: Integer; value: Byte): Integer; dispid 11;
  end;

// *********************************************************************//
// Interface :   ITransactionStatusRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {43D0C839-89DE-4A04-9428-63225E18C431}
// *********************************************************************//
  ITransactionStatusRequestType = interface(IDispatch)
    ['{43D0C839-89DE-4A04-9428-63225E18C431}']
    function Get_MessageReference: IMessageReferenceType; safecall;
    procedure _Set_MessageReference(const pRetVal: IMessageReferenceType); safecall;
    function Get_DocumentQualifier: PSafeArray; safecall;
    procedure Set_DocumentQualifier(pRetVal: PSafeArray); safecall;
    function Get_ReceiptReprintFlag: WordBool; safecall;
    procedure Set_ReceiptReprintFlag(pRetVal: WordBool); safecall;
    function Get_MessageReferenceSpecified: WordBool; safecall;
    procedure Set_MessageReferenceSpecified(pRetVal: WordBool); safecall;
    function Get_DocumentQualifierSpecified: WordBool; safecall;
    procedure Set_DocumentQualifierSpecified(pRetVal: WordBool); safecall;
    function Get_ReceiptReprintFlagDefaultValue: WordBool; safecall;
    function Get_ReceiptReprintFlagSpecified: WordBool; safecall;
    procedure Set_ReceiptReprintFlagSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_TransactionStatusRequestTypeClassName: WideString; safecall;
    function DocumentQualifierLength: Integer; safecall;
    function DocumentQualifierGetItem(index: Integer): WideString; safecall;
    function DocumentQualifierSetItem(index: Integer; const value: WideString): WordBool; safecall;
    function DocumentQualifierAddItem(const value: WideString): WordBool; safecall;
    function DocumentQualifierRemoveItem(index: Integer): WordBool; safecall;
    function DocumentQualifierInsertItem(index: Integer; const value: WideString): Integer; safecall;
    property MessageReference: IMessageReferenceType read Get_MessageReference write _Set_MessageReference;
    property DocumentQualifier: PSafeArray read Get_DocumentQualifier write Set_DocumentQualifier;
    property ReceiptReprintFlag: WordBool read Get_ReceiptReprintFlag write Set_ReceiptReprintFlag;
    property MessageReferenceSpecified: WordBool read Get_MessageReferenceSpecified write Set_MessageReferenceSpecified;
    property DocumentQualifierSpecified: WordBool read Get_DocumentQualifierSpecified write Set_DocumentQualifierSpecified;
    property ReceiptReprintFlagDefaultValue: WordBool read Get_ReceiptReprintFlagDefaultValue;
    property ReceiptReprintFlagSpecified: WordBool read Get_ReceiptReprintFlagSpecified write Set_ReceiptReprintFlagSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property TransactionStatusRequestTypeClassName: WideString read Get_TransactionStatusRequestTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ITransactionStatusRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {43D0C839-89DE-4A04-9428-63225E18C431}
// *********************************************************************//
  ITransactionStatusRequestTypeDisp = dispinterface
    ['{43D0C839-89DE-4A04-9428-63225E18C431}']
    property MessageReference: IMessageReferenceType dispid 2;
    property DocumentQualifier: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property ReceiptReprintFlag: WordBool dispid 4;
    property MessageReferenceSpecified: WordBool dispid 5;
    property DocumentQualifierSpecified: WordBool dispid 6;
    property ReceiptReprintFlagDefaultValue: WordBool readonly dispid 13;
    property ReceiptReprintFlagSpecified: WordBool dispid 14;
    property ObjectHasBeenSet: WordBool readonly dispid 15;
    property TransactionStatusRequestTypeClassName: WideString readonly dispid 16;
    function DocumentQualifierLength: Integer; dispid 7;
    function DocumentQualifierGetItem(index: Integer): WideString; dispid 8;
    function DocumentQualifierSetItem(index: Integer; const value: WideString): WordBool; dispid 9;
    function DocumentQualifierAddItem(const value: WideString): WordBool; dispid 10;
    function DocumentQualifierRemoveItem(index: Integer): WordBool; dispid 11;
    function DocumentQualifierInsertItem(index: Integer; const value: WideString): Integer; dispid 12;
  end;

// *********************************************************************//
// Interface :   ITransactionStatusResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7CC617FF-5F10-4377-BE88-0E282989B68C}
// *********************************************************************//
  ITransactionStatusResponseType = interface(IDispatch)
    ['{7CC617FF-5F10-4377-BE88-0E282989B68C}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageReference: IMessageReferenceType; safecall;
    procedure _Set_MessageReference(const pRetVal: IMessageReferenceType); safecall;
    function Get_RepeatedMessageResponse: IRepeatedMessageResponseType; safecall;
    procedure _Set_RepeatedMessageResponse(const pRetVal: IRepeatedMessageResponseType); safecall;
    function Get_ResponseSpecified: WordBool; safecall;
    procedure Set_ResponseSpecified(pRetVal: WordBool); safecall;
    function Get_MessageReferenceSpecified: WordBool; safecall;
    procedure Set_MessageReferenceSpecified(pRetVal: WordBool); safecall;
    function Get_RepeatedMessageResponseSpecified: WordBool; safecall;
    procedure Set_RepeatedMessageResponseSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_TransactionStatusResponseTypeClassName: WideString; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageReference: IMessageReferenceType read Get_MessageReference write _Set_MessageReference;
    property RepeatedMessageResponse: IRepeatedMessageResponseType read Get_RepeatedMessageResponse write _Set_RepeatedMessageResponse;
    property ResponseSpecified: WordBool read Get_ResponseSpecified write Set_ResponseSpecified;
    property MessageReferenceSpecified: WordBool read Get_MessageReferenceSpecified write Set_MessageReferenceSpecified;
    property RepeatedMessageResponseSpecified: WordBool read Get_RepeatedMessageResponseSpecified write Set_RepeatedMessageResponseSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property TransactionStatusResponseTypeClassName: WideString read Get_TransactionStatusResponseTypeClassName;
  end;

// *********************************************************************//
// DispIntf :    ITransactionStatusResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7CC617FF-5F10-4377-BE88-0E282989B68C}
// *********************************************************************//
  ITransactionStatusResponseTypeDisp = dispinterface
    ['{7CC617FF-5F10-4377-BE88-0E282989B68C}']
    property Response: IResponseType dispid 1;
    property MessageReference: IMessageReferenceType dispid 2;
    property RepeatedMessageResponse: IRepeatedMessageResponseType dispid 3;
    property ResponseSpecified: WordBool dispid 5;
    property MessageReferenceSpecified: WordBool dispid 6;
    property RepeatedMessageResponseSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 8;
    property TransactionStatusResponseTypeClassName: WideString readonly dispid 9;
  end;

// *********************************************************************//
// Interface :   ISaleToPOIRequest
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6C05F9CC-060B-462A-A69E-FBF3A639ADF3}
// *********************************************************************//
  ISaleToPOIRequest = interface(IDispatch)
    ['{6C05F9CC-060B-462A-A69E-FBF3A639ADF3}']
    function Get_MessageHeader: IMessageHeaderType; safecall;
    procedure _Set_MessageHeader(const pRetVal: IMessageHeaderType); safecall;
    function Get_Item: OleVariant; safecall;
    procedure _Set_Item(pRetVal: OleVariant); safecall;
    function Get_SecurityTrailer: IContentInformationType; safecall;
    procedure _Set_SecurityTrailer(const pRetVal: IContentInformationType); safecall;
    function Get_MessageHeaderSpecified: WordBool; safecall;
    procedure Set_MessageHeaderSpecified(pRetVal: WordBool); safecall;
    function Get_ItemSpecified: WordBool; safecall;
    procedure Set_ItemSpecified(pRetVal: WordBool); safecall;
    function Get_SecurityTrailerSpecified: WordBool; safecall;
    procedure Set_SecurityTrailerSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SaleToPOIRequestClassName: WideString; safecall;
    property MessageHeader: IMessageHeaderType read Get_MessageHeader write _Set_MessageHeader;
    property Item: OleVariant read Get_Item write _Set_Item;
    property SecurityTrailer: IContentInformationType read Get_SecurityTrailer write _Set_SecurityTrailer;
    property MessageHeaderSpecified: WordBool read Get_MessageHeaderSpecified write Set_MessageHeaderSpecified;
    property ItemSpecified: WordBool read Get_ItemSpecified write Set_ItemSpecified;
    property SecurityTrailerSpecified: WordBool read Get_SecurityTrailerSpecified write Set_SecurityTrailerSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SaleToPOIRequestClassName: WideString read Get_SaleToPOIRequestClassName;
  end;

// *********************************************************************//
// DispIntf :    ISaleToPOIRequestDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6C05F9CC-060B-462A-A69E-FBF3A639ADF3}
// *********************************************************************//
  ISaleToPOIRequestDisp = dispinterface
    ['{6C05F9CC-060B-462A-A69E-FBF3A639ADF3}']
    property MessageHeader: IMessageHeaderType dispid 1;
    property Item: OleVariant dispid 2;
    property SecurityTrailer: IContentInformationType dispid 3;
    property MessageHeaderSpecified: WordBool dispid 5;
    property ItemSpecified: WordBool dispid 6;
    property SecurityTrailerSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 8;
    property SaleToPOIRequestClassName: WideString readonly dispid 9;
  end;

// *********************************************************************//
// Interface :   ISaleToPOIResponse
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F08F50D4-DBE3-4B0A-B225-7345F109A9C1}
// *********************************************************************//
  ISaleToPOIResponse = interface(IDispatch)
    ['{F08F50D4-DBE3-4B0A-B225-7345F109A9C1}']
    function Get_MessageHeader: IMessageHeaderType; safecall;
    procedure _Set_MessageHeader(const pRetVal: IMessageHeaderType); safecall;
    function Get_Item: OleVariant; safecall;
    procedure _Set_Item(pRetVal: OleVariant); safecall;
    function Get_SecurityTrailer: IContentInformationType; safecall;
    procedure _Set_SecurityTrailer(const pRetVal: IContentInformationType); safecall;
    function Get_MessageHeaderSpecified: WordBool; safecall;
    procedure Set_MessageHeaderSpecified(pRetVal: WordBool); safecall;
    function Get_ItemSpecified: WordBool; safecall;
    procedure Set_ItemSpecified(pRetVal: WordBool); safecall;
    function Get_SecurityTrailerSpecified: WordBool; safecall;
    procedure Set_SecurityTrailerSpecified(pRetVal: WordBool); safecall;
    function Get_ObjectHasBeenSet: WordBool; safecall;
    function Get_SaleToPOIResponseClassName: WideString; safecall;
    property MessageHeader: IMessageHeaderType read Get_MessageHeader write _Set_MessageHeader;
    property Item: OleVariant read Get_Item write _Set_Item;
    property SecurityTrailer: IContentInformationType read Get_SecurityTrailer write _Set_SecurityTrailer;
    property MessageHeaderSpecified: WordBool read Get_MessageHeaderSpecified write Set_MessageHeaderSpecified;
    property ItemSpecified: WordBool read Get_ItemSpecified write Set_ItemSpecified;
    property SecurityTrailerSpecified: WordBool read Get_SecurityTrailerSpecified write Set_SecurityTrailerSpecified;
    property ObjectHasBeenSet: WordBool read Get_ObjectHasBeenSet;
    property SaleToPOIResponseClassName: WideString read Get_SaleToPOIResponseClassName;
  end;

// *********************************************************************//
// DispIntf :    ISaleToPOIResponseDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F08F50D4-DBE3-4B0A-B225-7345F109A9C1}
// *********************************************************************//
  ISaleToPOIResponseDisp = dispinterface
    ['{F08F50D4-DBE3-4B0A-B225-7345F109A9C1}']
    property MessageHeader: IMessageHeaderType dispid 1;
    property Item: OleVariant dispid 2;
    property SecurityTrailer: IContentInformationType dispid 3;
    property MessageHeaderSpecified: WordBool dispid 5;
    property ItemSpecified: WordBool dispid 6;
    property SecurityTrailerSpecified: WordBool dispid 7;
    property ObjectHasBeenSet: WordBool readonly dispid 8;
    property SaleToPOIResponseClassName: WideString readonly dispid 9;
  end;

// *********************************************************************//
// Interface :   INexoActivity
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1ADB3E04-8743-492B-94C5-4F973C27B951}
// *********************************************************************//
  INexoActivity = interface(IDispatch)
    ['{1ADB3E04-8743-492B-94C5-4F973C27B951}']
    function AddSentMessage(const o: IUnknown): WordBool; safecall;
    function AddReceivedMessage(const o: IUnknown): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf :    INexoActivityDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1ADB3E04-8743-492B-94C5-4F973C27B951}
// *********************************************************************//
  INexoActivityDisp = dispinterface
    ['{1ADB3E04-8743-492B-94C5-4F973C27B951}']
    function AddSentMessage(const o: IUnknown): WordBool; dispid 100;
    function AddReceivedMessage(const o: IUnknown): WordBool; dispid 101;
  end;

// *********************************************************************//
// Interface :   _NexoMessage
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {7DA4FB59-22EF-399D-B3B4-1E0397E4CCF5}
// *********************************************************************//
  _NexoMessage = interface(IDispatch)
    ['{7DA4FB59-22EF-399D-B3B4-1E0397E4CCF5}']
  end;

// *********************************************************************//
// DispIntf :    _NexoMessageDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {7DA4FB59-22EF-399D-B3B4-1E0397E4CCF5}
// *********************************************************************//
  _NexoMessageDisp = dispinterface
    ['{7DA4FB59-22EF-399D-B3B4-1E0397E4CCF5}']
  end;

// *********************************************************************//
// Interface :   _NexoPartner
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {59BB3895-65B2-3942-940E-6DD04810656E}
// *********************************************************************//
  _NexoPartner = interface(IDispatch)
    ['{59BB3895-65B2-3942-940E-6DD04810656E}']
  end;

// *********************************************************************//
// DispIntf :    _NexoPartnerDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {59BB3895-65B2-3942-940E-6DD04810656E}
// *********************************************************************//
  _NexoPartnerDisp = dispinterface
    ['{59BB3895-65B2-3942-940E-6DD04810656E}']
  end;

// *********************************************************************//
// Interface :   _NexoEndPoint
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {5339D5FB-D6F3-3710-B640-21CEF51B9F46}
// *********************************************************************//
  _NexoEndPoint = interface(IDispatch)
    ['{5339D5FB-D6F3-3710-B640-21CEF51B9F46}']
  end;

// *********************************************************************//
// DispIntf :    _NexoEndPointDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {5339D5FB-D6F3-3710-B640-21CEF51B9F46}
// *********************************************************************//
  _NexoEndPointDisp = dispinterface
    ['{5339D5FB-D6F3-3710-B640-21CEF51B9F46}']
  end;

// *********************************************************************//
// Interface :   _NexoSession
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {22FDEE0C-B93F-3CF0-A2A2-BA85F2288CED}
// *********************************************************************//
  _NexoSession = interface(IDispatch)
    ['{22FDEE0C-B93F-3CF0-A2A2-BA85F2288CED}']
  end;

// *********************************************************************//
// DispIntf :    _NexoSessionDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {22FDEE0C-B93F-3CF0-A2A2-BA85F2288CED}
// *********************************************************************//
  _NexoSessionDisp = dispinterface
    ['{22FDEE0C-B93F-3CF0-A2A2-BA85F2288CED}']
  end;

// *********************************************************************//
// Interface :   INexoAnyMessage
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {91849B50-192A-4811-8BFA-A506BD74E778}
// *********************************************************************//
  INexoAnyMessage = interface(IDispatch)
    ['{91849B50-192A-4811-8BFA-A506BD74E778}']
    function Get_Processed: WordBool; safecall;
    procedure Set_Processed(pRetVal: WordBool); safecall;
    function Get_XML: WideString; safecall;
    function Get_TimeStamp: TDateTime; safecall;
    function Get_ToString(addkey: WordBool): WideString; safecall;
    property Processed: WordBool read Get_Processed write Set_Processed;
    property XML: WideString read Get_XML;
    property TimeStamp: TDateTime read Get_TimeStamp;
    property ToString[addkey: WordBool]: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoAnyMessageDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {91849B50-192A-4811-8BFA-A506BD74E778}
// *********************************************************************//
  INexoAnyMessageDisp = dispinterface
    ['{91849B50-192A-4811-8BFA-A506BD74E778}']
    property Processed: WordBool dispid 1;
    property XML: WideString readonly dispid 2;
    property TimeStamp: TDateTime readonly dispid 3;
    property ToString[addkey: WordBool]: WideString readonly dispid 100;
  end;

// *********************************************************************//
// Interface :   _NexoDelegates
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {9D53AE2A-5E06-352F-A630-F76256357105}
// *********************************************************************//
  _NexoDelegates = interface(IDispatch)
    ['{9D53AE2A-5E06-352F-A630-F76256357105}']
  end;

// *********************************************************************//
// DispIntf :    _NexoDelegatesDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {9D53AE2A-5E06-352F-A630-F76256357105}
// *********************************************************************//
  _NexoDelegatesDisp = dispinterface
    ['{9D53AE2A-5E06-352F-A630-F76256357105}']
  end;

// *********************************************************************//
// Interface :   INexoItem
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B7773C1A-8091-4B2A-A54E-74E686E5F91E}
// *********************************************************************//
  INexoItem = interface(IDispatch)
    ['{B7773C1A-8091-4B2A-A54E-74E686E5F91E}']
    function Get_Item: OleVariant; safecall;
    function Get_XML: WideString; safecall;
    function Get_IsRequest: WordBool; safecall;
    function Get_IsReply: WordBool; safecall;
    function Get_IsNotification: WordBool; safecall;
    function Get_type_: MessageTypeEnumeration; safecall;
    function Get_Category: MessageCategoryEnumeration; safecall;
    function Get_Class_: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_IsValid: WordBool; safecall;
    function Get_IsRequestValidForServer: WordBool; safecall;
    function Get_IsRequestValidForClient: WordBool; safecall;
    function Get_ReplyRequired: WordBool; safecall;
    function Get_SupportsAbort: WordBool; safecall;
    function Get_ToString: WideString; safecall;
    function MatchesRequest(const Item: INexoItem): WordBool; safecall;
    property Item: OleVariant read Get_Item;
    property XML: WideString read Get_XML;
    property IsRequest: WordBool read Get_IsRequest;
    property IsReply: WordBool read Get_IsReply;
    property IsNotification: WordBool read Get_IsNotification;
    property type_: MessageTypeEnumeration read Get_type_;
    property Category: MessageCategoryEnumeration read Get_Category;
    property Class_: MessageClassEnumeration read Get_Class_;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property IsValid: WordBool read Get_IsValid;
    property IsRequestValidForServer: WordBool read Get_IsRequestValidForServer;
    property IsRequestValidForClient: WordBool read Get_IsRequestValidForClient;
    property ReplyRequired: WordBool read Get_ReplyRequired;
    property SupportsAbort: WordBool read Get_SupportsAbort;
    property ToString: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoItemDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B7773C1A-8091-4B2A-A54E-74E686E5F91E}
// *********************************************************************//
  INexoItemDisp = dispinterface
    ['{B7773C1A-8091-4B2A-A54E-74E686E5F91E}']
    property Item: OleVariant readonly dispid 1;
    property XML: WideString readonly dispid 2;
    property IsRequest: WordBool readonly dispid 3;
    property IsReply: WordBool readonly dispid 4;
    property IsNotification: WordBool readonly dispid 5;
    property type_: MessageTypeEnumeration readonly dispid 6;
    property Category: MessageCategoryEnumeration readonly dispid 7;
    property Class_: MessageClassEnumeration readonly dispid 8;
    property IsService: WordBool readonly dispid 9;
    property IsDevice: WordBool readonly dispid 10;
    property IsEvent: WordBool readonly dispid 11;
    property IsValid: WordBool readonly dispid 12;
    property IsRequestValidForServer: WordBool readonly dispid 13;
    property IsRequestValidForClient: WordBool readonly dispid 14;
    property ReplyRequired: WordBool readonly dispid 15;
    property SupportsAbort: WordBool readonly dispid 16;
    property ToString: WideString readonly dispid 100;
    function MatchesRequest(const Item: INexoItem): WordBool; dispid 101;
  end;

// *********************************************************************//
// Interface :   _NexoKey
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {89CFED27-307C-3ADA-BBD6-40800D474F0F}
// *********************************************************************//
  _NexoKey = interface(IDispatch)
    ['{89CFED27-307C-3ADA-BBD6-40800D474F0F}']
  end;

// *********************************************************************//
// DispIntf :    _NexoKeyDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {89CFED27-307C-3ADA-BBD6-40800D474F0F}
// *********************************************************************//
  _NexoKeyDisp = dispinterface
    ['{89CFED27-307C-3ADA-BBD6-40800D474F0F}']
  end;

// *********************************************************************//
// Interface :   INexoAdmin
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9A3C60DD-2D50-4515-9762-4632AA45BBC5}
// *********************************************************************//
  INexoAdmin = interface(IDispatch)
    ['{9A3C60DD-2D50-4515-9762-4632AA45BBC5}']
    function Get_RequestData: IAdminRequestType; safecall;
    function Get_ReplyData: IAdminResponseType; safecall;
    function Get_RequestServiceIdentification: WideString; safecall;
    procedure Set_RequestServiceIdentification(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IAdminRequestType read Get_RequestData;
    property ReplyData: IAdminResponseType read Get_ReplyData;
    property RequestServiceIdentification: WideString read Get_RequestServiceIdentification write Set_RequestServiceIdentification;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoAdminDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9A3C60DD-2D50-4515-9762-4632AA45BBC5}
// *********************************************************************//
  INexoAdminDisp = dispinterface
    ['{9A3C60DD-2D50-4515-9762-4632AA45BBC5}']
    property RequestData: IAdminRequestType readonly dispid 1;
    property ReplyData: IAdminResponseType readonly dispid 2;
    property RequestServiceIdentification: WideString dispid 3;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoObject
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {70469D2A-4EFD-4023-82BB-7F6D382A5D83}
// *********************************************************************//
  INexoObject = interface(IDispatch)
    ['{70469D2A-4EFD-4023-82BB-7F6D382A5D83}']
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoObjectDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {70469D2A-4EFD-4023-82BB-7F6D382A5D83}
// *********************************************************************//
  INexoObjectDisp = dispinterface
    ['{70469D2A-4EFD-4023-82BB-7F6D382A5D83}']
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
  end;

// *********************************************************************//
// Interface :   INexoBalanceInquiry
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CDC42997-48E2-4D4A-9DD4-4CEBCA16652B}
// *********************************************************************//
  INexoBalanceInquiry = interface(IDispatch)
    ['{CDC42997-48E2-4D4A-9DD4-4CEBCA16652B}']
    function Get_RequestData: IBalanceInquiryRequestType; safecall;
    function Get_ReplyData: IBalanceInquiryResponseType; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IBalanceInquiryRequestType read Get_RequestData;
    property ReplyData: IBalanceInquiryResponseType read Get_ReplyData;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoBalanceInquiryDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CDC42997-48E2-4D4A-9DD4-4CEBCA16652B}
// *********************************************************************//
  INexoBalanceInquiryDisp = dispinterface
    ['{CDC42997-48E2-4D4A-9DD4-4CEBCA16652B}']
    property RequestData: IBalanceInquiryRequestType readonly dispid 1;
    property ReplyData: IBalanceInquiryResponseType readonly dispid 2;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoBatch
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0AB85F76-922F-46EF-8DCB-A050E7030921}
// *********************************************************************//
  INexoBatch = interface(IDispatch)
    ['{0AB85F76-922F-46EF-8DCB-A050E7030921}']
    function Get_RequestData: IBatchRequestType; safecall;
    function Get_ReplyData: IBatchResponseType; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IBatchRequestType read Get_RequestData;
    property ReplyData: IBatchResponseType read Get_ReplyData;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoBatchDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0AB85F76-922F-46EF-8DCB-A050E7030921}
// *********************************************************************//
  INexoBatchDisp = dispinterface
    ['{0AB85F76-922F-46EF-8DCB-A050E7030921}']
    property RequestData: IBatchRequestType readonly dispid 1;
    property ReplyData: IBatchResponseType readonly dispid 2;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoCardAcquisition
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {85FADEEB-5156-405B-87EE-54D9AE22E316}
// *********************************************************************//
  INexoCardAcquisition = interface(IDispatch)
    ['{85FADEEB-5156-405B-87EE-54D9AE22E316}']
    function Get_RequestData: ICardAcquisitionRequestType; safecall;
    function Get_ReplyData: ICardAcquisitionResponseType; safecall;
    function Get_RequestSaleTransactionID: WideString; safecall;
    procedure Set_RequestSaleTransactionID(const pRetVal: WideString); safecall;
    function Get_RequestSaleTransactionTimestamp: WideString; safecall;
    procedure Set_RequestSaleTransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_ReplyPOITransactionID: WideString; safecall;
    procedure Set_ReplyPOITransactionID(const pRetVal: WideString); safecall;
    function Get_ReplyPOITransactionTimestamp: WideString; safecall;
    procedure Set_ReplyPOITransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: ICardAcquisitionRequestType read Get_RequestData;
    property ReplyData: ICardAcquisitionResponseType read Get_ReplyData;
    property RequestSaleTransactionID: WideString read Get_RequestSaleTransactionID write Set_RequestSaleTransactionID;
    property RequestSaleTransactionTimestamp: WideString read Get_RequestSaleTransactionTimestamp write Set_RequestSaleTransactionTimestamp;
    property ReplyPOITransactionID: WideString read Get_ReplyPOITransactionID write Set_ReplyPOITransactionID;
    property ReplyPOITransactionTimestamp: WideString read Get_ReplyPOITransactionTimestamp write Set_ReplyPOITransactionTimestamp;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoCardAcquisitionDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {85FADEEB-5156-405B-87EE-54D9AE22E316}
// *********************************************************************//
  INexoCardAcquisitionDisp = dispinterface
    ['{85FADEEB-5156-405B-87EE-54D9AE22E316}']
    property RequestData: ICardAcquisitionRequestType readonly dispid 1;
    property ReplyData: ICardAcquisitionResponseType readonly dispid 2;
    property RequestSaleTransactionID: WideString dispid 3;
    property RequestSaleTransactionTimestamp: WideString dispid 4;
    property ReplyPOITransactionID: WideString dispid 50;
    property ReplyPOITransactionTimestamp: WideString dispid 51;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoCardReaderInit
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {424AC59E-6B02-46F1-97AD-F4DAF1BEBDCE}
// *********************************************************************//
  INexoCardReaderInit = interface(IDispatch)
    ['{424AC59E-6B02-46F1-97AD-F4DAF1BEBDCE}']
    function Get_RequestData: ICardReaderInitRequestType; safecall;
    function Get_ReplyData: ICardReaderInitResponseType; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: ICardReaderInitRequestType read Get_RequestData;
    property ReplyData: ICardReaderInitResponseType read Get_ReplyData;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoCardReaderInitDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {424AC59E-6B02-46F1-97AD-F4DAF1BEBDCE}
// *********************************************************************//
  INexoCardReaderInitDisp = dispinterface
    ['{424AC59E-6B02-46F1-97AD-F4DAF1BEBDCE}']
    property RequestData: ICardReaderInitRequestType readonly dispid 1;
    property ReplyData: ICardReaderInitResponseType readonly dispid 2;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoCardReaderAPDU
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CB4E4768-D56A-4105-B780-004E97929361}
// *********************************************************************//
  INexoCardReaderAPDU = interface(IDispatch)
    ['{CB4E4768-D56A-4105-B780-004E97929361}']
    function Get_RequestData: ICardReaderAPDURequestType; safecall;
    function Get_ReplyData: ICardReaderAPDUResponseType; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: ICardReaderAPDURequestType read Get_RequestData;
    property ReplyData: ICardReaderAPDUResponseType read Get_ReplyData;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoCardReaderAPDUDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CB4E4768-D56A-4105-B780-004E97929361}
// *********************************************************************//
  INexoCardReaderAPDUDisp = dispinterface
    ['{CB4E4768-D56A-4105-B780-004E97929361}']
    property RequestData: ICardReaderAPDURequestType readonly dispid 1;
    property ReplyData: ICardReaderAPDUResponseType readonly dispid 2;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoCardReaderPowerOFF
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {70C8C7A9-62C2-4729-929C-8163614D09DA}
// *********************************************************************//
  INexoCardReaderPowerOFF = interface(IDispatch)
    ['{70C8C7A9-62C2-4729-929C-8163614D09DA}']
    function Get_RequestData: ICardReaderPowerOffRequestType; safecall;
    function Get_ReplyData: ICardReaderPowerOffResponseType; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: ICardReaderPowerOffRequestType read Get_RequestData;
    property ReplyData: ICardReaderPowerOffResponseType read Get_ReplyData;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoCardReaderPowerOFFDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {70C8C7A9-62C2-4729-929C-8163614D09DA}
// *********************************************************************//
  INexoCardReaderPowerOFFDisp = dispinterface
    ['{70C8C7A9-62C2-4729-929C-8163614D09DA}']
    property RequestData: ICardReaderPowerOffRequestType readonly dispid 1;
    property ReplyData: ICardReaderPowerOffResponseType readonly dispid 2;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoDeviceDisplay
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F6DC1D06-11C7-4814-9326-E68C4A9EBF4E}
// *********************************************************************//
  INexoDeviceDisplay = interface(IDispatch)
    ['{F6DC1D06-11C7-4814-9326-E68C4A9EBF4E}']
    function Get_RequestData: IDisplayRequestType; safecall;
    function Get_ReplyData: IDisplayResponseType; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IDisplayRequestType read Get_RequestData;
    property ReplyData: IDisplayResponseType read Get_ReplyData;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoDeviceDisplayDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F6DC1D06-11C7-4814-9326-E68C4A9EBF4E}
// *********************************************************************//
  INexoDeviceDisplayDisp = dispinterface
    ['{F6DC1D06-11C7-4814-9326-E68C4A9EBF4E}']
    property RequestData: IDisplayRequestType readonly dispid 1;
    property ReplyData: IDisplayResponseType readonly dispid 2;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoDeviceInputUpdate
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {529FFD3D-658C-49C5-85A3-66799AAA5E34}
// *********************************************************************//
  INexoDeviceInputUpdate = interface(IDispatch)
    ['{529FFD3D-658C-49C5-85A3-66799AAA5E34}']
    function Get_RequestData: IInputUpdateType; safecall;
    function Get_RequestMessageReferenceServiceID: WideString; safecall;
    procedure Set_RequestMessageReferenceServiceID(const pRetVal: WideString); safecall;
    function Get_RequestMessageReferenceDeviceID: WideString; safecall;
    procedure Set_RequestMessageReferenceDeviceID(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IInputUpdateType read Get_RequestData;
    property RequestMessageReferenceServiceID: WideString read Get_RequestMessageReferenceServiceID write Set_RequestMessageReferenceServiceID;
    property RequestMessageReferenceDeviceID: WideString read Get_RequestMessageReferenceDeviceID write Set_RequestMessageReferenceDeviceID;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoDeviceInputUpdateDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {529FFD3D-658C-49C5-85A3-66799AAA5E34}
// *********************************************************************//
  INexoDeviceInputUpdateDisp = dispinterface
    ['{529FFD3D-658C-49C5-85A3-66799AAA5E34}']
    property RequestData: IInputUpdateType readonly dispid 1;
    property RequestMessageReferenceServiceID: WideString dispid 3;
    property RequestMessageReferenceDeviceID: WideString dispid 4;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoDeviceSound
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A3534554-E05D-4A11-BB41-88DEC0B20EE4}
// *********************************************************************//
  INexoDeviceSound = interface(IDispatch)
    ['{A3534554-E05D-4A11-BB41-88DEC0B20EE4}']
    function Get_RequestData: ISoundRequestType; safecall;
    function Get_ReplyData: ISoundResponseType; safecall;
    function Get_RequestSoundAction: SoundActionEnumeration; safecall;
    procedure Set_RequestSoundAction(pRetVal: SoundActionEnumeration); safecall;
    function Get_RequestSoundVolume: Integer; safecall;
    procedure Set_RequestSoundVolume(pRetVal: Integer); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: ISoundRequestType read Get_RequestData;
    property ReplyData: ISoundResponseType read Get_ReplyData;
    property RequestSoundAction: SoundActionEnumeration read Get_RequestSoundAction write Set_RequestSoundAction;
    property RequestSoundVolume: Integer read Get_RequestSoundVolume write Set_RequestSoundVolume;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoDeviceSoundDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A3534554-E05D-4A11-BB41-88DEC0B20EE4}
// *********************************************************************//
  INexoDeviceSoundDisp = dispinterface
    ['{A3534554-E05D-4A11-BB41-88DEC0B20EE4}']
    property RequestData: ISoundRequestType readonly dispid 1;
    property ReplyData: ISoundResponseType readonly dispid 2;
    property RequestSoundAction: SoundActionEnumeration dispid 3;
    property RequestSoundVolume: Integer dispid 4;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoEnableService
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {459D4296-691D-48D6-84E5-F9069D5B85D6}
// *********************************************************************//
  INexoEnableService = interface(IDispatch)
    ['{459D4296-691D-48D6-84E5-F9069D5B85D6}']
    function Get_RequestData: IEnableServiceRequestType; safecall;
    function Get_ReplyData: IEnableServiceResponseType; safecall;
    function Get_RequestTransactionAction: TransactionActionEnumeration; safecall;
    procedure Set_RequestTransactionAction(pRetVal: TransactionActionEnumeration); safecall;
    function Get_RequestServicesEnabled: WideString; safecall;
    procedure Set_RequestServicesEnabled(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IEnableServiceRequestType read Get_RequestData;
    property ReplyData: IEnableServiceResponseType read Get_ReplyData;
    property RequestTransactionAction: TransactionActionEnumeration read Get_RequestTransactionAction write Set_RequestTransactionAction;
    property RequestServicesEnabled: WideString read Get_RequestServicesEnabled write Set_RequestServicesEnabled;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoEnableServiceDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {459D4296-691D-48D6-84E5-F9069D5B85D6}
// *********************************************************************//
  INexoEnableServiceDisp = dispinterface
    ['{459D4296-691D-48D6-84E5-F9069D5B85D6}']
    property RequestData: IEnableServiceRequestType readonly dispid 1;
    property ReplyData: IEnableServiceResponseType readonly dispid 2;
    property RequestTransactionAction: TransactionActionEnumeration dispid 3;
    property RequestServicesEnabled: WideString dispid 4;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoGetTotals
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {ED6FDAD1-7D79-4DA6-8F4F-35BCAFADF772}
// *********************************************************************//
  INexoGetTotals = interface(IDispatch)
    ['{ED6FDAD1-7D79-4DA6-8F4F-35BCAFADF772}']
    function Get_RequestData: IGetTotalsRequestType; safecall;
    function Get_ReplyData: IGetTotalsResponseType; safecall;
    function Get_ReplyPOIReconciliationID: WideString; safecall;
    procedure Set_ReplyPOIReconciliationID(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IGetTotalsRequestType read Get_RequestData;
    property ReplyData: IGetTotalsResponseType read Get_ReplyData;
    property ReplyPOIReconciliationID: WideString read Get_ReplyPOIReconciliationID write Set_ReplyPOIReconciliationID;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoGetTotalsDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {ED6FDAD1-7D79-4DA6-8F4F-35BCAFADF772}
// *********************************************************************//
  INexoGetTotalsDisp = dispinterface
    ['{ED6FDAD1-7D79-4DA6-8F4F-35BCAFADF772}']
    property RequestData: IGetTotalsRequestType readonly dispid 1;
    property ReplyData: IGetTotalsResponseType readonly dispid 2;
    property ReplyPOIReconciliationID: WideString dispid 50;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoLoyalty
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C69EE5BC-630A-4D1F-990B-0D0984E07F08}
// *********************************************************************//
  INexoLoyalty = interface(IDispatch)
    ['{C69EE5BC-630A-4D1F-990B-0D0984E07F08}']
    function Get_RequestData: ILoyaltyRequestType; safecall;
    function Get_ReplyData: ILoyaltyResponseType; safecall;
    function Get_RequestSaleTransactionID: WideString; safecall;
    procedure Set_RequestSaleTransactionID(const pRetVal: WideString); safecall;
    function Get_RequestSaleTransactionTimestamp: WideString; safecall;
    procedure Set_RequestSaleTransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_RequestOriginalPOITransactionID: WideString; safecall;
    procedure Set_RequestOriginalPOITransactionID(const pRetVal: WideString); safecall;
    function Get_RequestOriginalPOITransactionTimestamp: WideString; safecall;
    procedure Set_RequestOriginalPOITransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_RequestLoyaltyTransactionType: WideString; safecall;
    procedure Set_RequestLoyaltyTransactionType(const pRetVal: WideString); safecall;
    function Get_ReplySaleTransactionID: WideString; safecall;
    procedure Set_ReplySaleTransactionID(const pRetVal: WideString); safecall;
    function Get_ReplySaleTransactionTimestamp: WideString; safecall;
    procedure Set_ReplySaleTransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_ReplyPOITransactionID: WideString; safecall;
    procedure Set_ReplyPOITransactionID(const pRetVal: WideString); safecall;
    function Get_ReplyPOITransactionTimestamp: WideString; safecall;
    procedure Set_ReplyPOITransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: ILoyaltyRequestType read Get_RequestData;
    property ReplyData: ILoyaltyResponseType read Get_ReplyData;
    property RequestSaleTransactionID: WideString read Get_RequestSaleTransactionID write Set_RequestSaleTransactionID;
    property RequestSaleTransactionTimestamp: WideString read Get_RequestSaleTransactionTimestamp write Set_RequestSaleTransactionTimestamp;
    property RequestOriginalPOITransactionID: WideString read Get_RequestOriginalPOITransactionID write Set_RequestOriginalPOITransactionID;
    property RequestOriginalPOITransactionTimestamp: WideString read Get_RequestOriginalPOITransactionTimestamp write Set_RequestOriginalPOITransactionTimestamp;
    property RequestLoyaltyTransactionType: WideString read Get_RequestLoyaltyTransactionType write Set_RequestLoyaltyTransactionType;
    property ReplySaleTransactionID: WideString read Get_ReplySaleTransactionID write Set_ReplySaleTransactionID;
    property ReplySaleTransactionTimestamp: WideString read Get_ReplySaleTransactionTimestamp write Set_ReplySaleTransactionTimestamp;
    property ReplyPOITransactionID: WideString read Get_ReplyPOITransactionID write Set_ReplyPOITransactionID;
    property ReplyPOITransactionTimestamp: WideString read Get_ReplyPOITransactionTimestamp write Set_ReplyPOITransactionTimestamp;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoLoyaltyDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C69EE5BC-630A-4D1F-990B-0D0984E07F08}
// *********************************************************************//
  INexoLoyaltyDisp = dispinterface
    ['{C69EE5BC-630A-4D1F-990B-0D0984E07F08}']
    property RequestData: ILoyaltyRequestType readonly dispid 1;
    property ReplyData: ILoyaltyResponseType readonly dispid 2;
    property RequestSaleTransactionID: WideString dispid 3;
    property RequestSaleTransactionTimestamp: WideString dispid 4;
    property RequestOriginalPOITransactionID: WideString dispid 5;
    property RequestOriginalPOITransactionTimestamp: WideString dispid 6;
    property RequestLoyaltyTransactionType: WideString dispid 7;
    property ReplySaleTransactionID: WideString dispid 51;
    property ReplySaleTransactionTimestamp: WideString dispid 52;
    property ReplyPOITransactionID: WideString dispid 53;
    property ReplyPOITransactionTimestamp: WideString dispid 54;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoPayment
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BD2E9B0D-1DE8-4D77-A974-0E6078206FAA}
// *********************************************************************//
  INexoPayment = interface(IDispatch)
    ['{BD2E9B0D-1DE8-4D77-A974-0E6078206FAA}']
    function Get_RequestData: IPaymentRequestType; safecall;
    function Get_ReplyData: IPaymentResponseType; safecall;
    function Get_RequestSaleTransactionID: WideString; safecall;
    procedure Set_RequestSaleTransactionID(const pRetVal: WideString); safecall;
    function Get_RequestSaleTransactionTimestamp: WideString; safecall;
    procedure Set_RequestSaleTransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_RequestOriginalPOITransactionID: WideString; safecall;
    procedure Set_RequestOriginalPOITransactionID(const pRetVal: WideString); safecall;
    function Get_RequestOriginalPOITransactionTimestamp: WideString; safecall;
    procedure Set_RequestOriginalPOITransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_RequestRequestedAmount: Double; safecall;
    procedure Set_RequestRequestedAmount(pRetVal: Double); safecall;
    function Get_RequestCurrency: WideString; safecall;
    procedure Set_RequestCurrency(const pRetVal: WideString); safecall;
    function Get_RequestSaleReferenceID: WideString; safecall;
    procedure Set_RequestSaleReferenceID(const pRetVal: WideString); safecall;
    function Get_ReplyPOITransactionID: WideString; safecall;
    procedure Set_ReplyPOITransactionID(const pRetVal: WideString); safecall;
    function Get_ReplyPOITransactionTimestamp: WideString; safecall;
    procedure Set_ReplyPOITransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_ReplyAuthorizedAmount: Double; safecall;
    procedure Set_ReplyAuthorizedAmount(pRetVal: Double); safecall;
    function Get_ReplyPaymentInstrumentType: PaymentInstrumentTypeEnumeration; safecall;
    procedure Set_ReplyPaymentInstrumentType(pRetVal: PaymentInstrumentTypeEnumeration); safecall;
    function Get_ReplyPaymentBrand: WideString; safecall;
    procedure Set_ReplyPaymentBrand(const pRetVal: WideString); safecall;
    function Get_ReplyCardCountryCode: WideString; safecall;
    procedure Set_ReplyCardCountryCode(const pRetVal: WideString); safecall;
    function Get_ReplySensitiveCardData: ISensitiveCardDataType; safecall;
    procedure _Set_ReplySensitiveCardData(const pRetVal: ISensitiveCardDataType); safecall;
    function Get_ReplyProtectedCardData: IContentInformationType; safecall;
    procedure _Set_ReplyProtectedCardData(const pRetVal: IContentInformationType); safecall;
    function Get_Accepted: WordBool; safecall;
    function Get_PaymentType: PaymentTypeEnumeration; safecall;
    function Get_IsNormalPayment: WordBool; safecall;
    function Get_IsRefund: WordBool; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IPaymentRequestType read Get_RequestData;
    property ReplyData: IPaymentResponseType read Get_ReplyData;
    property RequestSaleTransactionID: WideString read Get_RequestSaleTransactionID write Set_RequestSaleTransactionID;
    property RequestSaleTransactionTimestamp: WideString read Get_RequestSaleTransactionTimestamp write Set_RequestSaleTransactionTimestamp;
    property RequestOriginalPOITransactionID: WideString read Get_RequestOriginalPOITransactionID write Set_RequestOriginalPOITransactionID;
    property RequestOriginalPOITransactionTimestamp: WideString read Get_RequestOriginalPOITransactionTimestamp write Set_RequestOriginalPOITransactionTimestamp;
    property RequestRequestedAmount: Double read Get_RequestRequestedAmount write Set_RequestRequestedAmount;
    property RequestCurrency: WideString read Get_RequestCurrency write Set_RequestCurrency;
    property RequestSaleReferenceID: WideString read Get_RequestSaleReferenceID write Set_RequestSaleReferenceID;
    property ReplyPOITransactionID: WideString read Get_ReplyPOITransactionID write Set_ReplyPOITransactionID;
    property ReplyPOITransactionTimestamp: WideString read Get_ReplyPOITransactionTimestamp write Set_ReplyPOITransactionTimestamp;
    property ReplyAuthorizedAmount: Double read Get_ReplyAuthorizedAmount write Set_ReplyAuthorizedAmount;
    property ReplyPaymentInstrumentType: PaymentInstrumentTypeEnumeration read Get_ReplyPaymentInstrumentType write Set_ReplyPaymentInstrumentType;
    property ReplyPaymentBrand: WideString read Get_ReplyPaymentBrand write Set_ReplyPaymentBrand;
    property ReplyCardCountryCode: WideString read Get_ReplyCardCountryCode write Set_ReplyCardCountryCode;
    property ReplySensitiveCardData: ISensitiveCardDataType read Get_ReplySensitiveCardData write _Set_ReplySensitiveCardData;
    property ReplyProtectedCardData: IContentInformationType read Get_ReplyProtectedCardData write _Set_ReplyProtectedCardData;
    property Accepted: WordBool read Get_Accepted;
    property PaymentType: PaymentTypeEnumeration read Get_PaymentType;
    property IsNormalPayment: WordBool read Get_IsNormalPayment;
    property IsRefund: WordBool read Get_IsRefund;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoPaymentDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BD2E9B0D-1DE8-4D77-A974-0E6078206FAA}
// *********************************************************************//
  INexoPaymentDisp = dispinterface
    ['{BD2E9B0D-1DE8-4D77-A974-0E6078206FAA}']
    property RequestData: IPaymentRequestType readonly dispid 1;
    property ReplyData: IPaymentResponseType readonly dispid 2;
    property RequestSaleTransactionID: WideString dispid 5;
    property RequestSaleTransactionTimestamp: WideString dispid 6;
    property RequestOriginalPOITransactionID: WideString dispid 7;
    property RequestOriginalPOITransactionTimestamp: WideString dispid 8;
    property RequestRequestedAmount: Double dispid 9;
    property RequestCurrency: WideString dispid 10;
    property RequestSaleReferenceID: WideString dispid 11;
    property ReplyPOITransactionID: WideString dispid 50;
    property ReplyPOITransactionTimestamp: WideString dispid 51;
    property ReplyAuthorizedAmount: Double dispid 52;
    property ReplyPaymentInstrumentType: PaymentInstrumentTypeEnumeration dispid 53;
    property ReplyPaymentBrand: WideString dispid 54;
    property ReplyCardCountryCode: WideString dispid 55;
    property ReplySensitiveCardData: ISensitiveCardDataType dispid 56;
    property ReplyProtectedCardData: IContentInformationType dispid 57;
    property Accepted: WordBool readonly dispid 500;
    property PaymentType: PaymentTypeEnumeration readonly dispid 501;
    property IsNormalPayment: WordBool readonly dispid 502;
    property IsRefund: WordBool readonly dispid 503;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoPIN
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {877BE257-F158-4A4F-9646-6080B193749B}
// *********************************************************************//
  INexoPIN = interface(IDispatch)
    ['{877BE257-F158-4A4F-9646-6080B193749B}']
    function Get_RequestData: IPINRequestType; safecall;
    function Get_ReplyData: IPINResponseType; safecall;
    function Get_RequestPINRequestType: PINRequestTypeEnumeration; safecall;
    procedure Set_RequestPINRequestType(pRetVal: PINRequestTypeEnumeration); safecall;
    function Get_RequestMaxWaitingTime: Integer; safecall;
    procedure Set_RequestMaxWaitingTime(pRetVal: Integer); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IPINRequestType read Get_RequestData;
    property ReplyData: IPINResponseType read Get_ReplyData;
    property RequestPINRequestType: PINRequestTypeEnumeration read Get_RequestPINRequestType write Set_RequestPINRequestType;
    property RequestMaxWaitingTime: Integer read Get_RequestMaxWaitingTime write Set_RequestMaxWaitingTime;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoPINDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {877BE257-F158-4A4F-9646-6080B193749B}
// *********************************************************************//
  INexoPINDisp = dispinterface
    ['{877BE257-F158-4A4F-9646-6080B193749B}']
    property RequestData: IPINRequestType readonly dispid 1;
    property ReplyData: IPINResponseType readonly dispid 2;
    property RequestPINRequestType: PINRequestTypeEnumeration dispid 3;
    property RequestMaxWaitingTime: Integer dispid 4;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoReconciliation
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7ADA4C0C-EEAD-4B53-8089-A8B7491D1FB6}
// *********************************************************************//
  INexoReconciliation = interface(IDispatch)
    ['{7ADA4C0C-EEAD-4B53-8089-A8B7491D1FB6}']
    function Get_RequestData: IReconciliationRequestType; safecall;
    function Get_ReplyData: IReconciliationResponseType; safecall;
    function Get_RequestReconciliationType: ReconciliationTypeEnumeration; safecall;
    procedure Set_RequestReconciliationType(pRetVal: ReconciliationTypeEnumeration); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IReconciliationRequestType read Get_RequestData;
    property ReplyData: IReconciliationResponseType read Get_ReplyData;
    property RequestReconciliationType: ReconciliationTypeEnumeration read Get_RequestReconciliationType write Set_RequestReconciliationType;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoReconciliationDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7ADA4C0C-EEAD-4B53-8089-A8B7491D1FB6}
// *********************************************************************//
  INexoReconciliationDisp = dispinterface
    ['{7ADA4C0C-EEAD-4B53-8089-A8B7491D1FB6}']
    property RequestData: IReconciliationRequestType readonly dispid 1;
    property ReplyData: IReconciliationResponseType readonly dispid 2;
    property RequestReconciliationType: ReconciliationTypeEnumeration dispid 3;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoStoredValue
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2F3C26FD-174D-45BC-86A4-981B953C6611}
// *********************************************************************//
  INexoStoredValue = interface(IDispatch)
    ['{2F3C26FD-174D-45BC-86A4-981B953C6611}']
    function Get_RequestData: IStoredValueRequestType; safecall;
    function Get_ReplyData: IStoredValueResponseType; safecall;
    function Get_RequestSaleTransactionID: WideString; safecall;
    procedure Set_RequestSaleTransactionID(const pRetVal: WideString); safecall;
    function Get_RequestSaleTransactionTimestamp: WideString; safecall;
    procedure Set_RequestSaleTransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IStoredValueRequestType read Get_RequestData;
    property ReplyData: IStoredValueResponseType read Get_ReplyData;
    property RequestSaleTransactionID: WideString read Get_RequestSaleTransactionID write Set_RequestSaleTransactionID;
    property RequestSaleTransactionTimestamp: WideString read Get_RequestSaleTransactionTimestamp write Set_RequestSaleTransactionTimestamp;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoStoredValueDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2F3C26FD-174D-45BC-86A4-981B953C6611}
// *********************************************************************//
  INexoStoredValueDisp = dispinterface
    ['{2F3C26FD-174D-45BC-86A4-981B953C6611}']
    property RequestData: IStoredValueRequestType readonly dispid 1;
    property ReplyData: IStoredValueResponseType readonly dispid 2;
    property RequestSaleTransactionID: WideString dispid 3;
    property RequestSaleTransactionTimestamp: WideString dispid 4;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoTransmit
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8314ADA0-DD56-497D-9FFA-02A86CB305CA}
// *********************************************************************//
  INexoTransmit = interface(IDispatch)
    ['{8314ADA0-DD56-497D-9FFA-02A86CB305CA}']
    function Get_RequestData: ITransmitRequestType; safecall;
    function Get_ReplyData: ITransmitResponseType; safecall;
    function Get_RequestMaximumTransmitTime: Integer; safecall;
    procedure Set_RequestMaximumTransmitTime(pRetVal: Integer); safecall;
    function Get_RequestDestinationAddress: WideString; safecall;
    procedure Set_RequestDestinationAddress(const pRetVal: WideString); safecall;
    function Get_RequestMessage: WideString; safecall;
    procedure Set_RequestMessage(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: ITransmitRequestType read Get_RequestData;
    property ReplyData: ITransmitResponseType read Get_ReplyData;
    property RequestMaximumTransmitTime: Integer read Get_RequestMaximumTransmitTime write Set_RequestMaximumTransmitTime;
    property RequestDestinationAddress: WideString read Get_RequestDestinationAddress write Set_RequestDestinationAddress;
    property RequestMessage: WideString read Get_RequestMessage write Set_RequestMessage;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoTransmitDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8314ADA0-DD56-497D-9FFA-02A86CB305CA}
// *********************************************************************//
  INexoTransmitDisp = dispinterface
    ['{8314ADA0-DD56-497D-9FFA-02A86CB305CA}']
    property RequestData: ITransmitRequestType readonly dispid 1;
    property ReplyData: ITransmitResponseType readonly dispid 2;
    property RequestMaximumTransmitTime: Integer dispid 3;
    property RequestDestinationAddress: WideString dispid 4;
    property RequestMessage: WideString dispid 5;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoAbort
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D71CE22F-0AA1-4792-9857-864A5E29A2BE}
// *********************************************************************//
  INexoAbort = interface(IDispatch)
    ['{D71CE22F-0AA1-4792-9857-864A5E29A2BE}']
    function Get_RequestData: IAbortRequestType; safecall;
    function Get_AbortPOIID: WideString; safecall;
    procedure Set_AbortPOIID(const pRetVal: WideString); safecall;
    function Get_AbortSaleID: WideString; safecall;
    procedure Set_AbortSaleID(const pRetVal: WideString); safecall;
    function Get_AbortServiceID: WideString; safecall;
    procedure Set_AbortServiceID(const pRetVal: WideString); safecall;
    function Get_AbortDeviceID: WideString; safecall;
    procedure Set_AbortDeviceID(const pRetVal: WideString); safecall;
    function Get_AbortMessageCategory: MessageCategoryEnumeration; safecall;
    procedure Set_AbortMessageCategory(pRetVal: MessageCategoryEnumeration); safecall;
    function Get_AbortReason: WideString; safecall;
    procedure Set_AbortReason(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IAbortRequestType read Get_RequestData;
    property AbortPOIID: WideString read Get_AbortPOIID write Set_AbortPOIID;
    property AbortSaleID: WideString read Get_AbortSaleID write Set_AbortSaleID;
    property AbortServiceID: WideString read Get_AbortServiceID write Set_AbortServiceID;
    property AbortDeviceID: WideString read Get_AbortDeviceID write Set_AbortDeviceID;
    property AbortMessageCategory: MessageCategoryEnumeration read Get_AbortMessageCategory write Set_AbortMessageCategory;
    property AbortReason: WideString read Get_AbortReason write Set_AbortReason;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoAbortDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D71CE22F-0AA1-4792-9857-864A5E29A2BE}
// *********************************************************************//
  INexoAbortDisp = dispinterface
    ['{D71CE22F-0AA1-4792-9857-864A5E29A2BE}']
    property RequestData: IAbortRequestType readonly dispid 1;
    property AbortPOIID: WideString dispid 3;
    property AbortSaleID: WideString dispid 4;
    property AbortServiceID: WideString dispid 5;
    property AbortDeviceID: WideString dispid 6;
    property AbortMessageCategory: MessageCategoryEnumeration dispid 7;
    property AbortReason: WideString dispid 8;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoDiagnosis
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E8C62FFB-C292-4592-A538-8283E5807DA1}
// *********************************************************************//
  INexoDiagnosis = interface(IDispatch)
    ['{E8C62FFB-C292-4592-A538-8283E5807DA1}']
    function Get_RequestData: IDiagnosisRequestType; safecall;
    function Get_ReplyData: IDiagnosisResponseType; safecall;
    function Get_RequestPOIID: WideString; safecall;
    procedure Set_RequestPOIID(const pRetVal: WideString); safecall;
    function Get_RequestHostDiagnosisFlag: WordBool; safecall;
    procedure Set_RequestHostDiagnosisFlag(pRetVal: WordBool); safecall;
    function Get_ReplyGlobalStatus: GlobalStatusEnumeration; safecall;
    procedure Set_ReplyGlobalStatus(pRetVal: GlobalStatusEnumeration); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IDiagnosisRequestType read Get_RequestData;
    property ReplyData: IDiagnosisResponseType read Get_ReplyData;
    property RequestPOIID: WideString read Get_RequestPOIID write Set_RequestPOIID;
    property RequestHostDiagnosisFlag: WordBool read Get_RequestHostDiagnosisFlag write Set_RequestHostDiagnosisFlag;
    property ReplyGlobalStatus: GlobalStatusEnumeration read Get_ReplyGlobalStatus write Set_ReplyGlobalStatus;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoDiagnosisDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E8C62FFB-C292-4592-A538-8283E5807DA1}
// *********************************************************************//
  INexoDiagnosisDisp = dispinterface
    ['{E8C62FFB-C292-4592-A538-8283E5807DA1}']
    property RequestData: IDiagnosisRequestType readonly dispid 1;
    property ReplyData: IDiagnosisResponseType readonly dispid 2;
    property RequestPOIID: WideString dispid 3;
    property RequestHostDiagnosisFlag: WordBool dispid 4;
    property ReplyGlobalStatus: GlobalStatusEnumeration dispid 50;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoEvent
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {389CD3D9-3950-4A61-B90E-BC9EB85E0008}
// *********************************************************************//
  INexoEvent = interface(IDispatch)
    ['{389CD3D9-3950-4A61-B90E-BC9EB85E0008}']
    function Get_RequestData: IEventNotificationType; safecall;
    function Get_EventTimestamp: WideString; safecall;
    procedure Set_EventTimestamp(const pRetVal: WideString); safecall;
    function Get_EventToNotify: EventToNotifyEnumeration; safecall;
    procedure Set_EventToNotify(pRetVal: EventToNotifyEnumeration); safecall;
    function Get_EventDetails: WideString; safecall;
    procedure Set_EventDetails(const pRetVal: WideString); safecall;
    function Get_EventRejectedMessage: INexoNonStringType; safecall;
    procedure _Set_EventRejectedMessage(const pRetVal: INexoNonStringType); safecall;
    function Get_EventMaintenanceRequiredFlag: WordBool; safecall;
    procedure Set_EventMaintenanceRequiredFlag(pRetVal: WordBool); safecall;
    function Get_EventCustomerLanguage: WideString; safecall;
    procedure Set_EventCustomerLanguage(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IEventNotificationType read Get_RequestData;
    property EventTimestamp: WideString read Get_EventTimestamp write Set_EventTimestamp;
    property EventToNotify: EventToNotifyEnumeration read Get_EventToNotify write Set_EventToNotify;
    property EventDetails: WideString read Get_EventDetails write Set_EventDetails;
    property EventRejectedMessage: INexoNonStringType read Get_EventRejectedMessage write _Set_EventRejectedMessage;
    property EventMaintenanceRequiredFlag: WordBool read Get_EventMaintenanceRequiredFlag write Set_EventMaintenanceRequiredFlag;
    property EventCustomerLanguage: WideString read Get_EventCustomerLanguage write Set_EventCustomerLanguage;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoEventDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {389CD3D9-3950-4A61-B90E-BC9EB85E0008}
// *********************************************************************//
  INexoEventDisp = dispinterface
    ['{389CD3D9-3950-4A61-B90E-BC9EB85E0008}']
    property RequestData: IEventNotificationType readonly dispid 1;
    property EventTimestamp: WideString dispid 2;
    property EventToNotify: EventToNotifyEnumeration dispid 3;
    property EventDetails: WideString dispid 4;
    property EventRejectedMessage: INexoNonStringType dispid 5;
    property EventMaintenanceRequiredFlag: WordBool dispid 6;
    property EventCustomerLanguage: WideString dispid 7;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoTransactionStatus
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {18C58418-DF2D-4CF4-B394-7C055526C73A}
// *********************************************************************//
  INexoTransactionStatus = interface(IDispatch)
    ['{18C58418-DF2D-4CF4-B394-7C055526C73A}']
    function Get_RequestData: ITransactionStatusRequestType; safecall;
    function Get_ReplyData: ITransactionStatusResponseType; safecall;
    function Get_RequestMessageReference: IMessageReferenceType; safecall;
    procedure _Set_RequestMessageReference(const pRetVal: IMessageReferenceType); safecall;
    function Get_RequestReceiptReprintFlag: WordBool; safecall;
    procedure Set_RequestReceiptReprintFlag(pRetVal: WordBool); safecall;
    function Get_ReplyMessageReference: IMessageReferenceType; safecall;
    procedure _Set_ReplyMessageReference(const pRetVal: IMessageReferenceType); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: ITransactionStatusRequestType read Get_RequestData;
    property ReplyData: ITransactionStatusResponseType read Get_ReplyData;
    property RequestMessageReference: IMessageReferenceType read Get_RequestMessageReference write _Set_RequestMessageReference;
    property RequestReceiptReprintFlag: WordBool read Get_RequestReceiptReprintFlag write Set_RequestReceiptReprintFlag;
    property ReplyMessageReference: IMessageReferenceType read Get_ReplyMessageReference write _Set_ReplyMessageReference;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoTransactionStatusDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {18C58418-DF2D-4CF4-B394-7C055526C73A}
// *********************************************************************//
  INexoTransactionStatusDisp = dispinterface
    ['{18C58418-DF2D-4CF4-B394-7C055526C73A}']
    property RequestData: ITransactionStatusRequestType readonly dispid 1;
    property ReplyData: ITransactionStatusResponseType readonly dispid 2;
    property RequestMessageReference: IMessageReferenceType dispid 3;
    property RequestReceiptReprintFlag: WordBool dispid 4;
    property ReplyMessageReference: IMessageReferenceType dispid 5;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5987CC8F-70A4-4FB9-BCEA-71A706CA27C9}
// *********************************************************************//
  INexoResponseType = interface(IDispatch)
    ['{5987CC8F-70A4-4FB9-BCEA-71A706CA27C9}']
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Response: IResponseType; safecall;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
  end;

// *********************************************************************//
// DispIntf :    INexoResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5987CC8F-70A4-4FB9-BCEA-71A706CA27C9}
// *********************************************************************//
  INexoResponseTypeDisp = dispinterface
    ['{5987CC8F-70A4-4FB9-BCEA-71A706CA27C9}']
    property Result: ResultEnumeration dispid 1;
    property ErrorCondition: ErrorConditionEnumeration dispid 2;
    property AdditionalResponse: WideString dispid 3;
    function Response: IResponseType; dispid 100;
  end;

// *********************************************************************//
// Interface :   INexoDeviceInput
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2CD13AE4-4DF6-47EC-8487-0BBB017D37ED}
// *********************************************************************//
  INexoDeviceInput = interface(IDispatch)
    ['{2CD13AE4-4DF6-47EC-8487-0BBB017D37ED}']
    function Get_RequestData: IInputRequestType; safecall;
    function Get_ReplyData: IInputResponseType; safecall;
    function Get_RequestDevice: DeviceEnumeration; safecall;
    procedure Set_RequestDevice(pRetVal: DeviceEnumeration); safecall;
    function Get_RequestInfoQualify: InfoQualifyEnumeration; safecall;
    procedure Set_RequestInfoQualify(pRetVal: InfoQualifyEnumeration); safecall;
    function Get_RequestInputCommand: InputCommandEnumeration; safecall;
    procedure Set_RequestInputCommand(pRetVal: InputCommandEnumeration); safecall;
    function Get_RequestMaxInputTime: Integer; safecall;
    procedure Set_RequestMaxInputTime(pRetVal: Integer); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IInputRequestType read Get_RequestData;
    property ReplyData: IInputResponseType read Get_ReplyData;
    property RequestDevice: DeviceEnumeration read Get_RequestDevice write Set_RequestDevice;
    property RequestInfoQualify: InfoQualifyEnumeration read Get_RequestInfoQualify write Set_RequestInfoQualify;
    property RequestInputCommand: InputCommandEnumeration read Get_RequestInputCommand write Set_RequestInputCommand;
    property RequestMaxInputTime: Integer read Get_RequestMaxInputTime write Set_RequestMaxInputTime;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoDeviceInputDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2CD13AE4-4DF6-47EC-8487-0BBB017D37ED}
// *********************************************************************//
  INexoDeviceInputDisp = dispinterface
    ['{2CD13AE4-4DF6-47EC-8487-0BBB017D37ED}']
    property RequestData: IInputRequestType readonly dispid 1;
    property ReplyData: IInputResponseType readonly dispid 2;
    property RequestDevice: DeviceEnumeration dispid 3;
    property RequestInfoQualify: InfoQualifyEnumeration dispid 4;
    property RequestInputCommand: InputCommandEnumeration dispid 5;
    property RequestMaxInputTime: Integer dispid 6;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoDevicePrint
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F9BC46A7-AA77-4B4B-81CC-1348E2E4FABC}
// *********************************************************************//
  INexoDevicePrint = interface(IDispatch)
    ['{F9BC46A7-AA77-4B4B-81CC-1348E2E4FABC}']
    function Get_RequestData: IPrintRequestType; safecall;
    function Get_ReplyData: IPrintResponseType; safecall;
    function Get_RequestDocumentQualifier: DocumentQualifierEnumeration; safecall;
    procedure Set_RequestDocumentQualifier(pRetVal: DocumentQualifierEnumeration); safecall;
    function Get_RequestResponseMode: ResponseModeEnumeration; safecall;
    procedure Set_RequestResponseMode(pRetVal: ResponseModeEnumeration); safecall;
    function Get_RequestOutputFormat: OutputFormatEnumeration; safecall;
    procedure Set_RequestOutputFormat(pRetVal: OutputFormatEnumeration); safecall;
    function Get_ReplyDocumentQualifier: DocumentQualifierEnumeration; safecall;
    procedure Set_ReplyDocumentQualifier(pRetVal: DocumentQualifierEnumeration); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IPrintRequestType read Get_RequestData;
    property ReplyData: IPrintResponseType read Get_ReplyData;
    property RequestDocumentQualifier: DocumentQualifierEnumeration read Get_RequestDocumentQualifier write Set_RequestDocumentQualifier;
    property RequestResponseMode: ResponseModeEnumeration read Get_RequestResponseMode write Set_RequestResponseMode;
    property RequestOutputFormat: OutputFormatEnumeration read Get_RequestOutputFormat write Set_RequestOutputFormat;
    property ReplyDocumentQualifier: DocumentQualifierEnumeration read Get_ReplyDocumentQualifier write Set_ReplyDocumentQualifier;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoDevicePrintDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F9BC46A7-AA77-4B4B-81CC-1348E2E4FABC}
// *********************************************************************//
  INexoDevicePrintDisp = dispinterface
    ['{F9BC46A7-AA77-4B4B-81CC-1348E2E4FABC}']
    property RequestData: IPrintRequestType readonly dispid 1;
    property ReplyData: IPrintResponseType readonly dispid 2;
    property RequestDocumentQualifier: DocumentQualifierEnumeration dispid 3;
    property RequestResponseMode: ResponseModeEnumeration dispid 4;
    property RequestOutputFormat: OutputFormatEnumeration dispid 5;
    property ReplyDocumentQualifier: DocumentQualifierEnumeration dispid 50;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoLogin
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4B77D218-D00F-4C13-9652-F0E9E11F3BF3}
// *********************************************************************//
  INexoLogin = interface(IDispatch)
    ['{4B77D218-D00F-4C13-9652-F0E9E11F3BF3}']
    function Get_RequestData: ILoginRequestType; safecall;
    function Get_ReplyData: ILoginResponseType; safecall;
    function Get_RequestManufacturerID: WideString; safecall;
    procedure Set_RequestManufacturerID(const pRetVal: WideString); safecall;
    function Get_RequestApplicationName: WideString; safecall;
    procedure Set_RequestApplicationName(const pRetVal: WideString); safecall;
    function Get_RequestSoftwareVersion: WideString; safecall;
    procedure Set_RequestSoftwareVersion(const pRetVal: WideString); safecall;
    function Get_RequestCertificationCode: WideString; safecall;
    procedure Set_RequestCertificationCode(const pRetVal: WideString); safecall;
    function Get_RequestTerminalEnvironment: WideString; safecall;
    procedure Set_RequestTerminalEnvironment(const pRetVal: WideString); safecall;
    function Get_RequestSaleCapabilities: WideString; safecall;
    procedure Set_RequestSaleCapabilities(const pRetVal: WideString); safecall;
    function Get_RequestOperatorID: WideString; safecall;
    procedure Set_RequestOperatorID(const pRetVal: WideString); safecall;
    function Get_RequestOperatorLanguage: WideString; safecall;
    procedure Set_RequestOperatorLanguage(const pRetVal: WideString); safecall;
    function Get_RequestDateTime: WideString; safecall;
    procedure Set_RequestDateTime(const pRetVal: WideString); safecall;
    function Get_ProtocolVersion: WideString; safecall;
    function Get_ReplyDateTime: WideString; safecall;
    procedure Set_ReplyDateTime(const pRetVal: WideString); safecall;
    function Get_ReplyApplicationName: WideString; safecall;
    procedure Set_ReplyApplicationName(const pRetVal: WideString); safecall;
    function Get_ReplySoftwareVersion: WideString; safecall;
    procedure Set_ReplySoftwareVersion(const pRetVal: WideString); safecall;
    function Get_ReplyCertificationCode: WideString; safecall;
    procedure Set_ReplyCertificationCode(const pRetVal: WideString); safecall;
    function Get_ReplyTerminalEnvironment: WideString; safecall;
    function Get_ReplyPOICapabilities: WideString; safecall;
    procedure Set_ReplyPOICapabilities(const pRetVal: WideString); safecall;
    function Get_ReplyPOISerialNumber: WideString; safecall;
    procedure Set_ReplyPOISerialNumber(const pRetVal: WideString); safecall;
    function Get_ReplyGlobalStatus: GlobalStatusEnumeration; safecall;
    procedure Set_ReplyGlobalStatus(pRetVal: GlobalStatusEnumeration); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: ILoginRequestType read Get_RequestData;
    property ReplyData: ILoginResponseType read Get_ReplyData;
    property RequestManufacturerID: WideString read Get_RequestManufacturerID write Set_RequestManufacturerID;
    property RequestApplicationName: WideString read Get_RequestApplicationName write Set_RequestApplicationName;
    property RequestSoftwareVersion: WideString read Get_RequestSoftwareVersion write Set_RequestSoftwareVersion;
    property RequestCertificationCode: WideString read Get_RequestCertificationCode write Set_RequestCertificationCode;
    property RequestTerminalEnvironment: WideString read Get_RequestTerminalEnvironment write Set_RequestTerminalEnvironment;
    property RequestSaleCapabilities: WideString read Get_RequestSaleCapabilities write Set_RequestSaleCapabilities;
    property RequestOperatorID: WideString read Get_RequestOperatorID write Set_RequestOperatorID;
    property RequestOperatorLanguage: WideString read Get_RequestOperatorLanguage write Set_RequestOperatorLanguage;
    property RequestDateTime: WideString read Get_RequestDateTime write Set_RequestDateTime;
    property ProtocolVersion: WideString read Get_ProtocolVersion;
    property ReplyDateTime: WideString read Get_ReplyDateTime write Set_ReplyDateTime;
    property ReplyApplicationName: WideString read Get_ReplyApplicationName write Set_ReplyApplicationName;
    property ReplySoftwareVersion: WideString read Get_ReplySoftwareVersion write Set_ReplySoftwareVersion;
    property ReplyCertificationCode: WideString read Get_ReplyCertificationCode write Set_ReplyCertificationCode;
    property ReplyTerminalEnvironment: WideString read Get_ReplyTerminalEnvironment;
    property ReplyPOICapabilities: WideString read Get_ReplyPOICapabilities write Set_ReplyPOICapabilities;
    property ReplyPOISerialNumber: WideString read Get_ReplyPOISerialNumber write Set_ReplyPOISerialNumber;
    property ReplyGlobalStatus: GlobalStatusEnumeration read Get_ReplyGlobalStatus write Set_ReplyGlobalStatus;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoLoginDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4B77D218-D00F-4C13-9652-F0E9E11F3BF3}
// *********************************************************************//
  INexoLoginDisp = dispinterface
    ['{4B77D218-D00F-4C13-9652-F0E9E11F3BF3}']
    property RequestData: ILoginRequestType readonly dispid 1;
    property ReplyData: ILoginResponseType readonly dispid 2;
    property RequestManufacturerID: WideString dispid 4;
    property RequestApplicationName: WideString dispid 5;
    property RequestSoftwareVersion: WideString dispid 6;
    property RequestCertificationCode: WideString dispid 7;
    property RequestTerminalEnvironment: WideString dispid 8;
    property RequestSaleCapabilities: WideString dispid 9;
    property RequestOperatorID: WideString dispid 10;
    property RequestOperatorLanguage: WideString dispid 11;
    property RequestDateTime: WideString dispid 12;
    property ProtocolVersion: WideString readonly dispid 13;
    property ReplyDateTime: WideString dispid 50;
    property ReplyApplicationName: WideString dispid 51;
    property ReplySoftwareVersion: WideString dispid 52;
    property ReplyCertificationCode: WideString dispid 53;
    property ReplyTerminalEnvironment: WideString readonly dispid 54;
    property ReplyPOICapabilities: WideString dispid 55;
    property ReplyPOISerialNumber: WideString dispid 56;
    property ReplyGlobalStatus: GlobalStatusEnumeration dispid 57;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoLogout
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {37A4DF49-8D4A-43E6-BAAB-FDFD7C550AB9}
// *********************************************************************//
  INexoLogout = interface(IDispatch)
    ['{37A4DF49-8D4A-43E6-BAAB-FDFD7C550AB9}']
    function Get_RequestData: ILogoutRequestType; safecall;
    function Get_ReplyData: ILogoutResponseType; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: ILogoutRequestType read Get_RequestData;
    property ReplyData: ILogoutResponseType read Get_ReplyData;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoLogoutDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {37A4DF49-8D4A-43E6-BAAB-FDFD7C550AB9}
// *********************************************************************//
  INexoLogoutDisp = dispinterface
    ['{37A4DF49-8D4A-43E6-BAAB-FDFD7C550AB9}']
    property RequestData: ILogoutRequestType readonly dispid 1;
    property ReplyData: ILogoutResponseType readonly dispid 2;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoReversal
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {DBC11F2F-A231-47BB-9CD1-0B36872B6BB4}
// *********************************************************************//
  INexoReversal = interface(IDispatch)
    ['{DBC11F2F-A231-47BB-9CD1-0B36872B6BB4}']
    function Get_RequestData: IReversalRequestType; safecall;
    function Get_ReplyData: IReversalResponseType; safecall;
    function Get_RequestOriginalPOITransactionID: WideString; safecall;
    procedure Set_RequestOriginalPOITransactionID(const pRetVal: WideString); safecall;
    function Get_RequestOriginalPOITransactionTimestamp: WideString; safecall;
    procedure Set_RequestOriginalPOITransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_RequestSaleReferenceID: WideString; safecall;
    procedure Set_RequestSaleReferenceID(const pRetVal: WideString); safecall;
    function Get_RequestReversedAmount: Double; safecall;
    procedure Set_RequestReversedAmount(pRetVal: Double); safecall;
    function Get_RequestReversalReason: ReversalReasonEnumeration; safecall;
    procedure Set_RequestReversalReason(pRetVal: ReversalReasonEnumeration); safecall;
    function Get_ReplyPOITransactionID: WideString; safecall;
    procedure Set_ReplyPOITransactionID(const pRetVal: WideString); safecall;
    function Get_ReplyPOITimestamp: WideString; safecall;
    procedure Set_ReplyPOITimestamp(const pRetVal: WideString); safecall;
    function Get_ReplyReversedAmount: Double; safecall;
    procedure Set_ReplyReversedAmount(pRetVal: Double); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_Result: ResultEnumeration; safecall;
    procedure Set_Result(pRetVal: ResultEnumeration); safecall;
    function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
    procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_ResultAsString: WideString; safecall;
    function Get_ErrorConditionAsString: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property RequestData: IReversalRequestType read Get_RequestData;
    property ReplyData: IReversalResponseType read Get_ReplyData;
    property RequestOriginalPOITransactionID: WideString read Get_RequestOriginalPOITransactionID write Set_RequestOriginalPOITransactionID;
    property RequestOriginalPOITransactionTimestamp: WideString read Get_RequestOriginalPOITransactionTimestamp write Set_RequestOriginalPOITransactionTimestamp;
    property RequestSaleReferenceID: WideString read Get_RequestSaleReferenceID write Set_RequestSaleReferenceID;
    property RequestReversedAmount: Double read Get_RequestReversedAmount write Set_RequestReversedAmount;
    property RequestReversalReason: ReversalReasonEnumeration read Get_RequestReversalReason write Set_RequestReversalReason;
    property ReplyPOITransactionID: WideString read Get_ReplyPOITransactionID write Set_ReplyPOITransactionID;
    property ReplyPOITimestamp: WideString read Get_ReplyPOITimestamp write Set_ReplyPOITimestamp;
    property ReplyReversedAmount: Double read Get_ReplyReversedAmount write Set_ReplyReversedAmount;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property Result: ResultEnumeration read Get_Result write Set_Result;
    property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property ResultAsString: WideString read Get_ResultAsString;
    property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoReversalDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {DBC11F2F-A231-47BB-9CD1-0B36872B6BB4}
// *********************************************************************//
  INexoReversalDisp = dispinterface
    ['{DBC11F2F-A231-47BB-9CD1-0B36872B6BB4}']
    property RequestData: IReversalRequestType readonly dispid 1;
    property ReplyData: IReversalResponseType readonly dispid 2;
    property RequestOriginalPOITransactionID: WideString dispid 3;
    property RequestOriginalPOITransactionTimestamp: WideString dispid 4;
    property RequestSaleReferenceID: WideString dispid 5;
    property RequestReversedAmount: Double dispid 6;
    property RequestReversalReason: ReversalReasonEnumeration dispid 7;
    property ReplyPOITransactionID: WideString dispid 8;
    property ReplyPOITimestamp: WideString dispid 9;
    property ReplyReversedAmount: Double dispid 10;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property SerializedRequest: WideString readonly dispid 10010;
    property SerializedReply: WideString readonly dispid 10011;
    property Response: IResponseType dispid 10020;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
    property MessageClass: MessageClassEnumeration readonly dispid 10031;
    property IsService: WordBool readonly dispid 10032;
    property IsDevice: WordBool readonly dispid 10033;
    property IsEvent: WordBool readonly dispid 10034;
    property SaleID: WideString dispid 10036;
    property POIID: WideString dispid 10037;
    property ServiceID: WideString dispid 10038;
    property DeviceID: WideString dispid 10039;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10054;
    property Busy: WordBool readonly dispid 10055;
    property Cancel: WordBool readonly dispid 10056;
    property DeviceOut: WordBool readonly dispid 10057;
    property InsertedCard: WordBool readonly dispid 10058;
    property InProgress: WordBool readonly dispid 10059;
    property LoggedOut: WordBool readonly dispid 10060;
    property MessageFormat: WordBool readonly dispid 10061;
    property NotAllowed: WordBool readonly dispid 10062;
    property NotFound: WordBool readonly dispid 10063;
    property PaymentRestriction: WordBool readonly dispid 10064;
    property Refusal: WordBool readonly dispid 10065;
    property UnavailableDevice: WordBool readonly dispid 10066;
    property UnavailableService: WordBool readonly dispid 10067;
    property InvalidCard: WordBool readonly dispid 10068;
    property UnreachableHost: WordBool readonly dispid 10069;
    property WrongPIN: WordBool readonly dispid 10070;
    property UnknownError: WordBool readonly dispid 10071;
    property Result: ResultEnumeration dispid 10072;
    property ErrorCondition: ErrorConditionEnumeration dispid 10073;
    property AdditionalResponse: WideString dispid 10074;
    property ResultAsString: WideString readonly dispid 10075;
    property ErrorConditionAsString: WideString readonly dispid 10076;
    property AddMilliseconds: WordBool dispid 10090;
    property Utc: WordBool dispid 10091;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
    function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
    function FromItem(const Item: INexoItem): WordBool; dispid 11009;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
    function IsUsingJson: WordBool; dispid 15505;
    procedure SetUsingJson(f: WordBool); dispid 15506;
  end;

// *********************************************************************//
// Interface :   INexoObjectToProcess
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4DA003CE-49BF-4831-83EB-3DAEA2072370}
// *********************************************************************//
  INexoObjectToProcess = interface(IDispatch)
    ['{4DA003CE-49BF-4831-83EB-3DAEA2072370}']
    function Get_CurrentObject: INexoObject; safecall;
    function Get_NextObject: INexoObject; safecall;
    procedure _Set_NextObject(const pRetVal: INexoObject); safecall;
    function Get_NextTimer: Integer; safecall;
    procedure Set_NextTimer(pRetVal: Integer); safecall;
    function Get_Item: INexoItem; safecall;
    function Get_type_: MessageTypeEnumeration; safecall;
    function Get_Category: MessageCategoryEnumeration; safecall;
    function Get_SuggestedAction: NexoNextAction; safecall;
    function Get_CanModifyAction: WordBool; safecall;
    function Get_Action: NexoNextAction; safecall;
    procedure Set_Action(pRetVal: NexoNextAction); safecall;
    property CurrentObject: INexoObject read Get_CurrentObject;
    property NextObject: INexoObject read Get_NextObject write _Set_NextObject;
    property NextTimer: Integer read Get_NextTimer write Set_NextTimer;
    property Item: INexoItem read Get_Item;
    property type_: MessageTypeEnumeration read Get_type_;
    property Category: MessageCategoryEnumeration read Get_Category;
    property SuggestedAction: NexoNextAction read Get_SuggestedAction;
    property CanModifyAction: WordBool read Get_CanModifyAction;
    property Action: NexoNextAction read Get_Action write Set_Action;
  end;

// *********************************************************************//
// DispIntf :    INexoObjectToProcessDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4DA003CE-49BF-4831-83EB-3DAEA2072370}
// *********************************************************************//
  INexoObjectToProcessDisp = dispinterface
    ['{4DA003CE-49BF-4831-83EB-3DAEA2072370}']
    property CurrentObject: INexoObject readonly dispid 1;
    property NextObject: INexoObject dispid 2;
    property NextTimer: Integer dispid 3;
    property Item: INexoItem readonly dispid 4;
    property type_: MessageTypeEnumeration readonly dispid 5;
    property Category: MessageCategoryEnumeration readonly dispid 6;
    property SuggestedAction: NexoNextAction readonly dispid 7;
    property CanModifyAction: WordBool readonly dispid 8;
    property Action: NexoNextAction dispid 9;
  end;

// *********************************************************************//
// Interface :   INexoTextString
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {81DBF2A7-F56C-4316-A7DA-84A69DD10193}
// *********************************************************************//
  INexoTextString = interface(IDispatch)
    ['{81DBF2A7-F56C-4316-A7DA-84A69DD10193}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_defaultValue: WideString; safecall;
    function Get_RegularExpression: WideString; safecall;
    procedure Set_RegularExpression(const pRetVal: WideString); safecall;
    function Get_TrimInput: WordBool; safecall;
    procedure Set_TrimInput(pRetVal: WordBool); safecall;
    function Get_CaseInsensitive: WordBool; safecall;
    procedure Set_CaseInsensitive(pRetVal: WordBool); safecall;
    function Get_PreserveCase: WordBool; safecall;
    procedure Set_PreserveCase(pRetVal: WordBool); safecall;
    function Get_SetToUpperCase: WordBool; safecall;
    procedure Set_SetToUpperCase(pRetVal: WordBool); safecall;
    function Get_IsEmpty: WordBool; safecall;
    function Get_IsUnset: WordBool; safecall;
    function Get_ToString: WideString; safecall;
    function TestValue(var value: WideString): WordBool; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property value: WideString read Get_value write Set_value;
    property defaultValue: WideString read Get_defaultValue;
    property RegularExpression: WideString read Get_RegularExpression write Set_RegularExpression;
    property TrimInput: WordBool read Get_TrimInput write Set_TrimInput;
    property CaseInsensitive: WordBool read Get_CaseInsensitive write Set_CaseInsensitive;
    property PreserveCase: WordBool read Get_PreserveCase write Set_PreserveCase;
    property SetToUpperCase: WordBool read Get_SetToUpperCase write Set_SetToUpperCase;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsUnset: WordBool read Get_IsUnset;
    property ToString: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoTextStringDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {81DBF2A7-F56C-4316-A7DA-84A69DD10193}
// *********************************************************************//
  INexoTextStringDisp = dispinterface
    ['{81DBF2A7-F56C-4316-A7DA-84A69DD10193}']
    property Name: WideString dispid 1;
    property value: WideString dispid 2;
    property defaultValue: WideString readonly dispid 3;
    property RegularExpression: WideString dispid 4;
    property TrimInput: WordBool dispid 5;
    property CaseInsensitive: WordBool dispid 6;
    property PreserveCase: WordBool dispid 7;
    property SetToUpperCase: WordBool dispid 8;
    property IsEmpty: WordBool readonly dispid 9;
    property IsUnset: WordBool readonly dispid 10;
    property ToString: WideString readonly dispid 100;
    function TestValue(var value: WideString): WordBool; dispid 200;
  end;

// *********************************************************************//
// Interface :   INexoBooleanType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {54927BBD-044C-4FF6-90B9-9EF4C97DF13E}
// *********************************************************************//
  INexoBooleanType = interface(IDispatch)
    ['{54927BBD-044C-4FF6-90B9-9EF4C97DF13E}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_IsEmpty: WordBool; safecall;
    function Get_IsUnset: WordBool; safecall;
    function Get_ToString: WideString; safecall;
    function TestValue(var value: WideString): WordBool; safecall;
    function Get_AsBoolean: WordBool; safecall;
    procedure Set_AsBoolean(pRetVal: WordBool); safecall;
    property Name: WideString read Get_Name write Set_Name;
    property value: WideString read Get_value write Set_value;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsUnset: WordBool read Get_IsUnset;
    property ToString: WideString read Get_ToString;
    property AsBoolean: WordBool read Get_AsBoolean write Set_AsBoolean;
  end;

// *********************************************************************//
// DispIntf :    INexoBooleanTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {54927BBD-044C-4FF6-90B9-9EF4C97DF13E}
// *********************************************************************//
  INexoBooleanTypeDisp = dispinterface
    ['{54927BBD-044C-4FF6-90B9-9EF4C97DF13E}']
    property Name: WideString dispid 1;
    property value: WideString dispid 2;
    property IsEmpty: WordBool readonly dispid 9;
    property IsUnset: WordBool readonly dispid 10;
    property ToString: WideString readonly dispid 100;
    function TestValue(var value: WideString): WordBool; dispid 200;
    property AsBoolean: WordBool dispid 50;
  end;

// *********************************************************************//
// Interface :   INexoInteger
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D54E0EEC-3021-430A-958A-0CE8CBAF28CF}
// *********************************************************************//
  INexoInteger = interface(IDispatch)
    ['{D54E0EEC-3021-430A-958A-0CE8CBAF28CF}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_IsEmpty: WordBool; safecall;
    function Get_IsUnset: WordBool; safecall;
    function Get_ToString: WideString; safecall;
    function TestValue(var value: WideString): WordBool; safecall;
    function Get_AsInteger: Integer; safecall;
    procedure Set_AsInteger(pRetVal: Integer); safecall;
    property Name: WideString read Get_Name write Set_Name;
    property value: WideString read Get_value write Set_value;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsUnset: WordBool read Get_IsUnset;
    property ToString: WideString read Get_ToString;
    property AsInteger: Integer read Get_AsInteger write Set_AsInteger;
  end;

// *********************************************************************//
// DispIntf :    INexoIntegerDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D54E0EEC-3021-430A-958A-0CE8CBAF28CF}
// *********************************************************************//
  INexoIntegerDisp = dispinterface
    ['{D54E0EEC-3021-430A-958A-0CE8CBAF28CF}']
    property Name: WideString dispid 1;
    property value: WideString dispid 2;
    property IsEmpty: WordBool readonly dispid 9;
    property IsUnset: WordBool readonly dispid 10;
    property ToString: WideString readonly dispid 100;
    function TestValue(var value: WideString): WordBool; dispid 200;
    property AsInteger: Integer dispid 50;
  end;

// *********************************************************************//
// Interface :   INexoDecimal
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D6A6402E-7675-4B58-A192-1E5831A63308}
// *********************************************************************//
  INexoDecimal = interface(IDispatch)
    ['{D6A6402E-7675-4B58-A192-1E5831A63308}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_IsEmpty: WordBool; safecall;
    function Get_IsUnset: WordBool; safecall;
    function Get_ToString: WideString; safecall;
    function TestValue(var value: WideString): WordBool; safecall;
    function Get_AsDecimal: Double; safecall;
    procedure Set_AsDecimal(pRetVal: Double); safecall;
    function Get_DecimalPlaces: LongWord; safecall;
    procedure Set_DecimalPlaces(pRetVal: LongWord); safecall;
    function Get_Mantis: LongWord; safecall;
    procedure Set_Mantis(pRetVal: LongWord); safecall;
    function Get_DecimalSeparator: WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property value: WideString read Get_value write Set_value;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsUnset: WordBool read Get_IsUnset;
    property ToString: WideString read Get_ToString;
    property AsDecimal: Double read Get_AsDecimal write Set_AsDecimal;
    property DecimalPlaces: LongWord read Get_DecimalPlaces write Set_DecimalPlaces;
    property Mantis: LongWord read Get_Mantis write Set_Mantis;
    property DecimalSeparator: WideString read Get_DecimalSeparator;
  end;

// *********************************************************************//
// DispIntf :    INexoDecimalDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D6A6402E-7675-4B58-A192-1E5831A63308}
// *********************************************************************//
  INexoDecimalDisp = dispinterface
    ['{D6A6402E-7675-4B58-A192-1E5831A63308}']
    property Name: WideString dispid 1;
    property value: WideString dispid 2;
    property IsEmpty: WordBool readonly dispid 9;
    property IsUnset: WordBool readonly dispid 10;
    property ToString: WideString readonly dispid 100;
    function TestValue(var value: WideString): WordBool; dispid 200;
    property AsDecimal: Double dispid 50;
    property DecimalPlaces: LongWord dispid 51;
    property Mantis: LongWord dispid 52;
    property DecimalSeparator: WideString readonly dispid 53;
  end;

// *********************************************************************//
// Interface :   INexoLabel
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B1212D60-971B-4FB3-BE41-EC87DD743EFB}
// *********************************************************************//
  INexoLabel = interface(IDispatch)
    ['{B1212D60-971B-4FB3-BE41-EC87DD743EFB}']
    function Get_Label_: WideString; safecall;
    procedure Set_Label_(const pRetVal: WideString); safecall;
    function Get_ToString: WideString; safecall;
    property Label_: WideString read Get_Label_ write Set_Label_;
    property ToString: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoLabelDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B1212D60-971B-4FB3-BE41-EC87DD743EFB}
// *********************************************************************//
  INexoLabelDisp = dispinterface
    ['{B1212D60-971B-4FB3-BE41-EC87DD743EFB}']
    property Label_: WideString dispid 1;
    property ToString: WideString readonly dispid 100;
  end;

// *********************************************************************//
// Interface :   INexoEnumeration
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {44DD3DF5-C824-4E2D-8727-9F1856EB8019}
// *********************************************************************//
  INexoEnumeration = interface(IDispatch)
    ['{44DD3DF5-C824-4E2D-8727-9F1856EB8019}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_LabelsCount: Integer; safecall;
    function IsLabel(const value: WideString): WordBool; safecall;
    function GetLabel(const value: WideString): WideString; safecall;
    function AddLabel(const value: WideString): WordBool; safecall;
    function RemoveLabel(const value: WideString): WordBool; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property value: WideString read Get_value write Set_value;
    property LabelsCount: Integer read Get_LabelsCount;
  end;

// *********************************************************************//
// DispIntf :    INexoEnumerationDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {44DD3DF5-C824-4E2D-8727-9F1856EB8019}
// *********************************************************************//
  INexoEnumerationDisp = dispinterface
    ['{44DD3DF5-C824-4E2D-8727-9F1856EB8019}']
    property Name: WideString dispid 1;
    property value: WideString dispid 2;
    property LabelsCount: Integer readonly dispid 50;
    function IsLabel(const value: WideString): WordBool; dispid 51;
    function GetLabel(const value: WideString): WideString; dispid 52;
    function AddLabel(const value: WideString): WordBool; dispid 53;
    function RemoveLabel(const value: WideString): WordBool; dispid 54;
  end;

// *********************************************************************//
// Interface :   INexoCluster
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CF6E62CA-537D-4545-A336-673D288B6D58}
// *********************************************************************//
  INexoCluster = interface(IDispatch)
    ['{CF6E62CA-537D-4545-A336-673D288B6D58}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_LabelsCount: Integer; safecall;
    function Get_ValuesCount: Integer; safecall;
    function IsLabel(const value: WideString): WordBool; safecall;
    function AddLabel(const value: WideString): WordBool; safecall;
    function RemoveLabel(const value: WideString): WordBool; safecall;
    function IsLabelSet(const value: WideString): WordBool; safecall;
    function SetLabel(const Label_: WideString): WideString; safecall;
    function UnsetLabel(const Label_: WideString): WideString; safecall;
    function SetAllLabels: WideString; safecall;
    function UnsetAllLabels: WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property value: WideString read Get_value write Set_value;
    property LabelsCount: Integer read Get_LabelsCount;
    property ValuesCount: Integer read Get_ValuesCount;
  end;

// *********************************************************************//
// DispIntf :    INexoClusterDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CF6E62CA-537D-4545-A336-673D288B6D58}
// *********************************************************************//
  INexoClusterDisp = dispinterface
    ['{CF6E62CA-537D-4545-A336-673D288B6D58}']
    property Name: WideString dispid 1;
    property value: WideString dispid 2;
    property LabelsCount: Integer readonly dispid 50;
    property ValuesCount: Integer readonly dispid 51;
    function IsLabel(const value: WideString): WordBool; dispid 52;
    function AddLabel(const value: WideString): WordBool; dispid 53;
    function RemoveLabel(const value: WideString): WordBool; dispid 54;
    function IsLabelSet(const value: WideString): WordBool; dispid 55;
    function SetLabel(const Label_: WideString): WideString; dispid 56;
    function UnsetLabel(const Label_: WideString): WideString; dispid 57;
    function SetAllLabels: WideString; dispid 58;
    function UnsetAllLabels: WideString; dispid 59;
  end;

// *********************************************************************//
// Interface :   INexoLengthDrivenTextString
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {380807B4-5276-443B-A8E8-0D88A51199E8}
// *********************************************************************//
  INexoLengthDrivenTextString = interface(IDispatch)
    ['{380807B4-5276-443B-A8E8-0D88A51199E8}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_defaultValue: WideString; safecall;
    function Get_RegularExpression: WideString; safecall;
    procedure Set_RegularExpression(const pRetVal: WideString); safecall;
    function Get_TrimInput: WordBool; safecall;
    procedure Set_TrimInput(pRetVal: WordBool); safecall;
    function Get_CaseInsensitive: WordBool; safecall;
    procedure Set_CaseInsensitive(pRetVal: WordBool); safecall;
    function Get_PreserveCase: WordBool; safecall;
    procedure Set_PreserveCase(pRetVal: WordBool); safecall;
    function Get_SetToUpperCase: WordBool; safecall;
    procedure Set_SetToUpperCase(pRetVal: WordBool); safecall;
    function Get_IsEmpty: WordBool; safecall;
    function Get_IsUnset: WordBool; safecall;
    function Get_ToString: WideString; safecall;
    function TestValue(var value: WideString): WordBool; safecall;
    function Get_Min: Integer; safecall;
    procedure Set_Min(pRetVal: Integer); safecall;
    function Get_Max: Integer; safecall;
    procedure Set_Max(pRetVal: Integer); safecall;
    function Get_CharacterSet: WideString; safecall;
    procedure Set_CharacterSet(const pRetVal: WideString); safecall;
    property Name: WideString read Get_Name write Set_Name;
    property value: WideString read Get_value write Set_value;
    property defaultValue: WideString read Get_defaultValue;
    property RegularExpression: WideString read Get_RegularExpression write Set_RegularExpression;
    property TrimInput: WordBool read Get_TrimInput write Set_TrimInput;
    property CaseInsensitive: WordBool read Get_CaseInsensitive write Set_CaseInsensitive;
    property PreserveCase: WordBool read Get_PreserveCase write Set_PreserveCase;
    property SetToUpperCase: WordBool read Get_SetToUpperCase write Set_SetToUpperCase;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsUnset: WordBool read Get_IsUnset;
    property ToString: WideString read Get_ToString;
    property Min: Integer read Get_Min write Set_Min;
    property Max: Integer read Get_Max write Set_Max;
    property CharacterSet: WideString read Get_CharacterSet write Set_CharacterSet;
  end;

// *********************************************************************//
// DispIntf :    INexoLengthDrivenTextStringDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {380807B4-5276-443B-A8E8-0D88A51199E8}
// *********************************************************************//
  INexoLengthDrivenTextStringDisp = dispinterface
    ['{380807B4-5276-443B-A8E8-0D88A51199E8}']
    property Name: WideString dispid 1;
    property value: WideString dispid 2;
    property defaultValue: WideString readonly dispid 3;
    property RegularExpression: WideString dispid 4;
    property TrimInput: WordBool dispid 5;
    property CaseInsensitive: WordBool dispid 6;
    property PreserveCase: WordBool dispid 7;
    property SetToUpperCase: WordBool dispid 8;
    property IsEmpty: WordBool readonly dispid 9;
    property IsUnset: WordBool readonly dispid 10;
    property ToString: WideString readonly dispid 100;
    function TestValue(var value: WideString): WordBool; dispid 200;
    property Min: Integer dispid 50;
    property Max: Integer dispid 51;
    property CharacterSet: WideString dispid 52;
  end;

// *********************************************************************//
// Interface :   INexoDigitString
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4DEDF6AC-8EF9-41EC-92CD-51A2E7E5FC6F}
// *********************************************************************//
  INexoDigitString = interface(IDispatch)
    ['{4DEDF6AC-8EF9-41EC-92CD-51A2E7E5FC6F}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_IsEmpty: WordBool; safecall;
    function Get_IsUnset: WordBool; safecall;
    function Get_ToString: WideString; safecall;
    function TestValue(var value: WideString): WordBool; safecall;
    function Get_Min: Integer; safecall;
    procedure Set_Min(pRetVal: Integer); safecall;
    function Get_Max: Integer; safecall;
    procedure Set_Max(pRetVal: Integer); safecall;
    function Get_CharacterSet: WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property value: WideString read Get_value write Set_value;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsUnset: WordBool read Get_IsUnset;
    property ToString: WideString read Get_ToString;
    property Min: Integer read Get_Min write Set_Min;
    property Max: Integer read Get_Max write Set_Max;
    property CharacterSet: WideString read Get_CharacterSet;
  end;

// *********************************************************************//
// DispIntf :    INexoDigitStringDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4DEDF6AC-8EF9-41EC-92CD-51A2E7E5FC6F}
// *********************************************************************//
  INexoDigitStringDisp = dispinterface
    ['{4DEDF6AC-8EF9-41EC-92CD-51A2E7E5FC6F}']
    property Name: WideString dispid 1;
    property value: WideString dispid 2;
    property IsEmpty: WordBool readonly dispid 9;
    property IsUnset: WordBool readonly dispid 10;
    property ToString: WideString readonly dispid 100;
    function TestValue(var value: WideString): WordBool; dispid 200;
    property Min: Integer dispid 50;
    property Max: Integer dispid 51;
    property CharacterSet: WideString readonly dispid 52;
  end;

// *********************************************************************//
// Interface :   INexoISOData
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {342FE081-D5F0-475B-AEC6-6374979BBDC7}
// *********************************************************************//
  INexoISOData = interface(IDispatch)
    ['{342FE081-D5F0-475B-AEC6-6374979BBDC7}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_ToString: WideString; safecall;
    function TestValue(var value: WideString): WordBool; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property value: WideString read Get_value write Set_value;
    property ToString: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoISODataDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {342FE081-D5F0-475B-AEC6-6374979BBDC7}
// *********************************************************************//
  INexoISODataDisp = dispinterface
    ['{342FE081-D5F0-475B-AEC6-6374979BBDC7}']
    property Name: WideString dispid 1;
    property value: WideString dispid 2;
    property ToString: WideString readonly dispid 100;
    function TestValue(var value: WideString): WordBool; dispid 200;
  end;

// *********************************************************************//
// Interface :   INexoISODateTime
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6EA56916-0B9F-48D1-B726-1F26C1897724}
// *********************************************************************//
  INexoISODateTime = interface(IDispatch)
    ['{6EA56916-0B9F-48D1-B726-1F26C1897724}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Milliseconds: WordBool; safecall;
    procedure Set_Milliseconds(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function TestValue(var value: WideString): WordBool; safecall;
    procedure Reset; safecall;
    function ToDateTime: TDateTime; safecall;
    function FromDateTime(dt: TDateTime): WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property value: WideString read Get_value write Set_value;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Milliseconds: WordBool read Get_Milliseconds write Set_Milliseconds;
    property ToString: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoISODateTimeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6EA56916-0B9F-48D1-B726-1F26C1897724}
// *********************************************************************//
  INexoISODateTimeDisp = dispinterface
    ['{6EA56916-0B9F-48D1-B726-1F26C1897724}']
    property Name: WideString dispid 1;
    property value: WideString dispid 2;
    property Utc: WordBool dispid 3;
    property Milliseconds: WordBool dispid 4;
    property ToString: WideString readonly dispid 100;
    function TestValue(var value: WideString): WordBool; dispid 200;
    procedure Reset; dispid 300;
    function ToDateTime: TDateTime; dispid 301;
    function FromDateTime(dt: TDateTime): WideString; dispid 302;
  end;

// *********************************************************************//
// Interface :   INexoISODate
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {880DF188-0670-419D-8E0D-2170D0D537C9}
// *********************************************************************//
  INexoISODate = interface(IDispatch)
    ['{880DF188-0670-419D-8E0D-2170D0D537C9}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_ToString: WideString; safecall;
    function TestValue(var value: WideString): WordBool; safecall;
    procedure Reset; safecall;
    function ToDateTime: TDateTime; safecall;
    function FromDateTime(dt: TDateTime): WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property value: WideString read Get_value write Set_value;
    property ToString: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoISODateDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {880DF188-0670-419D-8E0D-2170D0D537C9}
// *********************************************************************//
  INexoISODateDisp = dispinterface
    ['{880DF188-0670-419D-8E0D-2170D0D537C9}']
    property Name: WideString dispid 1;
    property value: WideString dispid 2;
    property ToString: WideString readonly dispid 100;
    function TestValue(var value: WideString): WordBool; dispid 200;
    procedure Reset; dispid 300;
    function ToDateTime: TDateTime; dispid 301;
    function FromDateTime(dt: TDateTime): WideString; dispid 302;
  end;

// *********************************************************************//
// Interface :   INexoNonStringType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C7CAA85A-2A0D-49A7-925A-48A122D76C30}
// *********************************************************************//
  INexoNonStringType = interface(IDispatch)
    ['{C7CAA85A-2A0D-49A7-925A-48A122D76C30}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_value: PSafeArray; safecall;
    procedure Set_value(pRetVal: PSafeArray); safecall;
    function Get_Size: Integer; safecall;
    procedure Set_Size(pRetVal: Integer); safecall;
    function Get_ToString: WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property value: PSafeArray read Get_value write Set_value;
    property Size: Integer read Get_Size write Set_Size;
    property ToString: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoNonStringTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C7CAA85A-2A0D-49A7-925A-48A122D76C30}
// *********************************************************************//
  INexoNonStringTypeDisp = dispinterface
    ['{C7CAA85A-2A0D-49A7-925A-48A122D76C30}']
    property Name: WideString dispid 1;
    property value: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property Size: Integer dispid 3;
    property ToString: WideString readonly dispid 100;
  end;

// *********************************************************************//
// Interface :   INexoCurrency
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5F12D07E-EA73-4E87-98C6-DDD3A38888C8}
// *********************************************************************//
  INexoCurrency = interface(IDispatch)
    ['{5F12D07E-EA73-4E87-98C6-DDD3A38888C8}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_value: WideString; safecall;
    procedure Set_value(const pRetVal: WideString); safecall;
    function Get_DecimalPlaces: LongWord; safecall;
    procedure Set_DecimalPlaces(pRetVal: LongWord); safecall;
    function Get_Divider: LongWord; safecall;
    function Get_ToString: WideString; safecall;
    function TestValue(var value: WideString): WordBool; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property value: WideString read Get_value write Set_value;
    property DecimalPlaces: LongWord read Get_DecimalPlaces write Set_DecimalPlaces;
    property Divider: LongWord read Get_Divider;
    property ToString: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoCurrencyDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5F12D07E-EA73-4E87-98C6-DDD3A38888C8}
// *********************************************************************//
  INexoCurrencyDisp = dispinterface
    ['{5F12D07E-EA73-4E87-98C6-DDD3A38888C8}']
    property Name: WideString dispid 1;
    property value: WideString dispid 2;
    property DecimalPlaces: LongWord dispid 3;
    property Divider: LongWord readonly dispid 4;
    property ToString: WideString readonly dispid 100;
    function TestValue(var value: WideString): WordBool; dispid 200;
  end;

// *********************************************************************//
// Interface :   _NexoMessageType
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {9B63F343-CE34-348E-ADBB-ADF5FDC28172}
// *********************************************************************//
  _NexoMessageType = interface(IDispatch)
    ['{9B63F343-CE34-348E-ADBB-ADF5FDC28172}']
  end;

// *********************************************************************//
// DispIntf :    _NexoMessageTypeDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {9B63F343-CE34-348E-ADBB-ADF5FDC28172}
// *********************************************************************//
  _NexoMessageTypeDisp = dispinterface
    ['{9B63F343-CE34-348E-ADBB-ADF5FDC28172}']
  end;

// *********************************************************************//
// Interface :   _NexoMessageClass
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {5014AC46-3B6B-35D6-9EAB-308C612BE1BD}
// *********************************************************************//
  _NexoMessageClass = interface(IDispatch)
    ['{5014AC46-3B6B-35D6-9EAB-308C612BE1BD}']
  end;

// *********************************************************************//
// DispIntf :    _NexoMessageClassDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {5014AC46-3B6B-35D6-9EAB-308C612BE1BD}
// *********************************************************************//
  _NexoMessageClassDisp = dispinterface
    ['{5014AC46-3B6B-35D6-9EAB-308C612BE1BD}']
  end;

// *********************************************************************//
// Interface :   _NexoMessageCategory
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {56E803F5-FC60-381C-B78C-129D973A9A94}
// *********************************************************************//
  _NexoMessageCategory = interface(IDispatch)
    ['{56E803F5-FC60-381C-B78C-129D973A9A94}']
  end;

// *********************************************************************//
// DispIntf :    _NexoMessageCategoryDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {56E803F5-FC60-381C-B78C-129D973A9A94}
// *********************************************************************//
  _NexoMessageCategoryDisp = dispinterface
    ['{56E803F5-FC60-381C-B78C-129D973A9A94}']
  end;

// *********************************************************************//
// Interface :   _NexoTerminalEnvironment
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {22389591-8FAC-3D5C-8696-7F02CE9D1A28}
// *********************************************************************//
  _NexoTerminalEnvironment = interface(IDispatch)
    ['{22389591-8FAC-3D5C-8696-7F02CE9D1A28}']
  end;

// *********************************************************************//
// DispIntf :    _NexoTerminalEnvironmentDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {22389591-8FAC-3D5C-8696-7F02CE9D1A28}
// *********************************************************************//
  _NexoTerminalEnvironmentDisp = dispinterface
    ['{22389591-8FAC-3D5C-8696-7F02CE9D1A28}']
  end;

// *********************************************************************//
// Interface :   _NexoSaleCapabilities
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {27EE1457-9C5B-364B-A5B0-6F8DEA5DFD90}
// *********************************************************************//
  _NexoSaleCapabilities = interface(IDispatch)
    ['{27EE1457-9C5B-364B-A5B0-6F8DEA5DFD90}']
  end;

// *********************************************************************//
// DispIntf :    _NexoSaleCapabilitiesDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {27EE1457-9C5B-364B-A5B0-6F8DEA5DFD90}
// *********************************************************************//
  _NexoSaleCapabilitiesDisp = dispinterface
    ['{27EE1457-9C5B-364B-A5B0-6F8DEA5DFD90}']
  end;

// *********************************************************************//
// Interface :   _NexoProtocolVersion
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {80FE31BB-AA27-3228-9E9F-ACCBC7BEC91E}
// *********************************************************************//
  _NexoProtocolVersion = interface(IDispatch)
    ['{80FE31BB-AA27-3228-9E9F-ACCBC7BEC91E}']
  end;

// *********************************************************************//
// DispIntf :    _NexoProtocolVersionDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {80FE31BB-AA27-3228-9E9F-ACCBC7BEC91E}
// *********************************************************************//
  _NexoProtocolVersionDisp = dispinterface
    ['{80FE31BB-AA27-3228-9E9F-ACCBC7BEC91E}']
  end;

// *********************************************************************//
// Interface :   _NexoID
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {18471494-0F7D-3761-AA8A-4234DEEE46E0}
// *********************************************************************//
  _NexoID = interface(IDispatch)
    ['{18471494-0F7D-3761-AA8A-4234DEEE46E0}']
  end;

// *********************************************************************//
// DispIntf :    _NexoIDDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {18471494-0F7D-3761-AA8A-4234DEEE46E0}
// *********************************************************************//
  _NexoIDDisp = dispinterface
    ['{18471494-0F7D-3761-AA8A-4234DEEE46E0}']
  end;

// *********************************************************************//
// Interface :   _NexoServiceID
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {59B3973C-67DE-3226-950C-3F1AF7CA8CD9}
// *********************************************************************//
  _NexoServiceID = interface(IDispatch)
    ['{59B3973C-67DE-3226-950C-3F1AF7CA8CD9}']
  end;

// *********************************************************************//
// DispIntf :    _NexoServiceIDDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {59B3973C-67DE-3226-950C-3F1AF7CA8CD9}
// *********************************************************************//
  _NexoServiceIDDisp = dispinterface
    ['{59B3973C-67DE-3226-950C-3F1AF7CA8CD9}']
  end;

// *********************************************************************//
// Interface :   _NexoDeviceID
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {71E7118B-B956-330C-8CF3-985FF48C8383}
// *********************************************************************//
  _NexoDeviceID = interface(IDispatch)
    ['{71E7118B-B956-330C-8CF3-985FF48C8383}']
  end;

// *********************************************************************//
// DispIntf :    _NexoDeviceIDDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {71E7118B-B956-330C-8CF3-985FF48C8383}
// *********************************************************************//
  _NexoDeviceIDDisp = dispinterface
    ['{71E7118B-B956-330C-8CF3-985FF48C8383}']
  end;

// *********************************************************************//
// Interface :   _NexoPOIID
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {054197A2-96CE-3280-A396-9A9647E69093}
// *********************************************************************//
  _NexoPOIID = interface(IDispatch)
    ['{054197A2-96CE-3280-A396-9A9647E69093}']
  end;

// *********************************************************************//
// DispIntf :    _NexoPOIIDDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {054197A2-96CE-3280-A396-9A9647E69093}
// *********************************************************************//
  _NexoPOIIDDisp = dispinterface
    ['{054197A2-96CE-3280-A396-9A9647E69093}']
  end;

// *********************************************************************//
// Interface :   _NexoSaleID
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {42F36241-B65E-3279-8AB5-B0FDF51E2007}
// *********************************************************************//
  _NexoSaleID = interface(IDispatch)
    ['{42F36241-B65E-3279-8AB5-B0FDF51E2007}']
  end;

// *********************************************************************//
// DispIntf :    _NexoSaleIDDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {42F36241-B65E-3279-8AB5-B0FDF51E2007}
// *********************************************************************//
  _NexoSaleIDDisp = dispinterface
    ['{42F36241-B65E-3279-8AB5-B0FDF51E2007}']
  end;

// *********************************************************************//
// Interface :   _NexoOperatorLanguage
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {E71BBF4C-00C1-3A08-8FA7-D6AC9B58C165}
// *********************************************************************//
  _NexoOperatorLanguage = interface(IDispatch)
    ['{E71BBF4C-00C1-3A08-8FA7-D6AC9B58C165}']
  end;

// *********************************************************************//
// DispIntf :    _NexoOperatorLanguageDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {E71BBF4C-00C1-3A08-8FA7-D6AC9B58C165}
// *********************************************************************//
  _NexoOperatorLanguageDisp = dispinterface
    ['{E71BBF4C-00C1-3A08-8FA7-D6AC9B58C165}']
  end;

// *********************************************************************//
// Interface :   _NexoResult
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {4D8B2E36-3BE3-3AAE-820E-2AF11CA82E64}
// *********************************************************************//
  _NexoResult = interface(IDispatch)
    ['{4D8B2E36-3BE3-3AAE-820E-2AF11CA82E64}']
  end;

// *********************************************************************//
// DispIntf :    _NexoResultDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {4D8B2E36-3BE3-3AAE-820E-2AF11CA82E64}
// *********************************************************************//
  _NexoResultDisp = dispinterface
    ['{4D8B2E36-3BE3-3AAE-820E-2AF11CA82E64}']
  end;

// *********************************************************************//
// Interface :   _NexoErrorCondition
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {3A6C71B5-A08C-315D-B127-D96E2E2EAC09}
// *********************************************************************//
  _NexoErrorCondition = interface(IDispatch)
    ['{3A6C71B5-A08C-315D-B127-D96E2E2EAC09}']
  end;

// *********************************************************************//
// DispIntf :    _NexoErrorConditionDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {3A6C71B5-A08C-315D-B127-D96E2E2EAC09}
// *********************************************************************//
  _NexoErrorConditionDisp = dispinterface
    ['{3A6C71B5-A08C-315D-B127-D96E2E2EAC09}']
  end;

// *********************************************************************//
// Interface :   _NexoAdditionalResponse
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {B44411B6-3F45-333F-B166-1A295EED6A6C}
// *********************************************************************//
  _NexoAdditionalResponse = interface(IDispatch)
    ['{B44411B6-3F45-333F-B166-1A295EED6A6C}']
  end;

// *********************************************************************//
// DispIntf :    _NexoAdditionalResponseDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {B44411B6-3F45-333F-B166-1A295EED6A6C}
// *********************************************************************//
  _NexoAdditionalResponseDisp = dispinterface
    ['{B44411B6-3F45-333F-B166-1A295EED6A6C}']
  end;

// *********************************************************************//
// Interface :   _NexoGlobalStatus
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {3AC0D87E-F614-3958-AF82-0EDD3E6D9179}
// *********************************************************************//
  _NexoGlobalStatus = interface(IDispatch)
    ['{3AC0D87E-F614-3958-AF82-0EDD3E6D9179}']
  end;

// *********************************************************************//
// DispIntf :    _NexoGlobalStatusDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {3AC0D87E-F614-3958-AF82-0EDD3E6D9179}
// *********************************************************************//
  _NexoGlobalStatusDisp = dispinterface
    ['{3AC0D87E-F614-3958-AF82-0EDD3E6D9179}']
  end;

// *********************************************************************//
// Interface :   _NexoCertificationCode
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {02DB9CB2-8343-3689-AB49-DC0FB8415C72}
// *********************************************************************//
  _NexoCertificationCode = interface(IDispatch)
    ['{02DB9CB2-8343-3689-AB49-DC0FB8415C72}']
  end;

// *********************************************************************//
// DispIntf :    _NexoCertificationCodeDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {02DB9CB2-8343-3689-AB49-DC0FB8415C72}
// *********************************************************************//
  _NexoCertificationCodeDisp = dispinterface
    ['{02DB9CB2-8343-3689-AB49-DC0FB8415C72}']
  end;

// *********************************************************************//
// Interface :   _NexoSoftwareVersion
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {451A06B3-89A7-3712-9763-C753FC8885C3}
// *********************************************************************//
  _NexoSoftwareVersion = interface(IDispatch)
    ['{451A06B3-89A7-3712-9763-C753FC8885C3}']
  end;

// *********************************************************************//
// DispIntf :    _NexoSoftwareVersionDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {451A06B3-89A7-3712-9763-C753FC8885C3}
// *********************************************************************//
  _NexoSoftwareVersionDisp = dispinterface
    ['{451A06B3-89A7-3712-9763-C753FC8885C3}']
  end;

// *********************************************************************//
// Interface :   _NexoApplicationName
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {9C672E07-5151-38F4-A42C-CEB77A05332B}
// *********************************************************************//
  _NexoApplicationName = interface(IDispatch)
    ['{9C672E07-5151-38F4-A42C-CEB77A05332B}']
  end;

// *********************************************************************//
// DispIntf :    _NexoApplicationNameDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {9C672E07-5151-38F4-A42C-CEB77A05332B}
// *********************************************************************//
  _NexoApplicationNameDisp = dispinterface
    ['{9C672E07-5151-38F4-A42C-CEB77A05332B}']
  end;

// *********************************************************************//
// Interface :   _NexoManufacturerID
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {E49650FA-D915-3C41-8313-9A5A13A64420}
// *********************************************************************//
  _NexoManufacturerID = interface(IDispatch)
    ['{E49650FA-D915-3C41-8313-9A5A13A64420}']
  end;

// *********************************************************************//
// DispIntf :    _NexoManufacturerIDDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {E49650FA-D915-3C41-8313-9A5A13A64420}
// *********************************************************************//
  _NexoManufacturerIDDisp = dispinterface
    ['{E49650FA-D915-3C41-8313-9A5A13A64420}']
  end;

// *********************************************************************//
// Interface :   _NexoPOISerialNumber
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {6681A893-77AF-3107-A6DA-DF729D6DB446}
// *********************************************************************//
  _NexoPOISerialNumber = interface(IDispatch)
    ['{6681A893-77AF-3107-A6DA-DF729D6DB446}']
  end;

// *********************************************************************//
// DispIntf :    _NexoPOISerialNumberDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {6681A893-77AF-3107-A6DA-DF729D6DB446}
// *********************************************************************//
  _NexoPOISerialNumberDisp = dispinterface
    ['{6681A893-77AF-3107-A6DA-DF729D6DB446}']
  end;

// *********************************************************************//
// Interface :   _NexoOperatorID
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {CD18F863-D50B-352D-B4A0-5E980F36021D}
// *********************************************************************//
  _NexoOperatorID = interface(IDispatch)
    ['{CD18F863-D50B-352D-B4A0-5E980F36021D}']
  end;

// *********************************************************************//
// DispIntf :    _NexoOperatorIDDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {CD18F863-D50B-352D-B4A0-5E980F36021D}
// *********************************************************************//
  _NexoOperatorIDDisp = dispinterface
    ['{CD18F863-D50B-352D-B4A0-5E980F36021D}']
  end;

// *********************************************************************//
// Interface :   _NexoDateTime
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {8DF83577-AE20-31AB-B9C0-1F46E4CF327C}
// *********************************************************************//
  _NexoDateTime = interface(IDispatch)
    ['{8DF83577-AE20-31AB-B9C0-1F46E4CF327C}']
  end;

// *********************************************************************//
// DispIntf :    _NexoDateTimeDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {8DF83577-AE20-31AB-B9C0-1F46E4CF327C}
// *********************************************************************//
  _NexoDateTimeDisp = dispinterface
    ['{8DF83577-AE20-31AB-B9C0-1F46E4CF327C}']
  end;

// *********************************************************************//
// Interface :   _NexoInputCommand
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {4E7620D8-37EE-3EF1-8219-5905E4C30D28}
// *********************************************************************//
  _NexoInputCommand = interface(IDispatch)
    ['{4E7620D8-37EE-3EF1-8219-5905E4C30D28}']
  end;

// *********************************************************************//
// DispIntf :    _NexoInputCommandDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {4E7620D8-37EE-3EF1-8219-5905E4C30D28}
// *********************************************************************//
  _NexoInputCommandDisp = dispinterface
    ['{4E7620D8-37EE-3EF1-8219-5905E4C30D28}']
  end;

// *********************************************************************//
// Interface :   _NexoEventToNotify
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {F32A9C29-CEFF-3D25-9C49-F4350CA77ABB}
// *********************************************************************//
  _NexoEventToNotify = interface(IDispatch)
    ['{F32A9C29-CEFF-3D25-9C49-F4350CA77ABB}']
  end;

// *********************************************************************//
// DispIntf :    _NexoEventToNotifyDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {F32A9C29-CEFF-3D25-9C49-F4350CA77ABB}
// *********************************************************************//
  _NexoEventToNotifyDisp = dispinterface
    ['{F32A9C29-CEFF-3D25-9C49-F4350CA77ABB}']
  end;

// *********************************************************************//
// Interface :   _NexoPaymentIntrumentType
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {A7085E0D-4C4E-3492-9CD8-E5EEA1139AB4}
// *********************************************************************//
  _NexoPaymentIntrumentType = interface(IDispatch)
    ['{A7085E0D-4C4E-3492-9CD8-E5EEA1139AB4}']
  end;

// *********************************************************************//
// DispIntf :    _NexoPaymentIntrumentTypeDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {A7085E0D-4C4E-3492-9CD8-E5EEA1139AB4}
// *********************************************************************//
  _NexoPaymentIntrumentTypeDisp = dispinterface
    ['{A7085E0D-4C4E-3492-9CD8-E5EEA1139AB4}']
  end;

// *********************************************************************//
// Interface :   _NexoVersion
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {765A7BDB-C986-34A3-A1F6-07606723E48D}
// *********************************************************************//
  _NexoVersion = interface(IDispatch)
    ['{765A7BDB-C986-34A3-A1F6-07606723E48D}']
  end;

// *********************************************************************//
// DispIntf :    _NexoVersionDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {765A7BDB-C986-34A3-A1F6-07606723E48D}
// *********************************************************************//
  _NexoVersionDisp = dispinterface
    ['{765A7BDB-C986-34A3-A1F6-07606723E48D}']
  end;

// *********************************************************************//
// Interface :   _NexoCurrentVersion
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {912B7F67-674E-35E3-9F46-CCB8B8FA08A0}
// *********************************************************************//
  _NexoCurrentVersion = interface(IDispatch)
    ['{912B7F67-674E-35E3-9F46-CCB8B8FA08A0}']
  end;

// *********************************************************************//
// DispIntf :    _NexoCurrentVersionDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {912B7F67-674E-35E3-9F46-CCB8B8FA08A0}
// *********************************************************************//
  _NexoCurrentVersionDisp = dispinterface
    ['{912B7F67-674E-35E3-9F46-CCB8B8FA08A0}']
  end;

// *********************************************************************//
// Interface :   INexoRetailerClientHandle
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {006465F7-6122-44C2-BBF1-166B483315E4}
// *********************************************************************//
  INexoRetailerClientHandle = interface(IDispatch)
    ['{006465F7-6122-44C2-BBF1-166B483315E4}']
    function Get_XML: WideString; safecall;
    property XML: WideString read Get_XML;
  end;

// *********************************************************************//
// DispIntf :    INexoRetailerClientHandleDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {006465F7-6122-44C2-BBF1-166B483315E4}
// *********************************************************************//
  INexoRetailerClientHandleDisp = dispinterface
    ['{006465F7-6122-44C2-BBF1-166B483315E4}']
    property XML: WideString readonly dispid 1;
  end;

// *********************************************************************//
// Interface :   INexoRetailerClient
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8B1988DB-F6AC-4B87-B874-62C58ED8E95F}
// *********************************************************************//
  INexoRetailerClient = interface(IDispatch)
    ['{8B1988DB-F6AC-4B87-B874-62C58ED8E95F}']
    function Get_Settings: INexoRetailerClientSettings; safecall;
    function Get_Key: WideString; safecall;
    function Get_KeyClient: WideString; safecall;
    function Get_KeyServer: WideString; safecall;
    function Get_ID: Integer; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Description: WideString; safecall;
    function Get_SaleID: WideString; safecall;
    function Get_POIID: WideString; safecall;
    function Get_Connected: WordBool; safecall;
    function Get_Activity: INexoRetailerClientActivity; safecall;
    function Get_ToString: WideString; safecall;
    function Connect(const Settings: INexoRetailerClientSettings): WordBool; safecall;
    procedure Disconnect; safecall;
    function SendRequest(const msg: INexoObject; timer: Integer; 
                         const Settings: INexoRetailerClientSettings; autoComplete: WordBool): INexoRetailerClientHandle; safecall;
    function SendRequest_2(const msg: ISaleToPOIRequest; timer: Integer; 
                           const Settings: INexoRetailerClientSettings; autoComplete: WordBool): INexoRetailerClientHandle; safecall;
    function SendRequestSync(const msg: INexoObject; timer: Integer; autoComplete: WordBool): WordBool; safecall;
    function SendRequestSync_2(const msg: ISaleToPOIRequest; timer: Integer; autoComplete: WordBool): WordBool; safecall;
    function SendReply(const msg: INexoObject; const thread: IThread; autoComplete: WordBool): WordBool; safecall;
    function SendReply_2(const msg: ISaleToPOIResponse; const thread: IThread; 
                         autoComplete: WordBool): WordBool; safecall;
    function SendRawRequest(const XML: WideString; timer: Integer; autoComplete: WordBool): INexoRetailerClientHandle; safecall;
    function SendRawRequestSync(const XML: WideString; timer: Integer; autoComplete: WordBool): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function Get_LogSerialisationEvents: WordBool; safecall;
    procedure Set_LogSerialisationEvents(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    function IsUsingJson: WordBool; safecall;
    procedure SetUsingJson(f: WordBool); safecall;
    property Settings: INexoRetailerClientSettings read Get_Settings;
    property Key: WideString read Get_Key;
    property KeyClient: WideString read Get_KeyClient;
    property KeyServer: WideString read Get_KeyServer;
    property ID: Integer read Get_ID;
    property Name: WideString read Get_Name write Set_Name;
    property Description: WideString read Get_Description;
    property SaleID: WideString read Get_SaleID;
    property POIID: WideString read Get_POIID;
    property Connected: WordBool read Get_Connected;
    property Activity: INexoRetailerClientActivity read Get_Activity;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
    property LogSerialisationEvents: WordBool read Get_LogSerialisationEvents write Set_LogSerialisationEvents;
  end;

// *********************************************************************//
// DispIntf :    INexoRetailerClientDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8B1988DB-F6AC-4B87-B874-62C58ED8E95F}
// *********************************************************************//
  INexoRetailerClientDisp = dispinterface
    ['{8B1988DB-F6AC-4B87-B874-62C58ED8E95F}']
    property Settings: INexoRetailerClientSettings readonly dispid 1;
    property Key: WideString readonly dispid 2;
    property KeyClient: WideString readonly dispid 3;
    property KeyServer: WideString readonly dispid 4;
    property ID: Integer readonly dispid 5;
    property Name: WideString dispid 6;
    property Description: WideString readonly dispid 7;
    property SaleID: WideString readonly dispid 8;
    property POIID: WideString readonly dispid 9;
    property Connected: WordBool readonly dispid 10;
    property Activity: INexoRetailerClientActivity readonly dispid 11;
    property ToString: WideString readonly dispid 100;
    function Connect(const Settings: INexoRetailerClientSettings): WordBool; dispid 101;
    procedure Disconnect; dispid 102;
    function SendRequest(const msg: INexoObject; timer: Integer; 
                         const Settings: INexoRetailerClientSettings; autoComplete: WordBool): INexoRetailerClientHandle; dispid 110;
    function SendRequest_2(const msg: ISaleToPOIRequest; timer: Integer; 
                           const Settings: INexoRetailerClientSettings; autoComplete: WordBool): INexoRetailerClientHandle; dispid 111;
    function SendRequestSync(const msg: INexoObject; timer: Integer; autoComplete: WordBool): WordBool; dispid 120;
    function SendRequestSync_2(const msg: ISaleToPOIRequest; timer: Integer; autoComplete: WordBool): WordBool; dispid 121;
    function SendReply(const msg: INexoObject; const thread: IThread; autoComplete: WordBool): WordBool; dispid 200;
    function SendReply_2(const msg: ISaleToPOIResponse; const thread: IThread; 
                         autoComplete: WordBool): WordBool; dispid 201;
    function SendRawRequest(const XML: WideString; timer: Integer; autoComplete: WordBool): INexoRetailerClientHandle; dispid 300;
    function SendRawRequestSync(const XML: WideString; timer: Integer; autoComplete: WordBool): WordBool; dispid 301;
    property SendWithErrors: WordBool dispid 1000;
    property SendWithWarnings: WordBool dispid 1001;
    property NbErrors: Integer readonly dispid 1002;
    property ContainsErrors: WordBool readonly dispid 1003;
    property NbWarnings: Integer readonly dispid 1004;
    property ContainsWarnings: WordBool readonly dispid 1005;
    property ContainsEvents: WordBool readonly dispid 1006;
    property BOM: WordBool dispid 1007;
    property LogSerialisationEvents: WordBool dispid 1008;
    function ErrorsList: WideString; dispid 1100;
    function WarningsList: WideString; dispid 1102;
    function EventsList: WideString; dispid 1103;
    function IsUsingJson: WordBool; dispid 1104;
    procedure SetUsingJson(f: WordBool); dispid 1105;
  end;

// *********************************************************************//
// Interface :   INexoRetailerClientSettings
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {96259F3B-053E-45AF-B616-079CBC11690A}
// *********************************************************************//
  INexoRetailerClientSettings = interface(IDispatch)
    ['{96259F3B-053E-45AF-B616-079CBC11690A}']
    function Get_IsValid: WordBool; safecall;
    function Get_StreamClientSettings: IStreamClientSettings; safecall;
    procedure _Set_StreamClientSettings(const pRetVal: IStreamClientSettings); safecall;
    function Get_ThreadData: IThreadData; safecall;
    procedure _Set_ThreadData(const pRetVal: IThreadData); safecall;
    function Get_OnSentRequestStatusChanged: IUnknown; safecall;
    procedure _Set_OnSentRequestStatusChanged(const pRetVal: IUnknown); safecall;
    function Get_OnReceivedRequest: IUnknown; safecall;
    procedure _Set_OnReceivedRequest(const pRetVal: IUnknown); safecall;
    function Get_OnReceivedReply: IUnknown; safecall;
    procedure _Set_OnReceivedReply(const pRetVal: IUnknown); safecall;
    function Get_OnReceivedNotification: IUnknown; safecall;
    procedure _Set_OnReceivedNotification(const pRetVal: IUnknown); safecall;
    function Get_OnSend: IUnknown; safecall;
    procedure _Set_OnSend(const pRetVal: IUnknown); safecall;
    function Get_WMNexoMessage: LongWord; safecall;
    procedure Set_WMNexoMessage(pRetVal: LongWord); safecall;
    function Get_Parameters: OleVariant; safecall;
    procedure _Set_Parameters(pRetVal: OleVariant); safecall;
    function Get_ConnectionSettings: INexoRetailerClientConnectionSettings; safecall;
    procedure _Set_ConnectionSettings(const pRetVal: INexoRetailerClientConnectionSettings); safecall;
    property IsValid: WordBool read Get_IsValid;
    property StreamClientSettings: IStreamClientSettings read Get_StreamClientSettings write _Set_StreamClientSettings;
    property ThreadData: IThreadData read Get_ThreadData write _Set_ThreadData;
    property OnSentRequestStatusChanged: IUnknown read Get_OnSentRequestStatusChanged write _Set_OnSentRequestStatusChanged;
    property OnReceivedRequest: IUnknown read Get_OnReceivedRequest write _Set_OnReceivedRequest;
    property OnReceivedReply: IUnknown read Get_OnReceivedReply write _Set_OnReceivedReply;
    property OnReceivedNotification: IUnknown read Get_OnReceivedNotification write _Set_OnReceivedNotification;
    property OnSend: IUnknown read Get_OnSend write _Set_OnSend;
    property WMNexoMessage: LongWord read Get_WMNexoMessage write Set_WMNexoMessage;
    property Parameters: OleVariant read Get_Parameters write _Set_Parameters;
    property ConnectionSettings: INexoRetailerClientConnectionSettings read Get_ConnectionSettings write _Set_ConnectionSettings;
  end;

// *********************************************************************//
// DispIntf :    INexoRetailerClientSettingsDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {96259F3B-053E-45AF-B616-079CBC11690A}
// *********************************************************************//
  INexoRetailerClientSettingsDisp = dispinterface
    ['{96259F3B-053E-45AF-B616-079CBC11690A}']
    property IsValid: WordBool readonly dispid 1;
    property StreamClientSettings: IStreamClientSettings dispid 2;
    property ThreadData: IThreadData dispid 3;
    property OnSentRequestStatusChanged: IUnknown dispid 4;
    property OnReceivedRequest: IUnknown dispid 5;
    property OnReceivedReply: IUnknown dispid 6;
    property OnReceivedNotification: IUnknown dispid 7;
    property OnSend: IUnknown dispid 8;
    property WMNexoMessage: LongWord dispid 9;
    property Parameters: OleVariant dispid 10;
    property ConnectionSettings: INexoRetailerClientConnectionSettings dispid 11;
  end;

// *********************************************************************//
// Interface :   INexoRetailerClientConnectionSettings
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BFEFE83C-FA94-48DB-B7B9-9E1887CB6884}
// *********************************************************************//
  INexoRetailerClientConnectionSettings = interface(IDispatch)
    ['{BFEFE83C-FA94-48DB-B7B9-9E1887CB6884}']
    function Get_OnConnectionRequest: IUnknown; safecall;
    procedure _Set_OnConnectionRequest(const pRetVal: IUnknown); safecall;
    function Get_OnConnectionReply: IUnknown; safecall;
    procedure _Set_OnConnectionReply(const pRetVal: IUnknown); safecall;
    function Get_ConnectionTimer: Integer; safecall;
    procedure Set_ConnectionTimer(pRetVal: Integer); safecall;
    property OnConnectionRequest: IUnknown read Get_OnConnectionRequest write _Set_OnConnectionRequest;
    property OnConnectionReply: IUnknown read Get_OnConnectionReply write _Set_OnConnectionReply;
    property ConnectionTimer: Integer read Get_ConnectionTimer write Set_ConnectionTimer;
  end;

// *********************************************************************//
// DispIntf :    INexoRetailerClientConnectionSettingsDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BFEFE83C-FA94-48DB-B7B9-9E1887CB6884}
// *********************************************************************//
  INexoRetailerClientConnectionSettingsDisp = dispinterface
    ['{BFEFE83C-FA94-48DB-B7B9-9E1887CB6884}']
    property OnConnectionRequest: IUnknown dispid 1;
    property OnConnectionReply: IUnknown dispid 2;
    property ConnectionTimer: Integer dispid 3;
  end;

// *********************************************************************//
// Interface :   INexoRetailerClientActivity
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BC3BD01B-95AA-4D4A-B2A1-3AB16231142D}
// *********************************************************************//
  INexoRetailerClientActivity = interface(IDispatch)
    ['{BC3BD01B-95AA-4D4A-B2A1-3AB16231142D}']
  end;

// *********************************************************************//
// DispIntf :    INexoRetailerClientActivityDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BC3BD01B-95AA-4D4A-B2A1-3AB16231142D}
// *********************************************************************//
  INexoRetailerClientActivityDisp = dispinterface
    ['{BC3BD01B-95AA-4D4A-B2A1-3AB16231142D}']
  end;

// *********************************************************************//
// Interface :   INexoRetailerServerActivity
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F71D22CA-428A-4B19-9412-05F8552EB8F2}
// *********************************************************************//
  INexoRetailerServerActivity = interface(IDispatch)
    ['{F71D22CA-428A-4B19-9412-05F8552EB8F2}']
  end;

// *********************************************************************//
// DispIntf :    INexoRetailerServerActivityDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F71D22CA-428A-4B19-9412-05F8552EB8F2}
// *********************************************************************//
  INexoRetailerServerActivityDisp = dispinterface
    ['{F71D22CA-428A-4B19-9412-05F8552EB8F2}']
  end;

// *********************************************************************//
// Interface :   _NexoRetailerServerDatabaseConnection
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {79C911BC-C8E4-341F-941F-73005D7CFC92}
// *********************************************************************//
  _NexoRetailerServerDatabaseConnection = interface(IDispatch)
    ['{79C911BC-C8E4-341F-941F-73005D7CFC92}']
  end;

// *********************************************************************//
// DispIntf :    _NexoRetailerServerDatabaseConnectionDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {79C911BC-C8E4-341F-941F-73005D7CFC92}
// *********************************************************************//
  _NexoRetailerServerDatabaseConnectionDisp = dispinterface
    ['{79C911BC-C8E4-341F-941F-73005D7CFC92}']
  end;

// *********************************************************************//
// Interface :   _NexoRetailerServerDatabaseEndPoint
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {34DA5861-39D5-35BB-B676-8F96880BB3EB}
// *********************************************************************//
  _NexoRetailerServerDatabaseEndPoint = interface(IDispatch)
    ['{34DA5861-39D5-35BB-B676-8F96880BB3EB}']
  end;

// *********************************************************************//
// DispIntf :    _NexoRetailerServerDatabaseEndPointDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {34DA5861-39D5-35BB-B676-8F96880BB3EB}
// *********************************************************************//
  _NexoRetailerServerDatabaseEndPointDisp = dispinterface
    ['{34DA5861-39D5-35BB-B676-8F96880BB3EB}']
  end;

// *********************************************************************//
// Interface :   _NexoRetailerServerDatabaseSale
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {93971474-DEA7-3D4D-A112-61B672EE7B52}
// *********************************************************************//
  _NexoRetailerServerDatabaseSale = interface(IDispatch)
    ['{93971474-DEA7-3D4D-A112-61B672EE7B52}']
  end;

// *********************************************************************//
// DispIntf :    _NexoRetailerServerDatabaseSaleDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {93971474-DEA7-3D4D-A112-61B672EE7B52}
// *********************************************************************//
  _NexoRetailerServerDatabaseSaleDisp = dispinterface
    ['{93971474-DEA7-3D4D-A112-61B672EE7B52}']
  end;

// *********************************************************************//
// Interface :   _NexoRetailerServerDatabaseMessage
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {144CF118-C521-3B94-89DA-D4739A0C91D2}
// *********************************************************************//
  _NexoRetailerServerDatabaseMessage = interface(IDispatch)
    ['{144CF118-C521-3B94-89DA-D4739A0C91D2}']
  end;

// *********************************************************************//
// DispIntf :    _NexoRetailerServerDatabaseMessageDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {144CF118-C521-3B94-89DA-D4739A0C91D2}
// *********************************************************************//
  _NexoRetailerServerDatabaseMessageDisp = dispinterface
    ['{144CF118-C521-3B94-89DA-D4739A0C91D2}']
  end;

// *********************************************************************//
// Interface :   INexoRetailerServerDatabaseSettings
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B46DBE4F-C3E3-41F8-BFE8-E10DBEF1988B}
// *********************************************************************//
  INexoRetailerServerDatabaseSettings = interface(IDispatch)
    ['{B46DBE4F-C3E3-41F8-BFE8-E10DBEF1988B}']
    function Get_ConnectionString: WideString; safecall;
    procedure Set_ConnectionString(const pRetVal: WideString); safecall;
    function Get_ConnectionsTableName: WideString; safecall;
    procedure Set_ConnectionsTableName(const pRetVal: WideString); safecall;
    function Get_MessagesTableName: WideString; safecall;
    procedure Set_MessagesTableName(const pRetVal: WideString); safecall;
    function Get_EndPointsTableName: WideString; safecall;
    procedure Set_EndPointsTableName(const pRetVal: WideString); safecall;
    function Get_SalesTableName: WideString; safecall;
    procedure Set_SalesTableName(const pRetVal: WideString); safecall;
    function Get_DeclineByDefault: WordBool; safecall;
    procedure Set_DeclineByDefault(pRetVal: WordBool); safecall;
    function Get_Secured: WordBool; safecall;
    procedure Set_Secured(pRetVal: WordBool); safecall;
    function Get_DelayBeforeAutoLogout: LongWord; safecall;
    procedure Set_DelayBeforeAutoLogout(pRetVal: LongWord); safecall;
    function IsValid: WordBool; safecall;
    property ConnectionString: WideString read Get_ConnectionString write Set_ConnectionString;
    property ConnectionsTableName: WideString read Get_ConnectionsTableName write Set_ConnectionsTableName;
    property MessagesTableName: WideString read Get_MessagesTableName write Set_MessagesTableName;
    property EndPointsTableName: WideString read Get_EndPointsTableName write Set_EndPointsTableName;
    property SalesTableName: WideString read Get_SalesTableName write Set_SalesTableName;
    property DeclineByDefault: WordBool read Get_DeclineByDefault write Set_DeclineByDefault;
    property Secured: WordBool read Get_Secured write Set_Secured;
    property DelayBeforeAutoLogout: LongWord read Get_DelayBeforeAutoLogout write Set_DelayBeforeAutoLogout;
  end;

// *********************************************************************//
// DispIntf :    INexoRetailerServerDatabaseSettingsDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B46DBE4F-C3E3-41F8-BFE8-E10DBEF1988B}
// *********************************************************************//
  INexoRetailerServerDatabaseSettingsDisp = dispinterface
    ['{B46DBE4F-C3E3-41F8-BFE8-E10DBEF1988B}']
    property ConnectionString: WideString dispid 1;
    property ConnectionsTableName: WideString dispid 2;
    property MessagesTableName: WideString dispid 3;
    property EndPointsTableName: WideString dispid 4;
    property SalesTableName: WideString dispid 5;
    property DeclineByDefault: WordBool dispid 6;
    property Secured: WordBool dispid 7;
    property DelayBeforeAutoLogout: LongWord dispid 8;
    function IsValid: WordBool; dispid 100;
  end;

// *********************************************************************//
// Interface :   _NexoRetailerServerDatabase
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {23975521-A1F1-3C63-9519-BE95ECC5C8E2}
// *********************************************************************//
  _NexoRetailerServerDatabase = interface(IDispatch)
    ['{23975521-A1F1-3C63-9519-BE95ECC5C8E2}']
  end;

// *********************************************************************//
// DispIntf :    _NexoRetailerServerDatabaseDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {23975521-A1F1-3C63-9519-BE95ECC5C8E2}
// *********************************************************************//
  _NexoRetailerServerDatabaseDisp = dispinterface
    ['{23975521-A1F1-3C63-9519-BE95ECC5C8E2}']
  end;

// *********************************************************************//
// Interface :   INexoRetailerServerSettings
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0D584C15-C13E-4123-B6A6-57D27C7937D1}
// *********************************************************************//
  INexoRetailerServerSettings = interface(IDispatch)
    ['{0D584C15-C13E-4123-B6A6-57D27C7937D1}']
    function Get_IsValid: WordBool; safecall;
    function Get_Parameters: OleVariant; safecall;
    procedure _Set_Parameters(pRetVal: OleVariant); safecall;
    function Get_ThreadData: IThreadData; safecall;
    procedure _Set_ThreadData(const pRetVal: IThreadData); safecall;
    function Get_StreamServerSettings: IStreamServerSettings; safecall;
    procedure _Set_StreamServerSettings(const pRetVal: IStreamServerSettings); safecall;
    function Get_OnStart: IUnknown; safecall;
    procedure _Set_OnStart(const pRetVal: IUnknown); safecall;
    function Get_OnReceivedRequest: IUnknown; safecall;
    procedure _Set_OnReceivedRequest(const pRetVal: IUnknown); safecall;
    function Get_OnReceivedReply: IUnknown; safecall;
    procedure _Set_OnReceivedReply(const pRetVal: IUnknown); safecall;
    function Get_OnReceivedNotification: IUnknown; safecall;
    procedure _Set_OnReceivedNotification(const pRetVal: IUnknown); safecall;
    function Get_OnSend: IUnknown; safecall;
    procedure _Set_OnSend(const pRetVal: IUnknown); safecall;
    function Get_OnStop: IUnknown; safecall;
    procedure _Set_OnStop(const pRetVal: IUnknown); safecall;
    function Get_DatabaseSettings: INexoRetailerServerDatabaseSettings; safecall;
    procedure _Set_DatabaseSettings(const pRetVal: INexoRetailerServerDatabaseSettings); safecall;
    property IsValid: WordBool read Get_IsValid;
    property Parameters: OleVariant read Get_Parameters write _Set_Parameters;
    property ThreadData: IThreadData read Get_ThreadData write _Set_ThreadData;
    property StreamServerSettings: IStreamServerSettings read Get_StreamServerSettings write _Set_StreamServerSettings;
    property OnStart: IUnknown read Get_OnStart write _Set_OnStart;
    property OnReceivedRequest: IUnknown read Get_OnReceivedRequest write _Set_OnReceivedRequest;
    property OnReceivedReply: IUnknown read Get_OnReceivedReply write _Set_OnReceivedReply;
    property OnReceivedNotification: IUnknown read Get_OnReceivedNotification write _Set_OnReceivedNotification;
    property OnSend: IUnknown read Get_OnSend write _Set_OnSend;
    property OnStop: IUnknown read Get_OnStop write _Set_OnStop;
    property DatabaseSettings: INexoRetailerServerDatabaseSettings read Get_DatabaseSettings write _Set_DatabaseSettings;
  end;

// *********************************************************************//
// DispIntf :    INexoRetailerServerSettingsDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0D584C15-C13E-4123-B6A6-57D27C7937D1}
// *********************************************************************//
  INexoRetailerServerSettingsDisp = dispinterface
    ['{0D584C15-C13E-4123-B6A6-57D27C7937D1}']
    property IsValid: WordBool readonly dispid 1;
    property Parameters: OleVariant dispid 2;
    property ThreadData: IThreadData dispid 3;
    property StreamServerSettings: IStreamServerSettings dispid 4;
    property OnStart: IUnknown dispid 10;
    property OnReceivedRequest: IUnknown dispid 11;
    property OnReceivedReply: IUnknown dispid 12;
    property OnReceivedNotification: IUnknown dispid 13;
    property OnSend: IUnknown dispid 14;
    property OnStop: IUnknown dispid 15;
    property DatabaseSettings: INexoRetailerServerDatabaseSettings dispid 16;
  end;

// *********************************************************************//
// La classe CoAuthenticatedDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAuthenticatedDataType exposée
// par la CoClasse AuthenticatedDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAuthenticatedDataType = class
    class function Create: IAuthenticatedDataType;
    class function CreateRemote(const MachineName: string): IAuthenticatedDataType;
  end;

// *********************************************************************//
// La classe CoKEKType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IKEKType exposée
// par la CoClasse KEKType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoKEKType = class
    class function Create: IKEKType;
    class function CreateRemote(const MachineName: string): IKEKType;
  end;

// *********************************************************************//
// La classe CoKEKIdentifierType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IKEKIdentifierType exposée
// par la CoClasse KEKIdentifierType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoKEKIdentifierType = class
    class function Create: IKEKIdentifierType;
    class function CreateRemote(const MachineName: string): IKEKIdentifierType;
  end;

// *********************************************************************//
// La classe CoDisplayResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IDisplayResponseType exposée
// par la CoClasse DisplayResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoDisplayResponseType = class
    class function Create: IDisplayResponseType;
    class function CreateRemote(const MachineName: string): IDisplayResponseType;
  end;

// *********************************************************************//
// La classe CoOutputResultType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IOutputResultType exposée
// par la CoClasse OutputResultType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoOutputResultType = class
    class function Create: IOutputResultType;
    class function CreateRemote(const MachineName: string): IOutputResultType;
  end;

// *********************************************************************//
// La classe CoResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IResponseType exposée
// par la CoClasse ResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoResponseType = class
    class function Create: IResponseType;
    class function CreateRemote(const MachineName: string): IResponseType;
  end;

// *********************************************************************//
// La classe CoDisplayRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IDisplayRequestType exposée
// par la CoClasse DisplayRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoDisplayRequestType = class
    class function Create: IDisplayRequestType;
    class function CreateRemote(const MachineName: string): IDisplayRequestType;
  end;

// *********************************************************************//
// La classe CoDisplayOutputType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IDisplayOutputType exposée
// par la CoClasse DisplayOutputType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoDisplayOutputType = class
    class function Create: IDisplayOutputType;
    class function CreateRemote(const MachineName: string): IDisplayOutputType;
  end;

// *********************************************************************//
// La classe CoOutputContentType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IOutputContentType exposée
// par la CoClasse OutputContentType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoOutputContentType = class
    class function Create: IOutputContentType;
    class function CreateRemote(const MachineName: string): IOutputContentType;
  end;

// *********************************************************************//
// La classe CoPredefinedContentType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPredefinedContentType exposée
// par la CoClasse PredefinedContentType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPredefinedContentType = class
    class function Create: IPredefinedContentType;
    class function CreateRemote(const MachineName: string): IPredefinedContentType;
  end;

// *********************************************************************//
// La classe CoOutputTextType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IOutputTextType exposée
// par la CoClasse OutputTextType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoOutputTextType = class
    class function Create: IOutputTextType;
    class function CreateRemote(const MachineName: string): IOutputTextType;
  end;

// *********************************************************************//
// La classe CoOutputBarcodeType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IOutputBarcodeType exposée
// par la CoClasse OutputBarcodeType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoOutputBarcodeType = class
    class function Create: IOutputBarcodeType;
    class function CreateRemote(const MachineName: string): IOutputBarcodeType;
  end;

// *********************************************************************//
// La classe CoMenuEntryType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IMenuEntryType exposée
// par la CoClasse MenuEntryType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoMenuEntryType = class
    class function Create: IMenuEntryType;
    class function CreateRemote(const MachineName: string): IMenuEntryType;
  end;

// *********************************************************************//
// La classe CoAlgorithmIdentifier fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAlgorithmIdentifier exposée
// par la CoClasse AlgorithmIdentifier. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAlgorithmIdentifier = class
    class function Create: IAlgorithmIdentifier;
    class function CreateRemote(const MachineName: string): IAlgorithmIdentifier;
  end;

// *********************************************************************//
// La classe CoParameterType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IParameterType exposée
// par la CoClasse ParameterType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoParameterType = class
    class function Create: IParameterType;
    class function CreateRemote(const MachineName: string): IParameterType;
  end;

// *********************************************************************//
// La classe CoKeyTransportType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IKeyTransportType exposée
// par la CoClasse KeyTransportType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoKeyTransportType = class
    class function Create: IKeyTransportType;
    class function CreateRemote(const MachineName: string): IKeyTransportType;
  end;

// *********************************************************************//
// La classe CoRecipientIdentifierType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IRecipientIdentifierType exposée
// par la CoClasse RecipientIdentifierType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoRecipientIdentifierType = class
    class function Create: IRecipientIdentifierType;
    class function CreateRemote(const MachineName: string): IRecipientIdentifierType;
  end;

// *********************************************************************//
// La classe CoIssuerAndSerialNumberType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IIssuerAndSerialNumberType exposée
// par la CoClasse IssuerAndSerialNumberType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoIssuerAndSerialNumberType = class
    class function Create: IIssuerAndSerialNumberType;
    class function CreateRemote(const MachineName: string): IIssuerAndSerialNumberType;
  end;

// *********************************************************************//
// La classe CoRelativeDistinguishedNameType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IRelativeDistinguishedNameType exposée
// par la CoClasse RelativeDistinguishedNameType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoRelativeDistinguishedNameType = class
    class function Create: IRelativeDistinguishedNameType;
    class function CreateRemote(const MachineName: string): IRelativeDistinguishedNameType;
  end;

// *********************************************************************//
// La classe CoEncapsulatedContentType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEncapsulatedContentType exposée
// par la CoClasse EncapsulatedContentType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoEncapsulatedContentType = class
    class function Create: IEncapsulatedContentType;
    class function CreateRemote(const MachineName: string): IEncapsulatedContentType;
  end;

// *********************************************************************//
// La classe CoDigestedDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IDigestedDataType exposée
// par la CoClasse DigestedDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoDigestedDataType = class
    class function Create: IDigestedDataType;
    class function CreateRemote(const MachineName: string): IDigestedDataType;
  end;

// *********************************************************************//
// La classe CoEncryptedContentType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEncryptedContentType exposée
// par la CoClasse EncryptedContentType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoEncryptedContentType = class
    class function Create: IEncryptedContentType;
    class function CreateRemote(const MachineName: string): IEncryptedContentType;
  end;

// *********************************************************************//
// La classe CoEnvelopedDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnvelopedDataType exposée
// par la CoClasse EnvelopedDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoEnvelopedDataType = class
    class function Create: IEnvelopedDataType;
    class function CreateRemote(const MachineName: string): IEnvelopedDataType;
  end;

// *********************************************************************//
// La classe CoIssuerType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IIssuerType exposée
// par la CoClasse IssuerType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoIssuerType = class
    class function Create: IIssuerType;
    class function CreateRemote(const MachineName: string): IIssuerType;
  end;

// *********************************************************************//
// La classe CoNamedKeyEncryptedDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INamedKeyEncryptedDataType exposée
// par la CoClasse NamedKeyEncryptedDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNamedKeyEncryptedDataType = class
    class function Create: INamedKeyEncryptedDataType;
    class function CreateRemote(const MachineName: string): INamedKeyEncryptedDataType;
  end;

// *********************************************************************//
// La classe CoSignedDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISignedDataType exposée
// par la CoClasse SignedDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSignedDataType = class
    class function Create: ISignedDataType;
    class function CreateRemote(const MachineName: string): ISignedDataType;
  end;

// *********************************************************************//
// La classe CoSignerType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISignerType exposée
// par la CoClasse SignerType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSignerType = class
    class function Create: ISignerType;
    class function CreateRemote(const MachineName: string): ISignerType;
  end;

// *********************************************************************//
// La classe CoSignerIdentifierType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISignerIdentifierType exposée
// par la CoClasse SignerIdentifierType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSignerIdentifierType = class
    class function Create: ISignerIdentifierType;
    class function CreateRemote(const MachineName: string): ISignerIdentifierType;
  end;

// *********************************************************************//
// La classe CoContentInformationType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IContentInformationType exposée
// par la CoClasse ContentInformationType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoContentInformationType = class
    class function Create: IContentInformationType;
    class function CreateRemote(const MachineName: string): IContentInformationType;
  end;

// *********************************************************************//
// La classe CoAbortRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAbortRequestType exposée
// par la CoClasse AbortRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAbortRequestType = class
    class function Create: IAbortRequestType;
    class function CreateRemote(const MachineName: string): IAbortRequestType;
  end;

// *********************************************************************//
// La classe CoMessageReferenceType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IMessageReferenceType exposée
// par la CoClasse MessageReferenceType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoMessageReferenceType = class
    class function Create: IMessageReferenceType;
    class function CreateRemote(const MachineName: string): IMessageReferenceType;
  end;

// *********************************************************************//
// La classe CoAdminRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAdminRequestType exposée
// par la CoClasse AdminRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAdminRequestType = class
    class function Create: IAdminRequestType;
    class function CreateRemote(const MachineName: string): IAdminRequestType;
  end;

// *********************************************************************//
// La classe CoAdminResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAdminResponseType exposée
// par la CoClasse AdminResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAdminResponseType = class
    class function Create: IAdminResponseType;
    class function CreateRemote(const MachineName: string): IAdminResponseType;
  end;

// *********************************************************************//
// La classe CoAllowedProductType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAllowedProductType exposée
// par la CoClasse AllowedProductType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAllowedProductType = class
    class function Create: IAllowedProductType;
    class function CreateRemote(const MachineName: string): IAllowedProductType;
  end;

// *********************************************************************//
// La classe CoAmountsReqType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAmountsReqType exposée
// par la CoClasse AmountsReqType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAmountsReqType = class
    class function Create: IAmountsReqType;
    class function CreateRemote(const MachineName: string): IAmountsReqType;
  end;

// *********************************************************************//
// La classe CoAmountsRespType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAmountsRespType exposée
// par la CoClasse AmountsRespType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAmountsRespType = class
    class function Create: IAmountsRespType;
    class function CreateRemote(const MachineName: string): IAmountsRespType;
  end;

// *********************************************************************//
// La classe CoAreaSizeType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAreaSizeType exposée
// par la CoClasse AreaSizeType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAreaSizeType = class
    class function Create: IAreaSizeType;
    class function CreateRemote(const MachineName: string): IAreaSizeType;
  end;

// *********************************************************************//
// La classe CoBalanceInquiryRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IBalanceInquiryRequestType exposée
// par la CoClasse BalanceInquiryRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoBalanceInquiryRequestType = class
    class function Create: IBalanceInquiryRequestType;
    class function CreateRemote(const MachineName: string): IBalanceInquiryRequestType;
  end;

// *********************************************************************//
// La classe CoPaymentAccountReqType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentAccountReqType exposée
// par la CoClasse PaymentAccountReqType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentAccountReqType = class
    class function Create: IPaymentAccountReqType;
    class function CreateRemote(const MachineName: string): IPaymentAccountReqType;
  end;

// *********************************************************************//
// La classe CoTransactionIdentificationType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransactionIdentificationType exposée
// par la CoClasse TransactionIdentificationType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransactionIdentificationType = class
    class function Create: ITransactionIdentificationType;
    class function CreateRemote(const MachineName: string): ITransactionIdentificationType;
  end;

// *********************************************************************//
// La classe CoPaymentInstrumentDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentInstrumentDataType exposée
// par la CoClasse PaymentInstrumentDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentInstrumentDataType = class
    class function Create: IPaymentInstrumentDataType;
    class function CreateRemote(const MachineName: string): IPaymentInstrumentDataType;
  end;

// *********************************************************************//
// La classe CoCardDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardDataType exposée
// par la CoClasse CardDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardDataType = class
    class function Create: ICardDataType;
    class function CreateRemote(const MachineName: string): ICardDataType;
  end;

// *********************************************************************//
// La classe CoSensitiveCardDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISensitiveCardDataType exposée
// par la CoClasse SensitiveCardDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSensitiveCardDataType = class
    class function Create: ISensitiveCardDataType;
    class function CreateRemote(const MachineName: string): ISensitiveCardDataType;
  end;

// *********************************************************************//
// La classe CoTrackDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITrackDataType exposée
// par la CoClasse TrackDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTrackDataType = class
    class function Create: ITrackDataType;
    class function CreateRemote(const MachineName: string): ITrackDataType;
  end;

// *********************************************************************//
// La classe CoPaymentTokenType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentTokenType exposée
// par la CoClasse PaymentTokenType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentTokenType = class
    class function Create: IPaymentTokenType;
    class function CreateRemote(const MachineName: string): IPaymentTokenType;
  end;

// *********************************************************************//
// La classe CoCustomerOrderType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICustomerOrderType exposée
// par la CoClasse CustomerOrderType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCustomerOrderType = class
    class function Create: ICustomerOrderType;
    class function CreateRemote(const MachineName: string): ICustomerOrderType;
  end;

// *********************************************************************//
// La classe CoCheckDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICheckDataType exposée
// par la CoClasse CheckDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCheckDataType = class
    class function Create: ICheckDataType;
    class function CreateRemote(const MachineName: string): ICheckDataType;
  end;

// *********************************************************************//
// La classe CoMobileDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IMobileDataType exposée
// par la CoClasse MobileDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoMobileDataType = class
    class function Create: IMobileDataType;
    class function CreateRemote(const MachineName: string): IMobileDataType;
  end;

// *********************************************************************//
// La classe CoGeolocationType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IGeolocationType exposée
// par la CoClasse GeolocationType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoGeolocationType = class
    class function Create: IGeolocationType;
    class function CreateRemote(const MachineName: string): IGeolocationType;
  end;

// *********************************************************************//
// La classe CoGeographicCoordinatesType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IGeographicCoordinatesType exposée
// par la CoClasse GeographicCoordinatesType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoGeographicCoordinatesType = class
    class function Create: IGeographicCoordinatesType;
    class function CreateRemote(const MachineName: string): IGeographicCoordinatesType;
  end;

// *********************************************************************//
// La classe CoUTMCoordinatesType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IUTMCoordinatesType exposée
// par la CoClasse UTMCoordinatesType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoUTMCoordinatesType = class
    class function Create: IUTMCoordinatesType;
    class function CreateRemote(const MachineName: string): IUTMCoordinatesType;
  end;

// *********************************************************************//
// La classe CoSensitiveMobileDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISensitiveMobileDataType exposée
// par la CoClasse SensitiveMobileDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSensitiveMobileDataType = class
    class function Create: ISensitiveMobileDataType;
    class function CreateRemote(const MachineName: string): ISensitiveMobileDataType;
  end;

// *********************************************************************//
// La classe CoLoyaltyAccountReqType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyAccountReqType exposée
// par la CoClasse LoyaltyAccountReqType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyAccountReqType = class
    class function Create: ILoyaltyAccountReqType;
    class function CreateRemote(const MachineName: string): ILoyaltyAccountReqType;
  end;

// *********************************************************************//
// La classe CoLoyaltyAccountIDType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyAccountIDType exposée
// par la CoClasse LoyaltyAccountIDType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyAccountIDType = class
    class function Create: ILoyaltyAccountIDType;
    class function CreateRemote(const MachineName: string): ILoyaltyAccountIDType;
  end;

// *********************************************************************//
// La classe CoBalanceInquiryResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IBalanceInquiryResponseType exposée
// par la CoClasse BalanceInquiryResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoBalanceInquiryResponseType = class
    class function Create: IBalanceInquiryResponseType;
    class function CreateRemote(const MachineName: string): IBalanceInquiryResponseType;
  end;

// *********************************************************************//
// La classe CoPaymentAccountStatusType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentAccountStatusType exposée
// par la CoClasse PaymentAccountStatusType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentAccountStatusType = class
    class function Create: IPaymentAccountStatusType;
    class function CreateRemote(const MachineName: string): IPaymentAccountStatusType;
  end;

// *********************************************************************//
// La classe CoPaymentAcquirerDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentAcquirerDataType exposée
// par la CoClasse PaymentAcquirerDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentAcquirerDataType = class
    class function Create: IPaymentAcquirerDataType;
    class function CreateRemote(const MachineName: string): IPaymentAcquirerDataType;
  end;

// *********************************************************************//
// La classe CoLoyaltyAccountStatusType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyAccountStatusType exposée
// par la CoClasse LoyaltyAccountStatusType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyAccountStatusType = class
    class function Create: ILoyaltyAccountStatusType;
    class function CreateRemote(const MachineName: string): ILoyaltyAccountStatusType;
  end;

// *********************************************************************//
// La classe CoLoyaltyAccountType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyAccountType exposée
// par la CoClasse LoyaltyAccountType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyAccountType = class
    class function Create: ILoyaltyAccountType;
    class function CreateRemote(const MachineName: string): ILoyaltyAccountType;
  end;

// *********************************************************************//
// La classe CoBatchRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IBatchRequestType exposée
// par la CoClasse BatchRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoBatchRequestType = class
    class function Create: IBatchRequestType;
    class function CreateRemote(const MachineName: string): IBatchRequestType;
  end;

// *********************************************************************//
// La classe CoTransactionToPerformType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransactionToPerformType exposée
// par la CoClasse TransactionToPerformType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransactionToPerformType = class
    class function Create: ITransactionToPerformType;
    class function CreateRemote(const MachineName: string): ITransactionToPerformType;
  end;

// *********************************************************************//
// La classe CoLoyaltyRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyRequestType exposée
// par la CoClasse LoyaltyRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyRequestType = class
    class function Create: ILoyaltyRequestType;
    class function CreateRemote(const MachineName: string): ILoyaltyRequestType;
  end;

// *********************************************************************//
// La classe CoSaleDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleDataType exposée
// par la CoClasse SaleDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleDataType = class
    class function Create: ISaleDataType;
    class function CreateRemote(const MachineName: string): ISaleDataType;
  end;

// *********************************************************************//
// La classe CoSaleTerminalDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleTerminalDataType exposée
// par la CoClasse SaleTerminalDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleTerminalDataType = class
    class function Create: ISaleTerminalDataType;
    class function CreateRemote(const MachineName: string): ISaleTerminalDataType;
  end;

// *********************************************************************//
// La classe CoSaleProfileType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleProfileType exposée
// par la CoClasse SaleProfileType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleProfileType = class
    class function Create: ISaleProfileType;
    class function CreateRemote(const MachineName: string): ISaleProfileType;
  end;

// *********************************************************************//
// La classe CoSponsoredMerchantType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISponsoredMerchantType exposée
// par la CoClasse SponsoredMerchantType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSponsoredMerchantType = class
    class function Create: ISponsoredMerchantType;
    class function CreateRemote(const MachineName: string): ISponsoredMerchantType;
  end;

// *********************************************************************//
// La classe CoSaleToIssuerDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleToIssuerDataType exposée
// par la CoClasse SaleToIssuerDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleToIssuerDataType = class
    class function Create: ISaleToIssuerDataType;
    class function CreateRemote(const MachineName: string): ISaleToIssuerDataType;
  end;

// *********************************************************************//
// La classe CoLoyaltyTransactionType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyTransactionType exposée
// par la CoClasse LoyaltyTransactionType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyTransactionType = class
    class function Create: ILoyaltyTransactionType;
    class function CreateRemote(const MachineName: string): ILoyaltyTransactionType;
  end;

// *********************************************************************//
// La classe CoOriginalPOITransactionType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IOriginalPOITransactionType exposée
// par la CoClasse OriginalPOITransactionType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoOriginalPOITransactionType = class
    class function Create: IOriginalPOITransactionType;
    class function CreateRemote(const MachineName: string): IOriginalPOITransactionType;
  end;

// *********************************************************************//
// La classe CoTransactionConditionsType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransactionConditionsType exposée
// par la CoClasse TransactionConditionsType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransactionConditionsType = class
    class function Create: ITransactionConditionsType;
    class function CreateRemote(const MachineName: string): ITransactionConditionsType;
  end;

// *********************************************************************//
// La classe CoSaleItemType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleItemType exposée
// par la CoClasse SaleItemType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleItemType = class
    class function Create: ISaleItemType;
    class function CreateRemote(const MachineName: string): ISaleItemType;
  end;

// *********************************************************************//
// La classe CoLoyaltyDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyDataType exposée
// par la CoClasse LoyaltyDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyDataType = class
    class function Create: ILoyaltyDataType;
    class function CreateRemote(const MachineName: string): ILoyaltyDataType;
  end;

// *********************************************************************//
// La classe CoLoyaltyAmountType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyAmountType exposée
// par la CoClasse LoyaltyAmountType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyAmountType = class
    class function Create: ILoyaltyAmountType;
    class function CreateRemote(const MachineName: string): ILoyaltyAmountType;
  end;

// *********************************************************************//
// La classe CoPaymentRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentRequestType exposée
// par la CoClasse PaymentRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentRequestType = class
    class function Create: IPaymentRequestType;
    class function CreateRemote(const MachineName: string): IPaymentRequestType;
  end;

// *********************************************************************//
// La classe CoPaymentTransactionType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentTransactionType exposée
// par la CoClasse PaymentTransactionType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentTransactionType = class
    class function Create: IPaymentTransactionType;
    class function CreateRemote(const MachineName: string): IPaymentTransactionType;
  end;

// *********************************************************************//
// La classe CoPaymentDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentDataType exposée
// par la CoClasse PaymentDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentDataType = class
    class function Create: IPaymentDataType;
    class function CreateRemote(const MachineName: string): IPaymentDataType;
  end;

// *********************************************************************//
// La classe CoInstalmentType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IInstalmentType exposée
// par la CoClasse InstalmentType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoInstalmentType = class
    class function Create: IInstalmentType;
    class function CreateRemote(const MachineName: string): IInstalmentType;
  end;

// *********************************************************************//
// La classe CoReversalRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IReversalRequestType exposée
// par la CoClasse ReversalRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoReversalRequestType = class
    class function Create: IReversalRequestType;
    class function CreateRemote(const MachineName: string): IReversalRequestType;
  end;

// *********************************************************************//
// La classe CoBatchResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IBatchResponseType exposée
// par la CoClasse BatchResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoBatchResponseType = class
    class function Create: IBatchResponseType;
    class function CreateRemote(const MachineName: string): IBatchResponseType;
  end;

// *********************************************************************//
// La classe CoPerformedTransactionType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPerformedTransactionType exposée
// par la CoClasse PerformedTransactionType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPerformedTransactionType = class
    class function Create: IPerformedTransactionType;
    class function CreateRemote(const MachineName: string): IPerformedTransactionType;
  end;

// *********************************************************************//
// La classe CoPOIDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPOIDataType exposée
// par la CoClasse POIDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPOIDataType = class
    class function Create: IPOIDataType;
    class function CreateRemote(const MachineName: string): IPOIDataType;
  end;

// *********************************************************************//
// La classe CoPaymentResultType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentResultType exposée
// par la CoClasse PaymentResultType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentResultType = class
    class function Create: IPaymentResultType;
    class function CreateRemote(const MachineName: string): IPaymentResultType;
  end;

// *********************************************************************//
// La classe CoCurrencyConversionType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICurrencyConversionType exposée
// par la CoClasse CurrencyConversionType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCurrencyConversionType = class
    class function Create: ICurrencyConversionType;
    class function CreateRemote(const MachineName: string): ICurrencyConversionType;
  end;

// *********************************************************************//
// La classe CoAmountType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAmountType exposée
// par la CoClasse AmountType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAmountType = class
    class function Create: IAmountType;
    class function CreateRemote(const MachineName: string): IAmountType;
  end;

// *********************************************************************//
// La classe CoCapturedSignatureType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICapturedSignatureType exposée
// par la CoClasse CapturedSignatureType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCapturedSignatureType = class
    class function Create: ICapturedSignatureType;
    class function CreateRemote(const MachineName: string): ICapturedSignatureType;
  end;

// *********************************************************************//
// La classe CoSignaturePointType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISignaturePointType exposée
// par la CoClasse SignaturePointType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSignaturePointType = class
    class function Create: ISignaturePointType;
    class function CreateRemote(const MachineName: string): ISignaturePointType;
  end;

// *********************************************************************//
// La classe CoLoyaltyResultType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyResultType exposée
// par la CoClasse LoyaltyResultType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyResultType = class
    class function Create: ILoyaltyResultType;
    class function CreateRemote(const MachineName: string): ILoyaltyResultType;
  end;

// *********************************************************************//
// La classe CoLoyaltyAcquirerDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyAcquirerDataType exposée
// par la CoClasse LoyaltyAcquirerDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyAcquirerDataType = class
    class function Create: ILoyaltyAcquirerDataType;
    class function CreateRemote(const MachineName: string): ILoyaltyAcquirerDataType;
  end;

// *********************************************************************//
// La classe CoRebatesType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IRebatesType exposée
// par la CoClasse RebatesType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoRebatesType = class
    class function Create: IRebatesType;
    class function CreateRemote(const MachineName: string): IRebatesType;
  end;

// *********************************************************************//
// La classe CoSaleItemRebateType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleItemRebateType exposée
// par la CoClasse SaleItemRebateType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleItemRebateType = class
    class function Create: ISaleItemRebateType;
    class function CreateRemote(const MachineName: string): ISaleItemRebateType;
  end;

// *********************************************************************//
// La classe CoCardAcquisitionRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardAcquisitionRequestType exposée
// par la CoClasse CardAcquisitionRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardAcquisitionRequestType = class
    class function Create: ICardAcquisitionRequestType;
    class function CreateRemote(const MachineName: string): ICardAcquisitionRequestType;
  end;

// *********************************************************************//
// La classe CoCardAcquisitionTransactionType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardAcquisitionTransactionType exposée
// par la CoClasse CardAcquisitionTransactionType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardAcquisitionTransactionType = class
    class function Create: ICardAcquisitionTransactionType;
    class function CreateRemote(const MachineName: string): ICardAcquisitionTransactionType;
  end;

// *********************************************************************//
// La classe CoCardAcquisitionResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardAcquisitionResponseType exposée
// par la CoClasse CardAcquisitionResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardAcquisitionResponseType = class
    class function Create: ICardAcquisitionResponseType;
    class function CreateRemote(const MachineName: string): ICardAcquisitionResponseType;
  end;

// *********************************************************************//
// La classe CoCardholderPINType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardholderPINType exposée
// par la CoClasse CardholderPINType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardholderPINType = class
    class function Create: ICardholderPINType;
    class function CreateRemote(const MachineName: string): ICardholderPINType;
  end;

// *********************************************************************//
// La classe CoCardReaderAPDURequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardReaderAPDURequestType exposée
// par la CoClasse CardReaderAPDURequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardReaderAPDURequestType = class
    class function Create: ICardReaderAPDURequestType;
    class function CreateRemote(const MachineName: string): ICardReaderAPDURequestType;
  end;

// *********************************************************************//
// La classe CoCardReaderAPDUResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardReaderAPDUResponseType exposée
// par la CoClasse CardReaderAPDUResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardReaderAPDUResponseType = class
    class function Create: ICardReaderAPDUResponseType;
    class function CreateRemote(const MachineName: string): ICardReaderAPDUResponseType;
  end;

// *********************************************************************//
// La classe CoCardReaderInitRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardReaderInitRequestType exposée
// par la CoClasse CardReaderInitRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardReaderInitRequestType = class
    class function Create: ICardReaderInitRequestType;
    class function CreateRemote(const MachineName: string): ICardReaderInitRequestType;
  end;

// *********************************************************************//
// La classe CoCardReaderInitResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardReaderInitResponseType exposée
// par la CoClasse CardReaderInitResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardReaderInitResponseType = class
    class function Create: ICardReaderInitResponseType;
    class function CreateRemote(const MachineName: string): ICardReaderInitResponseType;
  end;

// *********************************************************************//
// La classe CoICCResetDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IICCResetDataType exposée
// par la CoClasse ICCResetDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoICCResetDataType = class
    class function Create: IICCResetDataType;
    class function CreateRemote(const MachineName: string): IICCResetDataType;
  end;

// *********************************************************************//
// La classe CoCardReaderPowerOffRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardReaderPowerOffRequestType exposée
// par la CoClasse CardReaderPowerOffRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardReaderPowerOffRequestType = class
    class function Create: ICardReaderPowerOffRequestType;
    class function CreateRemote(const MachineName: string): ICardReaderPowerOffRequestType;
  end;

// *********************************************************************//
// La classe CoCardReaderPowerOffResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardReaderPowerOffResponseType exposée
// par la CoClasse CardReaderPowerOffResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardReaderPowerOffResponseType = class
    class function Create: ICardReaderPowerOffResponseType;
    class function CreateRemote(const MachineName: string): ICardReaderPowerOffResponseType;
  end;

// *********************************************************************//
// La classe CoCashHandlingDeviceType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICashHandlingDeviceType exposée
// par la CoClasse CashHandlingDeviceType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCashHandlingDeviceType = class
    class function Create: ICashHandlingDeviceType;
    class function CreateRemote(const MachineName: string): ICashHandlingDeviceType;
  end;

// *********************************************************************//
// La classe CoCoinsOrBillsType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICoinsOrBillsType exposée
// par la CoClasse CoinsOrBillsType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCoinsOrBillsType = class
    class function Create: ICoinsOrBillsType;
    class function CreateRemote(const MachineName: string): ICoinsOrBillsType;
  end;

// *********************************************************************//
// La classe CoDiagnosisRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IDiagnosisRequestType exposée
// par la CoClasse DiagnosisRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoDiagnosisRequestType = class
    class function Create: IDiagnosisRequestType;
    class function CreateRemote(const MachineName: string): IDiagnosisRequestType;
  end;

// *********************************************************************//
// La classe CoDiagnosisResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IDiagnosisResponseType exposée
// par la CoClasse DiagnosisResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoDiagnosisResponseType = class
    class function Create: IDiagnosisResponseType;
    class function CreateRemote(const MachineName: string): IDiagnosisResponseType;
  end;

// *********************************************************************//
// La classe CoPOIStatusType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPOIStatusType exposée
// par la CoClasse POIStatusType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPOIStatusType = class
    class function Create: IPOIStatusType;
    class function CreateRemote(const MachineName: string): IPOIStatusType;
  end;

// *********************************************************************//
// La classe CoHostStatusType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IHostStatusType exposée
// par la CoClasse HostStatusType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoHostStatusType = class
    class function Create: IHostStatusType;
    class function CreateRemote(const MachineName: string): IHostStatusType;
  end;

// *********************************************************************//
// La classe CoEnableServiceRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnableServiceRequestType exposée
// par la CoClasse EnableServiceRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoEnableServiceRequestType = class
    class function Create: IEnableServiceRequestType;
    class function CreateRemote(const MachineName: string): IEnableServiceRequestType;
  end;

// *********************************************************************//
// La classe CoEnableServiceResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnableServiceResponseType exposée
// par la CoClasse EnableServiceResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoEnableServiceResponseType = class
    class function Create: IEnableServiceResponseType;
    class function CreateRemote(const MachineName: string): IEnableServiceResponseType;
  end;

// *********************************************************************//
// La classe CoEventNotificationType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEventNotificationType exposée
// par la CoClasse EventNotificationType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoEventNotificationType = class
    class function Create: IEventNotificationType;
    class function CreateRemote(const MachineName: string): IEventNotificationType;
  end;

// *********************************************************************//
// La classe CoGetTotalsRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IGetTotalsRequestType exposée
// par la CoClasse GetTotalsRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoGetTotalsRequestType = class
    class function Create: IGetTotalsRequestType;
    class function CreateRemote(const MachineName: string): IGetTotalsRequestType;
  end;

// *********************************************************************//
// La classe CoTotalFilterType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITotalFilterType exposée
// par la CoClasse TotalFilterType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTotalFilterType = class
    class function Create: ITotalFilterType;
    class function CreateRemote(const MachineName: string): ITotalFilterType;
  end;

// *********************************************************************//
// La classe CoGetTotalsResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IGetTotalsResponseType exposée
// par la CoClasse GetTotalsResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoGetTotalsResponseType = class
    class function Create: IGetTotalsResponseType;
    class function CreateRemote(const MachineName: string): IGetTotalsResponseType;
  end;

// *********************************************************************//
// La classe CoTransactionTotalsType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransactionTotalsType exposée
// par la CoClasse TransactionTotalsType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransactionTotalsType = class
    class function Create: ITransactionTotalsType;
    class function CreateRemote(const MachineName: string): ITransactionTotalsType;
  end;

// *********************************************************************//
// La classe CoPaymentTotalsType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentTotalsType exposée
// par la CoClasse PaymentTotalsType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentTotalsType = class
    class function Create: IPaymentTotalsType;
    class function CreateRemote(const MachineName: string): IPaymentTotalsType;
  end;

// *********************************************************************//
// La classe CoLoyaltyTotalsType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyTotalsType exposée
// par la CoClasse LoyaltyTotalsType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyTotalsType = class
    class function Create: ILoyaltyTotalsType;
    class function CreateRemote(const MachineName: string): ILoyaltyTotalsType;
  end;

// *********************************************************************//
// La classe CoInputType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IInputType exposée
// par la CoClasse InputType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoInputType = class
    class function Create: IInputType;
    class function CreateRemote(const MachineName: string): IInputType;
  end;

// *********************************************************************//
// La classe CoInputDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IInputDataType exposée
// par la CoClasse InputDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoInputDataType = class
    class function Create: IInputDataType;
    class function CreateRemote(const MachineName: string): IInputDataType;
  end;

// *********************************************************************//
// La classe CoInputRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IInputRequestType exposée
// par la CoClasse InputRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoInputRequestType = class
    class function Create: IInputRequestType;
    class function CreateRemote(const MachineName: string): IInputRequestType;
  end;

// *********************************************************************//
// La classe CoInputResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IInputResponseType exposée
// par la CoClasse InputResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoInputResponseType = class
    class function Create: IInputResponseType;
    class function CreateRemote(const MachineName: string): IInputResponseType;
  end;

// *********************************************************************//
// La classe CoInputResultType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IInputResultType exposée
// par la CoClasse InputResultType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoInputResultType = class
    class function Create: IInputResultType;
    class function CreateRemote(const MachineName: string): IInputResultType;
  end;

// *********************************************************************//
// La classe CoInputUpdateType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IInputUpdateType exposée
// par la CoClasse InputUpdateType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoInputUpdateType = class
    class function Create: IInputUpdateType;
    class function CreateRemote(const MachineName: string): IInputUpdateType;
  end;

// *********************************************************************//
// La classe CoLoginRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoginRequestType exposée
// par la CoClasse LoginRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoginRequestType = class
    class function Create: ILoginRequestType;
    class function CreateRemote(const MachineName: string): ILoginRequestType;
  end;

// *********************************************************************//
// La classe CoSaleSoftwareType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleSoftwareType exposée
// par la CoClasse SaleSoftwareType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleSoftwareType = class
    class function Create: ISaleSoftwareType;
    class function CreateRemote(const MachineName: string): ISaleSoftwareType;
  end;

// *********************************************************************//
// La classe CoLoginResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoginResponseType exposée
// par la CoClasse LoginResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoginResponseType = class
    class function Create: ILoginResponseType;
    class function CreateRemote(const MachineName: string): ILoginResponseType;
  end;

// *********************************************************************//
// La classe CoPOISystemDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPOISystemDataType exposée
// par la CoClasse POISystemDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPOISystemDataType = class
    class function Create: IPOISystemDataType;
    class function CreateRemote(const MachineName: string): IPOISystemDataType;
  end;

// *********************************************************************//
// La classe CoPOISoftwareType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPOISoftwareType exposée
// par la CoClasse POISoftwareType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPOISoftwareType = class
    class function Create: IPOISoftwareType;
    class function CreateRemote(const MachineName: string): IPOISoftwareType;
  end;

// *********************************************************************//
// La classe CoPOITerminalDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPOITerminalDataType exposée
// par la CoClasse POITerminalDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPOITerminalDataType = class
    class function Create: IPOITerminalDataType;
    class function CreateRemote(const MachineName: string): IPOITerminalDataType;
  end;

// *********************************************************************//
// La classe CoPOIProfileType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPOIProfileType exposée
// par la CoClasse POIProfileType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPOIProfileType = class
    class function Create: IPOIProfileType;
    class function CreateRemote(const MachineName: string): IPOIProfileType;
  end;

// *********************************************************************//
// La classe CoLogoutRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILogoutRequestType exposée
// par la CoClasse LogoutRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLogoutRequestType = class
    class function Create: ILogoutRequestType;
    class function CreateRemote(const MachineName: string): ILogoutRequestType;
  end;

// *********************************************************************//
// La classe CoLogoutResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILogoutResponseType exposée
// par la CoClasse LogoutResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLogoutResponseType = class
    class function Create: ILogoutResponseType;
    class function CreateRemote(const MachineName: string): ILogoutResponseType;
  end;

// *********************************************************************//
// La classe CoLoyaltyResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyResponseType exposée
// par la CoClasse LoyaltyResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyResponseType = class
    class function Create: ILoyaltyResponseType;
    class function CreateRemote(const MachineName: string): ILoyaltyResponseType;
  end;

// *********************************************************************//
// La classe CoPaymentReceiptType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentReceiptType exposée
// par la CoClasse PaymentReceiptType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentReceiptType = class
    class function Create: IPaymentReceiptType;
    class function CreateRemote(const MachineName: string): IPaymentReceiptType;
  end;

// *********************************************************************//
// La classe CoMessageHeaderType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IMessageHeaderType exposée
// par la CoClasse MessageHeaderType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoMessageHeaderType = class
    class function Create: IMessageHeaderType;
    class function CreateRemote(const MachineName: string): IMessageHeaderType;
  end;

// *********************************************************************//
// La classe CoPaymentResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentResponseType exposée
// par la CoClasse PaymentResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentResponseType = class
    class function Create: IPaymentResponseType;
    class function CreateRemote(const MachineName: string): IPaymentResponseType;
  end;

// *********************************************************************//
// La classe CoPINRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPINRequestType exposée
// par la CoClasse PINRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPINRequestType = class
    class function Create: IPINRequestType;
    class function CreateRemote(const MachineName: string): IPINRequestType;
  end;

// *********************************************************************//
// La classe CoPINResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPINResponseType exposée
// par la CoClasse PINResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPINResponseType = class
    class function Create: IPINResponseType;
    class function CreateRemote(const MachineName: string): IPINResponseType;
  end;

// *********************************************************************//
// La classe CoPrintOutputType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPrintOutputType exposée
// par la CoClasse PrintOutputType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPrintOutputType = class
    class function Create: IPrintOutputType;
    class function CreateRemote(const MachineName: string): IPrintOutputType;
  end;

// *********************************************************************//
// La classe CoPrintRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPrintRequestType exposée
// par la CoClasse PrintRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPrintRequestType = class
    class function Create: IPrintRequestType;
    class function CreateRemote(const MachineName: string): IPrintRequestType;
  end;

// *********************************************************************//
// La classe CoPrintResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPrintResponseType exposée
// par la CoClasse PrintResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPrintResponseType = class
    class function Create: IPrintResponseType;
    class function CreateRemote(const MachineName: string): IPrintResponseType;
  end;

// *********************************************************************//
// La classe CoReconciliationRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IReconciliationRequestType exposée
// par la CoClasse ReconciliationRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoReconciliationRequestType = class
    class function Create: IReconciliationRequestType;
    class function CreateRemote(const MachineName: string): IReconciliationRequestType;
  end;

// *********************************************************************//
// La classe CoReconciliationResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IReconciliationResponseType exposée
// par la CoClasse ReconciliationResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoReconciliationResponseType = class
    class function Create: IReconciliationResponseType;
    class function CreateRemote(const MachineName: string): IReconciliationResponseType;
  end;

// *********************************************************************//
// La classe CoRepeatedMessageResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IRepeatedMessageResponseType exposée
// par la CoClasse RepeatedMessageResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoRepeatedMessageResponseType = class
    class function Create: IRepeatedMessageResponseType;
    class function CreateRemote(const MachineName: string): IRepeatedMessageResponseType;
  end;

// *********************************************************************//
// La classe CoReversalResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IReversalResponseType exposée
// par la CoClasse ReversalResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoReversalResponseType = class
    class function Create: IReversalResponseType;
    class function CreateRemote(const MachineName: string): IReversalResponseType;
  end;

// *********************************************************************//
// La classe CoStoredValueResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IStoredValueResponseType exposée
// par la CoClasse StoredValueResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoStoredValueResponseType = class
    class function Create: IStoredValueResponseType;
    class function CreateRemote(const MachineName: string): IStoredValueResponseType;
  end;

// *********************************************************************//
// La classe CoStoredValueResultType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IStoredValueResultType exposée
// par la CoClasse StoredValueResultType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoStoredValueResultType = class
    class function Create: IStoredValueResultType;
    class function CreateRemote(const MachineName: string): IStoredValueResultType;
  end;

// *********************************************************************//
// La classe CoStoredValueAccountStatusType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IStoredValueAccountStatusType exposée
// par la CoClasse StoredValueAccountStatusType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoStoredValueAccountStatusType = class
    class function Create: IStoredValueAccountStatusType;
    class function CreateRemote(const MachineName: string): IStoredValueAccountStatusType;
  end;

// *********************************************************************//
// La classe CoStoredValueAccountIDType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IStoredValueAccountIDType exposée
// par la CoClasse StoredValueAccountIDType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoStoredValueAccountIDType = class
    class function Create: IStoredValueAccountIDType;
    class function CreateRemote(const MachineName: string): IStoredValueAccountIDType;
  end;

// *********************************************************************//
// La classe CoSoundContentType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISoundContentType exposée
// par la CoClasse SoundContentType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSoundContentType = class
    class function Create: ISoundContentType;
    class function CreateRemote(const MachineName: string): ISoundContentType;
  end;

// *********************************************************************//
// La classe CoSoundRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISoundRequestType exposée
// par la CoClasse SoundRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSoundRequestType = class
    class function Create: ISoundRequestType;
    class function CreateRemote(const MachineName: string): ISoundRequestType;
  end;

// *********************************************************************//
// La classe CoSoundResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISoundResponseType exposée
// par la CoClasse SoundResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSoundResponseType = class
    class function Create: ISoundResponseType;
    class function CreateRemote(const MachineName: string): ISoundResponseType;
  end;

// *********************************************************************//
// La classe CoStoredValueDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IStoredValueDataType exposée
// par la CoClasse StoredValueDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoStoredValueDataType = class
    class function Create: IStoredValueDataType;
    class function CreateRemote(const MachineName: string): IStoredValueDataType;
  end;

// *********************************************************************//
// La classe CoStoredValueRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IStoredValueRequestType exposée
// par la CoClasse StoredValueRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoStoredValueRequestType = class
    class function Create: IStoredValueRequestType;
    class function CreateRemote(const MachineName: string): IStoredValueRequestType;
  end;

// *********************************************************************//
// La classe CoTransmitRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransmitRequestType exposée
// par la CoClasse TransmitRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransmitRequestType = class
    class function Create: ITransmitRequestType;
    class function CreateRemote(const MachineName: string): ITransmitRequestType;
  end;

// *********************************************************************//
// La classe CoTransmitResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransmitResponseType exposée
// par la CoClasse TransmitResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransmitResponseType = class
    class function Create: ITransmitResponseType;
    class function CreateRemote(const MachineName: string): ITransmitResponseType;
  end;

// *********************************************************************//
// La classe CoTransactionStatusRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransactionStatusRequestType exposée
// par la CoClasse TransactionStatusRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransactionStatusRequestType = class
    class function Create: ITransactionStatusRequestType;
    class function CreateRemote(const MachineName: string): ITransactionStatusRequestType;
  end;

// *********************************************************************//
// La classe CoTransactionStatusResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransactionStatusResponseType exposée
// par la CoClasse TransactionStatusResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransactionStatusResponseType = class
    class function Create: ITransactionStatusResponseType;
    class function CreateRemote(const MachineName: string): ITransactionStatusResponseType;
  end;

// *********************************************************************//
// La classe CoSaleToPOIRequest fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleToPOIRequest exposée
// par la CoClasse SaleToPOIRequest. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleToPOIRequest = class
    class function Create: ISaleToPOIRequest;
    class function CreateRemote(const MachineName: string): ISaleToPOIRequest;
  end;

// *********************************************************************//
// La classe CoSaleToPOIResponse fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleToPOIResponse exposée
// par la CoClasse SaleToPOIResponse. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleToPOIResponse = class
    class function Create: ISaleToPOIResponse;
    class function CreateRemote(const MachineName: string): ISaleToPOIResponse;
  end;

// *********************************************************************//
// La classe CoNexoActivity fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoActivity exposée
// par la CoClasse NexoActivity. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoActivity = class
    class function Create: INexoActivity;
    class function CreateRemote(const MachineName: string): INexoActivity;
  end;

// *********************************************************************//
// La classe CoNexoDictionaryOfMessages fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoDictionaryOfMessages. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDictionaryOfMessages = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoListOfEndPoints fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoListOfEndPoints. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoListOfEndPoints = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoDictionaryOfEndPoints fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoDictionaryOfEndPoints. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDictionaryOfEndPoints = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoListOfSessions fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoListOfSessions. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoListOfSessions = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoDictionaryOfSessions fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoDictionaryOfSessions. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDictionaryOfSessions = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoListOfNexoKeys fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoListOfNexoKeys. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoListOfNexoKeys = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoDictionaryOfNexoKeys fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoDictionaryOfNexoKeys. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDictionaryOfNexoKeys = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoListOfAnyMessages fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoListOfAnyMessages. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoListOfAnyMessages = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoDictionaryOfAnyMessages fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoDictionaryOfAnyMessages. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDictionaryOfAnyMessages = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoAcceptedCommands fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoAcceptedCommands. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoAcceptedCommands = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoItem fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoItem exposée
// par la CoClasse NexoItem. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoItem = class
    class function Create: INexoItem;
    class function CreateRemote(const MachineName: string): INexoItem;
  end;

// *********************************************************************//
// La classe CoNexoBalanceInquiry fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoBalanceInquiry exposée
// par la CoClasse NexoBalanceInquiry. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoBalanceInquiry = class
    class function Create: INexoBalanceInquiry;
    class function CreateRemote(const MachineName: string): INexoBalanceInquiry;
  end;

// *********************************************************************//
// La classe CoNexoBatch fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoBatch exposée
// par la CoClasse NexoBatch. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoBatch = class
    class function Create: INexoBatch;
    class function CreateRemote(const MachineName: string): INexoBatch;
  end;

// *********************************************************************//
// La classe CoNexoCardAcquisition fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCardAcquisition exposée
// par la CoClasse NexoCardAcquisition. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCardAcquisition = class
    class function Create: INexoCardAcquisition;
    class function CreateRemote(const MachineName: string): INexoCardAcquisition;
  end;

// *********************************************************************//
// La classe CoNexoCardReaderInit fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCardReaderInit exposée
// par la CoClasse NexoCardReaderInit. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCardReaderInit = class
    class function Create: INexoCardReaderInit;
    class function CreateRemote(const MachineName: string): INexoCardReaderInit;
  end;

// *********************************************************************//
// La classe CoNexoCardReaderAPDU fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCardReaderAPDU exposée
// par la CoClasse NexoCardReaderAPDU. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCardReaderAPDU = class
    class function Create: INexoCardReaderAPDU;
    class function CreateRemote(const MachineName: string): INexoCardReaderAPDU;
  end;

// *********************************************************************//
// La classe CoNexoCardReaderPowerOFF fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCardReaderPowerOFF exposée
// par la CoClasse NexoCardReaderPowerOFF. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCardReaderPowerOFF = class
    class function Create: INexoCardReaderPowerOFF;
    class function CreateRemote(const MachineName: string): INexoCardReaderPowerOFF;
  end;

// *********************************************************************//
// La classe CoNexoDeviceDisplay fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDeviceDisplay exposée
// par la CoClasse NexoDeviceDisplay. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDeviceDisplay = class
    class function Create: INexoDeviceDisplay;
    class function CreateRemote(const MachineName: string): INexoDeviceDisplay;
  end;

// *********************************************************************//
// La classe CoNexoDeviceInputUpdate fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDeviceInputUpdate exposée
// par la CoClasse NexoDeviceInputUpdate. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDeviceInputUpdate = class
    class function Create: INexoDeviceInputUpdate;
    class function CreateRemote(const MachineName: string): INexoDeviceInputUpdate;
  end;

// *********************************************************************//
// La classe CoNexoDeviceSound fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDeviceSound exposée
// par la CoClasse NexoDeviceSound. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDeviceSound = class
    class function Create: INexoDeviceSound;
    class function CreateRemote(const MachineName: string): INexoDeviceSound;
  end;

// *********************************************************************//
// La classe CoNexoEnableService fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoEnableService exposée
// par la CoClasse NexoEnableService. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoEnableService = class
    class function Create: INexoEnableService;
    class function CreateRemote(const MachineName: string): INexoEnableService;
  end;

// *********************************************************************//
// La classe CoNexoGetTotals fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoGetTotals exposée
// par la CoClasse NexoGetTotals. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoGetTotals = class
    class function Create: INexoGetTotals;
    class function CreateRemote(const MachineName: string): INexoGetTotals;
  end;

// *********************************************************************//
// La classe CoNexoLoyalty fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoLoyalty exposée
// par la CoClasse NexoLoyalty. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoLoyalty = class
    class function Create: INexoLoyalty;
    class function CreateRemote(const MachineName: string): INexoLoyalty;
  end;

// *********************************************************************//
// La classe CoNexoPayment fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoPayment exposée
// par la CoClasse NexoPayment. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoPayment = class
    class function Create: INexoPayment;
    class function CreateRemote(const MachineName: string): INexoPayment;
  end;

// *********************************************************************//
// La classe CoNexoPIN fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoPIN exposée
// par la CoClasse NexoPIN. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoPIN = class
    class function Create: INexoPIN;
    class function CreateRemote(const MachineName: string): INexoPIN;
  end;

// *********************************************************************//
// La classe CoNexoReconciliation fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoReconciliation exposée
// par la CoClasse NexoReconciliation. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoReconciliation = class
    class function Create: INexoReconciliation;
    class function CreateRemote(const MachineName: string): INexoReconciliation;
  end;

// *********************************************************************//
// La classe CoNexoStoredValue fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoStoredValue exposée
// par la CoClasse NexoStoredValue. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoStoredValue = class
    class function Create: INexoStoredValue;
    class function CreateRemote(const MachineName: string): INexoStoredValue;
  end;

// *********************************************************************//
// La classe CoNexoTransmit fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoTransmit exposée
// par la CoClasse NexoTransmit. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoTransmit = class
    class function Create: INexoTransmit;
    class function CreateRemote(const MachineName: string): INexoTransmit;
  end;

// *********************************************************************//
// La classe CoNexoAbort fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoAbort exposée
// par la CoClasse NexoAbort. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoAbort = class
    class function Create: INexoAbort;
    class function CreateRemote(const MachineName: string): INexoAbort;
  end;

// *********************************************************************//
// La classe CoNexoDiagnosis fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDiagnosis exposée
// par la CoClasse NexoDiagnosis. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDiagnosis = class
    class function Create: INexoDiagnosis;
    class function CreateRemote(const MachineName: string): INexoDiagnosis;
  end;

// *********************************************************************//
// La classe CoNexoEvent fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoEvent exposée
// par la CoClasse NexoEvent. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoEvent = class
    class function Create: INexoEvent;
    class function CreateRemote(const MachineName: string): INexoEvent;
  end;

// *********************************************************************//
// La classe CoNexoTransactionStatus fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoTransactionStatus exposée
// par la CoClasse NexoTransactionStatus. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoTransactionStatus = class
    class function Create: INexoTransactionStatus;
    class function CreateRemote(const MachineName: string): INexoTransactionStatus;
  end;

// *********************************************************************//
// La classe CoNexoResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoResponseType exposée
// par la CoClasse NexoResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoResponseType = class
    class function Create: INexoResponseType;
    class function CreateRemote(const MachineName: string): INexoResponseType;
  end;

// *********************************************************************//
// La classe CoNexoDeviceInput fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDeviceInput exposée
// par la CoClasse NexoDeviceInput. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDeviceInput = class
    class function Create: INexoDeviceInput;
    class function CreateRemote(const MachineName: string): INexoDeviceInput;
  end;

// *********************************************************************//
// La classe CoNexoDevicePrint fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDevicePrint exposée
// par la CoClasse NexoDevicePrint. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDevicePrint = class
    class function Create: INexoDevicePrint;
    class function CreateRemote(const MachineName: string): INexoDevicePrint;
  end;

// *********************************************************************//
// La classe CoNexoLogin fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoLogin exposée
// par la CoClasse NexoLogin. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoLogin = class
    class function Create: INexoLogin;
    class function CreateRemote(const MachineName: string): INexoLogin;
  end;

// *********************************************************************//
// La classe CoNexoLogout fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoLogout exposée
// par la CoClasse NexoLogout. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoLogout = class
    class function Create: INexoLogout;
    class function CreateRemote(const MachineName: string): INexoLogout;
  end;

// *********************************************************************//
// La classe CoNexoAdmin fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoAdmin exposée
// par la CoClasse NexoAdmin. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoAdmin = class
    class function Create: INexoAdmin;
    class function CreateRemote(const MachineName: string): INexoAdmin;
  end;

// *********************************************************************//
// La classe CoNexoObject fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoObject exposée
// par la CoClasse NexoObject. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoObject = class
    class function Create: INexoObject;
    class function CreateRemote(const MachineName: string): INexoObject;
  end;

// *********************************************************************//
// La classe CoNexoReversal fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoReversal exposée
// par la CoClasse NexoReversal. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoReversal = class
    class function Create: INexoReversal;
    class function CreateRemote(const MachineName: string): INexoReversal;
  end;

// *********************************************************************//
// La classe CoNexoObjectToProcess fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoObjectToProcess exposée
// par la CoClasse NexoObjectToProcess. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoObjectToProcess = class
    class function Create: INexoObjectToProcess;
    class function CreateRemote(const MachineName: string): INexoObjectToProcess;
  end;

// *********************************************************************//
// La classe CoNexoTextString fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoTextString exposée
// par la CoClasse NexoTextString. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoTextString = class
    class function Create: INexoTextString;
    class function CreateRemote(const MachineName: string): INexoTextString;
  end;

// *********************************************************************//
// La classe CoNexoBoolean fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoBooleanType exposée
// par la CoClasse NexoBoolean. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoBoolean = class
    class function Create: INexoBooleanType;
    class function CreateRemote(const MachineName: string): INexoBooleanType;
  end;

// *********************************************************************//
// La classe CoNexoInteger fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoInteger exposée
// par la CoClasse NexoInteger. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoInteger = class
    class function Create: INexoInteger;
    class function CreateRemote(const MachineName: string): INexoInteger;
  end;

// *********************************************************************//
// La classe CoNexoDecimal fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDecimal exposée
// par la CoClasse NexoDecimal. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDecimal = class
    class function Create: INexoDecimal;
    class function CreateRemote(const MachineName: string): INexoDecimal;
  end;

// *********************************************************************//
// La classe CoNexoSimpleAmount fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDecimal exposée
// par la CoClasse NexoSimpleAmount. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoSimpleAmount = class
    class function Create: INexoDecimal;
    class function CreateRemote(const MachineName: string): INexoDecimal;
  end;

// *********************************************************************//
// La classe CoNexoLabel fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoLabel exposée
// par la CoClasse NexoLabel. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoLabel = class
    class function Create: INexoLabel;
    class function CreateRemote(const MachineName: string): INexoLabel;
  end;

// *********************************************************************//
// La classe CoNexoEnumeration fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoEnumeration exposée
// par la CoClasse NexoEnumeration. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoEnumeration = class
    class function Create: INexoEnumeration;
    class function CreateRemote(const MachineName: string): INexoEnumeration;
  end;

// *********************************************************************//
// La classe CoNexoCluster fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCluster exposée
// par la CoClasse NexoCluster. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCluster = class
    class function Create: INexoCluster;
    class function CreateRemote(const MachineName: string): INexoCluster;
  end;

// *********************************************************************//
// La classe CoNexoLengthDrivenTextString fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoLengthDrivenTextString exposée
// par la CoClasse NexoLengthDrivenTextString. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoLengthDrivenTextString = class
    class function Create: INexoLengthDrivenTextString;
    class function CreateRemote(const MachineName: string): INexoLengthDrivenTextString;
  end;

// *********************************************************************//
// La classe CoNexoDigitString fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDigitString exposée
// par la CoClasse NexoDigitString. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDigitString = class
    class function Create: INexoDigitString;
    class function CreateRemote(const MachineName: string): INexoDigitString;
  end;

// *********************************************************************//
// La classe CoNexoISOCurrency3A fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoISOData exposée
// par la CoClasse NexoISOCurrency3A. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoISOCurrency3A = class
    class function Create: INexoISOData;
    class function CreateRemote(const MachineName: string): INexoISOData;
  end;

// *********************************************************************//
// La classe CoNexoISOCountry3A fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoISOData exposée
// par la CoClasse NexoISOCountry3A. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoISOCountry3A = class
    class function Create: INexoISOData;
    class function CreateRemote(const MachineName: string): INexoISOData;
  end;

// *********************************************************************//
// La classe CoNexoISOLanguage2A fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoISOData exposée
// par la CoClasse NexoISOLanguage2A. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoISOLanguage2A = class
    class function Create: INexoISOData;
    class function CreateRemote(const MachineName: string): INexoISOData;
  end;

// *********************************************************************//
// La classe CoNexoISODateTime fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoISODateTime exposée
// par la CoClasse NexoISODateTime. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoISODateTime = class
    class function Create: INexoISODateTime;
    class function CreateRemote(const MachineName: string): INexoISODateTime;
  end;

// *********************************************************************//
// La classe CoNexoISODate fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoISODate exposée
// par la CoClasse NexoISODate. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoISODate = class
    class function Create: INexoISODate;
    class function CreateRemote(const MachineName: string): INexoISODate;
  end;

// *********************************************************************//
// La classe CoNexoByteSequence fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoNonStringType exposée
// par la CoClasse NexoByteSequence. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoByteSequence = class
    class function Create: INexoNonStringType;
    class function CreateRemote(const MachineName: string): INexoNonStringType;
  end;

// *********************************************************************//
// La classe CoNexoCurrency fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCurrency exposée
// par la CoClasse NexoCurrency. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCurrency = class
    class function Create: INexoCurrency;
    class function CreateRemote(const MachineName: string): INexoCurrency;
  end;

// *********************************************************************//
// La classe CoNexoCurrencyEUR fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCurrency exposée
// par la CoClasse NexoCurrencyEUR. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCurrencyEUR = class
    class function Create: INexoCurrency;
    class function CreateRemote(const MachineName: string): INexoCurrency;
  end;

// *********************************************************************//
// La classe CoNexoCurrencyUSD fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCurrency exposée
// par la CoClasse NexoCurrencyUSD. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCurrencyUSD = class
    class function Create: INexoCurrency;
    class function CreateRemote(const MachineName: string): INexoCurrency;
  end;

// *********************************************************************//
// La classe CoNexoCurrencyGBP fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCurrency exposée
// par la CoClasse NexoCurrencyGBP. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCurrencyGBP = class
    class function Create: INexoCurrency;
    class function CreateRemote(const MachineName: string): INexoCurrency;
  end;

// *********************************************************************//
// La classe CoNexoCurrencyCHF fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCurrency exposée
// par la CoClasse NexoCurrencyCHF. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCurrencyCHF = class
    class function Create: INexoCurrency;
    class function CreateRemote(const MachineName: string): INexoCurrency;
  end;

// *********************************************************************//
// La classe CoNexoSupportedProtocolVersions fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoSupportedProtocolVersions. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoSupportedProtocolVersions = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoRetailerClientHandle fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoRetailerClientHandle exposée
// par la CoClasse NexoRetailerClientHandle. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerClientHandle = class
    class function Create: INexoRetailerClientHandle;
    class function CreateRemote(const MachineName: string): INexoRetailerClientHandle;
  end;

// *********************************************************************//
// La classe CoNexoRetailerClient fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoRetailerClient exposée
// par la CoClasse NexoRetailerClient. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerClient = class
    class function Create: INexoRetailerClient;
    class function CreateRemote(const MachineName: string): INexoRetailerClient;
  end;

// *********************************************************************//
// La classe CoNexoRetailerClientSettings fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoRetailerClientSettings exposée
// par la CoClasse NexoRetailerClientSettings. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerClientSettings = class
    class function Create: INexoRetailerClientSettings;
    class function CreateRemote(const MachineName: string): INexoRetailerClientSettings;
  end;

// *********************************************************************//
// La classe CoNexoRetailerClientConnectionSettings fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoRetailerClientConnectionSettings exposée
// par la CoClasse NexoRetailerClientConnectionSettings. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerClientConnectionSettings = class
    class function Create: INexoRetailerClientConnectionSettings;
    class function CreateRemote(const MachineName: string): INexoRetailerClientConnectionSettings;
  end;

// *********************************************************************//
// La classe CoNexoRetailerClientActivity fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoRetailerClientActivity exposée
// par la CoClasse NexoRetailerClientActivity. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerClientActivity = class
    class function Create: INexoRetailerClientActivity;
    class function CreateRemote(const MachineName: string): INexoRetailerClientActivity;
  end;

// *********************************************************************//
// La classe CoNexoRetailerServerActivity fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoRetailerServerActivity exposée
// par la CoClasse NexoRetailerServerActivity. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerServerActivity = class
    class function Create: INexoRetailerServerActivity;
    class function CreateRemote(const MachineName: string): INexoRetailerServerActivity;
  end;

// *********************************************************************//
// La classe CoNexoRetailerServerDatabaseSettings fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoRetailerServerDatabaseSettings exposée
// par la CoClasse NexoRetailerServerDatabaseSettings. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerServerDatabaseSettings = class
    class function Create: INexoRetailerServerDatabaseSettings;
    class function CreateRemote(const MachineName: string): INexoRetailerServerDatabaseSettings;
  end;

// *********************************************************************//
// La classe CoNexoRetailerServerSettings fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoRetailerServerSettings exposée
// par la CoClasse NexoRetailerServerSettings. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerServerSettings = class
    class function Create: INexoRetailerServerSettings;
    class function CreateRemote(const MachineName: string): INexoRetailerServerSettings;
  end;

// *********************************************************************//
// La classe CoNexoMessage fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoMessage exposée
// par la CoClasse NexoMessage. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoMessage = class
    class function Create: _NexoMessage;
    class function CreateRemote(const MachineName: string): _NexoMessage;
  end;

// *********************************************************************//
// La classe CoNexoPartner fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoPartner exposée
// par la CoClasse NexoPartner. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoPartner = class
    class function Create: _NexoPartner;
    class function CreateRemote(const MachineName: string): _NexoPartner;
  end;

// *********************************************************************//
// La classe CoNexoEndPoint fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoEndPoint exposée
// par la CoClasse NexoEndPoint. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoEndPoint = class
    class function Create: _NexoEndPoint;
    class function CreateRemote(const MachineName: string): _NexoEndPoint;
  end;

// *********************************************************************//
// La classe CoNexoSession fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoSession exposée
// par la CoClasse NexoSession. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoSession = class
    class function Create: _NexoSession;
    class function CreateRemote(const MachineName: string): _NexoSession;
  end;

// *********************************************************************//
// La classe CoNexoDelegates fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoDelegates exposée
// par la CoClasse NexoDelegates. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDelegates = class
    class function Create: _NexoDelegates;
    class function CreateRemote(const MachineName: string): _NexoDelegates;
  end;

// *********************************************************************//
// La classe CoNexoKey fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoKey exposée
// par la CoClasse NexoKey. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoKey = class
    class function Create: _NexoKey;
    class function CreateRemote(const MachineName: string): _NexoKey;
  end;

// *********************************************************************//
// La classe CoNexoMessageType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoMessageType exposée
// par la CoClasse NexoMessageType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoMessageType = class
    class function Create: _NexoMessageType;
    class function CreateRemote(const MachineName: string): _NexoMessageType;
  end;

// *********************************************************************//
// La classe CoNexoMessageClass fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoMessageClass exposée
// par la CoClasse NexoMessageClass. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoMessageClass = class
    class function Create: _NexoMessageClass;
    class function CreateRemote(const MachineName: string): _NexoMessageClass;
  end;

// *********************************************************************//
// La classe CoNexoMessageCategory fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoMessageCategory exposée
// par la CoClasse NexoMessageCategory. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoMessageCategory = class
    class function Create: _NexoMessageCategory;
    class function CreateRemote(const MachineName: string): _NexoMessageCategory;
  end;

// *********************************************************************//
// La classe CoNexoTerminalEnvironment fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoTerminalEnvironment exposée
// par la CoClasse NexoTerminalEnvironment. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoTerminalEnvironment = class
    class function Create: _NexoTerminalEnvironment;
    class function CreateRemote(const MachineName: string): _NexoTerminalEnvironment;
  end;

// *********************************************************************//
// La classe CoNexoSaleCapabilities fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoSaleCapabilities exposée
// par la CoClasse NexoSaleCapabilities. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoSaleCapabilities = class
    class function Create: _NexoSaleCapabilities;
    class function CreateRemote(const MachineName: string): _NexoSaleCapabilities;
  end;

// *********************************************************************//
// La classe CoNexoProtocolVersion fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoProtocolVersion exposée
// par la CoClasse NexoProtocolVersion. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoProtocolVersion = class
    class function Create: _NexoProtocolVersion;
    class function CreateRemote(const MachineName: string): _NexoProtocolVersion;
  end;

// *********************************************************************//
// La classe CoNexoID fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoID exposée
// par la CoClasse NexoID. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoID = class
    class function Create: _NexoID;
    class function CreateRemote(const MachineName: string): _NexoID;
  end;

// *********************************************************************//
// La classe CoNexoServiceID fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoServiceID exposée
// par la CoClasse NexoServiceID. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoServiceID = class
    class function Create: _NexoServiceID;
    class function CreateRemote(const MachineName: string): _NexoServiceID;
  end;

// *********************************************************************//
// La classe CoNexoDeviceID fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoDeviceID exposée
// par la CoClasse NexoDeviceID. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDeviceID = class
    class function Create: _NexoDeviceID;
    class function CreateRemote(const MachineName: string): _NexoDeviceID;
  end;

// *********************************************************************//
// La classe CoNexoPOIID fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoPOIID exposée
// par la CoClasse NexoPOIID. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoPOIID = class
    class function Create: _NexoPOIID;
    class function CreateRemote(const MachineName: string): _NexoPOIID;
  end;

// *********************************************************************//
// La classe CoNexoSaleID fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoSaleID exposée
// par la CoClasse NexoSaleID. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoSaleID = class
    class function Create: _NexoSaleID;
    class function CreateRemote(const MachineName: string): _NexoSaleID;
  end;

// *********************************************************************//
// La classe CoNexoOperatorLanguage fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoOperatorLanguage exposée
// par la CoClasse NexoOperatorLanguage. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoOperatorLanguage = class
    class function Create: _NexoOperatorLanguage;
    class function CreateRemote(const MachineName: string): _NexoOperatorLanguage;
  end;

// *********************************************************************//
// La classe CoNexoResult fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoResult exposée
// par la CoClasse NexoResult. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoResult = class
    class function Create: _NexoResult;
    class function CreateRemote(const MachineName: string): _NexoResult;
  end;

// *********************************************************************//
// La classe CoNexoErrorCondition fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoErrorCondition exposée
// par la CoClasse NexoErrorCondition. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoErrorCondition = class
    class function Create: _NexoErrorCondition;
    class function CreateRemote(const MachineName: string): _NexoErrorCondition;
  end;

// *********************************************************************//
// La classe CoNexoAdditionalResponse fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoAdditionalResponse exposée
// par la CoClasse NexoAdditionalResponse. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoAdditionalResponse = class
    class function Create: _NexoAdditionalResponse;
    class function CreateRemote(const MachineName: string): _NexoAdditionalResponse;
  end;

// *********************************************************************//
// La classe CoNexoGlobalStatus fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoGlobalStatus exposée
// par la CoClasse NexoGlobalStatus. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoGlobalStatus = class
    class function Create: _NexoGlobalStatus;
    class function CreateRemote(const MachineName: string): _NexoGlobalStatus;
  end;

// *********************************************************************//
// La classe CoNexoCertificationCode fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoCertificationCode exposée
// par la CoClasse NexoCertificationCode. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCertificationCode = class
    class function Create: _NexoCertificationCode;
    class function CreateRemote(const MachineName: string): _NexoCertificationCode;
  end;

// *********************************************************************//
// La classe CoNexoSoftwareVersion fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoSoftwareVersion exposée
// par la CoClasse NexoSoftwareVersion. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoSoftwareVersion = class
    class function Create: _NexoSoftwareVersion;
    class function CreateRemote(const MachineName: string): _NexoSoftwareVersion;
  end;

// *********************************************************************//
// La classe CoNexoApplicationName fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoApplicationName exposée
// par la CoClasse NexoApplicationName. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoApplicationName = class
    class function Create: _NexoApplicationName;
    class function CreateRemote(const MachineName: string): _NexoApplicationName;
  end;

// *********************************************************************//
// La classe CoNexoManufacturerID fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoManufacturerID exposée
// par la CoClasse NexoManufacturerID. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoManufacturerID = class
    class function Create: _NexoManufacturerID;
    class function CreateRemote(const MachineName: string): _NexoManufacturerID;
  end;

// *********************************************************************//
// La classe CoNexoPOISerialNumber fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoPOISerialNumber exposée
// par la CoClasse NexoPOISerialNumber. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoPOISerialNumber = class
    class function Create: _NexoPOISerialNumber;
    class function CreateRemote(const MachineName: string): _NexoPOISerialNumber;
  end;

// *********************************************************************//
// La classe CoNexoOperatorID fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoOperatorID exposée
// par la CoClasse NexoOperatorID. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoOperatorID = class
    class function Create: _NexoOperatorID;
    class function CreateRemote(const MachineName: string): _NexoOperatorID;
  end;

// *********************************************************************//
// La classe CoNexoDateTime fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoDateTime exposée
// par la CoClasse NexoDateTime. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDateTime = class
    class function Create: _NexoDateTime;
    class function CreateRemote(const MachineName: string): _NexoDateTime;
  end;

// *********************************************************************//
// La classe CoNexoInputCommand fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoInputCommand exposée
// par la CoClasse NexoInputCommand. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoInputCommand = class
    class function Create: _NexoInputCommand;
    class function CreateRemote(const MachineName: string): _NexoInputCommand;
  end;

// *********************************************************************//
// La classe CoNexoEventToNotify fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoEventToNotify exposée
// par la CoClasse NexoEventToNotify. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoEventToNotify = class
    class function Create: _NexoEventToNotify;
    class function CreateRemote(const MachineName: string): _NexoEventToNotify;
  end;

// *********************************************************************//
// La classe CoNexoPaymentIntrumentType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoPaymentIntrumentType exposée
// par la CoClasse NexoPaymentIntrumentType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoPaymentIntrumentType = class
    class function Create: _NexoPaymentIntrumentType;
    class function CreateRemote(const MachineName: string): _NexoPaymentIntrumentType;
  end;

// *********************************************************************//
// La classe CoNexoVersion fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoVersion exposée
// par la CoClasse NexoVersion. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoVersion = class
    class function Create: _NexoVersion;
    class function CreateRemote(const MachineName: string): _NexoVersion;
  end;

// *********************************************************************//
// La classe CoNexoCurrentVersion fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoCurrentVersion exposée
// par la CoClasse NexoCurrentVersion. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCurrentVersion = class
    class function Create: _NexoCurrentVersion;
    class function CreateRemote(const MachineName: string): _NexoCurrentVersion;
  end;

// *********************************************************************//
// La classe CoNexoRetailerServerDatabaseConnection fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoRetailerServerDatabaseConnection exposée
// par la CoClasse NexoRetailerServerDatabaseConnection. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerServerDatabaseConnection = class
    class function Create: _NexoRetailerServerDatabaseConnection;
    class function CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseConnection;
  end;

// *********************************************************************//
// La classe CoNexoRetailerServerDatabaseEndPoint fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoRetailerServerDatabaseEndPoint exposée
// par la CoClasse NexoRetailerServerDatabaseEndPoint. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerServerDatabaseEndPoint = class
    class function Create: _NexoRetailerServerDatabaseEndPoint;
    class function CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseEndPoint;
  end;

// *********************************************************************//
// La classe CoNexoRetailerServerDatabaseSale fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoRetailerServerDatabaseSale exposée
// par la CoClasse NexoRetailerServerDatabaseSale. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerServerDatabaseSale = class
    class function Create: _NexoRetailerServerDatabaseSale;
    class function CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseSale;
  end;

// *********************************************************************//
// La classe CoNexoRetailerServerDatabaseMessage fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoRetailerServerDatabaseMessage exposée
// par la CoClasse NexoRetailerServerDatabaseMessage. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerServerDatabaseMessage = class
    class function Create: _NexoRetailerServerDatabaseMessage;
    class function CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseMessage;
  end;

// *********************************************************************//
// La classe CoNexoRetailerServerDatabase fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoRetailerServerDatabase exposée
// par la CoClasse NexoRetailerServerDatabase. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerServerDatabase = class
    class function Create: _NexoRetailerServerDatabase;
    class function CreateRemote(const MachineName: string): _NexoRetailerServerDatabase;
  end;

implementation

uses System.Win.ComObj;

class function CoAuthenticatedDataType.Create: IAuthenticatedDataType;
begin
  Result := CreateComObject(CLASS_AuthenticatedDataType) as IAuthenticatedDataType;
end;

class function CoAuthenticatedDataType.CreateRemote(const MachineName: string): IAuthenticatedDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AuthenticatedDataType) as IAuthenticatedDataType;
end;

class function CoKEKType.Create: IKEKType;
begin
  Result := CreateComObject(CLASS_KEKType) as IKEKType;
end;

class function CoKEKType.CreateRemote(const MachineName: string): IKEKType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_KEKType) as IKEKType;
end;

class function CoKEKIdentifierType.Create: IKEKIdentifierType;
begin
  Result := CreateComObject(CLASS_KEKIdentifierType) as IKEKIdentifierType;
end;

class function CoKEKIdentifierType.CreateRemote(const MachineName: string): IKEKIdentifierType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_KEKIdentifierType) as IKEKIdentifierType;
end;

class function CoDisplayResponseType.Create: IDisplayResponseType;
begin
  Result := CreateComObject(CLASS_DisplayResponseType) as IDisplayResponseType;
end;

class function CoDisplayResponseType.CreateRemote(const MachineName: string): IDisplayResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DisplayResponseType) as IDisplayResponseType;
end;

class function CoOutputResultType.Create: IOutputResultType;
begin
  Result := CreateComObject(CLASS_OutputResultType) as IOutputResultType;
end;

class function CoOutputResultType.CreateRemote(const MachineName: string): IOutputResultType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OutputResultType) as IOutputResultType;
end;

class function CoResponseType.Create: IResponseType;
begin
  Result := CreateComObject(CLASS_ResponseType) as IResponseType;
end;

class function CoResponseType.CreateRemote(const MachineName: string): IResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ResponseType) as IResponseType;
end;

class function CoDisplayRequestType.Create: IDisplayRequestType;
begin
  Result := CreateComObject(CLASS_DisplayRequestType) as IDisplayRequestType;
end;

class function CoDisplayRequestType.CreateRemote(const MachineName: string): IDisplayRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DisplayRequestType) as IDisplayRequestType;
end;

class function CoDisplayOutputType.Create: IDisplayOutputType;
begin
  Result := CreateComObject(CLASS_DisplayOutputType) as IDisplayOutputType;
end;

class function CoDisplayOutputType.CreateRemote(const MachineName: string): IDisplayOutputType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DisplayOutputType) as IDisplayOutputType;
end;

class function CoOutputContentType.Create: IOutputContentType;
begin
  Result := CreateComObject(CLASS_OutputContentType) as IOutputContentType;
end;

class function CoOutputContentType.CreateRemote(const MachineName: string): IOutputContentType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OutputContentType) as IOutputContentType;
end;

class function CoPredefinedContentType.Create: IPredefinedContentType;
begin
  Result := CreateComObject(CLASS_PredefinedContentType) as IPredefinedContentType;
end;

class function CoPredefinedContentType.CreateRemote(const MachineName: string): IPredefinedContentType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PredefinedContentType) as IPredefinedContentType;
end;

class function CoOutputTextType.Create: IOutputTextType;
begin
  Result := CreateComObject(CLASS_OutputTextType) as IOutputTextType;
end;

class function CoOutputTextType.CreateRemote(const MachineName: string): IOutputTextType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OutputTextType) as IOutputTextType;
end;

class function CoOutputBarcodeType.Create: IOutputBarcodeType;
begin
  Result := CreateComObject(CLASS_OutputBarcodeType) as IOutputBarcodeType;
end;

class function CoOutputBarcodeType.CreateRemote(const MachineName: string): IOutputBarcodeType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OutputBarcodeType) as IOutputBarcodeType;
end;

class function CoMenuEntryType.Create: IMenuEntryType;
begin
  Result := CreateComObject(CLASS_MenuEntryType) as IMenuEntryType;
end;

class function CoMenuEntryType.CreateRemote(const MachineName: string): IMenuEntryType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MenuEntryType) as IMenuEntryType;
end;

class function CoAlgorithmIdentifier.Create: IAlgorithmIdentifier;
begin
  Result := CreateComObject(CLASS_AlgorithmIdentifier) as IAlgorithmIdentifier;
end;

class function CoAlgorithmIdentifier.CreateRemote(const MachineName: string): IAlgorithmIdentifier;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AlgorithmIdentifier) as IAlgorithmIdentifier;
end;

class function CoParameterType.Create: IParameterType;
begin
  Result := CreateComObject(CLASS_ParameterType) as IParameterType;
end;

class function CoParameterType.CreateRemote(const MachineName: string): IParameterType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ParameterType) as IParameterType;
end;

class function CoKeyTransportType.Create: IKeyTransportType;
begin
  Result := CreateComObject(CLASS_KeyTransportType) as IKeyTransportType;
end;

class function CoKeyTransportType.CreateRemote(const MachineName: string): IKeyTransportType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_KeyTransportType) as IKeyTransportType;
end;

class function CoRecipientIdentifierType.Create: IRecipientIdentifierType;
begin
  Result := CreateComObject(CLASS_RecipientIdentifierType) as IRecipientIdentifierType;
end;

class function CoRecipientIdentifierType.CreateRemote(const MachineName: string): IRecipientIdentifierType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RecipientIdentifierType) as IRecipientIdentifierType;
end;

class function CoIssuerAndSerialNumberType.Create: IIssuerAndSerialNumberType;
begin
  Result := CreateComObject(CLASS_IssuerAndSerialNumberType) as IIssuerAndSerialNumberType;
end;

class function CoIssuerAndSerialNumberType.CreateRemote(const MachineName: string): IIssuerAndSerialNumberType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_IssuerAndSerialNumberType) as IIssuerAndSerialNumberType;
end;

class function CoRelativeDistinguishedNameType.Create: IRelativeDistinguishedNameType;
begin
  Result := CreateComObject(CLASS_RelativeDistinguishedNameType) as IRelativeDistinguishedNameType;
end;

class function CoRelativeDistinguishedNameType.CreateRemote(const MachineName: string): IRelativeDistinguishedNameType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RelativeDistinguishedNameType) as IRelativeDistinguishedNameType;
end;

class function CoEncapsulatedContentType.Create: IEncapsulatedContentType;
begin
  Result := CreateComObject(CLASS_EncapsulatedContentType) as IEncapsulatedContentType;
end;

class function CoEncapsulatedContentType.CreateRemote(const MachineName: string): IEncapsulatedContentType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EncapsulatedContentType) as IEncapsulatedContentType;
end;

class function CoDigestedDataType.Create: IDigestedDataType;
begin
  Result := CreateComObject(CLASS_DigestedDataType) as IDigestedDataType;
end;

class function CoDigestedDataType.CreateRemote(const MachineName: string): IDigestedDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DigestedDataType) as IDigestedDataType;
end;

class function CoEncryptedContentType.Create: IEncryptedContentType;
begin
  Result := CreateComObject(CLASS_EncryptedContentType) as IEncryptedContentType;
end;

class function CoEncryptedContentType.CreateRemote(const MachineName: string): IEncryptedContentType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EncryptedContentType) as IEncryptedContentType;
end;

class function CoEnvelopedDataType.Create: IEnvelopedDataType;
begin
  Result := CreateComObject(CLASS_EnvelopedDataType) as IEnvelopedDataType;
end;

class function CoEnvelopedDataType.CreateRemote(const MachineName: string): IEnvelopedDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnvelopedDataType) as IEnvelopedDataType;
end;

class function CoIssuerType.Create: IIssuerType;
begin
  Result := CreateComObject(CLASS_IssuerType) as IIssuerType;
end;

class function CoIssuerType.CreateRemote(const MachineName: string): IIssuerType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_IssuerType) as IIssuerType;
end;

class function CoNamedKeyEncryptedDataType.Create: INamedKeyEncryptedDataType;
begin
  Result := CreateComObject(CLASS_NamedKeyEncryptedDataType) as INamedKeyEncryptedDataType;
end;

class function CoNamedKeyEncryptedDataType.CreateRemote(const MachineName: string): INamedKeyEncryptedDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NamedKeyEncryptedDataType) as INamedKeyEncryptedDataType;
end;

class function CoSignedDataType.Create: ISignedDataType;
begin
  Result := CreateComObject(CLASS_SignedDataType) as ISignedDataType;
end;

class function CoSignedDataType.CreateRemote(const MachineName: string): ISignedDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SignedDataType) as ISignedDataType;
end;

class function CoSignerType.Create: ISignerType;
begin
  Result := CreateComObject(CLASS_SignerType) as ISignerType;
end;

class function CoSignerType.CreateRemote(const MachineName: string): ISignerType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SignerType) as ISignerType;
end;

class function CoSignerIdentifierType.Create: ISignerIdentifierType;
begin
  Result := CreateComObject(CLASS_SignerIdentifierType) as ISignerIdentifierType;
end;

class function CoSignerIdentifierType.CreateRemote(const MachineName: string): ISignerIdentifierType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SignerIdentifierType) as ISignerIdentifierType;
end;

class function CoContentInformationType.Create: IContentInformationType;
begin
  Result := CreateComObject(CLASS_ContentInformationType) as IContentInformationType;
end;

class function CoContentInformationType.CreateRemote(const MachineName: string): IContentInformationType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ContentInformationType) as IContentInformationType;
end;

class function CoAbortRequestType.Create: IAbortRequestType;
begin
  Result := CreateComObject(CLASS_AbortRequestType) as IAbortRequestType;
end;

class function CoAbortRequestType.CreateRemote(const MachineName: string): IAbortRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AbortRequestType) as IAbortRequestType;
end;

class function CoMessageReferenceType.Create: IMessageReferenceType;
begin
  Result := CreateComObject(CLASS_MessageReferenceType) as IMessageReferenceType;
end;

class function CoMessageReferenceType.CreateRemote(const MachineName: string): IMessageReferenceType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MessageReferenceType) as IMessageReferenceType;
end;

class function CoAdminRequestType.Create: IAdminRequestType;
begin
  Result := CreateComObject(CLASS_AdminRequestType) as IAdminRequestType;
end;

class function CoAdminRequestType.CreateRemote(const MachineName: string): IAdminRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AdminRequestType) as IAdminRequestType;
end;

class function CoAdminResponseType.Create: IAdminResponseType;
begin
  Result := CreateComObject(CLASS_AdminResponseType) as IAdminResponseType;
end;

class function CoAdminResponseType.CreateRemote(const MachineName: string): IAdminResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AdminResponseType) as IAdminResponseType;
end;

class function CoAllowedProductType.Create: IAllowedProductType;
begin
  Result := CreateComObject(CLASS_AllowedProductType) as IAllowedProductType;
end;

class function CoAllowedProductType.CreateRemote(const MachineName: string): IAllowedProductType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AllowedProductType) as IAllowedProductType;
end;

class function CoAmountsReqType.Create: IAmountsReqType;
begin
  Result := CreateComObject(CLASS_AmountsReqType) as IAmountsReqType;
end;

class function CoAmountsReqType.CreateRemote(const MachineName: string): IAmountsReqType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AmountsReqType) as IAmountsReqType;
end;

class function CoAmountsRespType.Create: IAmountsRespType;
begin
  Result := CreateComObject(CLASS_AmountsRespType) as IAmountsRespType;
end;

class function CoAmountsRespType.CreateRemote(const MachineName: string): IAmountsRespType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AmountsRespType) as IAmountsRespType;
end;

class function CoAreaSizeType.Create: IAreaSizeType;
begin
  Result := CreateComObject(CLASS_AreaSizeType) as IAreaSizeType;
end;

class function CoAreaSizeType.CreateRemote(const MachineName: string): IAreaSizeType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AreaSizeType) as IAreaSizeType;
end;

class function CoBalanceInquiryRequestType.Create: IBalanceInquiryRequestType;
begin
  Result := CreateComObject(CLASS_BalanceInquiryRequestType) as IBalanceInquiryRequestType;
end;

class function CoBalanceInquiryRequestType.CreateRemote(const MachineName: string): IBalanceInquiryRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BalanceInquiryRequestType) as IBalanceInquiryRequestType;
end;

class function CoPaymentAccountReqType.Create: IPaymentAccountReqType;
begin
  Result := CreateComObject(CLASS_PaymentAccountReqType) as IPaymentAccountReqType;
end;

class function CoPaymentAccountReqType.CreateRemote(const MachineName: string): IPaymentAccountReqType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentAccountReqType) as IPaymentAccountReqType;
end;

class function CoTransactionIdentificationType.Create: ITransactionIdentificationType;
begin
  Result := CreateComObject(CLASS_TransactionIdentificationType) as ITransactionIdentificationType;
end;

class function CoTransactionIdentificationType.CreateRemote(const MachineName: string): ITransactionIdentificationType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransactionIdentificationType) as ITransactionIdentificationType;
end;

class function CoPaymentInstrumentDataType.Create: IPaymentInstrumentDataType;
begin
  Result := CreateComObject(CLASS_PaymentInstrumentDataType) as IPaymentInstrumentDataType;
end;

class function CoPaymentInstrumentDataType.CreateRemote(const MachineName: string): IPaymentInstrumentDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentInstrumentDataType) as IPaymentInstrumentDataType;
end;

class function CoCardDataType.Create: ICardDataType;
begin
  Result := CreateComObject(CLASS_CardDataType) as ICardDataType;
end;

class function CoCardDataType.CreateRemote(const MachineName: string): ICardDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardDataType) as ICardDataType;
end;

class function CoSensitiveCardDataType.Create: ISensitiveCardDataType;
begin
  Result := CreateComObject(CLASS_SensitiveCardDataType) as ISensitiveCardDataType;
end;

class function CoSensitiveCardDataType.CreateRemote(const MachineName: string): ISensitiveCardDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SensitiveCardDataType) as ISensitiveCardDataType;
end;

class function CoTrackDataType.Create: ITrackDataType;
begin
  Result := CreateComObject(CLASS_TrackDataType) as ITrackDataType;
end;

class function CoTrackDataType.CreateRemote(const MachineName: string): ITrackDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TrackDataType) as ITrackDataType;
end;

class function CoPaymentTokenType.Create: IPaymentTokenType;
begin
  Result := CreateComObject(CLASS_PaymentTokenType) as IPaymentTokenType;
end;

class function CoPaymentTokenType.CreateRemote(const MachineName: string): IPaymentTokenType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentTokenType) as IPaymentTokenType;
end;

class function CoCustomerOrderType.Create: ICustomerOrderType;
begin
  Result := CreateComObject(CLASS_CustomerOrderType) as ICustomerOrderType;
end;

class function CoCustomerOrderType.CreateRemote(const MachineName: string): ICustomerOrderType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomerOrderType) as ICustomerOrderType;
end;

class function CoCheckDataType.Create: ICheckDataType;
begin
  Result := CreateComObject(CLASS_CheckDataType) as ICheckDataType;
end;

class function CoCheckDataType.CreateRemote(const MachineName: string): ICheckDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CheckDataType) as ICheckDataType;
end;

class function CoMobileDataType.Create: IMobileDataType;
begin
  Result := CreateComObject(CLASS_MobileDataType) as IMobileDataType;
end;

class function CoMobileDataType.CreateRemote(const MachineName: string): IMobileDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MobileDataType) as IMobileDataType;
end;

class function CoGeolocationType.Create: IGeolocationType;
begin
  Result := CreateComObject(CLASS_GeolocationType) as IGeolocationType;
end;

class function CoGeolocationType.CreateRemote(const MachineName: string): IGeolocationType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GeolocationType) as IGeolocationType;
end;

class function CoGeographicCoordinatesType.Create: IGeographicCoordinatesType;
begin
  Result := CreateComObject(CLASS_GeographicCoordinatesType) as IGeographicCoordinatesType;
end;

class function CoGeographicCoordinatesType.CreateRemote(const MachineName: string): IGeographicCoordinatesType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GeographicCoordinatesType) as IGeographicCoordinatesType;
end;

class function CoUTMCoordinatesType.Create: IUTMCoordinatesType;
begin
  Result := CreateComObject(CLASS_UTMCoordinatesType) as IUTMCoordinatesType;
end;

class function CoUTMCoordinatesType.CreateRemote(const MachineName: string): IUTMCoordinatesType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UTMCoordinatesType) as IUTMCoordinatesType;
end;

class function CoSensitiveMobileDataType.Create: ISensitiveMobileDataType;
begin
  Result := CreateComObject(CLASS_SensitiveMobileDataType) as ISensitiveMobileDataType;
end;

class function CoSensitiveMobileDataType.CreateRemote(const MachineName: string): ISensitiveMobileDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SensitiveMobileDataType) as ISensitiveMobileDataType;
end;

class function CoLoyaltyAccountReqType.Create: ILoyaltyAccountReqType;
begin
  Result := CreateComObject(CLASS_LoyaltyAccountReqType) as ILoyaltyAccountReqType;
end;

class function CoLoyaltyAccountReqType.CreateRemote(const MachineName: string): ILoyaltyAccountReqType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAccountReqType) as ILoyaltyAccountReqType;
end;

class function CoLoyaltyAccountIDType.Create: ILoyaltyAccountIDType;
begin
  Result := CreateComObject(CLASS_LoyaltyAccountIDType) as ILoyaltyAccountIDType;
end;

class function CoLoyaltyAccountIDType.CreateRemote(const MachineName: string): ILoyaltyAccountIDType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAccountIDType) as ILoyaltyAccountIDType;
end;

class function CoBalanceInquiryResponseType.Create: IBalanceInquiryResponseType;
begin
  Result := CreateComObject(CLASS_BalanceInquiryResponseType) as IBalanceInquiryResponseType;
end;

class function CoBalanceInquiryResponseType.CreateRemote(const MachineName: string): IBalanceInquiryResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BalanceInquiryResponseType) as IBalanceInquiryResponseType;
end;

class function CoPaymentAccountStatusType.Create: IPaymentAccountStatusType;
begin
  Result := CreateComObject(CLASS_PaymentAccountStatusType) as IPaymentAccountStatusType;
end;

class function CoPaymentAccountStatusType.CreateRemote(const MachineName: string): IPaymentAccountStatusType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentAccountStatusType) as IPaymentAccountStatusType;
end;

class function CoPaymentAcquirerDataType.Create: IPaymentAcquirerDataType;
begin
  Result := CreateComObject(CLASS_PaymentAcquirerDataType) as IPaymentAcquirerDataType;
end;

class function CoPaymentAcquirerDataType.CreateRemote(const MachineName: string): IPaymentAcquirerDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentAcquirerDataType) as IPaymentAcquirerDataType;
end;

class function CoLoyaltyAccountStatusType.Create: ILoyaltyAccountStatusType;
begin
  Result := CreateComObject(CLASS_LoyaltyAccountStatusType) as ILoyaltyAccountStatusType;
end;

class function CoLoyaltyAccountStatusType.CreateRemote(const MachineName: string): ILoyaltyAccountStatusType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAccountStatusType) as ILoyaltyAccountStatusType;
end;

class function CoLoyaltyAccountType.Create: ILoyaltyAccountType;
begin
  Result := CreateComObject(CLASS_LoyaltyAccountType) as ILoyaltyAccountType;
end;

class function CoLoyaltyAccountType.CreateRemote(const MachineName: string): ILoyaltyAccountType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAccountType) as ILoyaltyAccountType;
end;

class function CoBatchRequestType.Create: IBatchRequestType;
begin
  Result := CreateComObject(CLASS_BatchRequestType) as IBatchRequestType;
end;

class function CoBatchRequestType.CreateRemote(const MachineName: string): IBatchRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BatchRequestType) as IBatchRequestType;
end;

class function CoTransactionToPerformType.Create: ITransactionToPerformType;
begin
  Result := CreateComObject(CLASS_TransactionToPerformType) as ITransactionToPerformType;
end;

class function CoTransactionToPerformType.CreateRemote(const MachineName: string): ITransactionToPerformType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransactionToPerformType) as ITransactionToPerformType;
end;

class function CoLoyaltyRequestType.Create: ILoyaltyRequestType;
begin
  Result := CreateComObject(CLASS_LoyaltyRequestType) as ILoyaltyRequestType;
end;

class function CoLoyaltyRequestType.CreateRemote(const MachineName: string): ILoyaltyRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyRequestType) as ILoyaltyRequestType;
end;

class function CoSaleDataType.Create: ISaleDataType;
begin
  Result := CreateComObject(CLASS_SaleDataType) as ISaleDataType;
end;

class function CoSaleDataType.CreateRemote(const MachineName: string): ISaleDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleDataType) as ISaleDataType;
end;

class function CoSaleTerminalDataType.Create: ISaleTerminalDataType;
begin
  Result := CreateComObject(CLASS_SaleTerminalDataType) as ISaleTerminalDataType;
end;

class function CoSaleTerminalDataType.CreateRemote(const MachineName: string): ISaleTerminalDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleTerminalDataType) as ISaleTerminalDataType;
end;

class function CoSaleProfileType.Create: ISaleProfileType;
begin
  Result := CreateComObject(CLASS_SaleProfileType) as ISaleProfileType;
end;

class function CoSaleProfileType.CreateRemote(const MachineName: string): ISaleProfileType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleProfileType) as ISaleProfileType;
end;

class function CoSponsoredMerchantType.Create: ISponsoredMerchantType;
begin
  Result := CreateComObject(CLASS_SponsoredMerchantType) as ISponsoredMerchantType;
end;

class function CoSponsoredMerchantType.CreateRemote(const MachineName: string): ISponsoredMerchantType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SponsoredMerchantType) as ISponsoredMerchantType;
end;

class function CoSaleToIssuerDataType.Create: ISaleToIssuerDataType;
begin
  Result := CreateComObject(CLASS_SaleToIssuerDataType) as ISaleToIssuerDataType;
end;

class function CoSaleToIssuerDataType.CreateRemote(const MachineName: string): ISaleToIssuerDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleToIssuerDataType) as ISaleToIssuerDataType;
end;

class function CoLoyaltyTransactionType.Create: ILoyaltyTransactionType;
begin
  Result := CreateComObject(CLASS_LoyaltyTransactionType) as ILoyaltyTransactionType;
end;

class function CoLoyaltyTransactionType.CreateRemote(const MachineName: string): ILoyaltyTransactionType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyTransactionType) as ILoyaltyTransactionType;
end;

class function CoOriginalPOITransactionType.Create: IOriginalPOITransactionType;
begin
  Result := CreateComObject(CLASS_OriginalPOITransactionType) as IOriginalPOITransactionType;
end;

class function CoOriginalPOITransactionType.CreateRemote(const MachineName: string): IOriginalPOITransactionType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OriginalPOITransactionType) as IOriginalPOITransactionType;
end;

class function CoTransactionConditionsType.Create: ITransactionConditionsType;
begin
  Result := CreateComObject(CLASS_TransactionConditionsType) as ITransactionConditionsType;
end;

class function CoTransactionConditionsType.CreateRemote(const MachineName: string): ITransactionConditionsType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransactionConditionsType) as ITransactionConditionsType;
end;

class function CoSaleItemType.Create: ISaleItemType;
begin
  Result := CreateComObject(CLASS_SaleItemType) as ISaleItemType;
end;

class function CoSaleItemType.CreateRemote(const MachineName: string): ISaleItemType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleItemType) as ISaleItemType;
end;

class function CoLoyaltyDataType.Create: ILoyaltyDataType;
begin
  Result := CreateComObject(CLASS_LoyaltyDataType) as ILoyaltyDataType;
end;

class function CoLoyaltyDataType.CreateRemote(const MachineName: string): ILoyaltyDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyDataType) as ILoyaltyDataType;
end;

class function CoLoyaltyAmountType.Create: ILoyaltyAmountType;
begin
  Result := CreateComObject(CLASS_LoyaltyAmountType) as ILoyaltyAmountType;
end;

class function CoLoyaltyAmountType.CreateRemote(const MachineName: string): ILoyaltyAmountType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAmountType) as ILoyaltyAmountType;
end;

class function CoPaymentRequestType.Create: IPaymentRequestType;
begin
  Result := CreateComObject(CLASS_PaymentRequestType) as IPaymentRequestType;
end;

class function CoPaymentRequestType.CreateRemote(const MachineName: string): IPaymentRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentRequestType) as IPaymentRequestType;
end;

class function CoPaymentTransactionType.Create: IPaymentTransactionType;
begin
  Result := CreateComObject(CLASS_PaymentTransactionType) as IPaymentTransactionType;
end;

class function CoPaymentTransactionType.CreateRemote(const MachineName: string): IPaymentTransactionType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentTransactionType) as IPaymentTransactionType;
end;

class function CoPaymentDataType.Create: IPaymentDataType;
begin
  Result := CreateComObject(CLASS_PaymentDataType) as IPaymentDataType;
end;

class function CoPaymentDataType.CreateRemote(const MachineName: string): IPaymentDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentDataType) as IPaymentDataType;
end;

class function CoInstalmentType.Create: IInstalmentType;
begin
  Result := CreateComObject(CLASS_InstalmentType) as IInstalmentType;
end;

class function CoInstalmentType.CreateRemote(const MachineName: string): IInstalmentType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InstalmentType) as IInstalmentType;
end;

class function CoReversalRequestType.Create: IReversalRequestType;
begin
  Result := CreateComObject(CLASS_ReversalRequestType) as IReversalRequestType;
end;

class function CoReversalRequestType.CreateRemote(const MachineName: string): IReversalRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReversalRequestType) as IReversalRequestType;
end;

class function CoBatchResponseType.Create: IBatchResponseType;
begin
  Result := CreateComObject(CLASS_BatchResponseType) as IBatchResponseType;
end;

class function CoBatchResponseType.CreateRemote(const MachineName: string): IBatchResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BatchResponseType) as IBatchResponseType;
end;

class function CoPerformedTransactionType.Create: IPerformedTransactionType;
begin
  Result := CreateComObject(CLASS_PerformedTransactionType) as IPerformedTransactionType;
end;

class function CoPerformedTransactionType.CreateRemote(const MachineName: string): IPerformedTransactionType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PerformedTransactionType) as IPerformedTransactionType;
end;

class function CoPOIDataType.Create: IPOIDataType;
begin
  Result := CreateComObject(CLASS_POIDataType) as IPOIDataType;
end;

class function CoPOIDataType.CreateRemote(const MachineName: string): IPOIDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_POIDataType) as IPOIDataType;
end;

class function CoPaymentResultType.Create: IPaymentResultType;
begin
  Result := CreateComObject(CLASS_PaymentResultType) as IPaymentResultType;
end;

class function CoPaymentResultType.CreateRemote(const MachineName: string): IPaymentResultType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentResultType) as IPaymentResultType;
end;

class function CoCurrencyConversionType.Create: ICurrencyConversionType;
begin
  Result := CreateComObject(CLASS_CurrencyConversionType) as ICurrencyConversionType;
end;

class function CoCurrencyConversionType.CreateRemote(const MachineName: string): ICurrencyConversionType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CurrencyConversionType) as ICurrencyConversionType;
end;

class function CoAmountType.Create: IAmountType;
begin
  Result := CreateComObject(CLASS_AmountType) as IAmountType;
end;

class function CoAmountType.CreateRemote(const MachineName: string): IAmountType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AmountType) as IAmountType;
end;

class function CoCapturedSignatureType.Create: ICapturedSignatureType;
begin
  Result := CreateComObject(CLASS_CapturedSignatureType) as ICapturedSignatureType;
end;

class function CoCapturedSignatureType.CreateRemote(const MachineName: string): ICapturedSignatureType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CapturedSignatureType) as ICapturedSignatureType;
end;

class function CoSignaturePointType.Create: ISignaturePointType;
begin
  Result := CreateComObject(CLASS_SignaturePointType) as ISignaturePointType;
end;

class function CoSignaturePointType.CreateRemote(const MachineName: string): ISignaturePointType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SignaturePointType) as ISignaturePointType;
end;

class function CoLoyaltyResultType.Create: ILoyaltyResultType;
begin
  Result := CreateComObject(CLASS_LoyaltyResultType) as ILoyaltyResultType;
end;

class function CoLoyaltyResultType.CreateRemote(const MachineName: string): ILoyaltyResultType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyResultType) as ILoyaltyResultType;
end;

class function CoLoyaltyAcquirerDataType.Create: ILoyaltyAcquirerDataType;
begin
  Result := CreateComObject(CLASS_LoyaltyAcquirerDataType) as ILoyaltyAcquirerDataType;
end;

class function CoLoyaltyAcquirerDataType.CreateRemote(const MachineName: string): ILoyaltyAcquirerDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAcquirerDataType) as ILoyaltyAcquirerDataType;
end;

class function CoRebatesType.Create: IRebatesType;
begin
  Result := CreateComObject(CLASS_RebatesType) as IRebatesType;
end;

class function CoRebatesType.CreateRemote(const MachineName: string): IRebatesType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RebatesType) as IRebatesType;
end;

class function CoSaleItemRebateType.Create: ISaleItemRebateType;
begin
  Result := CreateComObject(CLASS_SaleItemRebateType) as ISaleItemRebateType;
end;

class function CoSaleItemRebateType.CreateRemote(const MachineName: string): ISaleItemRebateType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleItemRebateType) as ISaleItemRebateType;
end;

class function CoCardAcquisitionRequestType.Create: ICardAcquisitionRequestType;
begin
  Result := CreateComObject(CLASS_CardAcquisitionRequestType) as ICardAcquisitionRequestType;
end;

class function CoCardAcquisitionRequestType.CreateRemote(const MachineName: string): ICardAcquisitionRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardAcquisitionRequestType) as ICardAcquisitionRequestType;
end;

class function CoCardAcquisitionTransactionType.Create: ICardAcquisitionTransactionType;
begin
  Result := CreateComObject(CLASS_CardAcquisitionTransactionType) as ICardAcquisitionTransactionType;
end;

class function CoCardAcquisitionTransactionType.CreateRemote(const MachineName: string): ICardAcquisitionTransactionType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardAcquisitionTransactionType) as ICardAcquisitionTransactionType;
end;

class function CoCardAcquisitionResponseType.Create: ICardAcquisitionResponseType;
begin
  Result := CreateComObject(CLASS_CardAcquisitionResponseType) as ICardAcquisitionResponseType;
end;

class function CoCardAcquisitionResponseType.CreateRemote(const MachineName: string): ICardAcquisitionResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardAcquisitionResponseType) as ICardAcquisitionResponseType;
end;

class function CoCardholderPINType.Create: ICardholderPINType;
begin
  Result := CreateComObject(CLASS_CardholderPINType) as ICardholderPINType;
end;

class function CoCardholderPINType.CreateRemote(const MachineName: string): ICardholderPINType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardholderPINType) as ICardholderPINType;
end;

class function CoCardReaderAPDURequestType.Create: ICardReaderAPDURequestType;
begin
  Result := CreateComObject(CLASS_CardReaderAPDURequestType) as ICardReaderAPDURequestType;
end;

class function CoCardReaderAPDURequestType.CreateRemote(const MachineName: string): ICardReaderAPDURequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardReaderAPDURequestType) as ICardReaderAPDURequestType;
end;

class function CoCardReaderAPDUResponseType.Create: ICardReaderAPDUResponseType;
begin
  Result := CreateComObject(CLASS_CardReaderAPDUResponseType) as ICardReaderAPDUResponseType;
end;

class function CoCardReaderAPDUResponseType.CreateRemote(const MachineName: string): ICardReaderAPDUResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardReaderAPDUResponseType) as ICardReaderAPDUResponseType;
end;

class function CoCardReaderInitRequestType.Create: ICardReaderInitRequestType;
begin
  Result := CreateComObject(CLASS_CardReaderInitRequestType) as ICardReaderInitRequestType;
end;

class function CoCardReaderInitRequestType.CreateRemote(const MachineName: string): ICardReaderInitRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardReaderInitRequestType) as ICardReaderInitRequestType;
end;

class function CoCardReaderInitResponseType.Create: ICardReaderInitResponseType;
begin
  Result := CreateComObject(CLASS_CardReaderInitResponseType) as ICardReaderInitResponseType;
end;

class function CoCardReaderInitResponseType.CreateRemote(const MachineName: string): ICardReaderInitResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardReaderInitResponseType) as ICardReaderInitResponseType;
end;

class function CoICCResetDataType.Create: IICCResetDataType;
begin
  Result := CreateComObject(CLASS_ICCResetDataType) as IICCResetDataType;
end;

class function CoICCResetDataType.CreateRemote(const MachineName: string): IICCResetDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ICCResetDataType) as IICCResetDataType;
end;

class function CoCardReaderPowerOffRequestType.Create: ICardReaderPowerOffRequestType;
begin
  Result := CreateComObject(CLASS_CardReaderPowerOffRequestType) as ICardReaderPowerOffRequestType;
end;

class function CoCardReaderPowerOffRequestType.CreateRemote(const MachineName: string): ICardReaderPowerOffRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardReaderPowerOffRequestType) as ICardReaderPowerOffRequestType;
end;

class function CoCardReaderPowerOffResponseType.Create: ICardReaderPowerOffResponseType;
begin
  Result := CreateComObject(CLASS_CardReaderPowerOffResponseType) as ICardReaderPowerOffResponseType;
end;

class function CoCardReaderPowerOffResponseType.CreateRemote(const MachineName: string): ICardReaderPowerOffResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardReaderPowerOffResponseType) as ICardReaderPowerOffResponseType;
end;

class function CoCashHandlingDeviceType.Create: ICashHandlingDeviceType;
begin
  Result := CreateComObject(CLASS_CashHandlingDeviceType) as ICashHandlingDeviceType;
end;

class function CoCashHandlingDeviceType.CreateRemote(const MachineName: string): ICashHandlingDeviceType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CashHandlingDeviceType) as ICashHandlingDeviceType;
end;

class function CoCoinsOrBillsType.Create: ICoinsOrBillsType;
begin
  Result := CreateComObject(CLASS_CoinsOrBillsType) as ICoinsOrBillsType;
end;

class function CoCoinsOrBillsType.CreateRemote(const MachineName: string): ICoinsOrBillsType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CoinsOrBillsType) as ICoinsOrBillsType;
end;

class function CoDiagnosisRequestType.Create: IDiagnosisRequestType;
begin
  Result := CreateComObject(CLASS_DiagnosisRequestType) as IDiagnosisRequestType;
end;

class function CoDiagnosisRequestType.CreateRemote(const MachineName: string): IDiagnosisRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DiagnosisRequestType) as IDiagnosisRequestType;
end;

class function CoDiagnosisResponseType.Create: IDiagnosisResponseType;
begin
  Result := CreateComObject(CLASS_DiagnosisResponseType) as IDiagnosisResponseType;
end;

class function CoDiagnosisResponseType.CreateRemote(const MachineName: string): IDiagnosisResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DiagnosisResponseType) as IDiagnosisResponseType;
end;

class function CoPOIStatusType.Create: IPOIStatusType;
begin
  Result := CreateComObject(CLASS_POIStatusType) as IPOIStatusType;
end;

class function CoPOIStatusType.CreateRemote(const MachineName: string): IPOIStatusType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_POIStatusType) as IPOIStatusType;
end;

class function CoHostStatusType.Create: IHostStatusType;
begin
  Result := CreateComObject(CLASS_HostStatusType) as IHostStatusType;
end;

class function CoHostStatusType.CreateRemote(const MachineName: string): IHostStatusType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HostStatusType) as IHostStatusType;
end;

class function CoEnableServiceRequestType.Create: IEnableServiceRequestType;
begin
  Result := CreateComObject(CLASS_EnableServiceRequestType) as IEnableServiceRequestType;
end;

class function CoEnableServiceRequestType.CreateRemote(const MachineName: string): IEnableServiceRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnableServiceRequestType) as IEnableServiceRequestType;
end;

class function CoEnableServiceResponseType.Create: IEnableServiceResponseType;
begin
  Result := CreateComObject(CLASS_EnableServiceResponseType) as IEnableServiceResponseType;
end;

class function CoEnableServiceResponseType.CreateRemote(const MachineName: string): IEnableServiceResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnableServiceResponseType) as IEnableServiceResponseType;
end;

class function CoEventNotificationType.Create: IEventNotificationType;
begin
  Result := CreateComObject(CLASS_EventNotificationType) as IEventNotificationType;
end;

class function CoEventNotificationType.CreateRemote(const MachineName: string): IEventNotificationType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EventNotificationType) as IEventNotificationType;
end;

class function CoGetTotalsRequestType.Create: IGetTotalsRequestType;
begin
  Result := CreateComObject(CLASS_GetTotalsRequestType) as IGetTotalsRequestType;
end;

class function CoGetTotalsRequestType.CreateRemote(const MachineName: string): IGetTotalsRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GetTotalsRequestType) as IGetTotalsRequestType;
end;

class function CoTotalFilterType.Create: ITotalFilterType;
begin
  Result := CreateComObject(CLASS_TotalFilterType) as ITotalFilterType;
end;

class function CoTotalFilterType.CreateRemote(const MachineName: string): ITotalFilterType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TotalFilterType) as ITotalFilterType;
end;

class function CoGetTotalsResponseType.Create: IGetTotalsResponseType;
begin
  Result := CreateComObject(CLASS_GetTotalsResponseType) as IGetTotalsResponseType;
end;

class function CoGetTotalsResponseType.CreateRemote(const MachineName: string): IGetTotalsResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GetTotalsResponseType) as IGetTotalsResponseType;
end;

class function CoTransactionTotalsType.Create: ITransactionTotalsType;
begin
  Result := CreateComObject(CLASS_TransactionTotalsType) as ITransactionTotalsType;
end;

class function CoTransactionTotalsType.CreateRemote(const MachineName: string): ITransactionTotalsType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransactionTotalsType) as ITransactionTotalsType;
end;

class function CoPaymentTotalsType.Create: IPaymentTotalsType;
begin
  Result := CreateComObject(CLASS_PaymentTotalsType) as IPaymentTotalsType;
end;

class function CoPaymentTotalsType.CreateRemote(const MachineName: string): IPaymentTotalsType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentTotalsType) as IPaymentTotalsType;
end;

class function CoLoyaltyTotalsType.Create: ILoyaltyTotalsType;
begin
  Result := CreateComObject(CLASS_LoyaltyTotalsType) as ILoyaltyTotalsType;
end;

class function CoLoyaltyTotalsType.CreateRemote(const MachineName: string): ILoyaltyTotalsType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyTotalsType) as ILoyaltyTotalsType;
end;

class function CoInputType.Create: IInputType;
begin
  Result := CreateComObject(CLASS_InputType) as IInputType;
end;

class function CoInputType.CreateRemote(const MachineName: string): IInputType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InputType) as IInputType;
end;

class function CoInputDataType.Create: IInputDataType;
begin
  Result := CreateComObject(CLASS_InputDataType) as IInputDataType;
end;

class function CoInputDataType.CreateRemote(const MachineName: string): IInputDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InputDataType) as IInputDataType;
end;

class function CoInputRequestType.Create: IInputRequestType;
begin
  Result := CreateComObject(CLASS_InputRequestType) as IInputRequestType;
end;

class function CoInputRequestType.CreateRemote(const MachineName: string): IInputRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InputRequestType) as IInputRequestType;
end;

class function CoInputResponseType.Create: IInputResponseType;
begin
  Result := CreateComObject(CLASS_InputResponseType) as IInputResponseType;
end;

class function CoInputResponseType.CreateRemote(const MachineName: string): IInputResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InputResponseType) as IInputResponseType;
end;

class function CoInputResultType.Create: IInputResultType;
begin
  Result := CreateComObject(CLASS_InputResultType) as IInputResultType;
end;

class function CoInputResultType.CreateRemote(const MachineName: string): IInputResultType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InputResultType) as IInputResultType;
end;

class function CoInputUpdateType.Create: IInputUpdateType;
begin
  Result := CreateComObject(CLASS_InputUpdateType) as IInputUpdateType;
end;

class function CoInputUpdateType.CreateRemote(const MachineName: string): IInputUpdateType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InputUpdateType) as IInputUpdateType;
end;

class function CoLoginRequestType.Create: ILoginRequestType;
begin
  Result := CreateComObject(CLASS_LoginRequestType) as ILoginRequestType;
end;

class function CoLoginRequestType.CreateRemote(const MachineName: string): ILoginRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoginRequestType) as ILoginRequestType;
end;

class function CoSaleSoftwareType.Create: ISaleSoftwareType;
begin
  Result := CreateComObject(CLASS_SaleSoftwareType) as ISaleSoftwareType;
end;

class function CoSaleSoftwareType.CreateRemote(const MachineName: string): ISaleSoftwareType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleSoftwareType) as ISaleSoftwareType;
end;

class function CoLoginResponseType.Create: ILoginResponseType;
begin
  Result := CreateComObject(CLASS_LoginResponseType) as ILoginResponseType;
end;

class function CoLoginResponseType.CreateRemote(const MachineName: string): ILoginResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoginResponseType) as ILoginResponseType;
end;

class function CoPOISystemDataType.Create: IPOISystemDataType;
begin
  Result := CreateComObject(CLASS_POISystemDataType) as IPOISystemDataType;
end;

class function CoPOISystemDataType.CreateRemote(const MachineName: string): IPOISystemDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_POISystemDataType) as IPOISystemDataType;
end;

class function CoPOISoftwareType.Create: IPOISoftwareType;
begin
  Result := CreateComObject(CLASS_POISoftwareType) as IPOISoftwareType;
end;

class function CoPOISoftwareType.CreateRemote(const MachineName: string): IPOISoftwareType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_POISoftwareType) as IPOISoftwareType;
end;

class function CoPOITerminalDataType.Create: IPOITerminalDataType;
begin
  Result := CreateComObject(CLASS_POITerminalDataType) as IPOITerminalDataType;
end;

class function CoPOITerminalDataType.CreateRemote(const MachineName: string): IPOITerminalDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_POITerminalDataType) as IPOITerminalDataType;
end;

class function CoPOIProfileType.Create: IPOIProfileType;
begin
  Result := CreateComObject(CLASS_POIProfileType) as IPOIProfileType;
end;

class function CoPOIProfileType.CreateRemote(const MachineName: string): IPOIProfileType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_POIProfileType) as IPOIProfileType;
end;

class function CoLogoutRequestType.Create: ILogoutRequestType;
begin
  Result := CreateComObject(CLASS_LogoutRequestType) as ILogoutRequestType;
end;

class function CoLogoutRequestType.CreateRemote(const MachineName: string): ILogoutRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LogoutRequestType) as ILogoutRequestType;
end;

class function CoLogoutResponseType.Create: ILogoutResponseType;
begin
  Result := CreateComObject(CLASS_LogoutResponseType) as ILogoutResponseType;
end;

class function CoLogoutResponseType.CreateRemote(const MachineName: string): ILogoutResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LogoutResponseType) as ILogoutResponseType;
end;

class function CoLoyaltyResponseType.Create: ILoyaltyResponseType;
begin
  Result := CreateComObject(CLASS_LoyaltyResponseType) as ILoyaltyResponseType;
end;

class function CoLoyaltyResponseType.CreateRemote(const MachineName: string): ILoyaltyResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyResponseType) as ILoyaltyResponseType;
end;

class function CoPaymentReceiptType.Create: IPaymentReceiptType;
begin
  Result := CreateComObject(CLASS_PaymentReceiptType) as IPaymentReceiptType;
end;

class function CoPaymentReceiptType.CreateRemote(const MachineName: string): IPaymentReceiptType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentReceiptType) as IPaymentReceiptType;
end;

class function CoMessageHeaderType.Create: IMessageHeaderType;
begin
  Result := CreateComObject(CLASS_MessageHeaderType) as IMessageHeaderType;
end;

class function CoMessageHeaderType.CreateRemote(const MachineName: string): IMessageHeaderType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MessageHeaderType) as IMessageHeaderType;
end;

class function CoPaymentResponseType.Create: IPaymentResponseType;
begin
  Result := CreateComObject(CLASS_PaymentResponseType) as IPaymentResponseType;
end;

class function CoPaymentResponseType.CreateRemote(const MachineName: string): IPaymentResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentResponseType) as IPaymentResponseType;
end;

class function CoPINRequestType.Create: IPINRequestType;
begin
  Result := CreateComObject(CLASS_PINRequestType) as IPINRequestType;
end;

class function CoPINRequestType.CreateRemote(const MachineName: string): IPINRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PINRequestType) as IPINRequestType;
end;

class function CoPINResponseType.Create: IPINResponseType;
begin
  Result := CreateComObject(CLASS_PINResponseType) as IPINResponseType;
end;

class function CoPINResponseType.CreateRemote(const MachineName: string): IPINResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PINResponseType) as IPINResponseType;
end;

class function CoPrintOutputType.Create: IPrintOutputType;
begin
  Result := CreateComObject(CLASS_PrintOutputType) as IPrintOutputType;
end;

class function CoPrintOutputType.CreateRemote(const MachineName: string): IPrintOutputType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PrintOutputType) as IPrintOutputType;
end;

class function CoPrintRequestType.Create: IPrintRequestType;
begin
  Result := CreateComObject(CLASS_PrintRequestType) as IPrintRequestType;
end;

class function CoPrintRequestType.CreateRemote(const MachineName: string): IPrintRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PrintRequestType) as IPrintRequestType;
end;

class function CoPrintResponseType.Create: IPrintResponseType;
begin
  Result := CreateComObject(CLASS_PrintResponseType) as IPrintResponseType;
end;

class function CoPrintResponseType.CreateRemote(const MachineName: string): IPrintResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PrintResponseType) as IPrintResponseType;
end;

class function CoReconciliationRequestType.Create: IReconciliationRequestType;
begin
  Result := CreateComObject(CLASS_ReconciliationRequestType) as IReconciliationRequestType;
end;

class function CoReconciliationRequestType.CreateRemote(const MachineName: string): IReconciliationRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReconciliationRequestType) as IReconciliationRequestType;
end;

class function CoReconciliationResponseType.Create: IReconciliationResponseType;
begin
  Result := CreateComObject(CLASS_ReconciliationResponseType) as IReconciliationResponseType;
end;

class function CoReconciliationResponseType.CreateRemote(const MachineName: string): IReconciliationResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReconciliationResponseType) as IReconciliationResponseType;
end;

class function CoRepeatedMessageResponseType.Create: IRepeatedMessageResponseType;
begin
  Result := CreateComObject(CLASS_RepeatedMessageResponseType) as IRepeatedMessageResponseType;
end;

class function CoRepeatedMessageResponseType.CreateRemote(const MachineName: string): IRepeatedMessageResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RepeatedMessageResponseType) as IRepeatedMessageResponseType;
end;

class function CoReversalResponseType.Create: IReversalResponseType;
begin
  Result := CreateComObject(CLASS_ReversalResponseType) as IReversalResponseType;
end;

class function CoReversalResponseType.CreateRemote(const MachineName: string): IReversalResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReversalResponseType) as IReversalResponseType;
end;

class function CoStoredValueResponseType.Create: IStoredValueResponseType;
begin
  Result := CreateComObject(CLASS_StoredValueResponseType) as IStoredValueResponseType;
end;

class function CoStoredValueResponseType.CreateRemote(const MachineName: string): IStoredValueResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StoredValueResponseType) as IStoredValueResponseType;
end;

class function CoStoredValueResultType.Create: IStoredValueResultType;
begin
  Result := CreateComObject(CLASS_StoredValueResultType) as IStoredValueResultType;
end;

class function CoStoredValueResultType.CreateRemote(const MachineName: string): IStoredValueResultType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StoredValueResultType) as IStoredValueResultType;
end;

class function CoStoredValueAccountStatusType.Create: IStoredValueAccountStatusType;
begin
  Result := CreateComObject(CLASS_StoredValueAccountStatusType) as IStoredValueAccountStatusType;
end;

class function CoStoredValueAccountStatusType.CreateRemote(const MachineName: string): IStoredValueAccountStatusType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StoredValueAccountStatusType) as IStoredValueAccountStatusType;
end;

class function CoStoredValueAccountIDType.Create: IStoredValueAccountIDType;
begin
  Result := CreateComObject(CLASS_StoredValueAccountIDType) as IStoredValueAccountIDType;
end;

class function CoStoredValueAccountIDType.CreateRemote(const MachineName: string): IStoredValueAccountIDType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StoredValueAccountIDType) as IStoredValueAccountIDType;
end;

class function CoSoundContentType.Create: ISoundContentType;
begin
  Result := CreateComObject(CLASS_SoundContentType) as ISoundContentType;
end;

class function CoSoundContentType.CreateRemote(const MachineName: string): ISoundContentType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SoundContentType) as ISoundContentType;
end;

class function CoSoundRequestType.Create: ISoundRequestType;
begin
  Result := CreateComObject(CLASS_SoundRequestType) as ISoundRequestType;
end;

class function CoSoundRequestType.CreateRemote(const MachineName: string): ISoundRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SoundRequestType) as ISoundRequestType;
end;

class function CoSoundResponseType.Create: ISoundResponseType;
begin
  Result := CreateComObject(CLASS_SoundResponseType) as ISoundResponseType;
end;

class function CoSoundResponseType.CreateRemote(const MachineName: string): ISoundResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SoundResponseType) as ISoundResponseType;
end;

class function CoStoredValueDataType.Create: IStoredValueDataType;
begin
  Result := CreateComObject(CLASS_StoredValueDataType) as IStoredValueDataType;
end;

class function CoStoredValueDataType.CreateRemote(const MachineName: string): IStoredValueDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StoredValueDataType) as IStoredValueDataType;
end;

class function CoStoredValueRequestType.Create: IStoredValueRequestType;
begin
  Result := CreateComObject(CLASS_StoredValueRequestType) as IStoredValueRequestType;
end;

class function CoStoredValueRequestType.CreateRemote(const MachineName: string): IStoredValueRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StoredValueRequestType) as IStoredValueRequestType;
end;

class function CoTransmitRequestType.Create: ITransmitRequestType;
begin
  Result := CreateComObject(CLASS_TransmitRequestType) as ITransmitRequestType;
end;

class function CoTransmitRequestType.CreateRemote(const MachineName: string): ITransmitRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransmitRequestType) as ITransmitRequestType;
end;

class function CoTransmitResponseType.Create: ITransmitResponseType;
begin
  Result := CreateComObject(CLASS_TransmitResponseType) as ITransmitResponseType;
end;

class function CoTransmitResponseType.CreateRemote(const MachineName: string): ITransmitResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransmitResponseType) as ITransmitResponseType;
end;

class function CoTransactionStatusRequestType.Create: ITransactionStatusRequestType;
begin
  Result := CreateComObject(CLASS_TransactionStatusRequestType) as ITransactionStatusRequestType;
end;

class function CoTransactionStatusRequestType.CreateRemote(const MachineName: string): ITransactionStatusRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransactionStatusRequestType) as ITransactionStatusRequestType;
end;

class function CoTransactionStatusResponseType.Create: ITransactionStatusResponseType;
begin
  Result := CreateComObject(CLASS_TransactionStatusResponseType) as ITransactionStatusResponseType;
end;

class function CoTransactionStatusResponseType.CreateRemote(const MachineName: string): ITransactionStatusResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransactionStatusResponseType) as ITransactionStatusResponseType;
end;

class function CoSaleToPOIRequest.Create: ISaleToPOIRequest;
begin
  Result := CreateComObject(CLASS_SaleToPOIRequest) as ISaleToPOIRequest;
end;

class function CoSaleToPOIRequest.CreateRemote(const MachineName: string): ISaleToPOIRequest;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleToPOIRequest) as ISaleToPOIRequest;
end;

class function CoSaleToPOIResponse.Create: ISaleToPOIResponse;
begin
  Result := CreateComObject(CLASS_SaleToPOIResponse) as ISaleToPOIResponse;
end;

class function CoSaleToPOIResponse.CreateRemote(const MachineName: string): ISaleToPOIResponse;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleToPOIResponse) as ISaleToPOIResponse;
end;

class function CoNexoActivity.Create: INexoActivity;
begin
  Result := CreateComObject(CLASS_NexoActivity) as INexoActivity;
end;

class function CoNexoActivity.CreateRemote(const MachineName: string): INexoActivity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoActivity) as INexoActivity;
end;

class function CoNexoDictionaryOfMessages.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoDictionaryOfMessages) as IEnumerable;
end;

class function CoNexoDictionaryOfMessages.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDictionaryOfMessages) as IEnumerable;
end;

class function CoNexoListOfEndPoints.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoListOfEndPoints) as IEnumerable;
end;

class function CoNexoListOfEndPoints.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoListOfEndPoints) as IEnumerable;
end;

class function CoNexoDictionaryOfEndPoints.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoDictionaryOfEndPoints) as IEnumerable;
end;

class function CoNexoDictionaryOfEndPoints.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDictionaryOfEndPoints) as IEnumerable;
end;

class function CoNexoListOfSessions.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoListOfSessions) as IEnumerable;
end;

class function CoNexoListOfSessions.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoListOfSessions) as IEnumerable;
end;

class function CoNexoDictionaryOfSessions.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoDictionaryOfSessions) as IEnumerable;
end;

class function CoNexoDictionaryOfSessions.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDictionaryOfSessions) as IEnumerable;
end;

class function CoNexoListOfNexoKeys.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoListOfNexoKeys) as IEnumerable;
end;

class function CoNexoListOfNexoKeys.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoListOfNexoKeys) as IEnumerable;
end;

class function CoNexoDictionaryOfNexoKeys.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoDictionaryOfNexoKeys) as IEnumerable;
end;

class function CoNexoDictionaryOfNexoKeys.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDictionaryOfNexoKeys) as IEnumerable;
end;

class function CoNexoListOfAnyMessages.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoListOfAnyMessages) as IEnumerable;
end;

class function CoNexoListOfAnyMessages.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoListOfAnyMessages) as IEnumerable;
end;

class function CoNexoDictionaryOfAnyMessages.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoDictionaryOfAnyMessages) as IEnumerable;
end;

class function CoNexoDictionaryOfAnyMessages.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDictionaryOfAnyMessages) as IEnumerable;
end;

class function CoNexoAcceptedCommands.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoAcceptedCommands) as IEnumerable;
end;

class function CoNexoAcceptedCommands.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoAcceptedCommands) as IEnumerable;
end;

class function CoNexoItem.Create: INexoItem;
begin
  Result := CreateComObject(CLASS_NexoItem) as INexoItem;
end;

class function CoNexoItem.CreateRemote(const MachineName: string): INexoItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoItem) as INexoItem;
end;

class function CoNexoBalanceInquiry.Create: INexoBalanceInquiry;
begin
  Result := CreateComObject(CLASS_NexoBalanceInquiry) as INexoBalanceInquiry;
end;

class function CoNexoBalanceInquiry.CreateRemote(const MachineName: string): INexoBalanceInquiry;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoBalanceInquiry) as INexoBalanceInquiry;
end;

class function CoNexoBatch.Create: INexoBatch;
begin
  Result := CreateComObject(CLASS_NexoBatch) as INexoBatch;
end;

class function CoNexoBatch.CreateRemote(const MachineName: string): INexoBatch;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoBatch) as INexoBatch;
end;

class function CoNexoCardAcquisition.Create: INexoCardAcquisition;
begin
  Result := CreateComObject(CLASS_NexoCardAcquisition) as INexoCardAcquisition;
end;

class function CoNexoCardAcquisition.CreateRemote(const MachineName: string): INexoCardAcquisition;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCardAcquisition) as INexoCardAcquisition;
end;

class function CoNexoCardReaderInit.Create: INexoCardReaderInit;
begin
  Result := CreateComObject(CLASS_NexoCardReaderInit) as INexoCardReaderInit;
end;

class function CoNexoCardReaderInit.CreateRemote(const MachineName: string): INexoCardReaderInit;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCardReaderInit) as INexoCardReaderInit;
end;

class function CoNexoCardReaderAPDU.Create: INexoCardReaderAPDU;
begin
  Result := CreateComObject(CLASS_NexoCardReaderAPDU) as INexoCardReaderAPDU;
end;

class function CoNexoCardReaderAPDU.CreateRemote(const MachineName: string): INexoCardReaderAPDU;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCardReaderAPDU) as INexoCardReaderAPDU;
end;

class function CoNexoCardReaderPowerOFF.Create: INexoCardReaderPowerOFF;
begin
  Result := CreateComObject(CLASS_NexoCardReaderPowerOFF) as INexoCardReaderPowerOFF;
end;

class function CoNexoCardReaderPowerOFF.CreateRemote(const MachineName: string): INexoCardReaderPowerOFF;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCardReaderPowerOFF) as INexoCardReaderPowerOFF;
end;

class function CoNexoDeviceDisplay.Create: INexoDeviceDisplay;
begin
  Result := CreateComObject(CLASS_NexoDeviceDisplay) as INexoDeviceDisplay;
end;

class function CoNexoDeviceDisplay.CreateRemote(const MachineName: string): INexoDeviceDisplay;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDeviceDisplay) as INexoDeviceDisplay;
end;

class function CoNexoDeviceInputUpdate.Create: INexoDeviceInputUpdate;
begin
  Result := CreateComObject(CLASS_NexoDeviceInputUpdate) as INexoDeviceInputUpdate;
end;

class function CoNexoDeviceInputUpdate.CreateRemote(const MachineName: string): INexoDeviceInputUpdate;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDeviceInputUpdate) as INexoDeviceInputUpdate;
end;

class function CoNexoDeviceSound.Create: INexoDeviceSound;
begin
  Result := CreateComObject(CLASS_NexoDeviceSound) as INexoDeviceSound;
end;

class function CoNexoDeviceSound.CreateRemote(const MachineName: string): INexoDeviceSound;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDeviceSound) as INexoDeviceSound;
end;

class function CoNexoEnableService.Create: INexoEnableService;
begin
  Result := CreateComObject(CLASS_NexoEnableService) as INexoEnableService;
end;

class function CoNexoEnableService.CreateRemote(const MachineName: string): INexoEnableService;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoEnableService) as INexoEnableService;
end;

class function CoNexoGetTotals.Create: INexoGetTotals;
begin
  Result := CreateComObject(CLASS_NexoGetTotals) as INexoGetTotals;
end;

class function CoNexoGetTotals.CreateRemote(const MachineName: string): INexoGetTotals;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoGetTotals) as INexoGetTotals;
end;

class function CoNexoLoyalty.Create: INexoLoyalty;
begin
  Result := CreateComObject(CLASS_NexoLoyalty) as INexoLoyalty;
end;

class function CoNexoLoyalty.CreateRemote(const MachineName: string): INexoLoyalty;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoLoyalty) as INexoLoyalty;
end;

class function CoNexoPayment.Create: INexoPayment;
begin
  Result := CreateComObject(CLASS_NexoPayment) as INexoPayment;
end;

class function CoNexoPayment.CreateRemote(const MachineName: string): INexoPayment;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoPayment) as INexoPayment;
end;

class function CoNexoPIN.Create: INexoPIN;
begin
  Result := CreateComObject(CLASS_NexoPIN) as INexoPIN;
end;

class function CoNexoPIN.CreateRemote(const MachineName: string): INexoPIN;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoPIN) as INexoPIN;
end;

class function CoNexoReconciliation.Create: INexoReconciliation;
begin
  Result := CreateComObject(CLASS_NexoReconciliation) as INexoReconciliation;
end;

class function CoNexoReconciliation.CreateRemote(const MachineName: string): INexoReconciliation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoReconciliation) as INexoReconciliation;
end;

class function CoNexoStoredValue.Create: INexoStoredValue;
begin
  Result := CreateComObject(CLASS_NexoStoredValue) as INexoStoredValue;
end;

class function CoNexoStoredValue.CreateRemote(const MachineName: string): INexoStoredValue;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoStoredValue) as INexoStoredValue;
end;

class function CoNexoTransmit.Create: INexoTransmit;
begin
  Result := CreateComObject(CLASS_NexoTransmit) as INexoTransmit;
end;

class function CoNexoTransmit.CreateRemote(const MachineName: string): INexoTransmit;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoTransmit) as INexoTransmit;
end;

class function CoNexoAbort.Create: INexoAbort;
begin
  Result := CreateComObject(CLASS_NexoAbort) as INexoAbort;
end;

class function CoNexoAbort.CreateRemote(const MachineName: string): INexoAbort;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoAbort) as INexoAbort;
end;

class function CoNexoDiagnosis.Create: INexoDiagnosis;
begin
  Result := CreateComObject(CLASS_NexoDiagnosis) as INexoDiagnosis;
end;

class function CoNexoDiagnosis.CreateRemote(const MachineName: string): INexoDiagnosis;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDiagnosis) as INexoDiagnosis;
end;

class function CoNexoEvent.Create: INexoEvent;
begin
  Result := CreateComObject(CLASS_NexoEvent) as INexoEvent;
end;

class function CoNexoEvent.CreateRemote(const MachineName: string): INexoEvent;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoEvent) as INexoEvent;
end;

class function CoNexoTransactionStatus.Create: INexoTransactionStatus;
begin
  Result := CreateComObject(CLASS_NexoTransactionStatus) as INexoTransactionStatus;
end;

class function CoNexoTransactionStatus.CreateRemote(const MachineName: string): INexoTransactionStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoTransactionStatus) as INexoTransactionStatus;
end;

class function CoNexoResponseType.Create: INexoResponseType;
begin
  Result := CreateComObject(CLASS_NexoResponseType) as INexoResponseType;
end;

class function CoNexoResponseType.CreateRemote(const MachineName: string): INexoResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoResponseType) as INexoResponseType;
end;

class function CoNexoDeviceInput.Create: INexoDeviceInput;
begin
  Result := CreateComObject(CLASS_NexoDeviceInput) as INexoDeviceInput;
end;

class function CoNexoDeviceInput.CreateRemote(const MachineName: string): INexoDeviceInput;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDeviceInput) as INexoDeviceInput;
end;

class function CoNexoDevicePrint.Create: INexoDevicePrint;
begin
  Result := CreateComObject(CLASS_NexoDevicePrint) as INexoDevicePrint;
end;

class function CoNexoDevicePrint.CreateRemote(const MachineName: string): INexoDevicePrint;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDevicePrint) as INexoDevicePrint;
end;

class function CoNexoLogin.Create: INexoLogin;
begin
  Result := CreateComObject(CLASS_NexoLogin) as INexoLogin;
end;

class function CoNexoLogin.CreateRemote(const MachineName: string): INexoLogin;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoLogin) as INexoLogin;
end;

class function CoNexoLogout.Create: INexoLogout;
begin
  Result := CreateComObject(CLASS_NexoLogout) as INexoLogout;
end;

class function CoNexoLogout.CreateRemote(const MachineName: string): INexoLogout;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoLogout) as INexoLogout;
end;

class function CoNexoAdmin.Create: INexoAdmin;
begin
  Result := CreateComObject(CLASS_NexoAdmin) as INexoAdmin;
end;

class function CoNexoAdmin.CreateRemote(const MachineName: string): INexoAdmin;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoAdmin) as INexoAdmin;
end;

class function CoNexoObject.Create: INexoObject;
begin
  Result := CreateComObject(CLASS_NexoObject) as INexoObject;
end;

class function CoNexoObject.CreateRemote(const MachineName: string): INexoObject;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoObject) as INexoObject;
end;

class function CoNexoReversal.Create: INexoReversal;
begin
  Result := CreateComObject(CLASS_NexoReversal) as INexoReversal;
end;

class function CoNexoReversal.CreateRemote(const MachineName: string): INexoReversal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoReversal) as INexoReversal;
end;

class function CoNexoObjectToProcess.Create: INexoObjectToProcess;
begin
  Result := CreateComObject(CLASS_NexoObjectToProcess) as INexoObjectToProcess;
end;

class function CoNexoObjectToProcess.CreateRemote(const MachineName: string): INexoObjectToProcess;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoObjectToProcess) as INexoObjectToProcess;
end;

class function CoNexoTextString.Create: INexoTextString;
begin
  Result := CreateComObject(CLASS_NexoTextString) as INexoTextString;
end;

class function CoNexoTextString.CreateRemote(const MachineName: string): INexoTextString;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoTextString) as INexoTextString;
end;

class function CoNexoBoolean.Create: INexoBooleanType;
begin
  Result := CreateComObject(CLASS_NexoBoolean) as INexoBooleanType;
end;

class function CoNexoBoolean.CreateRemote(const MachineName: string): INexoBooleanType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoBoolean) as INexoBooleanType;
end;

class function CoNexoInteger.Create: INexoInteger;
begin
  Result := CreateComObject(CLASS_NexoInteger) as INexoInteger;
end;

class function CoNexoInteger.CreateRemote(const MachineName: string): INexoInteger;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoInteger) as INexoInteger;
end;

class function CoNexoDecimal.Create: INexoDecimal;
begin
  Result := CreateComObject(CLASS_NexoDecimal) as INexoDecimal;
end;

class function CoNexoDecimal.CreateRemote(const MachineName: string): INexoDecimal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDecimal) as INexoDecimal;
end;

class function CoNexoSimpleAmount.Create: INexoDecimal;
begin
  Result := CreateComObject(CLASS_NexoSimpleAmount) as INexoDecimal;
end;

class function CoNexoSimpleAmount.CreateRemote(const MachineName: string): INexoDecimal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoSimpleAmount) as INexoDecimal;
end;

class function CoNexoLabel.Create: INexoLabel;
begin
  Result := CreateComObject(CLASS_NexoLabel) as INexoLabel;
end;

class function CoNexoLabel.CreateRemote(const MachineName: string): INexoLabel;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoLabel) as INexoLabel;
end;

class function CoNexoEnumeration.Create: INexoEnumeration;
begin
  Result := CreateComObject(CLASS_NexoEnumeration) as INexoEnumeration;
end;

class function CoNexoEnumeration.CreateRemote(const MachineName: string): INexoEnumeration;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoEnumeration) as INexoEnumeration;
end;

class function CoNexoCluster.Create: INexoCluster;
begin
  Result := CreateComObject(CLASS_NexoCluster) as INexoCluster;
end;

class function CoNexoCluster.CreateRemote(const MachineName: string): INexoCluster;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCluster) as INexoCluster;
end;

class function CoNexoLengthDrivenTextString.Create: INexoLengthDrivenTextString;
begin
  Result := CreateComObject(CLASS_NexoLengthDrivenTextString) as INexoLengthDrivenTextString;
end;

class function CoNexoLengthDrivenTextString.CreateRemote(const MachineName: string): INexoLengthDrivenTextString;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoLengthDrivenTextString) as INexoLengthDrivenTextString;
end;

class function CoNexoDigitString.Create: INexoDigitString;
begin
  Result := CreateComObject(CLASS_NexoDigitString) as INexoDigitString;
end;

class function CoNexoDigitString.CreateRemote(const MachineName: string): INexoDigitString;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDigitString) as INexoDigitString;
end;

class function CoNexoISOCurrency3A.Create: INexoISOData;
begin
  Result := CreateComObject(CLASS_NexoISOCurrency3A) as INexoISOData;
end;

class function CoNexoISOCurrency3A.CreateRemote(const MachineName: string): INexoISOData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoISOCurrency3A) as INexoISOData;
end;

class function CoNexoISOCountry3A.Create: INexoISOData;
begin
  Result := CreateComObject(CLASS_NexoISOCountry3A) as INexoISOData;
end;

class function CoNexoISOCountry3A.CreateRemote(const MachineName: string): INexoISOData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoISOCountry3A) as INexoISOData;
end;

class function CoNexoISOLanguage2A.Create: INexoISOData;
begin
  Result := CreateComObject(CLASS_NexoISOLanguage2A) as INexoISOData;
end;

class function CoNexoISOLanguage2A.CreateRemote(const MachineName: string): INexoISOData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoISOLanguage2A) as INexoISOData;
end;

class function CoNexoISODateTime.Create: INexoISODateTime;
begin
  Result := CreateComObject(CLASS_NexoISODateTime) as INexoISODateTime;
end;

class function CoNexoISODateTime.CreateRemote(const MachineName: string): INexoISODateTime;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoISODateTime) as INexoISODateTime;
end;

class function CoNexoISODate.Create: INexoISODate;
begin
  Result := CreateComObject(CLASS_NexoISODate) as INexoISODate;
end;

class function CoNexoISODate.CreateRemote(const MachineName: string): INexoISODate;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoISODate) as INexoISODate;
end;

class function CoNexoByteSequence.Create: INexoNonStringType;
begin
  Result := CreateComObject(CLASS_NexoByteSequence) as INexoNonStringType;
end;

class function CoNexoByteSequence.CreateRemote(const MachineName: string): INexoNonStringType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoByteSequence) as INexoNonStringType;
end;

class function CoNexoCurrency.Create: INexoCurrency;
begin
  Result := CreateComObject(CLASS_NexoCurrency) as INexoCurrency;
end;

class function CoNexoCurrency.CreateRemote(const MachineName: string): INexoCurrency;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrency) as INexoCurrency;
end;

class function CoNexoCurrencyEUR.Create: INexoCurrency;
begin
  Result := CreateComObject(CLASS_NexoCurrencyEUR) as INexoCurrency;
end;

class function CoNexoCurrencyEUR.CreateRemote(const MachineName: string): INexoCurrency;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrencyEUR) as INexoCurrency;
end;

class function CoNexoCurrencyUSD.Create: INexoCurrency;
begin
  Result := CreateComObject(CLASS_NexoCurrencyUSD) as INexoCurrency;
end;

class function CoNexoCurrencyUSD.CreateRemote(const MachineName: string): INexoCurrency;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrencyUSD) as INexoCurrency;
end;

class function CoNexoCurrencyGBP.Create: INexoCurrency;
begin
  Result := CreateComObject(CLASS_NexoCurrencyGBP) as INexoCurrency;
end;

class function CoNexoCurrencyGBP.CreateRemote(const MachineName: string): INexoCurrency;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrencyGBP) as INexoCurrency;
end;

class function CoNexoCurrencyCHF.Create: INexoCurrency;
begin
  Result := CreateComObject(CLASS_NexoCurrencyCHF) as INexoCurrency;
end;

class function CoNexoCurrencyCHF.CreateRemote(const MachineName: string): INexoCurrency;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrencyCHF) as INexoCurrency;
end;

class function CoNexoSupportedProtocolVersions.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoSupportedProtocolVersions) as IEnumerable;
end;

class function CoNexoSupportedProtocolVersions.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoSupportedProtocolVersions) as IEnumerable;
end;

class function CoNexoRetailerClientHandle.Create: INexoRetailerClientHandle;
begin
  Result := CreateComObject(CLASS_NexoRetailerClientHandle) as INexoRetailerClientHandle;
end;

class function CoNexoRetailerClientHandle.CreateRemote(const MachineName: string): INexoRetailerClientHandle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerClientHandle) as INexoRetailerClientHandle;
end;

class function CoNexoRetailerClient.Create: INexoRetailerClient;
begin
  Result := CreateComObject(CLASS_NexoRetailerClient) as INexoRetailerClient;
end;

class function CoNexoRetailerClient.CreateRemote(const MachineName: string): INexoRetailerClient;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerClient) as INexoRetailerClient;
end;

class function CoNexoRetailerClientSettings.Create: INexoRetailerClientSettings;
begin
  Result := CreateComObject(CLASS_NexoRetailerClientSettings) as INexoRetailerClientSettings;
end;

class function CoNexoRetailerClientSettings.CreateRemote(const MachineName: string): INexoRetailerClientSettings;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerClientSettings) as INexoRetailerClientSettings;
end;

class function CoNexoRetailerClientConnectionSettings.Create: INexoRetailerClientConnectionSettings;
begin
  Result := CreateComObject(CLASS_NexoRetailerClientConnectionSettings) as INexoRetailerClientConnectionSettings;
end;

class function CoNexoRetailerClientConnectionSettings.CreateRemote(const MachineName: string): INexoRetailerClientConnectionSettings;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerClientConnectionSettings) as INexoRetailerClientConnectionSettings;
end;

class function CoNexoRetailerClientActivity.Create: INexoRetailerClientActivity;
begin
  Result := CreateComObject(CLASS_NexoRetailerClientActivity) as INexoRetailerClientActivity;
end;

class function CoNexoRetailerClientActivity.CreateRemote(const MachineName: string): INexoRetailerClientActivity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerClientActivity) as INexoRetailerClientActivity;
end;

class function CoNexoRetailerServerActivity.Create: INexoRetailerServerActivity;
begin
  Result := CreateComObject(CLASS_NexoRetailerServerActivity) as INexoRetailerServerActivity;
end;

class function CoNexoRetailerServerActivity.CreateRemote(const MachineName: string): INexoRetailerServerActivity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerActivity) as INexoRetailerServerActivity;
end;

class function CoNexoRetailerServerDatabaseSettings.Create: INexoRetailerServerDatabaseSettings;
begin
  Result := CreateComObject(CLASS_NexoRetailerServerDatabaseSettings) as INexoRetailerServerDatabaseSettings;
end;

class function CoNexoRetailerServerDatabaseSettings.CreateRemote(const MachineName: string): INexoRetailerServerDatabaseSettings;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerDatabaseSettings) as INexoRetailerServerDatabaseSettings;
end;

class function CoNexoRetailerServerSettings.Create: INexoRetailerServerSettings;
begin
  Result := CreateComObject(CLASS_NexoRetailerServerSettings) as INexoRetailerServerSettings;
end;

class function CoNexoRetailerServerSettings.CreateRemote(const MachineName: string): INexoRetailerServerSettings;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerSettings) as INexoRetailerServerSettings;
end;

class function CoNexoMessage.Create: _NexoMessage;
begin
  Result := CreateComObject(CLASS_NexoMessage) as _NexoMessage;
end;

class function CoNexoMessage.CreateRemote(const MachineName: string): _NexoMessage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoMessage) as _NexoMessage;
end;

class function CoNexoPartner.Create: _NexoPartner;
begin
  Result := CreateComObject(CLASS_NexoPartner) as _NexoPartner;
end;

class function CoNexoPartner.CreateRemote(const MachineName: string): _NexoPartner;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoPartner) as _NexoPartner;
end;

class function CoNexoEndPoint.Create: _NexoEndPoint;
begin
  Result := CreateComObject(CLASS_NexoEndPoint) as _NexoEndPoint;
end;

class function CoNexoEndPoint.CreateRemote(const MachineName: string): _NexoEndPoint;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoEndPoint) as _NexoEndPoint;
end;

class function CoNexoSession.Create: _NexoSession;
begin
  Result := CreateComObject(CLASS_NexoSession) as _NexoSession;
end;

class function CoNexoSession.CreateRemote(const MachineName: string): _NexoSession;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoSession) as _NexoSession;
end;

class function CoNexoDelegates.Create: _NexoDelegates;
begin
  Result := CreateComObject(CLASS_NexoDelegates) as _NexoDelegates;
end;

class function CoNexoDelegates.CreateRemote(const MachineName: string): _NexoDelegates;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDelegates) as _NexoDelegates;
end;

class function CoNexoKey.Create: _NexoKey;
begin
  Result := CreateComObject(CLASS_NexoKey) as _NexoKey;
end;

class function CoNexoKey.CreateRemote(const MachineName: string): _NexoKey;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoKey) as _NexoKey;
end;

class function CoNexoMessageType.Create: _NexoMessageType;
begin
  Result := CreateComObject(CLASS_NexoMessageType) as _NexoMessageType;
end;

class function CoNexoMessageType.CreateRemote(const MachineName: string): _NexoMessageType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoMessageType) as _NexoMessageType;
end;

class function CoNexoMessageClass.Create: _NexoMessageClass;
begin
  Result := CreateComObject(CLASS_NexoMessageClass) as _NexoMessageClass;
end;

class function CoNexoMessageClass.CreateRemote(const MachineName: string): _NexoMessageClass;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoMessageClass) as _NexoMessageClass;
end;

class function CoNexoMessageCategory.Create: _NexoMessageCategory;
begin
  Result := CreateComObject(CLASS_NexoMessageCategory) as _NexoMessageCategory;
end;

class function CoNexoMessageCategory.CreateRemote(const MachineName: string): _NexoMessageCategory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoMessageCategory) as _NexoMessageCategory;
end;

class function CoNexoTerminalEnvironment.Create: _NexoTerminalEnvironment;
begin
  Result := CreateComObject(CLASS_NexoTerminalEnvironment) as _NexoTerminalEnvironment;
end;

class function CoNexoTerminalEnvironment.CreateRemote(const MachineName: string): _NexoTerminalEnvironment;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoTerminalEnvironment) as _NexoTerminalEnvironment;
end;

class function CoNexoSaleCapabilities.Create: _NexoSaleCapabilities;
begin
  Result := CreateComObject(CLASS_NexoSaleCapabilities) as _NexoSaleCapabilities;
end;

class function CoNexoSaleCapabilities.CreateRemote(const MachineName: string): _NexoSaleCapabilities;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoSaleCapabilities) as _NexoSaleCapabilities;
end;

class function CoNexoProtocolVersion.Create: _NexoProtocolVersion;
begin
  Result := CreateComObject(CLASS_NexoProtocolVersion) as _NexoProtocolVersion;
end;

class function CoNexoProtocolVersion.CreateRemote(const MachineName: string): _NexoProtocolVersion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoProtocolVersion) as _NexoProtocolVersion;
end;

class function CoNexoID.Create: _NexoID;
begin
  Result := CreateComObject(CLASS_NexoID) as _NexoID;
end;

class function CoNexoID.CreateRemote(const MachineName: string): _NexoID;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoID) as _NexoID;
end;

class function CoNexoServiceID.Create: _NexoServiceID;
begin
  Result := CreateComObject(CLASS_NexoServiceID) as _NexoServiceID;
end;

class function CoNexoServiceID.CreateRemote(const MachineName: string): _NexoServiceID;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoServiceID) as _NexoServiceID;
end;

class function CoNexoDeviceID.Create: _NexoDeviceID;
begin
  Result := CreateComObject(CLASS_NexoDeviceID) as _NexoDeviceID;
end;

class function CoNexoDeviceID.CreateRemote(const MachineName: string): _NexoDeviceID;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDeviceID) as _NexoDeviceID;
end;

class function CoNexoPOIID.Create: _NexoPOIID;
begin
  Result := CreateComObject(CLASS_NexoPOIID) as _NexoPOIID;
end;

class function CoNexoPOIID.CreateRemote(const MachineName: string): _NexoPOIID;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoPOIID) as _NexoPOIID;
end;

class function CoNexoSaleID.Create: _NexoSaleID;
begin
  Result := CreateComObject(CLASS_NexoSaleID) as _NexoSaleID;
end;

class function CoNexoSaleID.CreateRemote(const MachineName: string): _NexoSaleID;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoSaleID) as _NexoSaleID;
end;

class function CoNexoOperatorLanguage.Create: _NexoOperatorLanguage;
begin
  Result := CreateComObject(CLASS_NexoOperatorLanguage) as _NexoOperatorLanguage;
end;

class function CoNexoOperatorLanguage.CreateRemote(const MachineName: string): _NexoOperatorLanguage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoOperatorLanguage) as _NexoOperatorLanguage;
end;

class function CoNexoResult.Create: _NexoResult;
begin
  Result := CreateComObject(CLASS_NexoResult) as _NexoResult;
end;

class function CoNexoResult.CreateRemote(const MachineName: string): _NexoResult;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoResult) as _NexoResult;
end;

class function CoNexoErrorCondition.Create: _NexoErrorCondition;
begin
  Result := CreateComObject(CLASS_NexoErrorCondition) as _NexoErrorCondition;
end;

class function CoNexoErrorCondition.CreateRemote(const MachineName: string): _NexoErrorCondition;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoErrorCondition) as _NexoErrorCondition;
end;

class function CoNexoAdditionalResponse.Create: _NexoAdditionalResponse;
begin
  Result := CreateComObject(CLASS_NexoAdditionalResponse) as _NexoAdditionalResponse;
end;

class function CoNexoAdditionalResponse.CreateRemote(const MachineName: string): _NexoAdditionalResponse;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoAdditionalResponse) as _NexoAdditionalResponse;
end;

class function CoNexoGlobalStatus.Create: _NexoGlobalStatus;
begin
  Result := CreateComObject(CLASS_NexoGlobalStatus) as _NexoGlobalStatus;
end;

class function CoNexoGlobalStatus.CreateRemote(const MachineName: string): _NexoGlobalStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoGlobalStatus) as _NexoGlobalStatus;
end;

class function CoNexoCertificationCode.Create: _NexoCertificationCode;
begin
  Result := CreateComObject(CLASS_NexoCertificationCode) as _NexoCertificationCode;
end;

class function CoNexoCertificationCode.CreateRemote(const MachineName: string): _NexoCertificationCode;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCertificationCode) as _NexoCertificationCode;
end;

class function CoNexoSoftwareVersion.Create: _NexoSoftwareVersion;
begin
  Result := CreateComObject(CLASS_NexoSoftwareVersion) as _NexoSoftwareVersion;
end;

class function CoNexoSoftwareVersion.CreateRemote(const MachineName: string): _NexoSoftwareVersion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoSoftwareVersion) as _NexoSoftwareVersion;
end;

class function CoNexoApplicationName.Create: _NexoApplicationName;
begin
  Result := CreateComObject(CLASS_NexoApplicationName) as _NexoApplicationName;
end;

class function CoNexoApplicationName.CreateRemote(const MachineName: string): _NexoApplicationName;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoApplicationName) as _NexoApplicationName;
end;

class function CoNexoManufacturerID.Create: _NexoManufacturerID;
begin
  Result := CreateComObject(CLASS_NexoManufacturerID) as _NexoManufacturerID;
end;

class function CoNexoManufacturerID.CreateRemote(const MachineName: string): _NexoManufacturerID;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoManufacturerID) as _NexoManufacturerID;
end;

class function CoNexoPOISerialNumber.Create: _NexoPOISerialNumber;
begin
  Result := CreateComObject(CLASS_NexoPOISerialNumber) as _NexoPOISerialNumber;
end;

class function CoNexoPOISerialNumber.CreateRemote(const MachineName: string): _NexoPOISerialNumber;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoPOISerialNumber) as _NexoPOISerialNumber;
end;

class function CoNexoOperatorID.Create: _NexoOperatorID;
begin
  Result := CreateComObject(CLASS_NexoOperatorID) as _NexoOperatorID;
end;

class function CoNexoOperatorID.CreateRemote(const MachineName: string): _NexoOperatorID;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoOperatorID) as _NexoOperatorID;
end;

class function CoNexoDateTime.Create: _NexoDateTime;
begin
  Result := CreateComObject(CLASS_NexoDateTime) as _NexoDateTime;
end;

class function CoNexoDateTime.CreateRemote(const MachineName: string): _NexoDateTime;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDateTime) as _NexoDateTime;
end;

class function CoNexoInputCommand.Create: _NexoInputCommand;
begin
  Result := CreateComObject(CLASS_NexoInputCommand) as _NexoInputCommand;
end;

class function CoNexoInputCommand.CreateRemote(const MachineName: string): _NexoInputCommand;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoInputCommand) as _NexoInputCommand;
end;

class function CoNexoEventToNotify.Create: _NexoEventToNotify;
begin
  Result := CreateComObject(CLASS_NexoEventToNotify) as _NexoEventToNotify;
end;

class function CoNexoEventToNotify.CreateRemote(const MachineName: string): _NexoEventToNotify;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoEventToNotify) as _NexoEventToNotify;
end;

class function CoNexoPaymentIntrumentType.Create: _NexoPaymentIntrumentType;
begin
  Result := CreateComObject(CLASS_NexoPaymentIntrumentType) as _NexoPaymentIntrumentType;
end;

class function CoNexoPaymentIntrumentType.CreateRemote(const MachineName: string): _NexoPaymentIntrumentType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoPaymentIntrumentType) as _NexoPaymentIntrumentType;
end;

class function CoNexoVersion.Create: _NexoVersion;
begin
  Result := CreateComObject(CLASS_NexoVersion) as _NexoVersion;
end;

class function CoNexoVersion.CreateRemote(const MachineName: string): _NexoVersion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoVersion) as _NexoVersion;
end;

class function CoNexoCurrentVersion.Create: _NexoCurrentVersion;
begin
  Result := CreateComObject(CLASS_NexoCurrentVersion) as _NexoCurrentVersion;
end;

class function CoNexoCurrentVersion.CreateRemote(const MachineName: string): _NexoCurrentVersion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrentVersion) as _NexoCurrentVersion;
end;

class function CoNexoRetailerServerDatabaseConnection.Create: _NexoRetailerServerDatabaseConnection;
begin
  Result := CreateComObject(CLASS_NexoRetailerServerDatabaseConnection) as _NexoRetailerServerDatabaseConnection;
end;

class function CoNexoRetailerServerDatabaseConnection.CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseConnection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerDatabaseConnection) as _NexoRetailerServerDatabaseConnection;
end;

class function CoNexoRetailerServerDatabaseEndPoint.Create: _NexoRetailerServerDatabaseEndPoint;
begin
  Result := CreateComObject(CLASS_NexoRetailerServerDatabaseEndPoint) as _NexoRetailerServerDatabaseEndPoint;
end;

class function CoNexoRetailerServerDatabaseEndPoint.CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseEndPoint;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerDatabaseEndPoint) as _NexoRetailerServerDatabaseEndPoint;
end;

class function CoNexoRetailerServerDatabaseSale.Create: _NexoRetailerServerDatabaseSale;
begin
  Result := CreateComObject(CLASS_NexoRetailerServerDatabaseSale) as _NexoRetailerServerDatabaseSale;
end;

class function CoNexoRetailerServerDatabaseSale.CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseSale;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerDatabaseSale) as _NexoRetailerServerDatabaseSale;
end;

class function CoNexoRetailerServerDatabaseMessage.Create: _NexoRetailerServerDatabaseMessage;
begin
  Result := CreateComObject(CLASS_NexoRetailerServerDatabaseMessage) as _NexoRetailerServerDatabaseMessage;
end;

class function CoNexoRetailerServerDatabaseMessage.CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseMessage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerDatabaseMessage) as _NexoRetailerServerDatabaseMessage;
end;

class function CoNexoRetailerServerDatabase.Create: _NexoRetailerServerDatabase;
begin
  Result := CreateComObject(CLASS_NexoRetailerServerDatabase) as _NexoRetailerServerDatabase;
end;

class function CoNexoRetailerServerDatabase.CreateRemote(const MachineName: string): _NexoRetailerServerDatabase;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerDatabase) as _NexoRetailerServerDatabase;
end;

end.
