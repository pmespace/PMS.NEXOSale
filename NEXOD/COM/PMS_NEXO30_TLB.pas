unit PMS_NEXO30_TLB;

// ************************************************************************ //
// AVERTISSEMENT
// -------
// Les types déclarés dans ce fichier ont été générés à partir de données lues
// depuis la bibliothèque de types. Si cette dernière (via une autre bibliothèque de types
// s'y référant) est explicitement ou indirectement ré-importée, ou la commande "Actualiser"
// de l'éditeur de bibliothèque de types est activée lors de la modification de la bibliothèque
// de types, le contenu de ce fichier sera régénéré et toutes les modifications
// manuellement apportées seront perdues.
// ************************************************************************ //

// $Rev: 98336 $
// Fichier généré le 04/02/2022 11:55:52 depuis la bibliothèque de types ci-dessous.

// ************************************************************************  //
// Biblio. types : C:\Users\philippe\Documents\Dev\NEXO\bin\net47\PMS.NEXO30.tlb (1)
// LIBID : {BA4AE91F-C039-44CB-AB66-CE57ECA46EB6}
// LCID : 0
// Fichier d'aide :
// Chaîne d'aide : nexo retailer 3.0
// DepndLst :
// (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// (2) v2.4 mscorlib, (C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.tlb)
// (3) v5.5 PMS_COMMON, (C:\Users\philippe\Documents\Dev\COMMON\bin\net47\PMS.COMMON.tlb)
// Bibliothèque de types parent :
// (0) v1.3 PMS_NEXOSALE30, (C:\Users\philippe\Documents\Dev\NEXOSale\bin\PMS.NEXOSALE30.tlb)
// SYS_KIND: SYS_WIN32
// Errors:
// Remarque : le symbole 'Type' a été renommé en 'type_'
// Remarque : membre 'Class' de 'INexoItem' changé en 'Class_'
// Remarque : membre 'Label' de 'INexoLabel' changé en 'Label_'
// Remarque : paramètre 'Label' dans INexoCluster.SetLabel changé en 'Label_'
// Remarque : paramètre 'Label' dans INexoCluster.UnsetLabel changé en 'Label_'
// ************************************************************************ //
{$TYPEDADDRESS OFF} // L'unité doit être compilée sans pointeur à type contrôlé.
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}

interface

uses Winapi.Windows, mscorlib_TLB, PMS_COMMON_TLB, System.Classes, System.Variants, System.Win.StdVCL, Vcl.Graphics, Vcl.OleServer,
	Winapi.ActiveX;

// *********************************************************************//
// GUIDS déclarés dans la bibliothèque de types. Préfixes utilisés:
// Bibliothèques de types : LIBID_xxxx
// CoClasses              : CLASS_xxxx
// Interfaces DISP        : DIID_xxxx
// Interfaces Non-DISP    : IID_xxxx
// *********************************************************************//
const
	// Versions mineure et majeure de la bibliothèque de types
	PMS_NEXO30MajorVersion = 4;
	PMS_NEXO30MinorVersion = 3;

	LIBID_PMS_NEXO30: TGUID = '{BA4AE91F-C039-44CB-AB66-CE57ECA46EB6}';

	IID_IAbortRequestType: TGUID = '{1206C434-3A1D-46AF-B151-F0732E1DA08C}';
	IID_IMessageReferenceType: TGUID = '{5CDDA95E-10E1-440A-B097-386E52ED1BE5}';
	IID_IDisplayResponseType: TGUID = '{635927F7-7386-47A1-80F7-EFA12953B1AA}';
	IID_IOutputResultType: TGUID = '{DCF50BE8-6CF2-4C3F-952E-91A98AFD0BED}';
	IID_IResponseType: TGUID = '{2D008BBE-C7FA-44C5-9A76-8DE4240AD46D}';
	IID_IDisplayRequestType: TGUID = '{D96FD155-357D-4ACA-9BA0-15C03FA11E9B}';
	IID_IDisplayOutputType: TGUID = '{277E1CEE-3FF6-424D-969E-C6FD2FD8ED1C}';
	IID_IOutputContentType: TGUID = '{14A8AFAE-7502-427E-A06E-38CE05F83015}';
	IID_IPredefinedContentType: TGUID = '{BB18ECCD-40F0-4570-B782-9268B834268E}';
	IID_IOutputTextType: TGUID = '{29595E14-FBD0-4DD6-9E81-81C277E000E1}';
	IID_IOutputBarcodeType: TGUID = '{B07F5633-209A-48B9-8F7C-88EF1222FD4D}';
	IID_IMenuEntryType: TGUID = '{5FAF4E3B-9BEA-44F6-94FD-A6874460C3FE}';
	IID_IAdminRequestType: TGUID = '{3591D357-6ED0-43C6-81CB-10F962B19065}';
	IID_IAdminResponseType: TGUID = '{DE8E1F3B-3301-4D6C-9613-AD52EF138F62}';
	IID_IAllowedProductType: TGUID = '{525DFCD5-26C9-452B-9BBA-DE384F560ACD}';
	IID_IAmountsReqType: TGUID = '{8D066C16-02CC-4406-8D96-D9263B693723}';
	IID_IAmountsRespType: TGUID = '{84FDB5BC-B655-4100-8B7F-E94D1D9E8466}';
	IID_IAreaSizeType: TGUID = '{81D0FE3F-6458-44D7-8458-81AF632DCC05}';
	IID_IBalanceInquiryRequestType: TGUID = '{F8EAB8E7-81F0-4F6B-9677-11D1965F9E5C}';
	IID_IPaymentAccountReqType: TGUID = '{606E336E-50E8-47FF-9DCC-77F4B7580B5E}';
	IID_ITransactionIdentificationType: TGUID = '{4FEF9E59-B676-43CF-A9C0-75384973FC77}';
	IID_IPaymentInstrumentDataType: TGUID = '{2626E0FA-AB17-464D-8EC1-67F1D41DDFB5}';
	IID_ICardDataType: TGUID = '{1F8845EF-C5CA-4299-9EF6-95006D7561F8}';
	IID_IContentInformationType: TGUID = '{AB43B0EF-C381-4DC1-9767-ED789E86BEA6}';
	IID_IAuthenticatedDataType: TGUID = '{B6F90539-85F3-40E3-AD94-C072BF505F12}';
	IID_IKEKType: TGUID = '{C04C9578-1CF0-418D-A428-C6C6CA13C713}';
	IID_IKEKIdentifierType: TGUID = '{90188E86-AB6C-487A-86E5-67BC124A471A}';
	IID_IAlgorithmIdentifier: TGUID = '{BD6B7298-EC71-4A5E-BF46-7A963E6EC710}';
	IID_IParameterType: TGUID = '{EACAF4BE-C05D-4504-881C-6312DE123D50}';
	IID_IKeyTransportType: TGUID = '{D388F8FD-D161-4ED9-8EEC-EAFA61DEA8B3}';
	IID_IRecipientIdentifierType: TGUID = '{0542EE57-7075-49F5-86F1-FCBED5306724}';
	IID_IIssuerAndSerialNumberType: TGUID = '{20CEF69A-65E4-4660-B864-66AC7D0F6BF0}';
	IID_IRelativeDistinguishedNameType: TGUID = '{2C1FE857-6DB3-47AC-838B-10853C3BDBE0}';
	IID_IEncapsulatedContentType: TGUID = '{744CC28F-0187-4E6D-B72D-A6B188713DDF}';
	IID_IDigestedDataType: TGUID = '{9A7093CB-09BF-4F0D-B226-B9AA2688EDCD}';
	IID_IEnvelopedDataType: TGUID = '{59517152-8CFC-44E8-9F28-D18FBF62B644}';
	IID_IEncryptedContentType: TGUID = '{682B13F7-C7C5-4937-8FB9-476675C54B26}';
	IID_INamedKeyEncryptedDataType: TGUID = '{E14A93BB-1F6C-4EEC-9410-C668ADF2836C}';
	IID_ISignedDataType: TGUID = '{043F6910-2283-4B81-BA25-47DCD9A15BB5}';
	IID_ISignerType: TGUID = '{F4BBD845-640F-41F6-88A7-D3B7DA1C615F}';
	IID_ISignerIdentifierType: TGUID = '{28CF88AD-5AD1-46C4-99F0-05B01884EF21}';
	IID_ISensitiveCardDataType: TGUID = '{2599BCE4-C214-4992-B19B-A0A8954D5D8D}';
	IID_ITrackDataType: TGUID = '{2FCFC638-FDA0-4F05-B52B-7EF20435AC79}';
	IID_IPaymentTokenType: TGUID = '{0CEAD8D5-7971-4F97-999E-FCCF8047590D}';
	IID_ICustomerOrderType: TGUID = '{2FD88699-79B3-4D03-AE1F-89D2C1CEEE25}';
	IID_ICheckDataType: TGUID = '{5C3D1A1B-CD2D-43A7-A707-347DF5DD6796}';
	IID_IMobileDataType: TGUID = '{9F5AC5CE-A14F-49BC-B6C4-1E7E7E97E96D}';
	IID_IGeolocationType: TGUID = '{74787538-CEB1-4B31-BBE2-8361E2656AE3}';
	IID_IGeographicCoordinatesType: TGUID = '{C1AC5CFF-592C-4FD7-90BF-C5C98134CB2C}';
	IID_IUTMCoordinatesType: TGUID = '{7483573D-908D-4007-A307-530C03F49A85}';
	IID_ISensitiveMobileDataType: TGUID = '{74919409-87B5-44AC-BA3D-5718B90FF741}';
	IID_ILoyaltyAccountReqType: TGUID = '{508B61C3-A186-4AB9-8A32-A03C3B4952F0}';
	IID_ILoyaltyAccountIDType: TGUID = '{E7A1962D-BC03-49EB-83A4-F7B0CB527F2E}';
	IID_IBalanceInquiryResponseType: TGUID = '{96BCF7A1-DE25-4211-8A78-E0E6EF88DD50}';
	IID_IPaymentAccountStatusType: TGUID = '{F22DC0B8-0C7B-47A8-ABD9-C5AFD0259189}';
	IID_IPaymentAcquirerDataType: TGUID = '{728AC4C7-DBBA-4FD7-B59C-268B09234817}';
	IID_ILoyaltyAccountStatusType: TGUID = '{469514AB-3420-411A-A1CD-15E42497F27A}';
	IID_ILoyaltyAccountType: TGUID = '{C395A052-DDC1-4077-93D2-3F38CAB0AAF1}';
	IID_IBatchRequestType: TGUID = '{46921368-4076-49A4-8DDC-F485D5D7DC3F}';
	IID_ITransactionToPerformType: TGUID = '{419B3E14-4D9A-426F-9131-B2D28709CB26}';
	IID_ILoyaltyRequestType: TGUID = '{79D43E6D-6AD3-45DA-8F52-E4B476474298}';
	IID_ISaleDataType: TGUID = '{84951631-1768-4B6B-9049-8233122E1C62}';
	IID_ISaleTerminalDataType: TGUID = '{397CF063-5E6A-46FA-95AA-C4E7248E5536}';
	IID_ISaleProfileType: TGUID = '{FBFED959-1890-4FE4-9D47-1A1107E190FC}';
	IID_ISponsoredMerchantType: TGUID = '{1A748205-06FA-446D-AA6B-88BFE891D490}';
	IID_ISaleToIssuerDataType: TGUID = '{8446AA48-7E9F-40FB-AA26-46B22EA6DD65}';
	IID_ILoyaltyTransactionType: TGUID = '{EE278FF3-7809-46D4-9F1A-C9BE0CECD558}';
	IID_IOriginalPOITransactionType: TGUID = '{8A0294ED-FA0B-4DE3-B044-FBD3D26A7C88}';
	IID_ITransactionConditionsType: TGUID = '{9B83A85E-54D8-47E9-9771-AA333A1E1312}';
	IID_ISaleItemType: TGUID = '{4C7F39E8-EF01-4597-8B83-DA6C3CB6870E}';
	IID_ILoyaltyDataType: TGUID = '{D3413EE3-1C89-44FA-BD4D-C8EB8DA58F93}';
	IID_ILoyaltyAmountType: TGUID = '{FA3813B4-8BE1-42AB-9EE5-08139C3780B1}';
	IID_IPaymentRequestType: TGUID = '{89A3C4A9-DE34-40A3-A931-C33A01830C2E}';
	IID_IPaymentTransactionType: TGUID = '{B8F24B25-7773-4594-90FA-265717648C7D}';
	IID_IPaymentDataType: TGUID = '{4AD2DDE4-9CDE-4F0C-B296-0B741777836E}';
	IID_IInstalmentType: TGUID = '{18FDE60C-2EF3-4272-BB03-A246CACEA310}';
	IID_IReversalRequestType: TGUID = '{49A4AB91-8D5B-48CF-A9E4-4956824EAFA1}';
	IID_IBatchResponseType: TGUID = '{2B65C4CB-D6B3-45B3-8A16-CCAE1566085A}';
	IID_IPerformedTransactionType: TGUID = '{92A2FBA2-17D9-4C83-87BE-4BB0679E6EE9}';
	IID_IPOIDataType: TGUID = '{CFEC2E3B-A798-4BE7-9C1C-60B64FD7F8A7}';
	IID_IPaymentResultType: TGUID = '{CFA87128-AF4D-4BFC-A0AE-D66E12ED33C0}';
	IID_ICurrencyConversionType: TGUID = '{08E13FB8-4AB7-47F5-BBD5-637039963F11}';
	IID_IAmountType: TGUID = '{98E4875A-CFB5-4D17-90DE-C765A5CCABC2}';
	IID_ICapturedSignatureType: TGUID = '{120DD984-C724-4BDB-8EDB-E214609157B7}';
	IID_ISignaturePointType: TGUID = '{07D90B92-9ACD-4641-8058-B738EB33513E}';
	IID_ILoyaltyResultType: TGUID = '{B8ABDDCB-D6E0-4544-80E3-18463ACD8DF8}';
	IID_ILoyaltyAcquirerDataType: TGUID = '{620E8526-D843-48EA-89D2-3EE5D304CD3D}';
	IID_IRebatesType: TGUID = '{88D0DC5E-E734-40FB-B2EB-17BB6D51D7F6}';
	IID_ISaleItemRebateType: TGUID = '{5FC6EAA4-3E39-4BAD-A2B4-FE09C8D61341}';
	IID_ICardAcquisitionRequestType: TGUID = '{94AFFD20-D519-49C6-A204-7C74C7C13027}';
	IID_ICardAcquisitionTransactionType: TGUID = '{F49D42A9-51F5-4FC0-A39E-78F0BBF26C95}';
	IID_ICardAcquisitionResponseType: TGUID = '{44D76C1A-A6BE-4B8B-BDFB-19DF57C905D9}';
	IID_ICardholderPINType: TGUID = '{FE920547-3AFD-4E79-9D52-BB93A46AFE81}';
	IID_ICardReaderAPDURequestType: TGUID = '{21E99FB1-757A-42FF-8F14-B363FAB5042C}';
	IID_ICardReaderAPDUResponseType: TGUID = '{9188E1C1-2F06-4397-8CF4-D59F940DBBDC}';
	IID_ICardReaderInitRequestType: TGUID = '{F78533AB-DA6C-46D4-B6E5-F115558DAF82}';
	IID_ICardReaderInitResponseType: TGUID = '{E4744367-ABEC-4730-82A6-FAED849250DB}';
	IID_IICCResetDataType: TGUID = '{2A075525-C89C-4153-8362-51E588EA999A}';
	IID_ICardReaderPowerOffRequestType: TGUID = '{2E2E47EE-25AB-4AC5-A13C-0BFF82493175}';
	IID_ICardReaderPowerOffResponseType: TGUID = '{05F2CEE2-5106-43BA-B396-4261B4F8AAC3}';
	IID_ICashHandlingDeviceType: TGUID = '{4C449425-DF7A-468F-ADAC-9A17D62EB5CA}';
	IID_ICoinsOrBillsType: TGUID = '{304F7E78-5552-4AEC-8AAC-036368858566}';
	IID_IDiagnosisRequestType: TGUID = '{F9900229-AC7F-41EE-B119-186F803316A0}';
	IID_IDiagnosisResponseType: TGUID = '{A8B6AA97-EFE3-4A88-B117-07EF8A4626B9}';
	IID_IPOIStatusType: TGUID = '{3E044915-7923-4E00-9AC6-EE83B38AB177}';
	IID_IHostStatusType: TGUID = '{11FAEEBC-68AF-4817-8664-59D021802657}';
	IID_IEnableServiceRequestType: TGUID = '{47266DE2-0560-429E-AA93-158BA3FD1A48}';
	IID_IEnableServiceResponseType: TGUID = '{CC4D39B1-2678-483C-9C98-582893B1CED7}';
	IID_IEventNotificationType: TGUID = '{EF05DABF-0F51-4F14-A42C-153268736263}';
	IID_IGetTotalsRequestType: TGUID = '{A637F421-7A0B-42CD-90B6-AAA3985B569D}';
	IID_ITotalFilterType: TGUID = '{9203420E-CB0D-4A08-9C60-BBC42344E048}';
	IID_IGetTotalsResponseType: TGUID = '{D8D4B96C-A142-4F17-BF6E-91C3DF3C5000}';
	IID_ITransactionTotalsType: TGUID = '{8DCFEAA6-0387-45C0-BC04-DAAC66FA6F76}';
	IID_IPaymentTotalsType: TGUID = '{E380FFE0-9B9C-49B5-A85F-F70E4EEF6194}';
	IID_ILoyaltyTotalsType: TGUID = '{782F33DE-2958-4256-9C4F-98F0E4526F0E}';
	IID_IInputType: TGUID = '{1E30591B-9C48-4EBB-830C-7029BC0CF5C4}';
	IID_IInputDataType: TGUID = '{071BF5D3-0E94-40BA-8577-959D8B724B17}';
	IID_IInputRequestType: TGUID = '{A630E6A9-BBAB-49CF-A750-DE28246D2B0A}';
	IID_IInputResponseType: TGUID = '{607D43D8-73A2-4E9D-8C7E-A312D48B1996}';
	IID_IInputResultType: TGUID = '{358A7E4F-4C0A-418B-B4F1-107C8D2D77D6}';
	IID_IInputUpdateType: TGUID = '{69FD7961-D00B-4552-98B3-E41FFEA50B5F}';
	IID_ILoginRequestType: TGUID = '{EA819EB0-AE2D-4347-9FAF-1833F97A7BDB}';
	IID_ISaleSoftwareType: TGUID = '{886E58EB-90B1-40FE-9964-79ACD43DEBA6}';
	IID_ILoginResponseType: TGUID = '{A886113B-9314-4EE7-9851-10C726583283}';
	IID_IPOISystemDataType: TGUID = '{835B50ED-209A-4A7D-91F9-1F2FCA3C8183}';
	IID_IPOISoftwareType: TGUID = '{D9CD56C4-E866-4343-8B54-CDBD4C374DEE}';
	IID_IPOITerminalDataType: TGUID = '{B0906BD8-F03E-4EFD-9C9F-A1741C880FAC}';
	IID_IPOIProfileType: TGUID = '{395D230D-9012-4ECA-975D-B960FC9F0868}';
	IID_ILogoutRequestType: TGUID = '{B94608E6-539B-4C68-9C37-7A951EF8CD66}';
	IID_ILogoutResponseType: TGUID = '{ACCE3987-77D2-424D-9E00-F4AFCFEE98E3}';
	IID_ILoyaltyResponseType: TGUID = '{BD84D3FF-86B9-4CDF-ACDD-E5DA7E841464}';
	IID_IPaymentReceiptType: TGUID = '{FB400495-9533-4175-8208-ECBCEFC425FB}';
	IID_IMessageHeaderType: TGUID = '{4454EE07-4DE1-47F6-8ABC-C89818BCE1D9}';
	IID_IPaymentResponseType: TGUID = '{39FBB28A-45E2-4E7D-AD7A-0C377346421C}';
	IID_IPINRequestType: TGUID = '{2CF4ADCA-C83A-4C96-A2BF-539DB4F90097}';
	IID_IPINResponseType: TGUID = '{155CFF6B-D03E-40E1-B808-09989281E6E5}';
	IID_IPrintOutputType: TGUID = '{58B6D290-A5CE-432C-A569-2455BF463805}';
	IID_IPrintRequestType: TGUID = '{F9583EEA-5FB8-4B94-ABA7-3AD4E8C3ED32}';
	IID_IPrintResponseType: TGUID = '{D86324AE-C4AB-4644-8431-7FB48B7F58BD}';
	IID_IReconciliationRequestType: TGUID = '{C78435AB-ED28-4443-BA66-F3C7F5539708}';
	IID_IReconciliationResponseType: TGUID = '{29E7ABAE-C847-4091-AF8D-F91032FCAE32}';
	IID_IRepeatedMessageResponseType: TGUID = '{0BB336CA-A0BD-4EB5-894F-CC9CA83021C3}';
	IID_IReversalResponseType: TGUID = '{1C5C00FF-3B9E-4759-8168-C6A96F696A83}';
	IID_IStoredValueResponseType: TGUID = '{E27DBB16-20E1-49BF-9C96-E9D3FF0FFD9C}';
	IID_IStoredValueResultType: TGUID = '{9CF92C9A-C19C-4D4B-85BE-B89389555966}';
	IID_IStoredValueAccountStatusType: TGUID = '{2DE2E766-A6C3-4EBD-AF86-0BD508E8D948}';
	IID_IStoredValueAccountIDType: TGUID = '{45215E0B-9EBC-4A5E-9A81-3C246A54E90C}';
	IID_ISoundContentType: TGUID = '{896AE9E6-6C51-4F4D-B305-673972D98CF8}';
	IID_ISoundRequestType: TGUID = '{7225C26A-0178-4999-A54F-D8F32DD36382}';
	IID_ISoundResponseType: TGUID = '{AC1AB91F-9F66-4169-A1E3-9D82C31A6BBC}';
	IID_IStoredValueDataType: TGUID = '{4B35DE8B-F78F-474F-8755-3995083FCEF1}';
	IID_IStoredValueRequestType: TGUID = '{CEB4786D-626E-4584-8C37-0AEB96AF342C}';
	IID_ITransmitRequestType: TGUID = '{71C76C33-646B-4CB7-9D29-923B51463B2B}';
	IID_ITransmitResponseType: TGUID = '{15A68480-8CB7-4EB8-BC42-DF3ADFD5C845}';
	IID_ITransactionStatusRequestType: TGUID = '{4580FE3F-D883-4487-BB73-D31CBE4AC983}';
	IID_ITransactionStatusResponseType: TGUID = '{A2746A54-A932-4B57-9A6A-E34E6E4F8F60}';
	IID_ISaleToPOIRequest: TGUID = '{701EB83C-5F69-49E1-B583-D983674A0058}';
	IID_ISaleToPOIResponse: TGUID = '{38659EBC-E719-4581-967F-1C494A3163E9}';
	IID_IIssuerType: TGUID = '{758B225E-1402-4CF7-B71C-90DDFE162DAD}';
	CLASS_AbortRequestType: TGUID = '{46752778-359E-4586-9B8A-91D9D2E5408B}';
	CLASS_MessageReferenceType: TGUID = '{02537F84-2846-434D-90A7-45F1A5A737A4}';
	CLASS_DisplayResponseType: TGUID = '{43D0660B-0E60-4B38-B9AC-CEBEBEBCF9E4}';
	CLASS_OutputResultType: TGUID = '{31B907B4-5161-48D2-99A1-FAABC96C5E36}';
	CLASS_ResponseType: TGUID = '{883C5CBB-528A-44AD-A6D1-1B90A7B28CAE}';
	CLASS_DisplayRequestType: TGUID = '{F60A668F-5A41-4A12-B643-D8BAD083B73C}';
	CLASS_DisplayOutputType: TGUID = '{B0F91E74-09C2-45C5-8347-B6B0A0A83B59}';
	CLASS_OutputContentType: TGUID = '{C28AD570-7647-4211-B97F-886E0CE9097D}';
	CLASS_PredefinedContentType: TGUID = '{C73D131A-1CA0-4E98-AFC3-A5994FE5ED77}';
	CLASS_OutputTextType: TGUID = '{333E44ED-23A5-4785-85A2-3D768008AFDD}';
	CLASS_OutputBarcodeType: TGUID = '{9C22191A-9EE2-4D33-9A9D-B3FC8A7DA99D}';
	CLASS_MenuEntryType: TGUID = '{3CD65096-51EE-4A45-A566-78F53AD5A520}';
	CLASS_AdminRequestType: TGUID = '{9BCE2DBA-85D3-4445-B376-CAC00FCC628C}';
	CLASS_AdminResponseType: TGUID = '{16EF01F8-D2C2-467C-9B49-44270269D85B}';
	CLASS_AllowedProductType: TGUID = '{A004B525-2C3A-4157-8E35-E9E5C1C8293F}';
	CLASS_AmountsReqType: TGUID = '{264E8971-4882-4D4F-9C2B-B40D72AB4C07}';
	CLASS_AmountsRespType: TGUID = '{E589C871-43D3-4694-AE22-A56D39CFC1BD}';
	CLASS_AreaSizeType: TGUID = '{BBC68825-CE56-4E0B-8280-62585FCBC975}';
	CLASS_BalanceInquiryRequestType: TGUID = '{569FF189-5289-4C6E-8A7B-CA890AD7FB29}';
	CLASS_PaymentAccountReqType: TGUID = '{E2ED0865-53CF-4668-A398-9E28EC35BBC4}';
	CLASS_TransactionIdentificationType: TGUID = '{D301999F-69E3-4C95-8657-CD2BC881F07A}';
	CLASS_PaymentInstrumentDataType: TGUID = '{6DFBABA7-5BE3-4E24-BFEA-D54BD1411833}';
	CLASS_CardDataType: TGUID = '{9B8D83AD-1497-4801-AF7E-6469840EDCA3}';
	CLASS_ContentInformationType: TGUID = '{A9E4D467-F1C8-461E-B858-9EB35AE966C1}';
	CLASS_AuthenticatedDataType: TGUID = '{42330E08-577B-47C0-90A2-1DC8611A1186}';
	CLASS_KEKType: TGUID = '{23E5DC4B-76BB-45B0-BCE4-FBCE4E91BCE4}';
	CLASS_KEKIdentifierType: TGUID = '{503967B2-F8F3-40D1-92D7-480DB0951E2D}';
	CLASS_AlgorithmIdentifier: TGUID = '{D4454159-6E9F-400E-BED5-D7DD8F0BCFF4}';
	CLASS_ParameterType: TGUID = '{8D6D5D2E-80B0-4DF6-B3B1-0A08B84AEFF1}';
	CLASS_KeyTransportType: TGUID = '{02272052-3814-4322-872A-63797867FCE3}';
	CLASS_RecipientIdentifierType: TGUID = '{859A4302-F007-48A5-957A-613B358B804F}';
	CLASS_IssuerAndSerialNumberType: TGUID = '{D12E27EC-B131-4472-9022-2C81B99345DB}';
	CLASS_RelativeDistinguishedNameType: TGUID = '{F2327E22-062C-41AD-9B82-77522C4209FD}';
	CLASS_EncapsulatedContentType: TGUID = '{4E568011-9E6E-4FDB-B6D6-BB7CF70FBCA6}';
	CLASS_DigestedDataType: TGUID = '{6C9A3C00-3AAD-4484-ACA4-BA3E2FDF9303}';
	CLASS_EnvelopedDataType: TGUID = '{92DC2CC4-1DE9-4377-85BE-32807E6EAA6F}';
	CLASS_EncryptedContentType: TGUID = '{572A9EAC-6B8F-4EC0-AB56-A6485D63A09A}';
	CLASS_NamedKeyEncryptedDataType: TGUID = '{DE2993F5-72C2-4BE3-9DE9-7D9BE78EEE0B}';
	CLASS_SignedDataType: TGUID = '{63A599FF-4B54-4D33-B425-68A213E2A51B}';
	CLASS_SignerType: TGUID = '{2DDBD19B-DD10-4FEF-93E7-979C08FD63C1}';
	CLASS_SignerIdentifierType: TGUID = '{6B26B1CE-7DA4-4EE0-B5F2-2E2B46A01692}';
	CLASS_SensitiveCardDataType: TGUID = '{9D8AEB69-71C9-4CCD-944D-6D9C05F48A4E}';
	CLASS_TrackDataType: TGUID = '{2F3078C0-407F-442B-9717-90C788832C8E}';
	CLASS_PaymentTokenType: TGUID = '{DC02E233-0881-4536-852A-1E7A5A5B9E23}';
	CLASS_CustomerOrderType: TGUID = '{84295B7A-8A06-4ADF-A675-B3EA5ED018A9}';
	CLASS_CheckDataType: TGUID = '{64A94F8C-1FA5-4A64-AB3B-AB5F556F7DBC}';
	CLASS_MobileDataType: TGUID = '{3DBDD243-A74F-4007-AF2C-1AC50A0BD7D8}';
	CLASS_GeolocationType: TGUID = '{56B8174D-B18D-4D06-8C91-590ADCCC4DC6}';
	CLASS_GeographicCoordinatesType: TGUID = '{4B691C52-3EBF-4127-8000-CE4D098F681F}';
	CLASS_UTMCoordinatesType: TGUID = '{01B49D4F-0939-42E2-956B-AB43EF8F21F3}';
	CLASS_SensitiveMobileDataType: TGUID = '{664D352E-6DEB-4510-BE4C-CC5FA0F0F188}';
	CLASS_LoyaltyAccountReqType: TGUID = '{79AA9383-0DAE-4BA5-AACB-BF5F5C51391A}';
	CLASS_LoyaltyAccountIDType: TGUID = '{B4D709BE-7D61-4CA2-A09F-9D107D3F16D6}';
	CLASS_BalanceInquiryResponseType: TGUID = '{BA43EBB5-6141-4066-8757-E0FF69E53FE5}';
	CLASS_PaymentAccountStatusType: TGUID = '{6DE912F1-2653-4978-99EC-EC85E4F8974C}';
	CLASS_PaymentAcquirerDataType: TGUID = '{A90DCCD0-833A-4156-BE6D-DC9EFDC2F85A}';
	CLASS_LoyaltyAccountStatusType: TGUID = '{E13DF0AD-967D-42F2-A8CD-48EDB940A6A8}';
	CLASS_LoyaltyAccountType: TGUID = '{5504439B-44F6-4ACA-905A-DEA868348266}';
	CLASS_BatchRequestType: TGUID = '{EDE7F909-0757-45D5-AD8E-A0F97E617038}';
	CLASS_TransactionToPerformType: TGUID = '{308AB713-3219-43AA-A0C2-7BCE89A1C6D3}';
	CLASS_LoyaltyRequestType: TGUID = '{A095140E-F307-4A34-8733-5854348CF9B5}';
	CLASS_SaleDataType: TGUID = '{13D3B511-32CA-4697-BAD6-709C6A8A8856}';
	CLASS_SaleTerminalDataType: TGUID = '{796DB62D-BEC4-4BE0-9FEF-D85CBE431DD0}';
	CLASS_SaleProfileType: TGUID = '{C2778BFB-08C0-4412-8D30-E01E7FC4F318}';
	CLASS_SponsoredMerchantType: TGUID = '{64ECFDB9-4636-4FB8-8B5D-CEA356D69D14}';
	CLASS_SaleToIssuerDataType: TGUID = '{5FF880C8-1782-4A80-A372-BBD0048FDF7E}';
	CLASS_LoyaltyTransactionType: TGUID = '{1E2A6C83-D600-4025-A23F-4B5941DAD0EC}';
	CLASS_OriginalPOITransactionType: TGUID = '{68643179-8FD9-428B-8326-A9F807097993}';
	CLASS_TransactionConditionsType: TGUID = '{1BDED12C-168A-4B89-A924-965A1E3A95F9}';
	CLASS_SaleItemType: TGUID = '{3BFD94DC-63F5-43A5-9F68-AC0A204E5CD6}';
	CLASS_LoyaltyDataType: TGUID = '{6B0FFCA4-EEC0-4DF8-87AE-762508F5C96E}';
	CLASS_LoyaltyAmountType: TGUID = '{84E4FD1D-921F-41D4-ACC9-0E32B792A7F7}';
	CLASS_PaymentRequestType: TGUID = '{938CDA4D-5756-41FB-9E0E-26439790A2AD}';
	CLASS_PaymentTransactionType: TGUID = '{7D02920A-AE86-4918-9E49-C30B41B73471}';
	CLASS_PaymentDataType: TGUID = '{2365FE42-E0FC-4EE1-A758-E380FFAB9AF4}';
	CLASS_InstalmentType: TGUID = '{9C1966A0-A488-4809-9BF5-0F6AA2E72F22}';
	CLASS_ReversalRequestType: TGUID = '{78CDBE8A-85F8-4BFB-AC76-618FAA498EC5}';
	CLASS_BatchResponseType: TGUID = '{3BFF7936-4B93-4E41-8B7B-161CC2BFA866}';
	CLASS_PerformedTransactionType: TGUID = '{2C9ED3CC-E80C-42A8-A2E4-0AAB95E9B716}';
	CLASS_POIDataType: TGUID = '{00F0D126-6BFA-44FC-ABCD-CAB4AEF4C3C8}';
	CLASS_PaymentResultType: TGUID = '{F6D4D2E9-C572-4318-A929-07DD84179250}';
	CLASS_CurrencyConversionType: TGUID = '{BAEC08C3-A299-461D-A194-6726D89662C9}';
	CLASS_AmountType: TGUID = '{FE72E6CE-B1DE-4CB1-849E-67693B410F5B}';
	CLASS_CapturedSignatureType: TGUID = '{EB23B7F9-B1FD-4071-B6C6-2DEE2EB1B11F}';
	CLASS_SignaturePointType: TGUID = '{FAE4A419-19FB-4BF3-AACE-96417B27B90E}';
	CLASS_LoyaltyResultType: TGUID = '{7185C962-BB15-40DA-A829-31922BB5D96A}';
	CLASS_LoyaltyAcquirerDataType: TGUID = '{669156BE-5F73-42CC-81AF-BBA7EEE9F4A7}';
	CLASS_RebatesType: TGUID = '{5B026042-E35A-419B-A125-330CC78858E1}';
	CLASS_SaleItemRebateType: TGUID = '{88F49674-B676-410E-A843-13C0D7DA7C50}';
	CLASS_CardAcquisitionRequestType: TGUID = '{9E1F7EDD-DD10-4342-B50B-9BB732213DFE}';
	CLASS_CardAcquisitionTransactionType: TGUID = '{5049932A-D47B-407B-BC2E-8912A0ED5604}';
	CLASS_CardAcquisitionResponseType: TGUID = '{ED87336B-2BB1-4A3F-A115-5CDF8A570CA8}';
	CLASS_CardholderPINType: TGUID = '{030EBC03-C32F-436F-93D5-22A91B88C7CE}';
	CLASS_CardReaderAPDURequestType: TGUID = '{083FE972-D990-4860-B7EC-F66B4AFEAD79}';
	CLASS_CardReaderAPDUResponseType: TGUID = '{BB458D10-AD10-47F0-9C66-F321F4522B6D}';
	CLASS_CardReaderInitRequestType: TGUID = '{6A36CD76-EC04-4EB5-B99E-355F8DDAF238}';
	CLASS_CardReaderInitResponseType: TGUID = '{D6D9E060-6BDF-4D02-924E-A2AC97223B33}';
	CLASS_ICCResetDataType: TGUID = '{2D384F8A-B954-4969-86F7-7B3B440E93AD}';
	CLASS_CardReaderPowerOffRequestType: TGUID = '{DACADFC0-059E-4D31-BA0F-774C251F32B0}';
	CLASS_CardReaderPowerOffResponseType: TGUID = '{0CFFE966-532D-4A9D-801A-D7689B8D2D13}';
	CLASS_CashHandlingDeviceType: TGUID = '{70702A3F-89AD-4C99-A932-B797CE3A6848}';
	CLASS_CoinsOrBillsType: TGUID = '{55E82D0A-88A7-43D2-827A-56F884E81A6F}';
	CLASS_DiagnosisRequestType: TGUID = '{D243DBD4-2A4F-4637-A073-79603090F074}';
	CLASS_DiagnosisResponseType: TGUID = '{9288F46E-9FAF-4A05-812D-9A173EAA05C7}';
	CLASS_POIStatusType: TGUID = '{040F01D2-8ED0-49A4-BBF2-CF9EBE92188A}';
	CLASS_HostStatusType: TGUID = '{F72E8C07-0171-47DB-AAD3-5DD5782D2A7D}';
	CLASS_EnableServiceRequestType: TGUID = '{D2F07747-0F7E-4202-A5BC-D02D91247760}';
	CLASS_EnableServiceResponseType: TGUID = '{0FB55627-27EE-45EF-AA7C-F570536D7563}';
	CLASS_EventNotificationType: TGUID = '{AE6D7ABF-75D0-4966-B4E2-0129767ACA74}';
	CLASS_GetTotalsRequestType: TGUID = '{BF648A06-830D-4068-961C-555D078FE6EB}';
	CLASS_TotalFilterType: TGUID = '{73ECDA01-B478-4EB6-B156-2CE222E84D24}';
	CLASS_GetTotalsResponseType: TGUID = '{FDC8E419-F451-4C3F-8EC5-4B2248B1B515}';
	CLASS_TransactionTotalsType: TGUID = '{74531072-B819-4540-92A2-8FDF93AA34E2}';
	CLASS_PaymentTotalsType: TGUID = '{E8FBA01C-20F9-4174-A99C-44BBDF410536}';
	CLASS_LoyaltyTotalsType: TGUID = '{10B16D82-C1DA-435A-8138-9FCA39B54915}';
	CLASS_InputType: TGUID = '{CB71FEB2-15D8-4C7E-9C60-7F70A896D042}';
	CLASS_InputDataType: TGUID = '{EF0914EF-C1B0-4566-B7BE-58DA7111315C}';
	CLASS_InputRequestType: TGUID = '{CC6BF511-45A2-4746-9976-E20177007AB8}';
	CLASS_InputResponseType: TGUID = '{0C392008-9F03-4358-81A1-4B28F4EEA21B}';
	CLASS_InputResultType: TGUID = '{C649D64F-4C92-4CA2-8EBD-B15928B66AC1}';
	CLASS_InputUpdateType: TGUID = '{C9DFD96F-5476-43A1-8FC7-2E734798AC75}';
	CLASS_LoginRequestType: TGUID = '{B09B1286-871E-437F-BE8C-89A6FD1E6024}';
	CLASS_SaleSoftwareType: TGUID = '{FD120E7E-9F04-4C37-A248-11F16F672664}';
	CLASS_LoginResponseType: TGUID = '{F5B3A23A-9FD1-4DF2-9B9A-7DDA8FE27BBB}';
	CLASS_POISystemDataType: TGUID = '{09E9E4CA-DCD1-44AD-BE45-A36F88E31789}';
	CLASS_POISoftwareType: TGUID = '{26FB0B94-D8DB-4CFA-900D-08B48A4EDE28}';
	CLASS_POITerminalDataType: TGUID = '{8D664167-240C-4901-AAA1-E90BABFE3EE1}';
	CLASS_POIProfileType: TGUID = '{FEA86C78-6CB1-4DB8-A206-8329A3A318ED}';
	CLASS_LogoutRequestType: TGUID = '{D9B3B1EB-2280-4662-B3F3-483D88436CFC}';
	CLASS_LogoutResponseType: TGUID = '{7633E99E-BF9F-40F9-BEAA-B0BF38F0077C}';
	CLASS_LoyaltyResponseType: TGUID = '{4BA077C0-A818-4D75-A6F6-F0A5841753AE}';
	CLASS_PaymentReceiptType: TGUID = '{4805BC75-3250-44E7-A49A-287F560C90EF}';
	CLASS_MessageHeaderType: TGUID = '{3AA24BAE-12B2-4660-8A11-3821B226C0C5}';
	CLASS_PaymentResponseType: TGUID = '{A4C9331A-1ECA-4962-BE9E-A906141B2598}';
	CLASS_PINRequestType: TGUID = '{22AF83DD-8FFA-4774-A723-7BF5F5854953}';
	CLASS_PINResponseType: TGUID = '{D00AF1D3-589E-450A-9A38-67E2F85D3B1C}';
	CLASS_PrintOutputType: TGUID = '{5153D58D-2B35-4101-A4B8-7894C90AE368}';
	CLASS_PrintRequestType: TGUID = '{548AB75A-FD66-4284-BE52-5D7CC461CFF2}';
	CLASS_PrintResponseType: TGUID = '{0E6ED6BF-1C33-4446-9481-FA32BE9ED3B1}';
	CLASS_ReconciliationRequestType: TGUID = '{95033377-2200-428A-BDA6-AA86F704FCF3}';
	CLASS_ReconciliationResponseType: TGUID = '{1F8A0F6A-3FF7-4E80-868D-92CF9BC4E12E}';
	CLASS_RepeatedMessageResponseType: TGUID = '{2EDAC823-0FD6-4DD2-B0CF-666CE4286FF1}';
	CLASS_ReversalResponseType: TGUID = '{63D4BC03-0AAC-4297-995E-FC8E29E2C2E4}';
	CLASS_StoredValueResponseType: TGUID = '{CF6334D0-BFCD-42A3-A328-12722FBA42AD}';
	CLASS_StoredValueResultType: TGUID = '{D2ADC317-3990-4E89-92D3-2E23FBCFEC81}';
	CLASS_StoredValueAccountStatusType: TGUID = '{53677352-CBD0-492B-A385-CADDBBA89B96}';
	CLASS_StoredValueAccountIDType: TGUID = '{5C184F51-5402-4CC8-99F2-4DB8270C24A0}';
	CLASS_SoundContentType: TGUID = '{B19FB706-AD4A-4911-95DB-323A02708A34}';
	CLASS_SoundRequestType: TGUID = '{72499CAF-653C-4BA0-915E-84F3028AB645}';
	CLASS_SoundResponseType: TGUID = '{B6B7D7C0-8460-4B46-AA76-5178111264C2}';
	CLASS_StoredValueDataType: TGUID = '{1AC0CE84-D5AC-4823-A8E9-B31027002FE4}';
	CLASS_StoredValueRequestType: TGUID = '{C5FF1EDE-AA63-4098-8D0B-3DF9F7D2B5B6}';
	CLASS_TransmitRequestType: TGUID = '{5E282415-E937-4BCA-8801-7983919DE4AD}';
	CLASS_TransmitResponseType: TGUID = '{C46A82F6-E834-44B9-86D6-F52882864CD9}';
	CLASS_TransactionStatusRequestType: TGUID = '{DA659E5F-7B33-4A4D-845E-FFB7B375AED2}';
	CLASS_TransactionStatusResponseType: TGUID = '{2E02AE60-34DD-42A1-83CA-2A96CC55F29C}';
	CLASS_SaleToPOIRequest: TGUID = '{7BD8C0E3-49B7-47CB-8A87-13DB90618F21}';
	CLASS_SaleToPOIResponse: TGUID = '{B2B31761-D422-486C-936C-C6FFC739B883}';
	CLASS_IssuerType: TGUID = '{2AF0999F-B25F-48DE-BDC1-9203EDDBAE84}';
	IID_INexoActivity: TGUID = '{1ADB3E04-8743-492B-94C5-4F973C27B951}';
	CLASS_NexoActivity: TGUID = '{0010366D-C2CC-4685-A52A-9716D59740F3}';
	IID__NexoMessage: TGUID = '{7DA4FB59-22EF-399D-B3B4-1E0397E4CCF5}';
	CLASS_NexoDictionaryOfMessages: TGUID = '{43BC3C8F-1F6E-3B2B-8E32-489B13D4A54F}';
	IID__NexoPartner: TGUID = '{59BB3895-65B2-3942-940E-6DD04810656E}';
	IID__NexoEndPoint: TGUID = '{5339D5FB-D6F3-3710-B640-21CEF51B9F46}';
	CLASS_NexoListOfEndPoints: TGUID = '{2252B81E-10A6-35B6-B492-FCE29AC8B475}';
	CLASS_NexoDictionaryOfEndPoints: TGUID = '{65C229BE-E83B-3463-B6A4-EE77FC91E09D}';
	IID__NexoSession: TGUID = '{22FDEE0C-B93F-3CF0-A2A2-BA85F2288CED}';
	CLASS_NexoListOfSessions: TGUID = '{0FEE6C26-9619-3CFB-A3D3-51641DA9B891}';
	CLASS_NexoDictionaryOfSessions: TGUID = '{A8275AEE-0056-39D1-BB1D-2BE395BD34BD}';
	CLASS_NexoListOfNexoKeys: TGUID = '{D26291BF-5C98-3244-9FF1-87C84BD557DF}';
	CLASS_NexoDictionaryOfNexoKeys: TGUID = '{BAAF970B-9DF9-3779-BE98-A1BC9EB15D80}';
	IID_INexoAnyMessage: TGUID = '{91849B50-192A-4811-8BFA-A506BD74E778}';
	CLASS_NexoListOfAnyMessages: TGUID = '{B8049E14-90C8-30EB-A7F7-E628BCABD702}';
	CLASS_NexoDictionaryOfAnyMessages: TGUID = '{DE594255-D7F2-3ACF-8EDE-F4EFC2F8586A}';
	IID__NexoDelegates: TGUID = '{9D53AE2A-5E06-352F-A630-F76256357105}';
	CLASS_NexoAcceptedCommands: TGUID = '{ACEA2DC0-F969-3BAF-BC4F-644E34898CFF}';
	IID_INexoItem: TGUID = '{B7773C1A-8091-4B2A-A54E-74E686E5F91E}';
	CLASS_NexoItem: TGUID = '{390237C2-5337-4EBE-8B1E-E395611FEC82}';
	IID__NexoKey: TGUID = '{89CFED27-307C-3ADA-BBD6-40800D474F0F}';
	IID_INexoAdmin: TGUID = '{9A3C60DD-2D50-4515-9762-4632AA45BBC5}';
	IID_INexoObject: TGUID = '{70469D2A-4EFD-4023-82BB-7F6D382A5D83}';
	IID_INexoBalanceInquiry: TGUID = '{CDC42997-48E2-4D4A-9DD4-4CEBCA16652B}';
	CLASS_NexoBalanceInquiry: TGUID = '{1696448C-1139-4D01-9BFA-65BAD9952ED9}';
	IID_INexoBatch: TGUID = '{0AB85F76-922F-46EF-8DCB-A050E7030921}';
	CLASS_NexoBatch: TGUID = '{EBBB6BA9-552F-40AC-92E2-7CB239988CF8}';
	IID_INexoCardAcquisition: TGUID = '{85FADEEB-5156-405B-87EE-54D9AE22E316}';
	CLASS_NexoCardAcquisition: TGUID = '{041378C7-7530-40FF-865C-5B2F92661375}';
	IID_INexoCardReaderInit: TGUID = '{424AC59E-6B02-46F1-97AD-F4DAF1BEBDCE}';
	CLASS_NexoCardReaderInit: TGUID = '{0A1903C6-2989-4D33-AE3E-82ABDACD894F}';
	IID_INexoCardReaderAPDU: TGUID = '{CB4E4768-D56A-4105-B780-004E97929361}';
	CLASS_NexoCardReaderAPDU: TGUID = '{18285838-CA0F-41E9-A69A-CF217A99A3E3}';
	IID_INexoCardReaderPowerOFF: TGUID = '{70C8C7A9-62C2-4729-929C-8163614D09DA}';
	CLASS_NexoCardReaderPowerOFF: TGUID = '{A1BE7839-E928-45FA-8CD5-60B90C5F306B}';
	IID_INexoDeviceDisplay: TGUID = '{F6DC1D06-11C7-4814-9326-E68C4A9EBF4E}';
	CLASS_NexoDeviceDisplay: TGUID = '{B96EFC99-00D2-4AFD-9622-05C2983AB9AD}';
	IID_INexoDeviceInputUpdate: TGUID = '{529FFD3D-658C-49C5-85A3-66799AAA5E34}';
	CLASS_NexoDeviceInputUpdate: TGUID = '{64462157-3AE0-441D-B7E9-71B2B8892A66}';
	IID_INexoDeviceSound: TGUID = '{A3534554-E05D-4A11-BB41-88DEC0B20EE4}';
	CLASS_NexoDeviceSound: TGUID = '{8A01F960-7FC2-49C6-B512-37C246A4512C}';
	IID_INexoEnableService: TGUID = '{459D4296-691D-48D6-84E5-F9069D5B85D6}';
	CLASS_NexoEnableService: TGUID = '{BD5687D5-EF40-47B1-B599-EEFB31BBF532}';
	IID_INexoGetTotals: TGUID = '{ED6FDAD1-7D79-4DA6-8F4F-35BCAFADF772}';
	CLASS_NexoGetTotals: TGUID = '{6AC33EB7-F9DC-4BA9-968D-536CC95470AA}';
	IID_INexoLoyalty: TGUID = '{C69EE5BC-630A-4D1F-990B-0D0984E07F08}';
	CLASS_NexoLoyalty: TGUID = '{B1DB0498-3008-4E26-B04D-1833C36147A4}';
	IID_INexoPayment: TGUID = '{BD2E9B0D-1DE8-4D77-A974-0E6078206FAA}';
	CLASS_NexoPayment: TGUID = '{0843A59A-874F-432C-B9C8-BD72757D4979}';
	IID_INexoPIN: TGUID = '{877BE257-F158-4A4F-9646-6080B193749B}';
	CLASS_NexoPIN: TGUID = '{E86AFFEC-3811-41BD-87D5-EBF9B85A4FD0}';
	IID_INexoReconciliation: TGUID = '{7ADA4C0C-EEAD-4B53-8089-A8B7491D1FB6}';
	CLASS_NexoReconciliation: TGUID = '{C09916A4-9B04-4331-BB35-C845E17E6FD0}';
	IID_INexoStoredValue: TGUID = '{2F3C26FD-174D-45BC-86A4-981B953C6611}';
	CLASS_NexoStoredValue: TGUID = '{44CCE01A-FB6C-4C1F-912B-D46DED85B1BE}';
	IID_INexoTransmit: TGUID = '{8314ADA0-DD56-497D-9FFA-02A86CB305CA}';
	CLASS_NexoTransmit: TGUID = '{EF2554E1-71FD-45F0-9B44-40FBD13BA213}';
	IID_INexoAbort: TGUID = '{D71CE22F-0AA1-4792-9857-864A5E29A2BE}';
	CLASS_NexoAbort: TGUID = '{01101E72-06B5-47BA-B305-611BEEAF3AE4}';
	IID_INexoDiagnosis: TGUID = '{E8C62FFB-C292-4592-A538-8283E5807DA1}';
	CLASS_NexoDiagnosis: TGUID = '{5223C33A-11DD-4FE4-BA89-22A83A6390B7}';
	IID_INexoEvent: TGUID = '{389CD3D9-3950-4A61-B90E-BC9EB85E0008}';
	CLASS_NexoEvent: TGUID = '{C30F6D21-9370-494D-B7D8-8BE6A945AA07}';
	IID_INexoTransactionStatus: TGUID = '{18C58418-DF2D-4CF4-B394-7C055526C73A}';
	CLASS_NexoTransactionStatus: TGUID = '{A788EBE5-CF20-48BB-9E1E-2D9FF23BCE8A}';
	IID_INexoResponseType: TGUID = '{5987CC8F-70A4-4FB9-BCEA-71A706CA27C9}';
	CLASS_NexoResponseType: TGUID = '{9C9B6CF4-A8B9-4AC1-99EC-6B940F5B09E1}';
	IID_INexoDeviceInput: TGUID = '{2CD13AE4-4DF6-47EC-8487-0BBB017D37ED}';
	CLASS_NexoDeviceInput: TGUID = '{AD272143-7CBD-4C8B-A766-EEF8B28197C8}';
	IID_INexoDevicePrint: TGUID = '{F9BC46A7-AA77-4B4B-81CC-1348E2E4FABC}';
	CLASS_NexoDevicePrint: TGUID = '{C07B9790-C8C5-47C2-813C-C218F5545EF0}';
	IID_INexoLogin: TGUID = '{4B77D218-D00F-4C13-9652-F0E9E11F3BF3}';
	CLASS_NexoLogin: TGUID = '{FC9002AC-12F5-4611-8DBF-8ADAFFA39236}';
	IID_INexoLogout: TGUID = '{37A4DF49-8D4A-43E6-BAAB-FDFD7C550AB9}';
	CLASS_NexoLogout: TGUID = '{A1FC1414-000B-4684-94A3-8EE45CD223B1}';
	CLASS_NexoAdmin: TGUID = '{E663E917-6B46-4C38-9DDB-30AF8E955CF2}';
	CLASS_NexoObject: TGUID = '{667D198F-874E-457B-9641-C43933F336DB}';
	IID_INexoReversal: TGUID = '{DBC11F2F-A231-47BB-9CD1-0B36872B6BB4}';
	CLASS_NexoReversal: TGUID = '{9DF21BBA-CF43-497C-B0AD-54647E3D8918}';
	IID_INexoObjectToProcess: TGUID = '{4DA003CE-49BF-4831-83EB-3DAEA2072370}';
	CLASS_NexoObjectToProcess: TGUID = '{195F55CA-64B2-4E61-A1DB-9964557DE450}';
	IID_INexoTextString: TGUID = '{81DBF2A7-F56C-4316-A7DA-84A69DD10193}';
	CLASS_NexoTextString: TGUID = '{8F565B94-FC31-4938-BB9B-3628D74AA348}';
	IID_INexoBooleanType: TGUID = '{54927BBD-044C-4FF6-90B9-9EF4C97DF13E}';
	CLASS_NexoBoolean: TGUID = '{C9E4530A-BCB7-437D-B814-D3BF11026D07}';
	IID_INexoInteger: TGUID = '{D54E0EEC-3021-430A-958A-0CE8CBAF28CF}';
	CLASS_NexoInteger: TGUID = '{95B80346-5CA9-4F43-98E1-58B4A7C02736}';
	IID_INexoDecimal: TGUID = '{D6A6402E-7675-4B58-A192-1E5831A63308}';
	CLASS_NexoDecimal: TGUID = '{6B3992EA-EA2A-40CE-8D32-759442C3733F}';
	CLASS_NexoSimpleAmount: TGUID = '{7140D640-7DEF-48A8-8C51-F348849BB383}';
	IID_INexoLabel: TGUID = '{B1212D60-971B-4FB3-BE41-EC87DD743EFB}';
	CLASS_NexoLabel: TGUID = '{313ED1FA-F6E9-402D-803C-F6C2A97AEAB2}';
	IID_INexoEnumeration: TGUID = '{44DD3DF5-C824-4E2D-8727-9F1856EB8019}';
	CLASS_NexoEnumeration: TGUID = '{DCE824A5-EF4D-4DDF-9F28-ECC997E912B8}';
	IID_INexoCluster: TGUID = '{CF6E62CA-537D-4545-A336-673D288B6D58}';
	CLASS_NexoCluster: TGUID = '{8E5E348A-9E41-44B6-AA24-366B1E0BFAEF}';
	IID_INexoLengthDrivenTextString: TGUID = '{380807B4-5276-443B-A8E8-0D88A51199E8}';
	CLASS_NexoLengthDrivenTextString: TGUID = '{D9CF8D0F-FEBB-4FE8-A775-91C0BB6DBF3D}';
	IID_INexoDigitString: TGUID = '{4DEDF6AC-8EF9-41EC-92CD-51A2E7E5FC6F}';
	CLASS_NexoDigitString: TGUID = '{09364674-1CA8-4448-8099-35C44F32305E}';
	IID_INexoISOData: TGUID = '{342FE081-D5F0-475B-AEC6-6374979BBDC7}';
	CLASS_NexoISOCurrency3A: TGUID = '{D778424B-0BE8-4907-9998-FFBEE38A9D9D}';
	CLASS_NexoISOCountry3A: TGUID = '{969B3F3F-C827-4244-83AE-0CA5A56CB4DA}';
	CLASS_NexoISOLanguage2A: TGUID = '{6D548B98-DCA5-42B3-8D67-E2796A47AB40}';
	IID_INexoISODateTime: TGUID = '{6EA56916-0B9F-48D1-B726-1F26C1897724}';
	CLASS_NexoISODateTime: TGUID = '{91C85C90-6D2B-4762-88BE-B96A9C275DE9}';
	IID_INexoISODate: TGUID = '{880DF188-0670-419D-8E0D-2170D0D537C9}';
	CLASS_NexoISODate: TGUID = '{29E0D16F-F912-4176-BAFB-41A5444F4B10}';
	IID_INexoNonStringType: TGUID = '{C7CAA85A-2A0D-49A7-925A-48A122D76C30}';
	CLASS_NexoByteSequence: TGUID = '{5E5B89AB-BC0A-405D-8DDC-F35C4E92D9A6}';
	IID_INexoCurrency: TGUID = '{5F12D07E-EA73-4E87-98C6-DDD3A38888C8}';
	CLASS_NexoCurrency: TGUID = '{DE4FC2B3-900F-4128-8330-8881A0C36275}';
	CLASS_NexoCurrencyEUR: TGUID = '{64799C07-C801-4276-BF3A-E6AB89A691B3}';
	CLASS_NexoCurrencyUSD: TGUID = '{29167784-C41B-47FF-B1EF-DD855D277C35}';
	CLASS_NexoCurrencyGBP: TGUID = '{03861903-A788-40EF-82A1-27B39C2D57E8}';
	CLASS_NexoCurrencyCHF: TGUID = '{DE5411DE-BB56-478C-94CD-32E7CD95EC97}';
	IID__NexoMessageType: TGUID = '{9B63F343-CE34-348E-ADBB-ADF5FDC28172}';
	IID__NexoMessageClass: TGUID = '{5014AC46-3B6B-35D6-9EAB-308C612BE1BD}';
	IID__NexoMessageCategory: TGUID = '{56E803F5-FC60-381C-B78C-129D973A9A94}';
	IID__NexoTerminalEnvironment: TGUID = '{22389591-8FAC-3D5C-8696-7F02CE9D1A28}';
	IID__NexoSaleCapabilities: TGUID = '{27EE1457-9C5B-364B-A5B0-6F8DEA5DFD90}';
	IID__NexoProtocolVersion: TGUID = '{80FE31BB-AA27-3228-9E9F-ACCBC7BEC91E}';
	CLASS_NexoSupportedProtocolVersions: TGUID = '{8D710211-1D18-3276-9756-999B78051BA8}';
	IID__NexoID: TGUID = '{18471494-0F7D-3761-AA8A-4234DEEE46E0}';
	IID__NexoServiceID: TGUID = '{59B3973C-67DE-3226-950C-3F1AF7CA8CD9}';
	IID__NexoDeviceID: TGUID = '{71E7118B-B956-330C-8CF3-985FF48C8383}';
	IID__NexoPOIID: TGUID = '{054197A2-96CE-3280-A396-9A9647E69093}';
	IID__NexoSaleID: TGUID = '{42F36241-B65E-3279-8AB5-B0FDF51E2007}';
	IID__NexoOperatorLanguage: TGUID = '{E71BBF4C-00C1-3A08-8FA7-D6AC9B58C165}';
	IID__NexoResult: TGUID = '{4D8B2E36-3BE3-3AAE-820E-2AF11CA82E64}';
	IID__NexoErrorCondition: TGUID = '{3A6C71B5-A08C-315D-B127-D96E2E2EAC09}';
	IID__NexoAdditionalResponse: TGUID = '{B44411B6-3F45-333F-B166-1A295EED6A6C}';
	IID__NexoGlobalStatus: TGUID = '{3AC0D87E-F614-3958-AF82-0EDD3E6D9179}';
	IID__NexoCertificationCode: TGUID = '{02DB9CB2-8343-3689-AB49-DC0FB8415C72}';
	IID__NexoSoftwareVersion: TGUID = '{451A06B3-89A7-3712-9763-C753FC8885C3}';
	IID__NexoApplicationName: TGUID = '{9C672E07-5151-38F4-A42C-CEB77A05332B}';
	IID__NexoManufacturerID: TGUID = '{E49650FA-D915-3C41-8313-9A5A13A64420}';
	IID__NexoPOISerialNumber: TGUID = '{6681A893-77AF-3107-A6DA-DF729D6DB446}';
	IID__NexoOperatorID: TGUID = '{CD18F863-D50B-352D-B4A0-5E980F36021D}';
	IID__NexoDateTime: TGUID = '{8DF83577-AE20-31AB-B9C0-1F46E4CF327C}';
	IID__NexoInputCommand: TGUID = '{4E7620D8-37EE-3EF1-8219-5905E4C30D28}';
	IID__NexoEventToNotify: TGUID = '{F32A9C29-CEFF-3D25-9C49-F4350CA77ABB}';
	IID__NexoPaymentIntrumentType: TGUID = '{A7085E0D-4C4E-3492-9CD8-E5EEA1139AB4}';
	IID__NexoVersion: TGUID = '{765A7BDB-C986-34A3-A1F6-07606723E48D}';
	IID__NexoCurrentVersion: TGUID = '{912B7F67-674E-35E3-9F46-CCB8B8FA08A0}';
	IID_INexoRetailerServerActivity: TGUID = '{F71D22CA-428A-4B19-9412-05F8552EB8F2}';
	CLASS_NexoRetailerServerActivity: TGUID = '{E1E33479-DBC6-4537-80A0-E2F693CADF4A}';
	IID__NexoRetailerServerDatabaseConnection: TGUID = '{79C911BC-C8E4-341F-941F-73005D7CFC92}';
	IID__NexoRetailerServerDatabaseEndPoint: TGUID = '{34DA5861-39D5-35BB-B676-8F96880BB3EB}';
	IID__NexoRetailerServerDatabaseSale: TGUID = '{93971474-DEA7-3D4D-A112-61B672EE7B52}';
	IID__NexoRetailerServerDatabaseMessage: TGUID = '{144CF118-C521-3B94-89DA-D4739A0C91D2}';
	IID_INexoRetailerServerDatabaseSettings: TGUID = '{B46DBE4F-C3E3-41F8-BFE8-E10DBEF1988B}';
	CLASS_NexoRetailerServerDatabaseSettings: TGUID = '{A01C5551-4413-42D9-9612-048ACAE918B1}';
	IID__NexoRetailerServerDatabase: TGUID = '{23975521-A1F1-3C63-9519-BE95ECC5C8E2}';
	IID_INexoRetailerServerSettings: TGUID = '{0D584C15-C13E-4123-B6A6-57D27C7937D1}';
	CLASS_NexoRetailerServerSettings: TGUID = '{D2737F59-F4EE-4935-9C89-C45667C4D506}';
	IID_INexoRetailerClientHandle: TGUID = '{006465F7-6122-44C2-BBF1-166B483315E4}';
	CLASS_NexoRetailerClientHandle: TGUID = '{1AD62E2A-7807-46E1-B3E5-69ED82788C7E}';
	IID_INexoRetailerClient: TGUID = '{8B1988DB-F6AC-4B87-B874-62C58ED8E95F}';
	CLASS_NexoRetailerClient: TGUID = '{48D91DB7-8D55-4151-B04D-02985CFCF6DF}';
	IID_INexoRetailerClientSettings: TGUID = '{96259F3B-053E-45AF-B616-079CBC11690A}';
	CLASS_NexoRetailerClientSettings: TGUID = '{863D37D5-09A2-4E2B-A2D2-9C5C41017472}';
	IID_INexoRetailerClientConnectionSettings: TGUID = '{BFEFE83C-FA94-48DB-B7B9-9E1887CB6884}';
	CLASS_NexoRetailerClientConnectionSettings: TGUID = '{8005B572-3B32-429E-AE02-294C6522F5FE}';
	IID_INexoRetailerClientActivity: TGUID = '{BC3BD01B-95AA-4D4A-B2A1-3AB16231142D}';
	CLASS_NexoRetailerClientActivity: TGUID = '{6CEE4921-3084-40F3-A919-A8CF3D443A03}';
	CLASS_NexoMessage: TGUID = '{9627E26D-944A-3616-B629-8E5BC394528F}';
	CLASS_NexoPartner: TGUID = '{0DE33BBE-8AAE-305B-81B8-E61EB926D111}';
	CLASS_NexoEndPoint: TGUID = '{85FBB4A6-AD8A-3201-B7F1-C5A36015249D}';
	CLASS_NexoSession: TGUID = '{F32DB263-3C5D-3F2A-B532-3D7136C6258A}';
	CLASS_NexoDelegates: TGUID = '{89C95342-AA50-3EB5-AEA3-F6966F1ACAA4}';
	CLASS_NexoKey: TGUID = '{F63A7487-19D8-34A3-BBD6-10D7965CF7A3}';
	CLASS_NexoMessageType: TGUID = '{12346287-FD4D-33E3-A28E-8A3DDA221BE5}';
	CLASS_NexoMessageClass: TGUID = '{AF0B2194-7869-3953-989C-7801805CA3C0}';
	CLASS_NexoMessageCategory: TGUID = '{7C76F660-28E4-3610-8BEA-3A445634F5AD}';
	CLASS_NexoTerminalEnvironment: TGUID = '{2B5CEF23-5D39-31BF-BA95-1EEAF4175CD1}';
	CLASS_NexoSaleCapabilities: TGUID = '{0941493B-D50C-3B91-A690-7C104A438DA4}';
	CLASS_NexoProtocolVersion: TGUID = '{F6CD589D-E9F7-308E-AC43-5017C37FCAA9}';
	CLASS_NexoID: TGUID = '{674A37D4-BCE8-3B7A-9F49-283B59D801D7}';
	CLASS_NexoServiceID: TGUID = '{80BC5F3B-8BA5-37A0-8258-D9EB1C821012}';
	CLASS_NexoDeviceID: TGUID = '{EBB2870B-85DC-3FE4-8AAF-09954AA56665}';
	CLASS_NexoPOIID: TGUID = '{25E7A93E-71D0-3807-8F1C-6A1C7633C44F}';
	CLASS_NexoSaleID: TGUID = '{68AA22ED-91F9-33BF-AC9E-95A2BC4810A5}';
	CLASS_NexoOperatorLanguage: TGUID = '{12C59BEB-6F7F-330E-899B-391994AF7EA7}';
	CLASS_NexoResult: TGUID = '{CB6CF87B-0416-33D1-BBFB-095A491FA8ED}';
	CLASS_NexoErrorCondition: TGUID = '{4CC54198-97D4-3051-97EB-307C6471B6A8}';
	CLASS_NexoAdditionalResponse: TGUID = '{FE1FF337-E471-3004-907B-A267F3B3E131}';
	CLASS_NexoGlobalStatus: TGUID = '{B4B344C9-DD3F-3033-86E8-6281C2B25159}';
	CLASS_NexoCertificationCode: TGUID = '{1D5197BB-CFDA-38CD-A59A-0D7FCF887FDC}';
	CLASS_NexoSoftwareVersion: TGUID = '{C8B94464-FC95-3952-AD11-0F1F31E5C3BB}';
	CLASS_NexoApplicationName: TGUID = '{BA0130F6-6DE2-3F6A-8121-6366FB04E302}';
	CLASS_NexoManufacturerID: TGUID = '{DBDE0897-2DB7-328C-AF70-B37FC1BD5405}';
	CLASS_NexoPOISerialNumber: TGUID = '{8355E097-F4F6-3224-A4AC-9B22B5449D68}';
	CLASS_NexoOperatorID: TGUID = '{CFC534EC-D6E9-364F-A352-0E0D2B5CB3DF}';
	CLASS_NexoDateTime: TGUID = '{CC3ECFA7-FE62-36BC-9DB2-25838E7E62AB}';
	CLASS_NexoInputCommand: TGUID = '{E3450723-EFEB-31AC-8659-34B3F07696DB}';
	CLASS_NexoEventToNotify: TGUID = '{0ACD7F17-2229-34C1-924D-BA3A8696D736}';
	CLASS_NexoPaymentIntrumentType: TGUID = '{2C2FEC06-3A8F-30B4-9B91-240475B2AB83}';
	CLASS_NexoVersion: TGUID = '{16EA82D0-FA36-3E12-BB6A-31A11331F10C}';
	CLASS_NexoCurrentVersion: TGUID = '{7E3B5514-9A49-3FD2-9ACA-5512EA12EB8B}';
	CLASS_NexoRetailerServerDatabaseConnection: TGUID = '{F8110165-C94C-31FB-B223-A395BCD49B3D}';
	CLASS_NexoRetailerServerDatabaseEndPoint: TGUID = '{B315BF5C-2682-39B8-932F-8FA5996446B3}';
	CLASS_NexoRetailerServerDatabaseSale: TGUID = '{19162258-6265-3AD8-88A3-D7F660177B7F}';
	CLASS_NexoRetailerServerDatabaseMessage: TGUID = '{E0585C35-0226-3093-9019-575BD0DAB8FD}';
	CLASS_NexoRetailerServerDatabase: TGUID = '{CC4C507C-F458-3683-902A-5E90F98F7AF3}';

	// *********************************************************************//
	// Déclaration d'énumérations définies dans la bibliothèque de types
	// *********************************************************************//
	// Constantes pour enum AccountTypeEnumeration
type
	AccountTypeEnumeration = TOleEnum;

const
	AccountTypeEnumeration__begin = $00000000;
	AccountTypeEnumeration__none = $00000001;
	AccountTypeEnumeration_Default = $00000002;
	AccountTypeEnumeration_Savings = $00000003;
	AccountTypeEnumeration_Checking = $00000004;
	AccountTypeEnumeration_CreditCard = $00000005;
	AccountTypeEnumeration_Universal = $00000006;
	AccountTypeEnumeration_Investment = $00000007;
	AccountTypeEnumeration_CardTotals = $00000008;
	AccountTypeEnumeration_EpurseCard = $00000009;
	AccountTypeEnumeration__end = $0000000A;

	// Constantes pour enum AlignmentEnumeration
type
	AlignmentEnumeration = TOleEnum;

const
	AlignmentEnumeration__begin = $00000000;
	AlignmentEnumeration__none = $00000001;
	AlignmentEnumeration_Left = $00000002;
	AlignmentEnumeration_Right = $00000003;
	AlignmentEnumeration_Centred = $00000004;
	AlignmentEnumeration_Justified = $00000005;
	AlignmentEnumeration__end = $00000006;

	// Constantes pour enum AuthenticationMethodEnumeration
type
	AuthenticationMethodEnumeration = TOleEnum;

const
	AuthenticationMethodEnumeration__begin = $00000000;
	AuthenticationMethodEnumeration__none = $00000001;
	AuthenticationMethodEnumeration_Bypass = $00000002;
	AuthenticationMethodEnumeration_ManualVerification = $00000003;
	AuthenticationMethodEnumeration_MerchantAuthentication = $00000004;
	AuthenticationMethodEnumeration_OfflinePIN = $00000005;
	AuthenticationMethodEnumeration_OnLinePIN = $00000006;
	AuthenticationMethodEnumeration_PaperSignature = $00000007;
	AuthenticationMethodEnumeration_SecuredChannel = $00000008;
	AuthenticationMethodEnumeration_SecureCertificate = $00000009;
	AuthenticationMethodEnumeration_SecureNoCertificate = $0000000A;
	AuthenticationMethodEnumeration_SignatureCapture = $0000000B;
	AuthenticationMethodEnumeration_UnknownMethod = $0000000C;
	AuthenticationMethodEnumeration__end = $0000000D;

	// Constantes pour enum BarcodeTypeEnumeration
type
	BarcodeTypeEnumeration = TOleEnum;

const
	BarcodeTypeEnumeration__begin = $00000000;
	BarcodeTypeEnumeration__none = $00000001;
	BarcodeTypeEnumeration_EAN8 = $00000002;
	BarcodeTypeEnumeration_EAN13 = $00000003;
	BarcodeTypeEnumeration_UPCA = $00000004;
	BarcodeTypeEnumeration_Code25 = $00000005;
	BarcodeTypeEnumeration_Code128 = $00000006;
	BarcodeTypeEnumeration_PDF417 = $00000007;
	BarcodeTypeEnumeration_QRCODE = $00000008;
	BarcodeTypeEnumeration__end = $00000009;

	// Constantes pour enum CharacterHeightEnumeration
type
	CharacterHeightEnumeration = TOleEnum;

const
	CharacterHeightEnumeration__begin = $00000000;
	CharacterHeightEnumeration__none = $00000001;
	CharacterHeightEnumeration_SingleHeight = $00000002;
	CharacterHeightEnumeration_DoubleHeight = $00000003;
	CharacterHeightEnumeration_HalfHeight = $00000004;
	CharacterHeightEnumeration__end = $00000005;

	// Constantes pour enum CharacterStyleEnumeration
type
	CharacterStyleEnumeration = TOleEnum;

const
	CharacterStyleEnumeration__begin = $00000000;
	CharacterStyleEnumeration__none = $00000001;
	CharacterStyleEnumeration_Normal = $00000002;
	CharacterStyleEnumeration_Bold = $00000003;
	CharacterStyleEnumeration_Italic = $00000004;
	CharacterStyleEnumeration_Underlined = $00000005;
	CharacterStyleEnumeration__end = $00000006;

	// Constantes pour enum CharacterWidthEnumeration
type
	CharacterWidthEnumeration = TOleEnum;

const
	CharacterWidthEnumeration__begin = $00000000;
	CharacterWidthEnumeration__none = $00000001;
	CharacterWidthEnumeration_SingleWidth = $00000002;
	CharacterWidthEnumeration_DoubleWidth = $00000003;
	CharacterWidthEnumeration__end = $00000004;

	// Constantes pour enum CheckTypeCodeEnumeration
type
	CheckTypeCodeEnumeration = TOleEnum;

const
	CheckTypeCodeEnumeration__begin = $00000000;
	CheckTypeCodeEnumeration__none = $00000001;
	CheckTypeCodeEnumeration_Personal = $00000002;
	CheckTypeCodeEnumeration_Company = $00000003;
	CheckTypeCodeEnumeration__end = $00000004;

	// Constantes pour enum ColorEnumeration
type
	ColorEnumeration = TOleEnum;

const
	ColorEnumeration__begin = $00000000;
	ColorEnumeration__none = $00000001;
	ColorEnumeration_White = $00000002;
	ColorEnumeration_Black = $00000003;
	ColorEnumeration_Red = $00000004;
	ColorEnumeration_Green = $00000005;
	ColorEnumeration_Blue = $00000006;
	ColorEnumeration_Yellow = $00000007;
	ColorEnumeration_Magenta = $00000008;
	ColorEnumeration_Cyan = $00000009;
	ColorEnumeration__end = $0000000A;

	// Constantes pour enum CustomerOrderReqEnumeration
type
	CustomerOrderReqEnumeration = TOleEnum;

const
	CustomerOrderReqEnumeration__begin = $00000000;
	CustomerOrderReqEnumeration__none = $00000001;
	CustomerOrderReqEnumeration_Open = $00000002;
	CustomerOrderReqEnumeration_Closed = $00000003;
	CustomerOrderReqEnumeration_Both = $00000004;
	CustomerOrderReqEnumeration__end = $00000005;

	// Constantes pour enum DeviceEnumeration
type
	DeviceEnumeration = TOleEnum;

const
	DeviceEnumeration__begin = $00000000;
	DeviceEnumeration__none = $00000001;
	DeviceEnumeration_CashierDisplay = $00000002;
	DeviceEnumeration_CustomerDisplay = $00000003;
	DeviceEnumeration_CashierInput = $00000004;
	DeviceEnumeration_CustomerInput = $00000005;
	DeviceEnumeration__end = $00000006;

	// Constantes pour enum DocumentQualifierEnumeration
type
	DocumentQualifierEnumeration = TOleEnum;

const
	DocumentQualifierEnumeration__begin = $00000000;
	DocumentQualifierEnumeration__none = $00000001;
	DocumentQualifierEnumeration_SaleReceipt = $00000002;
	DocumentQualifierEnumeration_CashierReceipt = $00000003;
	DocumentQualifierEnumeration_CustomerReceipt = $00000004;
	DocumentQualifierEnumeration_Document = $00000005;
	DocumentQualifierEnumeration_Voucher = $00000006;
	DocumentQualifierEnumeration_Journal = $00000007;
	DocumentQualifierEnumeration__end = $00000008;

	// Constantes pour enum EntryModeEnumeration
type
	EntryModeEnumeration = TOleEnum;

const
	EntryModeEnumeration__begin = $00000000;
	EntryModeEnumeration__none = $00000001;
	EntryModeEnumeration_RFID = $00000002;
	EntryModeEnumeration_Keyed = $00000003;
	EntryModeEnumeration_Manual = $00000004;
	EntryModeEnumeration_File = $00000005;
	EntryModeEnumeration_Scanned = $00000006;
	EntryModeEnumeration_MagStripe = $00000007;
	EntryModeEnumeration_ICC = $00000008;
	EntryModeEnumeration_SynchronousICC = $00000009;
	EntryModeEnumeration_Tapped = $0000000A;
	EntryModeEnumeration_Contactless = $0000000B;
	EntryModeEnumeration_Mobile = $0000000C;
	EntryModeEnumeration__end = $0000000D;

	// Constantes pour enum ErrorConditionEnumeration
type
	ErrorConditionEnumeration = TOleEnum;

const
	ErrorConditionEnumeration__begin = $00000000;
	ErrorConditionEnumeration__none = $00000001;
	ErrorConditionEnumeration_Aborted = $00000002;
	ErrorConditionEnumeration_Busy = $00000003;
	ErrorConditionEnumeration_Cancel = $00000004;
	ErrorConditionEnumeration_DeviceOut = $00000005;
	ErrorConditionEnumeration_InsertedCard = $00000006;
	ErrorConditionEnumeration_InProgress = $00000007;
	ErrorConditionEnumeration_LoggedOut = $00000008;
	ErrorConditionEnumeration_MessageFormat = $00000009;
	ErrorConditionEnumeration_NotAllowed = $0000000A;
	ErrorConditionEnumeration_NotFound = $0000000B;
	ErrorConditionEnumeration_PaymentRestriction = $0000000C;
	ErrorConditionEnumeration_Refusal = $0000000D;
	ErrorConditionEnumeration_UnavailableDevice = $0000000E;
	ErrorConditionEnumeration_UnavailableService = $0000000F;
	ErrorConditionEnumeration_InvalidCard = $00000010;
	ErrorConditionEnumeration_UnreachableHost = $00000011;
	ErrorConditionEnumeration_WrongPIN = $00000012;
	ErrorConditionEnumeration__end = $00000013;

	// Constantes pour enum EventToNotifyEnumeration
type
	EventToNotifyEnumeration = TOleEnum;

const
	EventToNotifyEnumeration__begin = $00000000;
	EventToNotifyEnumeration__none = $00000001;
	EventToNotifyEnumeration_BeginMaintenance = $00000002;
	EventToNotifyEnumeration_EndMaintenance = $00000003;
	EventToNotifyEnumeration_Shutdown = $00000004;
	EventToNotifyEnumeration_Initialised = $00000005;
	EventToNotifyEnumeration_OutOfOrder = $00000006;
	EventToNotifyEnumeration_Completed = $00000007;
	EventToNotifyEnumeration_Abort = $00000008;
	EventToNotifyEnumeration_SaleWakeUp = $00000009;
	EventToNotifyEnumeration_SaleAdmin = $0000000A;
	EventToNotifyEnumeration_CustomerLanguage = $0000000B;
	EventToNotifyEnumeration_KeyPressed = $0000000C;
	EventToNotifyEnumeration_SecurityAlarm = $0000000D;
	EventToNotifyEnumeration_StopAssistance = $0000000E;
	EventToNotifyEnumeration_CardInserted = $0000000F;
	EventToNotifyEnumeration_CardRemoved = $00000010;
	EventToNotifyEnumeration_Reject = $00000011;
	EventToNotifyEnumeration__end = $00000012;

	// Constantes pour enum ForceEntryModeEnumeration
type
	ForceEntryModeEnumeration = TOleEnum;

const
	ForceEntryModeEnumeration__begin = $00000000;
	ForceEntryModeEnumeration__none = $00000001;
	ForceEntryModeEnumeration_RFID = $00000002;
	ForceEntryModeEnumeration_Keyed = $00000003;
	ForceEntryModeEnumeration_Manual = $00000004;
	ForceEntryModeEnumeration_File = $00000005;
	ForceEntryModeEnumeration_Scanned = $00000006;
	ForceEntryModeEnumeration_MagStripe = $00000007;
	ForceEntryModeEnumeration_ICC = $00000008;
	ForceEntryModeEnumeration_SynchronousICC = $00000009;
	ForceEntryModeEnumeration_Tapped = $0000000A;
	ForceEntryModeEnumeration_Contactless = $0000000B;
	ForceEntryModeEnumeration_CheckReader = $0000000C;
	ForceEntryModeEnumeration__end = $0000000D;

	// Constantes pour enum GenericProfileEnumeration
type
	GenericProfileEnumeration = TOleEnum;

const
	GenericProfileEnumeration__begin = $00000000;
	GenericProfileEnumeration__none = $00000001;
	GenericProfileEnumeration_Basic = $00000002;
	GenericProfileEnumeration_Standard = $00000003;
	GenericProfileEnumeration_Extended = $00000004;
	GenericProfileEnumeration__end = $00000005;

	// Constantes pour enum GlobalStatusEnumeration
type
	GlobalStatusEnumeration = TOleEnum;

const
	GlobalStatusEnumeration__begin = $00000000;
	GlobalStatusEnumeration__none = $00000001;
	GlobalStatusEnumeration_OK = $00000002;
	GlobalStatusEnumeration_Busy = $00000003;
	GlobalStatusEnumeration_Maintenance = $00000004;
	GlobalStatusEnumeration_Unreachable = $00000005;
	GlobalStatusEnumeration__end = $00000006;

	// Constantes pour enum IdentificationSupportEnumeration
type
	IdentificationSupportEnumeration = TOleEnum;

const
	IdentificationSupportEnumeration__begin = $00000000;
	IdentificationSupportEnumeration__none = $00000001;
	IdentificationSupportEnumeration_NoCard = $00000002;
	IdentificationSupportEnumeration_LoyaltyCard = $00000003;
	IdentificationSupportEnumeration_HybridCard = $00000004;
	IdentificationSupportEnumeration_LinkedCard = $00000005;
	IdentificationSupportEnumeration__end = $00000006;

	// Constantes pour enum IdentificationTypeEnumeration
type
	IdentificationTypeEnumeration = TOleEnum;

const
	IdentificationTypeEnumeration__begin = $00000000;
	IdentificationTypeEnumeration__none = $00000001;
	IdentificationTypeEnumeration_PAN = $00000002;
	IdentificationTypeEnumeration_ISOTrack2 = $00000003;
	IdentificationTypeEnumeration_BarCode = $00000004;
	IdentificationTypeEnumeration_AccountNumber = $00000005;
	IdentificationTypeEnumeration_PhoneNumber = $00000006;
	IdentificationTypeEnumeration__end = $00000007;

	// Constantes pour enum InfoQualifyEnumeration
type
	InfoQualifyEnumeration = TOleEnum;

const
	InfoQualifyEnumeration__begin = $00000000;
	InfoQualifyEnumeration__none = $00000001;
	InfoQualifyEnumeration_Status = $00000002;
	InfoQualifyEnumeration_Error = $00000003;
	InfoQualifyEnumeration_Display = $00000004;
	InfoQualifyEnumeration_Sound = $00000005;
	InfoQualifyEnumeration_Input = $00000006;
	InfoQualifyEnumeration_POIReplication = $00000007;
	InfoQualifyEnumeration_CustomerAssistance = $00000008;
	InfoQualifyEnumeration_Receipt = $00000009;
	InfoQualifyEnumeration_Document = $0000000A;
	InfoQualifyEnumeration_Voucher = $0000000B;
	InfoQualifyEnumeration__end = $0000000C;

	// Constantes pour enum InputCommandEnumeration
type
	InputCommandEnumeration = TOleEnum;

const
	InputCommandEnumeration__begin = $00000000;
	InputCommandEnumeration__none = $00000001;
	InputCommandEnumeration_GetAnyKey = $00000002;
	InputCommandEnumeration_GetConfirmation = $00000003;
	InputCommandEnumeration_SiteManager = $00000004;
	InputCommandEnumeration_TextString = $00000005;
	InputCommandEnumeration_DigitString = $00000006;
	InputCommandEnumeration_DecimalString = $00000007;
	InputCommandEnumeration_GetFunctionKey = $00000008;
	InputCommandEnumeration_GetMenuEntry = $00000009;
	InputCommandEnumeration_Password = $0000000A;
	InputCommandEnumeration__end = $0000000B;

	// Constantes pour enum InstalmentTypeEnumeration
type
	InstalmentTypeEnumeration = TOleEnum;

const
	InstalmentTypeEnumeration__begin = $00000000;
	InstalmentTypeEnumeration__none = $00000001;
	InstalmentTypeEnumeration_DeferredInstalments = $00000002;
	InstalmentTypeEnumeration_EqualInstalments = $00000003;
	InstalmentTypeEnumeration_InequalInstalments = $00000004;
	InstalmentTypeEnumeration__end = $00000005;

	// Constantes pour enum LoyaltyHandlingEnumeration
type
	LoyaltyHandlingEnumeration = TOleEnum;

const
	LoyaltyHandlingEnumeration__begin = $00000000;
	LoyaltyHandlingEnumeration__none = $00000001;
	LoyaltyHandlingEnumeration_Forbidden = $00000002;
	LoyaltyHandlingEnumeration_Processed = $00000003;
	LoyaltyHandlingEnumeration_Allowed = $00000004;
	LoyaltyHandlingEnumeration_Proposed = $00000005;
	LoyaltyHandlingEnumeration_Required = $00000006;
	LoyaltyHandlingEnumeration__end = $00000007;

	// Constantes pour enum LoyaltyTransactionTypeEnumeration
type
	LoyaltyTransactionTypeEnumeration = TOleEnum;

const
	LoyaltyTransactionTypeEnumeration__begin = $00000000;
	LoyaltyTransactionTypeEnumeration__none = $00000001;
	LoyaltyTransactionTypeEnumeration_Award = $00000002;
	LoyaltyTransactionTypeEnumeration_Rebate = $00000003;
	LoyaltyTransactionTypeEnumeration_Redemption = $00000004;
	LoyaltyTransactionTypeEnumeration_AwardRefund = $00000005;
	LoyaltyTransactionTypeEnumeration_RebateRefund = $00000006;
	LoyaltyTransactionTypeEnumeration_RedemptionRefund = $00000007;
	LoyaltyTransactionTypeEnumeration__end = $00000008;

	// Constantes pour enum LoyaltyUnitEnumeration
type
	LoyaltyUnitEnumeration = TOleEnum;

const
	LoyaltyUnitEnumeration__begin = $00000000;
	LoyaltyUnitEnumeration__none = $00000001;
	LoyaltyUnitEnumeration_Point = $00000002;
	LoyaltyUnitEnumeration_Monetary = $00000003;
	LoyaltyUnitEnumeration__end = $00000004;

	// Constantes pour enum MenuEntryTagEnumeration
type
	MenuEntryTagEnumeration = TOleEnum;

const
	MenuEntryTagEnumeration__begin = $00000000;
	MenuEntryTagEnumeration__none = $00000001;
	MenuEntryTagEnumeration_Selectable = $00000002;
	MenuEntryTagEnumeration_NonSelectable = $00000003;
	MenuEntryTagEnumeration_SubMenu = $00000004;
	MenuEntryTagEnumeration_NonSelectableSubMenu = $00000005;
	MenuEntryTagEnumeration__end = $00000006;

	// Constantes pour enum MessageCategoryEnumeration
type
	MessageCategoryEnumeration = TOleEnum;

const
	MessageCategoryEnumeration__begin = $00000000;
	MessageCategoryEnumeration__none = $00000001;
	MessageCategoryEnumeration_Abort = $00000002;
	MessageCategoryEnumeration_Admin = $00000003;
	MessageCategoryEnumeration_BalanceInquiry = $00000004;
	MessageCategoryEnumeration_Batch = $00000005;
	MessageCategoryEnumeration_CardAcquisition = $00000006;
	MessageCategoryEnumeration_CardReaderAPDU = $00000007;
	MessageCategoryEnumeration_CardReaderInit = $00000008;
	MessageCategoryEnumeration_CardReaderPowerOff = $00000009;
	MessageCategoryEnumeration_Diagnosis = $0000000A;
	MessageCategoryEnumeration_Display = $0000000B;
	MessageCategoryEnumeration_EnableService = $0000000C;
	MessageCategoryEnumeration_Event = $0000000D;
	MessageCategoryEnumeration_GetTotals = $0000000E;
	MessageCategoryEnumeration_Input = $0000000F;
	MessageCategoryEnumeration_InputUpdate = $00000010;
	MessageCategoryEnumeration_Login = $00000011;
	MessageCategoryEnumeration_Logout = $00000012;
	MessageCategoryEnumeration_Loyalty = $00000013;
	MessageCategoryEnumeration_Payment = $00000014;
	MessageCategoryEnumeration_PIN = $00000015;
	MessageCategoryEnumeration_Print = $00000016;
	MessageCategoryEnumeration_Reconciliation = $00000017;
	MessageCategoryEnumeration_Reversal = $00000018;
	MessageCategoryEnumeration_Sound = $00000019;
	MessageCategoryEnumeration_StoredValue = $0000001A;
	MessageCategoryEnumeration_TransactionReport = $0000001B;
	MessageCategoryEnumeration_TransactionStatus = $0000001C;
	MessageCategoryEnumeration_Transmit = $0000001D;
	MessageCategoryEnumeration__end = $0000001E;

	// Constantes pour enum MessageClassEnumeration
type
	MessageClassEnumeration = TOleEnum;

const
	MessageClassEnumeration__begin = $00000000;
	MessageClassEnumeration__none = $00000001;
	MessageClassEnumeration_Service = $00000002;
	MessageClassEnumeration_Device = $00000003;
	MessageClassEnumeration_Event = $00000004;
	MessageClassEnumeration__end = $00000005;

	// Constantes pour enum MessageTypeEnumeration
type
	MessageTypeEnumeration = TOleEnum;

const
	MessageTypeEnumeration__begin = $00000000;
	MessageTypeEnumeration__none = $00000001;
	MessageTypeEnumeration_Request = $00000002;
	MessageTypeEnumeration_Response = $00000003;
	MessageTypeEnumeration_Notification = $00000004;
	MessageTypeEnumeration__end = $00000005;

	// Constantes pour enum OutputFormatEnumeration
type
	OutputFormatEnumeration = TOleEnum;

const
	OutputFormatEnumeration__begin = $00000000;
	OutputFormatEnumeration__none = $00000001;
	OutputFormatEnumeration_MessageRef = $00000002;
	OutputFormatEnumeration_Text = $00000003;
	OutputFormatEnumeration_XHTML = $00000004;
	OutputFormatEnumeration_BarCode = $00000005;
	OutputFormatEnumeration__end = $00000006;

	// Constantes pour enum PaymentInstrumentTypeEnumeration
type
	PaymentInstrumentTypeEnumeration = TOleEnum;

const
	PaymentInstrumentTypeEnumeration__begin = $00000000;
	PaymentInstrumentTypeEnumeration__none = $00000001;
	PaymentInstrumentTypeEnumeration_Card = $00000002;
	PaymentInstrumentTypeEnumeration_Check = $00000003;
	PaymentInstrumentTypeEnumeration_Mobile = $00000004;
	PaymentInstrumentTypeEnumeration_StoredValue = $00000005;
	PaymentInstrumentTypeEnumeration_Cash = $00000006;
	PaymentInstrumentTypeEnumeration__end = $00000007;

	// Constantes pour enum PaymentTypeEnumeration
type
	PaymentTypeEnumeration = TOleEnum;

const
	PaymentTypeEnumeration__begin = $00000000;
	PaymentTypeEnumeration__none = $00000001;
	PaymentTypeEnumeration_Normal = $00000002;
	PaymentTypeEnumeration_Refund = $00000003;
	PaymentTypeEnumeration_OneTimeReservation = $00000004;
	PaymentTypeEnumeration_FirstReservation = $00000005;
	PaymentTypeEnumeration_UpdateReservation = $00000006;
	PaymentTypeEnumeration_Completion = $00000007;
	PaymentTypeEnumeration_CashAdvance = $00000008;
	PaymentTypeEnumeration_CashDeposit = $00000009;
	PaymentTypeEnumeration_Recurring = $0000000A;
	PaymentTypeEnumeration_Instalment = $0000000B;
	PaymentTypeEnumeration_IssuerInstalment = $0000000C;
	PaymentTypeEnumeration_PaidOut = $0000000D;
	PaymentTypeEnumeration__end = $0000000E;

	// Constantes pour enum PeriodUnitEnumeration
type
	PeriodUnitEnumeration = TOleEnum;

const
	PeriodUnitEnumeration__begin = $00000000;
	PeriodUnitEnumeration__none = $00000001;
	PeriodUnitEnumeration_Daily = $00000002;
	PeriodUnitEnumeration_Weekly = $00000003;
	PeriodUnitEnumeration_Monthly = $00000004;
	PeriodUnitEnumeration_Annual = $00000005;
	PeriodUnitEnumeration__end = $00000006;

	// Constantes pour enum PINFormatEnumeration
type
	PINFormatEnumeration = TOleEnum;

const
	PINFormatEnumeration__begin = $00000000;
	PINFormatEnumeration__none = $00000001;
	PINFormatEnumeration_ISO0 = $00000002;
	PINFormatEnumeration_ISO1 = $00000003;
	PINFormatEnumeration_ISO2 = $00000004;
	PINFormatEnumeration_ISO3 = $00000005;
	PINFormatEnumeration__end = $00000006;

	// Constantes pour enum PINRequestTypeEnumeration
type
	PINRequestTypeEnumeration = TOleEnum;

const
	PINRequestTypeEnumeration__begin = $00000000;
	PINRequestTypeEnumeration__none = $00000001;
	PINRequestTypeEnumeration_PINVerify = $00000002;
	PINRequestTypeEnumeration_PINVerifyOnly = $00000003;
	PINRequestTypeEnumeration_PINEnter = $00000004;
	PINRequestTypeEnumeration__end = $00000005;

	// Constantes pour enum POICapabilitiesEnumeration
type
	POICapabilitiesEnumeration = TOleEnum;

const
	POICapabilitiesEnumeration__begin = $00000000;
	POICapabilitiesEnumeration__none = $00000001;
	POICapabilitiesEnumeration_CashierDisplay = $00000002;
	POICapabilitiesEnumeration_CashierError = $00000003;
	POICapabilitiesEnumeration_CashierInput = $00000004;
	POICapabilitiesEnumeration_CustomerDisplay = $00000005;
	POICapabilitiesEnumeration_CustomerError = $00000006;
	POICapabilitiesEnumeration_CustomerInput = $00000007;
	POICapabilitiesEnumeration_PrinterReceipt = $00000008;
	POICapabilitiesEnumeration_PrinterDocument = $00000009;
	POICapabilitiesEnumeration_PrinterVoucher = $0000000A;
	POICapabilitiesEnumeration_MagStripe = $0000000B;
	POICapabilitiesEnumeration_ICC = $0000000C;
	POICapabilitiesEnumeration_EMVContactless = $0000000D;
	POICapabilitiesEnumeration_CashHandling = $0000000E;
	POICapabilitiesEnumeration__end = $0000000F;

	// Constantes pour enum PrinterStatusEnumeration
type
	PrinterStatusEnumeration = TOleEnum;

const
	PrinterStatusEnumeration__begin = $00000000;
	PrinterStatusEnumeration__none = $00000001;
	PrinterStatusEnumeration_OK = $00000002;
	PrinterStatusEnumeration_PaperLow = $00000003;
	PrinterStatusEnumeration_NoPaper = $00000004;
	PrinterStatusEnumeration_PaperJam = $00000005;
	PrinterStatusEnumeration_OutOfOrder = $00000006;
	PrinterStatusEnumeration__end = $00000007;

	// Constantes pour enum ReconciliationTypeEnumeration
type
	ReconciliationTypeEnumeration = TOleEnum;

const
	ReconciliationTypeEnumeration__begin = $00000000;
	ReconciliationTypeEnumeration__none = $00000001;
	ReconciliationTypeEnumeration_SaleReconciliation = $00000002;
	ReconciliationTypeEnumeration_AcquirerSynchronisation = $00000003;
	ReconciliationTypeEnumeration_AcquirerReconciliation = $00000004;
	ReconciliationTypeEnumeration_PreviousReconciliation = $00000005;
	ReconciliationTypeEnumeration__end = $00000006;

	// Constantes pour enum ResponseModeEnumeration
type
	ResponseModeEnumeration = TOleEnum;

const
	ResponseModeEnumeration__begin = $00000000;
	ResponseModeEnumeration__none = $00000001;
	ResponseModeEnumeration_NotRequired = $00000002;
	ResponseModeEnumeration_Immediate = $00000003;
	ResponseModeEnumeration_PrintEnd = $00000004;
	ResponseModeEnumeration_SoundEnd = $00000005;
	ResponseModeEnumeration__end = $00000006;

	// Constantes pour enum ResultEnumeration
type
	ResultEnumeration = TOleEnum;

const
	ResultEnumeration__begin = $00000000;
	ResultEnumeration__none = $00000001;
	ResultEnumeration_Success = $00000002;
	ResultEnumeration_Failure = $00000003;
	ResultEnumeration_Partial = $00000004;
	ResultEnumeration__end = $00000005;

	// Constantes pour enum ReversalReasonEnumeration
type
	ReversalReasonEnumeration = TOleEnum;

const
	ReversalReasonEnumeration__begin = $00000000;
	ReversalReasonEnumeration__none = $00000001;
	ReversalReasonEnumeration_CustCancel = $00000002;
	ReversalReasonEnumeration_MerchantCancel = $00000003;
	ReversalReasonEnumeration_Malfunction = $00000004;
	ReversalReasonEnumeration_Unable2Compl = $00000005;
	ReversalReasonEnumeration__end = $00000006;

	// Constantes pour enum SaleCapabilitiesEnumeration
type
	SaleCapabilitiesEnumeration = TOleEnum;

const
	SaleCapabilitiesEnumeration__begin = $00000000;
	SaleCapabilitiesEnumeration__none = $00000001;
	SaleCapabilitiesEnumeration_CashierStatus = $00000002;
	SaleCapabilitiesEnumeration_CashierError = $00000003;
	SaleCapabilitiesEnumeration_CashierDisplay = $00000004;
	SaleCapabilitiesEnumeration_POIReplication = $00000005;
	SaleCapabilitiesEnumeration_CashierInput = $00000006;
	SaleCapabilitiesEnumeration_CustomerAssistance = $00000007;
	SaleCapabilitiesEnumeration_CustomerDisplay = $00000008;
	SaleCapabilitiesEnumeration_CustomerError = $00000009;
	SaleCapabilitiesEnumeration_CustomerInput = $0000000A;
	SaleCapabilitiesEnumeration_PrinterReceipt = $0000000B;
	SaleCapabilitiesEnumeration_PrinterDocument = $0000000C;
	SaleCapabilitiesEnumeration_PrinterVoucher = $0000000D;
	SaleCapabilitiesEnumeration_MagStripe = $0000000E;
	SaleCapabilitiesEnumeration_ICC = $0000000F;
	SaleCapabilitiesEnumeration_EMVContactless = $00000010;
	SaleCapabilitiesEnumeration__end = $00000011;

	// Constantes pour enum ServicesEnabledEnumeration
type
	ServicesEnabledEnumeration = TOleEnum;

const
	ServicesEnabledEnumeration__begin = $00000000;
	ServicesEnabledEnumeration__none = $00000001;
	ServicesEnabledEnumeration_CardAcquisition = $00000002;
	ServicesEnabledEnumeration_Payment = $00000003;
	ServicesEnabledEnumeration_Loyalty = $00000004;
	ServicesEnabledEnumeration__end = $00000005;

	// Constantes pour enum ServiceProfilesEnumeration
type
	ServiceProfilesEnumeration = TOleEnum;

const
	ServiceProfilesEnumeration__begin = $00000000;
	ServiceProfilesEnumeration__none = $00000001;
	ServiceProfilesEnumeration_Synchro = $00000002;
	ServiceProfilesEnumeration_Batch = $00000003;
	ServiceProfilesEnumeration_OneTimeRes = $00000004;
	ServiceProfilesEnumeration_Reservation = $00000005;
	ServiceProfilesEnumeration_Loyalty = $00000006;
	ServiceProfilesEnumeration_StoredValue = $00000007;
	ServiceProfilesEnumeration_PIN = $00000008;
	ServiceProfilesEnumeration_CardReader = $00000009;
	ServiceProfilesEnumeration_Sound = $0000000A;
	ServiceProfilesEnumeration_Communication = $0000000B;
	ServiceProfilesEnumeration__end = $0000000C;

	// Constantes pour enum SoundActionEnumeration
type
	SoundActionEnumeration = TOleEnum;

const
	SoundActionEnumeration__begin = $00000000;
	SoundActionEnumeration__none = $00000001;
	SoundActionEnumeration_StartSound = $00000002;
	SoundActionEnumeration_StopSound = $00000003;
	SoundActionEnumeration_SetDefaultVolume = $00000004;
	SoundActionEnumeration__end = $00000005;

	// Constantes pour enum SoundFormatEnumeration
type
	SoundFormatEnumeration = TOleEnum;

const
	SoundFormatEnumeration__begin = $00000000;
	SoundFormatEnumeration__none = $00000001;
	SoundFormatEnumeration_SoundRef = $00000002;
	SoundFormatEnumeration_MessageRef = $00000003;
	SoundFormatEnumeration_Text = $00000004;
	SoundFormatEnumeration__end = $00000005;

	// Constantes pour enum StoredValueAccountTypeEnumeration
type
	StoredValueAccountTypeEnumeration = TOleEnum;

const
	StoredValueAccountTypeEnumeration__begin = $00000000;
	StoredValueAccountTypeEnumeration__none = $00000001;
	StoredValueAccountTypeEnumeration_GiftCard = $00000002;
	StoredValueAccountTypeEnumeration_PhoneCard = $00000003;
	StoredValueAccountTypeEnumeration_Other = $00000004;
	StoredValueAccountTypeEnumeration__end = $00000005;

	// Constantes pour enum StoredValueTransactionTypeEnumeration
type
	StoredValueTransactionTypeEnumeration = TOleEnum;

const
	StoredValueTransactionTypeEnumeration__begin = $00000000;
	StoredValueTransactionTypeEnumeration__none = $00000001;
	StoredValueTransactionTypeEnumeration_Reserve = $00000002;
	StoredValueTransactionTypeEnumeration_Activate = $00000003;
	StoredValueTransactionTypeEnumeration_Load = $00000004;
	StoredValueTransactionTypeEnumeration_Unload = $00000005;
	StoredValueTransactionTypeEnumeration_Reverse = $00000006;
	StoredValueTransactionTypeEnumeration_Duplicate = $00000007;
	StoredValueTransactionTypeEnumeration__end = $00000008;

	// Constantes pour enum TerminalEnvironmentEnumeration
type
	TerminalEnvironmentEnumeration = TOleEnum;

const
	TerminalEnvironmentEnumeration__begin = $00000000;
	TerminalEnvironmentEnumeration__none = $00000001;
	TerminalEnvironmentEnumeration_Attended = $00000002;
	TerminalEnvironmentEnumeration_SemiAttended = $00000003;
	TerminalEnvironmentEnumeration_Unattended = $00000004;
	TerminalEnvironmentEnumeration__end = $00000005;

	// Constantes pour enum TokenRequestedTypeEnumeration
type
	TokenRequestedTypeEnumeration = TOleEnum;

const
	TokenRequestedTypeEnumeration__begin = $00000000;
	TokenRequestedTypeEnumeration__none = $00000001;
	TokenRequestedTypeEnumeration_Transaction = $00000002;
	TokenRequestedTypeEnumeration_Customer = $00000003;
	TokenRequestedTypeEnumeration__end = $00000004;

	// Constantes pour enum TotalDetailsEnumeration
type
	TotalDetailsEnumeration = TOleEnum;

const
	TotalDetailsEnumeration__begin = $00000000;
	TotalDetailsEnumeration__none = $00000001;
	TotalDetailsEnumeration_POIID = $00000002;
	TotalDetailsEnumeration_SaleID = $00000003;
	TotalDetailsEnumeration_OperatorID = $00000004;
	TotalDetailsEnumeration_ShiftNumber = $00000005;
	TotalDetailsEnumeration_TotalsGroupID = $00000006;
	TotalDetailsEnumeration__end = $00000007;

	// Constantes pour enum TrackFormatEnumeration
type
	TrackFormatEnumeration = TOleEnum;

const
	TrackFormatEnumeration__begin = $00000000;
	TrackFormatEnumeration__none = $00000001;
	TrackFormatEnumeration_ISO = $00000002;
	TrackFormatEnumeration_JISI = $00000003;
	TrackFormatEnumeration_JISII = $00000004;
	TrackFormatEnumeration_AAMVA = $00000005;
	TrackFormatEnumeration_CMC7 = $00000006;
	TrackFormatEnumeration_E13B = $00000007;
	TrackFormatEnumeration__end = $00000008;

	// Constantes pour enum TransactionActionEnumeration
type
	TransactionActionEnumeration = TOleEnum;

const
	TransactionActionEnumeration__begin = $00000000;
	TransactionActionEnumeration__none = $00000001;
	TransactionActionEnumeration_StartTransaction = $00000002;
	TransactionActionEnumeration_AbortTransaction = $00000003;
	TransactionActionEnumeration__end = $00000004;

	// Constantes pour enum TransactionTypeEnumeration
type
	TransactionTypeEnumeration = TOleEnum;

const
	TransactionTypeEnumeration__begin = $00000000;
	TransactionTypeEnumeration__none = $00000001;
	TransactionTypeEnumeration_Debit = $00000002;
	TransactionTypeEnumeration_Credit = $00000003;
	TransactionTypeEnumeration_ReverseDebit = $00000004;
	TransactionTypeEnumeration_ReverseCredit = $00000005;
	TransactionTypeEnumeration_OneTimeReservation = $00000006;
	TransactionTypeEnumeration_CompletedDeffered = $00000007;
	TransactionTypeEnumeration_FirstReservation = $00000008;
	TransactionTypeEnumeration_UpdateReservation = $00000009;
	TransactionTypeEnumeration_CompletedReservation = $0000000A;
	TransactionTypeEnumeration_CashAdvance = $0000000B;
	TransactionTypeEnumeration_IssuerInstalment = $0000000C;
	TransactionTypeEnumeration_Declined = $0000000D;
	TransactionTypeEnumeration_Failed = $0000000E;
	TransactionTypeEnumeration_Award = $0000000F;
	TransactionTypeEnumeration_ReverseAward = $00000010;
	TransactionTypeEnumeration_Redemption = $00000011;
	TransactionTypeEnumeration_ReverseRedemption = $00000012;
	TransactionTypeEnumeration_Rebate = $00000013;
	TransactionTypeEnumeration_ReverseRebate = $00000014;
	TransactionTypeEnumeration__end = $00000015;

	// Constantes pour enum UnitOfMeasureEnumeration
type
	UnitOfMeasureEnumeration = TOleEnum;

const
	UnitOfMeasureEnumeration__begin = $00000000;
	UnitOfMeasureEnumeration__none = $00000001;
	UnitOfMeasureEnumeration_Case = $00000002;
	UnitOfMeasureEnumeration_Foot = $00000003;
	UnitOfMeasureEnumeration_UKGallon = $00000004;
	UnitOfMeasureEnumeration_USGallon = $00000005;
	UnitOfMeasureEnumeration_Gram = $00000006;
	UnitOfMeasureEnumeration_Inch = $00000007;
	UnitOfMeasureEnumeration_Kilogram = $00000008;
	UnitOfMeasureEnumeration_Pound = $00000009;
	UnitOfMeasureEnumeration_Meter = $0000000A;
	UnitOfMeasureEnumeration_Centimetre = $0000000B;
	UnitOfMeasureEnumeration_Litre = $0000000C;
	UnitOfMeasureEnumeration_Centilitre = $0000000D;
	UnitOfMeasureEnumeration_Ounce = $0000000E;
	UnitOfMeasureEnumeration_Quart = $0000000F;
	UnitOfMeasureEnumeration_Pint = $00000010;
	UnitOfMeasureEnumeration_Mile = $00000011;
	UnitOfMeasureEnumeration_Kilometre = $00000012;
	UnitOfMeasureEnumeration_Yard = $00000013;
	UnitOfMeasureEnumeration_Other = $00000014;
	UnitOfMeasureEnumeration__end = $00000015;

	// Constantes pour enum AlgorithmEnumeration
type
	AlgorithmEnumeration = TOleEnum;

const
	AlgorithmEnumeration__begin = $00000000;
	AlgorithmEnumeration__none = $00000001;
	AlgorithmEnumeration_idretailcbcmac = $00000002;
	AlgorithmEnumeration_idretailcbcmacsha256 = $00000003;
	AlgorithmEnumeration_idukptwrap = $00000004;
	AlgorithmEnumeration_iddukptwrap = $00000005;
	AlgorithmEnumeration_desede3ecb = $00000006;
	AlgorithmEnumeration_desede3cbc = $00000007;
	AlgorithmEnumeration_idsha256 = $00000008;
	AlgorithmEnumeration_sha256WithRSAEncryption = $00000009;
	AlgorithmEnumeration_rsaEncryption = $0000000A;
	AlgorithmEnumeration__end = $0000000B;

	// Constantes pour enum AttributeTypeEnumeration
type
	AttributeTypeEnumeration = TOleEnum;

const
	AttributeTypeEnumeration__begin = $00000000;
	AttributeTypeEnumeration__none = $00000001;
	AttributeTypeEnumeration_idatcommonName = $00000002;
	AttributeTypeEnumeration_idatlocalityName = $00000003;
	AttributeTypeEnumeration_idatorganizationName = $00000004;
	AttributeTypeEnumeration_idatorganizationalUnitName = $00000005;
	AttributeTypeEnumeration_idatcountryName = $00000006;
	AttributeTypeEnumeration__end = $00000007;

	// Constantes pour enum ContentTypeEnumeration
type
	ContentTypeEnumeration = TOleEnum;

const
	ContentTypeEnumeration__begin = $00000000;
	ContentTypeEnumeration__none = $00000001;
	ContentTypeEnumeration_iddata = $00000002;
	ContentTypeEnumeration_idsignedData = $00000003;
	ContentTypeEnumeration_idenvelopedData = $00000004;
	ContentTypeEnumeration_iddigestedData = $00000005;
	ContentTypeEnumeration_idencryptedData = $00000006;
	ContentTypeEnumeration_idctauthData = $00000007;
	ContentTypeEnumeration__end = $00000008;

	// Constantes pour enum VersionEnumeration
type
	VersionEnumeration = TOleEnum;

const
	VersionEnumeration__begin = $00000000;
	VersionEnumeration__none = $00000001;
	VersionEnumeration_v0 = $00000002;
	VersionEnumeration_v1 = $00000003;
	VersionEnumeration_v2 = $00000004;
	VersionEnumeration_v3 = $00000005;
	VersionEnumeration_v4 = $00000006;
	VersionEnumeration_v5 = $00000007;
	VersionEnumeration__end = $00000008;

	// Constantes pour enum TagsEnumeration
type
	TagsEnumeration = TOleEnum;

const
	TagsEnumeration_AbortReason = $00000000;
	TagsEnumeration_AccessedBy = $00000001;
	TagsEnumeration_AccountNumber = $00000002;
	TagsEnumeration_AccountType = $00000003;
	TagsEnumeration_AcquirerID = $00000004;
	TagsEnumeration_AcquirerPOIID = $00000005;
	TagsEnumeration_AcquirerTransactionID = $00000006;
	TagsEnumeration_AdditionalInformation = $00000007;
	TagsEnumeration_AdditionalInput = $00000008;
	TagsEnumeration_AdditionalProductInfo = $00000009;
	TagsEnumeration_AdditionalResponse = $0000000A;
	TagsEnumeration_Algorithm = $0000000B;
	TagsEnumeration_Alignment = $0000000C;
	TagsEnumeration_AllowedLoyaltyBrand = $0000000D;
	TagsEnumeration_AllowedPaymentBrand = $0000000E;
	TagsEnumeration_AllowedProduct = $0000000F;
	TagsEnumeration_AllowedProductCode = $00000010;
	TagsEnumeration_AmountsReq = $00000011;
	TagsEnumeration_AmountsResp = $00000012;
	TagsEnumeration_APDUClass = $00000013;
	TagsEnumeration_APDUData = $00000014;
	TagsEnumeration_APDUExpectedLength = $00000015;
	TagsEnumeration_APDUInstruction = $00000016;
	TagsEnumeration_APDUPar1 = $00000017;
	TagsEnumeration_APDUPar2 = $00000018;
	TagsEnumeration_ApplicationName = $00000019;
	TagsEnumeration_ApprovalCode = $0000001A;
	TagsEnumeration_AreaSize = $0000001B;
	TagsEnumeration_ATRValue = $0000001C;
	TagsEnumeration_AttributeType = $0000001D;
	TagsEnumeration_AttributeValue = $0000001E;
	TagsEnumeration_AuthenticationMethod = $0000001F;
	TagsEnumeration_AuthorizedAmount = $00000020;
	TagsEnumeration_BankID = $00000021;
	TagsEnumeration_BarcodeType = $00000022;
	TagsEnumeration_BeepKeyFlag = $00000023;
	TagsEnumeration_CapturedSignature = $00000024;
	TagsEnumeration_CardAcquisitionReference = $00000025;
	TagsEnumeration_CardAcquisitionTransaction = $00000026;
	TagsEnumeration_CardBrand = $00000027;
	TagsEnumeration_CardCountryCode = $00000028;
	TagsEnumeration_CardData = $00000029;
	TagsEnumeration_CardholderPIN = $0000002A;
	TagsEnumeration_CardReaderOKFlag = $0000002B;
	TagsEnumeration_CardReaderOKFlagSpecified = $0000002C;
	TagsEnumeration_CardSeqNumb = $0000002D;
	TagsEnumeration_CardStatusWords = $0000002E;
	TagsEnumeration_CashBackAmount = $0000002F;
	TagsEnumeration_CashBackAmountSpecified = $00000030;
	TagsEnumeration_CashBackFlag = $00000031;
	TagsEnumeration_CashBackFlagSpecified = $00000032;
	TagsEnumeration_CashHandlingDevice = $00000033;
	TagsEnumeration_CashHandlingOKFlag = $00000034;
	TagsEnumeration_Certificate = $00000035;
	TagsEnumeration_CertificationCode = $00000036;
	TagsEnumeration_CharacterHeight = $00000037;
	TagsEnumeration_CharacterSet = $00000038;
	TagsEnumeration_CharacterStyle = $00000039;
	TagsEnumeration_CharacterWidth = $0000003A;
	TagsEnumeration_Charges = $0000003B;
	TagsEnumeration_ChargesSpecified = $0000003C;
	TagsEnumeration_CheckCardNumber = $0000003D;
	TagsEnumeration_CheckData = $0000003E;
	TagsEnumeration_CheckNumber = $0000003F;
	TagsEnumeration_CoinsOrBills = $00000040;
	TagsEnumeration_Color = $00000041;
	TagsEnumeration_Commission = $00000042;
	TagsEnumeration_CommissionSpecified = $00000043;
	TagsEnumeration_CommunicationOKFlag = $00000044;
	TagsEnumeration_CommunicationOKFlagSpecified = $00000045;
	TagsEnumeration_ConfirmedFlag = $00000046;
	TagsEnumeration_ConfirmedFlagSpecified = $00000047;
	TagsEnumeration_Content = $00000048;
	TagsEnumeration_ContentEncryptionAlgorithm = $00000049;
	TagsEnumeration_ContentType = $0000004A;
	TagsEnumeration_ConvertedAmount = $0000004B;
	TagsEnumeration_Country = $0000004C;
	TagsEnumeration_CumulativeAmount = $0000004D;
	TagsEnumeration_CumulativeAmountSpecified = $0000004E;
	TagsEnumeration_Currency = $0000004F;
	TagsEnumeration_CurrencyConversion = $00000050;
	TagsEnumeration_CurrentAmount = $00000051;
	TagsEnumeration_CurrentBalance = $00000052;
	TagsEnumeration_CurrentBalanceSpecified = $00000053;
	TagsEnumeration_CustomerApprovedFlag = $00000054;
	TagsEnumeration_CustomerLanguage = $00000055;
	TagsEnumeration_CustomerOrder = $00000056;
	TagsEnumeration_CustomerOrderID = $00000057;
	TagsEnumeration_CustomerOrderReq = $00000058;
	TagsEnumeration_DateTime = $00000059;
	TagsEnumeration_DebitPreferredFlag = $0000005A;
	TagsEnumeration_Declaration = $0000005B;
	TagsEnumeration_DefaultInputString = $0000005C;
	TagsEnumeration_DefaultSelectedFlag = $0000005D;
	TagsEnumeration_DerivationIdentifier = $0000005E;
	TagsEnumeration_DestinationAddress = $0000005F;
	TagsEnumeration_Device = $00000060;
	TagsEnumeration_DeviceID = $00000061;
	TagsEnumeration_Digest = $00000062;
	TagsEnumeration_DigestAlgorithm = $00000063;
	TagsEnumeration_DigitInput = $00000064;
	TagsEnumeration_DisableCancelFlag = $00000065;
	TagsEnumeration_DisableCorrectFlag = $00000066;
	TagsEnumeration_DisableValidFlag = $00000067;
	TagsEnumeration_DisplayOutput = $00000068;
	TagsEnumeration_DocumentQualifier = $00000069;
	TagsEnumeration_EanUpc = $0000006A;
	TagsEnumeration_EncapsulatedContent = $0000006B;
	TagsEnumeration_EncrPINBlock = $0000006C;
	TagsEnumeration_EncryptedContent = $0000006D;
	TagsEnumeration_EncryptedData = $0000006E;
	TagsEnumeration_EncryptedKey = $0000006F;
	TagsEnumeration_EndDate = $00000070;
	TagsEnumeration_EndDateSpecified = $00000071;
	TagsEnumeration_EndOfLineFlag = $00000072;
	TagsEnumeration_EntryMode = $00000073;
	TagsEnumeration_ErrorCondition = $00000074;
	TagsEnumeration_EventDetails = $00000075;
	TagsEnumeration_EventToNotify = $00000076;
	TagsEnumeration_ExpiryDate = $00000077;
	TagsEnumeration_ExpiryDateTime = $00000078;
	TagsEnumeration_ExpiryDateTimeSpecified = $00000079;
	TagsEnumeration_FirstAmount = $0000007A;
	TagsEnumeration_FirstAmountSpecified = $0000007B;
	TagsEnumeration_FirstPaymentDate = $0000007C;
	TagsEnumeration_Font = $0000007D;
	TagsEnumeration_ForceCustomerSelectionFlag = $0000007E;
	TagsEnumeration_ForceEntryMode = $0000007F;
	TagsEnumeration_ForceOnlineFlag = $00000080;
	TagsEnumeration_ForecastedAmount = $00000081;
	TagsEnumeration_FraudPreventionFlag = $00000082;
	TagsEnumeration_FraudPreventionFlagSpecified = $00000083;
	TagsEnumeration_FromRightToLeftFlag = $00000084;
	TagsEnumeration_FunctionKey = $00000085;
	TagsEnumeration_GenericProfile = $00000086;
	TagsEnumeration_GeographicCoordinates = $00000087;
	TagsEnumeration_Geolocation = $00000088;
	TagsEnumeration_GlobalCorrectionFlag = $00000089;
	TagsEnumeration_GlobalStatus = $0000008A;
	TagsEnumeration_HostDiagnosisFlag = $0000008B;
	TagsEnumeration_HostReconciliationID = $0000008C;
	TagsEnumeration_HostStatus = $0000008D;
	TagsEnumeration_HostTransactionID = $0000008E;
	TagsEnumeration_ICCResetData = $0000008F;
	TagsEnumeration_IdentificationSupport = $00000090;
	TagsEnumeration_IdentificationType = $00000091;
	TagsEnumeration_IMEI = $00000092;
	TagsEnumeration_ImmediateResponseFlag = $00000093;
	TagsEnumeration_IMSI = $00000094;
	TagsEnumeration_InfoQualify = $00000095;
	TagsEnumeration_InitialisationVector = $00000096;
	TagsEnumeration_Input = $00000097;
	TagsEnumeration_InputCommand = $00000098;
	TagsEnumeration_InputData = $00000099;
	TagsEnumeration_InputResult = $0000009A;
	TagsEnumeration_Instalment = $0000009B;
	TagsEnumeration_InstalmentType1 = $0000009C;
	TagsEnumeration_IntegratedPrintFlag = $0000009D;
	TagsEnumeration_IsReachableFlag = $0000009E;
	TagsEnumeration_Issuer = $0000009F;
	TagsEnumeration_IssuerAndSerialNumber = $000000A0;
	TagsEnumeration_Item = $000000A1;
	TagsEnumeration_ItemAmount = $000000A2;
	TagsEnumeration_ItemAmountSpecified = $000000A3;
	TagsEnumeration_ItemID = $000000A4;
	TagsEnumeration_Items = $000000A5;
	TagsEnumeration_KEKIdentifier = $000000A6;
	TagsEnumeration_KeyEncryptionAlgorithm = $000000A7;
	TagsEnumeration_KeyIdentifier = $000000A8;
	TagsEnumeration_KeyName = $000000A9;
	TagsEnumeration_KeyReference = $000000AA;
	TagsEnumeration_KeyVersion = $000000AB;
	TagsEnumeration_Language = $000000AC;
	TagsEnumeration_Latitude = $000000AD;
	TagsEnumeration_LeaveCardFlag = $000000AE;
	TagsEnumeration_LoggedSaleID = $000000AF;
	TagsEnumeration_Longitude = $000000B0;
	TagsEnumeration_LoyaltyAccount = $000000B1;
	TagsEnumeration_LoyaltyAccountID = $000000B2;
	TagsEnumeration_LoyaltyAccountReq = $000000B3;
	TagsEnumeration_LoyaltyAccountStatus = $000000B4;
	TagsEnumeration_LoyaltyAcquirerData = $000000B5;
	TagsEnumeration_LoyaltyAcquirerID = $000000B6;
	TagsEnumeration_LoyaltyAmount = $000000B7;
	TagsEnumeration_LoyaltyBrand = $000000B8;
	TagsEnumeration_LoyaltyCurrency = $000000B9;
	TagsEnumeration_LoyaltyData = $000000BA;
	TagsEnumeration_LoyaltyHandling = $000000BB;
	TagsEnumeration_LoyaltyResult = $000000BC;
	TagsEnumeration_LoyaltyTotals = $000000BD;
	TagsEnumeration_LoyaltyTransaction = $000000BE;
	TagsEnumeration_LoyaltyTransactionID = $000000BF;
	TagsEnumeration_LoyaltyTransactionType1 = $000000C0;
	TagsEnumeration_LoyaltyUnit = $000000C1;
	TagsEnumeration_MAC = $000000C2;
	TagsEnumeration_MACAlgorithm = $000000C3;
	TagsEnumeration_MaintenanceAllowed = $000000C4;
	TagsEnumeration_MaintenanceRequiredFlag = $000000C5;
	TagsEnumeration_ManufacturerID = $000000C6;
	TagsEnumeration_Markup = $000000C7;
	TagsEnumeration_MarkupSpecified = $000000C8;
	TagsEnumeration_MaskCharactersFlag = $000000C9;
	TagsEnumeration_MaskedMSISDN = $000000CA;
	TagsEnumeration_MaskedPAN = $000000CB;
	TagsEnumeration_MaxDecimalLength = $000000CC;
	TagsEnumeration_MaximumCashBackAmount = $000000CD;
	TagsEnumeration_MaximumCashBackAmountSpecified = $000000CE;
	TagsEnumeration_MaximumTransmitTime = $000000CF;
	TagsEnumeration_MaxInputTime = $000000D0;
	TagsEnumeration_MaxLength = $000000D1;
	TagsEnumeration_MaxWaitingTime = $000000D2;
	TagsEnumeration_MenuBackFlag = $000000D3;
	TagsEnumeration_MenuEntry = $000000D4;
	TagsEnumeration_MenuEntryNumber = $000000D5;
	TagsEnumeration_MenuEntryTag = $000000D6;
	TagsEnumeration_MerchantAddress = $000000D7;
	TagsEnumeration_MerchantCategoryCode = $000000D8;
	TagsEnumeration_MerchantCountry = $000000D9;
	TagsEnumeration_MerchantID = $000000DA;
	TagsEnumeration_MerchantName = $000000DB;
	TagsEnumeration_MerchantOverrideFlag = $000000DC;
	TagsEnumeration_Message = $000000DD;
	TagsEnumeration_MessageCategory = $000000DE;
	TagsEnumeration_MessageClass = $000000DF;
	TagsEnumeration_MessageHeader = $000000E0;
	TagsEnumeration_MessageReference = $000000E1;
	TagsEnumeration_MessageType = $000000E2;
	TagsEnumeration_MinimumAmountToDeliver = $000000E3;
	TagsEnumeration_MinimumAmountToDeliverSpecified = $000000E4;
	TagsEnumeration_MinimumDisplayTime = $000000E5;
	TagsEnumeration_MinimumSplitAmount = $000000E6;
	TagsEnumeration_MinimumSplitAmountSpecified = $000000E7;
	TagsEnumeration_MinLength = $000000E8;
	TagsEnumeration_MobileCountryCode = $000000E9;
	TagsEnumeration_MobileData = $000000EA;
	TagsEnumeration_MobileNetworkCode = $000000EB;
	TagsEnumeration_MSISDN = $000000EC;
	TagsEnumeration_NotifyCardInputFlag = $000000ED;
	TagsEnumeration_Number = $000000EE;
	TagsEnumeration_OnlineFlag = $000000EF;
	TagsEnumeration_OpenOrderState = $000000F0;
	TagsEnumeration_OperatorID = $000000F1;
	TagsEnumeration_OperatorLanguage = $000000F2;
	TagsEnumeration_OriginalPOITransaction = $000000F3;
	TagsEnumeration_OutputBarcode = $000000F4;
	TagsEnumeration_OutputContent = $000000F5;
	TagsEnumeration_OutputFormat = $000000F6;
	TagsEnumeration_OutputResult = $000000F7;
	TagsEnumeration_OutputSignature = $000000F8;
	TagsEnumeration_OutputText = $000000F9;
	TagsEnumeration_OutputXHTML = $000000FA;
	TagsEnumeration_OwnerName = $000000FB;
	TagsEnumeration_PaidAmount = $000000FC;
	TagsEnumeration_PaidAmountSpecified = $000000FD;
	TagsEnumeration_PAN = $000000FE;
	TagsEnumeration_Parameter = $000000FF;
	TagsEnumeration_Password = $00000100;
	TagsEnumeration_PaymentAccountRef = $00000101;
	TagsEnumeration_PaymentAccountReq = $00000102;
	TagsEnumeration_PaymentAccountStatus = $00000103;
	TagsEnumeration_PaymentAcquirerData = $00000104;
	TagsEnumeration_PaymentBrand = $00000105;
	TagsEnumeration_PaymentCurrency = $00000106;
	TagsEnumeration_PaymentData = $00000107;
	TagsEnumeration_PaymentInstrumentData = $00000108;
	TagsEnumeration_PaymentInstrumentType = $00000109;
	TagsEnumeration_PaymentReceipt = $0000010A;
	TagsEnumeration_PaymentResult = $0000010B;
	TagsEnumeration_PaymentToken = $0000010C;
	TagsEnumeration_PaymentTotals = $0000010D;
	TagsEnumeration_PaymentTransaction = $0000010E;
	TagsEnumeration_PaymentType = $0000010F;
	TagsEnumeration_PEDOKFlag = $00000110;
	TagsEnumeration_PEDOKFlagSpecified = $00000111;
	TagsEnumeration_PerformedTransaction = $00000112;
	TagsEnumeration_Period = $00000113;
	TagsEnumeration_PeriodUnit = $00000114;
	TagsEnumeration_PINEncAlgorithm = $00000115;
	TagsEnumeration_PINFormat = $00000116;
	TagsEnumeration_PINRequestType1 = $00000117;
	TagsEnumeration_PINVerifMethod = $00000118;
	TagsEnumeration_PlanID = $00000119;
	TagsEnumeration_POICapabilities = $0000011A;
	TagsEnumeration_POIData = $0000011B;
	TagsEnumeration_POIID = $0000011C;
	TagsEnumeration_POIProfile = $0000011D;
	TagsEnumeration_POIReconciliationID = $0000011E;
	TagsEnumeration_POISerialNumber = $0000011F;
	TagsEnumeration_POISoftware = $00000120;
	TagsEnumeration_POIStatus = $00000121;
	TagsEnumeration_POISystemData = $00000122;
	TagsEnumeration_POITerminalData = $00000123;
	TagsEnumeration_POITransactionID = $00000124;
	TagsEnumeration_PredefinedContent = $00000125;
	TagsEnumeration_PrinterStatus = $00000126;
	TagsEnumeration_PrintOutput = $00000127;
	TagsEnumeration_ProductCode = $00000128;
	TagsEnumeration_ProductLabel = $00000129;
	TagsEnumeration_ProtectedCardData = $0000012A;
	TagsEnumeration_ProtectedMobileData = $0000012B;
	TagsEnumeration_ProtectedSignature = $0000012C;
	TagsEnumeration_ProtocolVersion = $0000012D;
	TagsEnumeration_Quantity = $0000012E;
	TagsEnumeration_QuantitySpecified = $0000012F;
	TagsEnumeration_Rate = $00000130;
	TagsEnumeration_RateSpecified = $00000131;
	TagsEnumeration_RebateLabel = $00000132;
	TagsEnumeration_Rebates = $00000133;
	TagsEnumeration_ReceiptReprintFlag = $00000134;
	TagsEnumeration_RecipientIdentifier = $00000135;
	TagsEnumeration_ReconciliationType = $00000136;
	TagsEnumeration_ReferenceID = $00000137;
	TagsEnumeration_RegistrationID = $00000138;
	TagsEnumeration_RejectedMessage = $00000139;
	TagsEnumeration_RelativeDistinguishedName = $0000013A;
	TagsEnumeration_RemoveAllFlag = $0000013B;
	TagsEnumeration_RemoveAllFlagSpecified = $0000013C;
	TagsEnumeration_RepeatedMessageResponse = $0000013D;
	TagsEnumeration_RequestedAmount = $0000013E;
	TagsEnumeration_RequestedAmountSpecified = $0000013F;
	TagsEnumeration_RequestedValidityDate = $00000140;
	TagsEnumeration_RequiredSignatureFlag = $00000141;
	TagsEnumeration_Response = $00000142;
	TagsEnumeration_ResponseMode = $00000143;
	TagsEnumeration_ResponseRequiredFlag = $00000144;
	TagsEnumeration_Result = $00000145;
	TagsEnumeration_ReuseCardDataFlag = $00000146;
	TagsEnumeration_ReversalReason = $00000147;
	TagsEnumeration_ReversedAmount = $00000148;
	TagsEnumeration_ReversedAmountSpecified = $00000149;
	TagsEnumeration_SaleCapabilities = $0000014A;
	TagsEnumeration_SaleChannel = $0000014B;
	TagsEnumeration_SaleData = $0000014C;
	TagsEnumeration_SaleID = $0000014D;
	TagsEnumeration_SaleItem = $0000014E;
	TagsEnumeration_SaleItemRebate = $0000014F;
	TagsEnumeration_SaleProfile = $00000150;
	TagsEnumeration_SaleReferenceID = $00000151;
	TagsEnumeration_SaleSoftware = $00000152;
	TagsEnumeration_SaleTerminalData = $00000153;
	TagsEnumeration_SaleToAcquirerData = $00000154;
	TagsEnumeration_SaleToIssuerData = $00000155;
	TagsEnumeration_SaleToPOIData = $00000156;
	TagsEnumeration_SaleTransactionID = $00000157;
	TagsEnumeration_SecurityOKFlag = $00000158;
	TagsEnumeration_SecurityOKFlagSpecified = $00000159;
	TagsEnumeration_SecurityTrailer = $0000015A;
	TagsEnumeration_SensitiveCardData = $0000015B;
	TagsEnumeration_SensitiveMobileData = $0000015C;
	TagsEnumeration_SequenceNumber = $0000015D;
	TagsEnumeration_SerialNumber = $0000015E;
	TagsEnumeration_ServiceID = $0000015F;
	TagsEnumeration_ServiceIdentification = $00000160;
	TagsEnumeration_ServiceProfiles = $00000161;
	TagsEnumeration_ServicesEnabled = $00000162;
	TagsEnumeration_ShiftNumber = $00000163;
	TagsEnumeration_Signature = $00000164;
	TagsEnumeration_SignatureAlgorithm = $00000165;
	TagsEnumeration_SignaturePoint = $00000166;
	TagsEnumeration_Signer = $00000167;
	TagsEnumeration_SignerIdentifier = $00000168;
	TagsEnumeration_SoftwareVersion = $00000169;
	TagsEnumeration_SoundAction = $0000016A;
	TagsEnumeration_SoundContent = $0000016B;
	TagsEnumeration_SoundFormat = $0000016C;
	TagsEnumeration_SoundVolume = $0000016D;
	TagsEnumeration_SplitPaymentFlag = $0000016E;
	TagsEnumeration_SponsoredMerchant = $0000016F;
	TagsEnumeration_StartColumn = $00000170;
	TagsEnumeration_StartDate = $00000171;
	TagsEnumeration_StartRow = $00000172;
	TagsEnumeration_StatementReference = $00000173;
	TagsEnumeration_StoredValueAccountID = $00000174;
	TagsEnumeration_StoredValueAccountStatus = $00000175;
	TagsEnumeration_StoredValueAccountType = $00000176;
	TagsEnumeration_StoredValueData = $00000177;
	TagsEnumeration_StoredValueProvider = $00000178;
	TagsEnumeration_StoredValueResult = $00000179;
	TagsEnumeration_StoredValueTransactionType = $0000017A;
	TagsEnumeration_StringMask = $0000017B;
	TagsEnumeration_TaxCode = $0000017C;
	TagsEnumeration_TerminalEnvironment = $0000017D;
	TagsEnumeration_TextInput = $0000017E;
	TagsEnumeration_TimeStamp = $0000017F;
	TagsEnumeration_TipAmount = $00000180;
	TagsEnumeration_TipAmountSpecified = $00000181;
	TagsEnumeration_TokenRequestedType = $00000182;
	TagsEnumeration_TokenValue = $00000183;
	TagsEnumeration_TotalAmount = $00000184;
	TagsEnumeration_TotalAmountSpecified = $00000185;
	TagsEnumeration_TotalDetails = $00000186;
	TagsEnumeration_TotalFeesAmount = $00000187;
	TagsEnumeration_TotalFeesAmountSpecified = $00000188;
	TagsEnumeration_TotalFilter = $00000189;
	TagsEnumeration_TotalNbOfPayments = $0000018A;
	TagsEnumeration_TotalRebate = $0000018B;
	TagsEnumeration_TotalRebatesAmount = $0000018C;
	TagsEnumeration_TotalRebatesAmountSpecified = $0000018D;
	TagsEnumeration_TotalRebateSpecified = $0000018E;
	TagsEnumeration_TotalsGroupID = $0000018F;
	TagsEnumeration_TrackData = $00000190;
	TagsEnumeration_TrackFormat = $00000191;
	TagsEnumeration_TrackNumb = $00000192;
	TagsEnumeration_TrainingModeFlag = $00000193;
	TagsEnumeration_TransactionAction = $00000194;
	TagsEnumeration_TransactionAmount = $00000195;
	TagsEnumeration_TransactionConditions = $00000196;
	TagsEnumeration_TransactionCount = $00000197;
	TagsEnumeration_TransactionID = $00000198;
	TagsEnumeration_TransactionToPerform = $00000199;
	TagsEnumeration_TransactionTotals = $0000019A;
	TagsEnumeration_TransactionType = $0000019B;
	TagsEnumeration_TypeCode = $0000019C;
	TagsEnumeration_UnitOfMeasure = $0000019D;
	TagsEnumeration_UnitPrice = $0000019E;
	TagsEnumeration_UnitPriceSpecified = $0000019F;
	TagsEnumeration_UnitValue = $000001A0;
	TagsEnumeration_UTMCoordinates = $000001A1;
	TagsEnumeration_UTMEastward = $000001A2;
	TagsEnumeration_UTMNorthward = $000001A3;
	TagsEnumeration_UTMZone = $000001A4;
	TagsEnumeration_ValidityDate = $000001A5;
	TagsEnumeration_Value = $000001A6;
	TagsEnumeration_Version = $000001A7;
	TagsEnumeration_WaitResponseFlag = $000001A8;
	TagsEnumeration_WaitUserValidationFlag = $000001A9;
	TagsEnumeration_WarmResetFlag = $000001AA;
	TagsEnumeration_WarmResetFlagSpecified = $000001AB;
	TagsEnumeration_X = $000001AC;
	TagsEnumeration_Y = $000001AD;

	// Constantes pour enum NexoMessageStatus
type
	NexoMessageStatus = TOleEnum;

const
	NexoMessageStatus_normal = $00000000;
	NexoMessageStatus_timeout = $00000001;
	NexoMessageStatus_cancelled = $00000002;

	// Constantes pour enum NexoSchemaEventType
type
	NexoSchemaEventType = TOleEnum;

const
	NexoSchemaEventType_All = $00000000;
	NexoSchemaEventType_Error = $00000001;
	NexoSchemaEventType_Warning = $00000002;

	// Constantes pour enum NexoNextAction
type
	NexoNextAction = TOleEnum;

const
	NexoNextAction_nothing = $00000000;
	NexoNextAction_final = $00000001;
	NexoNextAction_noReply = $00000002;
	NexoNextAction_sendReply = $00000003;
	NexoNextAction_sendRequest = $00000004;
	NexoNextAction_sendNotification = $00000005;

	// Constantes pour enum NexoValues
type
	NexoValues = TOleEnum;

const
	NexoValues_None = $7FFFFFFF;

	// Constantes pour enum Labels
type
	Labels = TOleEnum;

const
	Labels_IP = $00000000;
	Labels_SaleID = $00000001;
	Labels_POIID = $00000002;
	Labels_LoginTimestamp = $00000003;
	Labels_LogoutTimestamp = $00000004;
	Labels_Logged = $00000005;
	Labels_ManufacturerID = $00000006;
	Labels_ApplicationName = $00000007;
	Labels_SoftwareVersion = $00000008;
	Labels_CertificationCode = $00000009;
	Labels_AutoLogoutTimestamp = $0000000A;

	// Constantes pour enum Labels_2
type
	Labels_2 = TOleEnum;

const
	Labels_2_IP = $00000000;
	Labels_2_Accepted = $00000001;

	// Constantes pour enum Labels_3
type
	Labels_3 = TOleEnum;

const
	Labels_3_IP = $00000000;
	Labels_3_SaleID = $00000001;
	Labels_3_Accepted = $00000002;
	Labels_3_CertificationCode = $00000003;

	// Constantes pour enum Labels_4
type
	Labels_4 = TOleEnum;

const
	Labels_4_ID = $00000000;
	Labels_4_SaleID = $00000001;
	Labels_4_POIID = $00000002;
	Labels_4_Category = $00000003;
	Labels_4_Received = $00000004;
	Labels_4_ServiceID = $00000005;
	Labels_4_DeviceID = $00000006;
	Labels_4_Request = $00000007;
	Labels_4_RequestTimestamp = $00000008;
	Labels_4_Reply = $00000009;
	Labels_4_ReplyTimestamp = $0000000A;
	Labels_4_Result = $0000000B;
	Labels_4_ErrorCondition = $0000000C;
	Labels_4_AdditionalResponse = $0000000D;
	Labels_4_RequestedAmount = $0000000E;
	Labels_4_AuthorizedAmount = $0000000F;
	Labels_4_TransactionCurrency = $00000010;
	Labels_4_ReconciliationID = $00000011;
	Labels_4_SaleTransactionID = $00000012;
	Labels_4_SaleTransactionTimestamp = $00000013;
	Labels_4_POITransactionID = $00000014;
	Labels_4_POITransactionTimestamp = $00000015;

type

	// *********************************************************************//
	// Déclaration Forward des types définis dans la bibliothèque de types
	// *********************************************************************//
	IAbortRequestType = interface;
	IAbortRequestTypeDisp = dispinterface;
	IMessageReferenceType = interface;
	IMessageReferenceTypeDisp = dispinterface;
	IDisplayResponseType = interface;
	IDisplayResponseTypeDisp = dispinterface;
	IOutputResultType = interface;
	IOutputResultTypeDisp = dispinterface;
	IResponseType = interface;
	IResponseTypeDisp = dispinterface;
	IDisplayRequestType = interface;
	IDisplayRequestTypeDisp = dispinterface;
	IDisplayOutputType = interface;
	IDisplayOutputTypeDisp = dispinterface;
	IOutputContentType = interface;
	IOutputContentTypeDisp = dispinterface;
	IPredefinedContentType = interface;
	IPredefinedContentTypeDisp = dispinterface;
	IOutputTextType = interface;
	IOutputTextTypeDisp = dispinterface;
	IOutputBarcodeType = interface;
	IOutputBarcodeTypeDisp = dispinterface;
	IMenuEntryType = interface;
	IMenuEntryTypeDisp = dispinterface;
	IAdminRequestType = interface;
	IAdminRequestTypeDisp = dispinterface;
	IAdminResponseType = interface;
	IAdminResponseTypeDisp = dispinterface;
	IAllowedProductType = interface;
	IAllowedProductTypeDisp = dispinterface;
	IAmountsReqType = interface;
	IAmountsReqTypeDisp = dispinterface;
	IAmountsRespType = interface;
	IAmountsRespTypeDisp = dispinterface;
	IAreaSizeType = interface;
	IAreaSizeTypeDisp = dispinterface;
	IBalanceInquiryRequestType = interface;
	IBalanceInquiryRequestTypeDisp = dispinterface;
	IPaymentAccountReqType = interface;
	IPaymentAccountReqTypeDisp = dispinterface;
	ITransactionIdentificationType = interface;
	ITransactionIdentificationTypeDisp = dispinterface;
	IPaymentInstrumentDataType = interface;
	IPaymentInstrumentDataTypeDisp = dispinterface;
	ICardDataType = interface;
	ICardDataTypeDisp = dispinterface;
	IContentInformationType = interface;
	IContentInformationTypeDisp = dispinterface;
	IAuthenticatedDataType = interface;
	IAuthenticatedDataTypeDisp = dispinterface;
	IKEKType = interface;
	IKEKTypeDisp = dispinterface;
	IKEKIdentifierType = interface;
	IKEKIdentifierTypeDisp = dispinterface;
	IAlgorithmIdentifier = interface;
	IAlgorithmIdentifierDisp = dispinterface;
	IParameterType = interface;
	IParameterTypeDisp = dispinterface;
	IKeyTransportType = interface;
	IKeyTransportTypeDisp = dispinterface;
	IRecipientIdentifierType = interface;
	IRecipientIdentifierTypeDisp = dispinterface;
	IIssuerAndSerialNumberType = interface;
	IIssuerAndSerialNumberTypeDisp = dispinterface;
	IRelativeDistinguishedNameType = interface;
	IRelativeDistinguishedNameTypeDisp = dispinterface;
	IEncapsulatedContentType = interface;
	IEncapsulatedContentTypeDisp = dispinterface;
	IDigestedDataType = interface;
	IDigestedDataTypeDisp = dispinterface;
	IEnvelopedDataType = interface;
	IEnvelopedDataTypeDisp = dispinterface;
	IEncryptedContentType = interface;
	IEncryptedContentTypeDisp = dispinterface;
	INamedKeyEncryptedDataType = interface;
	INamedKeyEncryptedDataTypeDisp = dispinterface;
	ISignedDataType = interface;
	ISignedDataTypeDisp = dispinterface;
	ISignerType = interface;
	ISignerTypeDisp = dispinterface;
	ISignerIdentifierType = interface;
	ISignerIdentifierTypeDisp = dispinterface;
	ISensitiveCardDataType = interface;
	ISensitiveCardDataTypeDisp = dispinterface;
	ITrackDataType = interface;
	ITrackDataTypeDisp = dispinterface;
	IPaymentTokenType = interface;
	IPaymentTokenTypeDisp = dispinterface;
	ICustomerOrderType = interface;
	ICustomerOrderTypeDisp = dispinterface;
	ICheckDataType = interface;
	ICheckDataTypeDisp = dispinterface;
	IMobileDataType = interface;
	IMobileDataTypeDisp = dispinterface;
	IGeolocationType = interface;
	IGeolocationTypeDisp = dispinterface;
	IGeographicCoordinatesType = interface;
	IGeographicCoordinatesTypeDisp = dispinterface;
	IUTMCoordinatesType = interface;
	IUTMCoordinatesTypeDisp = dispinterface;
	ISensitiveMobileDataType = interface;
	ISensitiveMobileDataTypeDisp = dispinterface;
	ILoyaltyAccountReqType = interface;
	ILoyaltyAccountReqTypeDisp = dispinterface;
	ILoyaltyAccountIDType = interface;
	ILoyaltyAccountIDTypeDisp = dispinterface;
	IBalanceInquiryResponseType = interface;
	IBalanceInquiryResponseTypeDisp = dispinterface;
	IPaymentAccountStatusType = interface;
	IPaymentAccountStatusTypeDisp = dispinterface;
	IPaymentAcquirerDataType = interface;
	IPaymentAcquirerDataTypeDisp = dispinterface;
	ILoyaltyAccountStatusType = interface;
	ILoyaltyAccountStatusTypeDisp = dispinterface;
	ILoyaltyAccountType = interface;
	ILoyaltyAccountTypeDisp = dispinterface;
	IBatchRequestType = interface;
	IBatchRequestTypeDisp = dispinterface;
	ITransactionToPerformType = interface;
	ITransactionToPerformTypeDisp = dispinterface;
	ILoyaltyRequestType = interface;
	ILoyaltyRequestTypeDisp = dispinterface;
	ISaleDataType = interface;
	ISaleDataTypeDisp = dispinterface;
	ISaleTerminalDataType = interface;
	ISaleTerminalDataTypeDisp = dispinterface;
	ISaleProfileType = interface;
	ISaleProfileTypeDisp = dispinterface;
	ISponsoredMerchantType = interface;
	ISponsoredMerchantTypeDisp = dispinterface;
	ISaleToIssuerDataType = interface;
	ISaleToIssuerDataTypeDisp = dispinterface;
	ILoyaltyTransactionType = interface;
	ILoyaltyTransactionTypeDisp = dispinterface;
	IOriginalPOITransactionType = interface;
	IOriginalPOITransactionTypeDisp = dispinterface;
	ITransactionConditionsType = interface;
	ITransactionConditionsTypeDisp = dispinterface;
	ISaleItemType = interface;
	ISaleItemTypeDisp = dispinterface;
	ILoyaltyDataType = interface;
	ILoyaltyDataTypeDisp = dispinterface;
	ILoyaltyAmountType = interface;
	ILoyaltyAmountTypeDisp = dispinterface;
	IPaymentRequestType = interface;
	IPaymentRequestTypeDisp = dispinterface;
	IPaymentTransactionType = interface;
	IPaymentTransactionTypeDisp = dispinterface;
	IPaymentDataType = interface;
	IPaymentDataTypeDisp = dispinterface;
	IInstalmentType = interface;
	IInstalmentTypeDisp = dispinterface;
	IReversalRequestType = interface;
	IReversalRequestTypeDisp = dispinterface;
	IBatchResponseType = interface;
	IBatchResponseTypeDisp = dispinterface;
	IPerformedTransactionType = interface;
	IPerformedTransactionTypeDisp = dispinterface;
	IPOIDataType = interface;
	IPOIDataTypeDisp = dispinterface;
	IPaymentResultType = interface;
	IPaymentResultTypeDisp = dispinterface;
	ICurrencyConversionType = interface;
	ICurrencyConversionTypeDisp = dispinterface;
	IAmountType = interface;
	IAmountTypeDisp = dispinterface;
	ICapturedSignatureType = interface;
	ICapturedSignatureTypeDisp = dispinterface;
	ISignaturePointType = interface;
	ISignaturePointTypeDisp = dispinterface;
	ILoyaltyResultType = interface;
	ILoyaltyResultTypeDisp = dispinterface;
	ILoyaltyAcquirerDataType = interface;
	ILoyaltyAcquirerDataTypeDisp = dispinterface;
	IRebatesType = interface;
	IRebatesTypeDisp = dispinterface;
	ISaleItemRebateType = interface;
	ISaleItemRebateTypeDisp = dispinterface;
	ICardAcquisitionRequestType = interface;
	ICardAcquisitionRequestTypeDisp = dispinterface;
	ICardAcquisitionTransactionType = interface;
	ICardAcquisitionTransactionTypeDisp = dispinterface;
	ICardAcquisitionResponseType = interface;
	ICardAcquisitionResponseTypeDisp = dispinterface;
	ICardholderPINType = interface;
	ICardholderPINTypeDisp = dispinterface;
	ICardReaderAPDURequestType = interface;
	ICardReaderAPDURequestTypeDisp = dispinterface;
	ICardReaderAPDUResponseType = interface;
	ICardReaderAPDUResponseTypeDisp = dispinterface;
	ICardReaderInitRequestType = interface;
	ICardReaderInitRequestTypeDisp = dispinterface;
	ICardReaderInitResponseType = interface;
	ICardReaderInitResponseTypeDisp = dispinterface;
	IICCResetDataType = interface;
	IICCResetDataTypeDisp = dispinterface;
	ICardReaderPowerOffRequestType = interface;
	ICardReaderPowerOffRequestTypeDisp = dispinterface;
	ICardReaderPowerOffResponseType = interface;
	ICardReaderPowerOffResponseTypeDisp = dispinterface;
	ICashHandlingDeviceType = interface;
	ICashHandlingDeviceTypeDisp = dispinterface;
	ICoinsOrBillsType = interface;
	ICoinsOrBillsTypeDisp = dispinterface;
	IDiagnosisRequestType = interface;
	IDiagnosisRequestTypeDisp = dispinterface;
	IDiagnosisResponseType = interface;
	IDiagnosisResponseTypeDisp = dispinterface;
	IPOIStatusType = interface;
	IPOIStatusTypeDisp = dispinterface;
	IHostStatusType = interface;
	IHostStatusTypeDisp = dispinterface;
	IEnableServiceRequestType = interface;
	IEnableServiceRequestTypeDisp = dispinterface;
	IEnableServiceResponseType = interface;
	IEnableServiceResponseTypeDisp = dispinterface;
	IEventNotificationType = interface;
	IEventNotificationTypeDisp = dispinterface;
	IGetTotalsRequestType = interface;
	IGetTotalsRequestTypeDisp = dispinterface;
	ITotalFilterType = interface;
	ITotalFilterTypeDisp = dispinterface;
	IGetTotalsResponseType = interface;
	IGetTotalsResponseTypeDisp = dispinterface;
	ITransactionTotalsType = interface;
	ITransactionTotalsTypeDisp = dispinterface;
	IPaymentTotalsType = interface;
	IPaymentTotalsTypeDisp = dispinterface;
	ILoyaltyTotalsType = interface;
	ILoyaltyTotalsTypeDisp = dispinterface;
	IInputType = interface;
	IInputTypeDisp = dispinterface;
	IInputDataType = interface;
	IInputDataTypeDisp = dispinterface;
	IInputRequestType = interface;
	IInputRequestTypeDisp = dispinterface;
	IInputResponseType = interface;
	IInputResponseTypeDisp = dispinterface;
	IInputResultType = interface;
	IInputResultTypeDisp = dispinterface;
	IInputUpdateType = interface;
	IInputUpdateTypeDisp = dispinterface;
	ILoginRequestType = interface;
	ILoginRequestTypeDisp = dispinterface;
	ISaleSoftwareType = interface;
	ISaleSoftwareTypeDisp = dispinterface;
	ILoginResponseType = interface;
	ILoginResponseTypeDisp = dispinterface;
	IPOISystemDataType = interface;
	IPOISystemDataTypeDisp = dispinterface;
	IPOISoftwareType = interface;
	IPOISoftwareTypeDisp = dispinterface;
	IPOITerminalDataType = interface;
	IPOITerminalDataTypeDisp = dispinterface;
	IPOIProfileType = interface;
	IPOIProfileTypeDisp = dispinterface;
	ILogoutRequestType = interface;
	ILogoutRequestTypeDisp = dispinterface;
	ILogoutResponseType = interface;
	ILogoutResponseTypeDisp = dispinterface;
	ILoyaltyResponseType = interface;
	ILoyaltyResponseTypeDisp = dispinterface;
	IPaymentReceiptType = interface;
	IPaymentReceiptTypeDisp = dispinterface;
	IMessageHeaderType = interface;
	IMessageHeaderTypeDisp = dispinterface;
	IPaymentResponseType = interface;
	IPaymentResponseTypeDisp = dispinterface;
	IPINRequestType = interface;
	IPINRequestTypeDisp = dispinterface;
	IPINResponseType = interface;
	IPINResponseTypeDisp = dispinterface;
	IPrintOutputType = interface;
	IPrintOutputTypeDisp = dispinterface;
	IPrintRequestType = interface;
	IPrintRequestTypeDisp = dispinterface;
	IPrintResponseType = interface;
	IPrintResponseTypeDisp = dispinterface;
	IReconciliationRequestType = interface;
	IReconciliationRequestTypeDisp = dispinterface;
	IReconciliationResponseType = interface;
	IReconciliationResponseTypeDisp = dispinterface;
	IRepeatedMessageResponseType = interface;
	IRepeatedMessageResponseTypeDisp = dispinterface;
	IReversalResponseType = interface;
	IReversalResponseTypeDisp = dispinterface;
	IStoredValueResponseType = interface;
	IStoredValueResponseTypeDisp = dispinterface;
	IStoredValueResultType = interface;
	IStoredValueResultTypeDisp = dispinterface;
	IStoredValueAccountStatusType = interface;
	IStoredValueAccountStatusTypeDisp = dispinterface;
	IStoredValueAccountIDType = interface;
	IStoredValueAccountIDTypeDisp = dispinterface;
	ISoundContentType = interface;
	ISoundContentTypeDisp = dispinterface;
	ISoundRequestType = interface;
	ISoundRequestTypeDisp = dispinterface;
	ISoundResponseType = interface;
	ISoundResponseTypeDisp = dispinterface;
	IStoredValueDataType = interface;
	IStoredValueDataTypeDisp = dispinterface;
	IStoredValueRequestType = interface;
	IStoredValueRequestTypeDisp = dispinterface;
	ITransmitRequestType = interface;
	ITransmitRequestTypeDisp = dispinterface;
	ITransmitResponseType = interface;
	ITransmitResponseTypeDisp = dispinterface;
	ITransactionStatusRequestType = interface;
	ITransactionStatusRequestTypeDisp = dispinterface;
	ITransactionStatusResponseType = interface;
	ITransactionStatusResponseTypeDisp = dispinterface;
	ISaleToPOIRequest = interface;
	ISaleToPOIRequestDisp = dispinterface;
	ISaleToPOIResponse = interface;
	ISaleToPOIResponseDisp = dispinterface;
	IIssuerType = interface;
	IIssuerTypeDisp = dispinterface;
	INexoActivity = interface;
	INexoActivityDisp = dispinterface;
	_NexoMessage = interface;
	_NexoMessageDisp = dispinterface;
	_NexoPartner = interface;
	_NexoPartnerDisp = dispinterface;
	_NexoEndPoint = interface;
	_NexoEndPointDisp = dispinterface;
	_NexoSession = interface;
	_NexoSessionDisp = dispinterface;
	INexoAnyMessage = interface;
	INexoAnyMessageDisp = dispinterface;
	_NexoDelegates = interface;
	_NexoDelegatesDisp = dispinterface;
	INexoItem = interface;
	INexoItemDisp = dispinterface;
	_NexoKey = interface;
	_NexoKeyDisp = dispinterface;
	INexoAdmin = interface;
	INexoAdminDisp = dispinterface;
	INexoObject = interface;
	INexoObjectDisp = dispinterface;
	INexoBalanceInquiry = interface;
	INexoBalanceInquiryDisp = dispinterface;
	INexoBatch = interface;
	INexoBatchDisp = dispinterface;
	INexoCardAcquisition = interface;
	INexoCardAcquisitionDisp = dispinterface;
	INexoCardReaderInit = interface;
	INexoCardReaderInitDisp = dispinterface;
	INexoCardReaderAPDU = interface;
	INexoCardReaderAPDUDisp = dispinterface;
	INexoCardReaderPowerOFF = interface;
	INexoCardReaderPowerOFFDisp = dispinterface;
	INexoDeviceDisplay = interface;
	INexoDeviceDisplayDisp = dispinterface;
	INexoDeviceInputUpdate = interface;
	INexoDeviceInputUpdateDisp = dispinterface;
	INexoDeviceSound = interface;
	INexoDeviceSoundDisp = dispinterface;
	INexoEnableService = interface;
	INexoEnableServiceDisp = dispinterface;
	INexoGetTotals = interface;
	INexoGetTotalsDisp = dispinterface;
	INexoLoyalty = interface;
	INexoLoyaltyDisp = dispinterface;
	INexoPayment = interface;
	INexoPaymentDisp = dispinterface;
	INexoPIN = interface;
	INexoPINDisp = dispinterface;
	INexoReconciliation = interface;
	INexoReconciliationDisp = dispinterface;
	INexoStoredValue = interface;
	INexoStoredValueDisp = dispinterface;
	INexoTransmit = interface;
	INexoTransmitDisp = dispinterface;
	INexoAbort = interface;
	INexoAbortDisp = dispinterface;
	INexoDiagnosis = interface;
	INexoDiagnosisDisp = dispinterface;
	INexoEvent = interface;
	INexoEventDisp = dispinterface;
	INexoTransactionStatus = interface;
	INexoTransactionStatusDisp = dispinterface;
	INexoResponseType = interface;
	INexoResponseTypeDisp = dispinterface;
	INexoDeviceInput = interface;
	INexoDeviceInputDisp = dispinterface;
	INexoDevicePrint = interface;
	INexoDevicePrintDisp = dispinterface;
	INexoLogin = interface;
	INexoLoginDisp = dispinterface;
	INexoLogout = interface;
	INexoLogoutDisp = dispinterface;
	INexoReversal = interface;
	INexoReversalDisp = dispinterface;
	INexoObjectToProcess = interface;
	INexoObjectToProcessDisp = dispinterface;
	INexoTextString = interface;
	INexoTextStringDisp = dispinterface;
	INexoBooleanType = interface;
	INexoBooleanTypeDisp = dispinterface;
	INexoInteger = interface;
	INexoIntegerDisp = dispinterface;
	INexoDecimal = interface;
	INexoDecimalDisp = dispinterface;
	INexoLabel = interface;
	INexoLabelDisp = dispinterface;
	INexoEnumeration = interface;
	INexoEnumerationDisp = dispinterface;
	INexoCluster = interface;
	INexoClusterDisp = dispinterface;
	INexoLengthDrivenTextString = interface;
	INexoLengthDrivenTextStringDisp = dispinterface;
	INexoDigitString = interface;
	INexoDigitStringDisp = dispinterface;
	INexoISOData = interface;
	INexoISODataDisp = dispinterface;
	INexoISODateTime = interface;
	INexoISODateTimeDisp = dispinterface;
	INexoISODate = interface;
	INexoISODateDisp = dispinterface;
	INexoNonStringType = interface;
	INexoNonStringTypeDisp = dispinterface;
	INexoCurrency = interface;
	INexoCurrencyDisp = dispinterface;
	_NexoMessageType = interface;
	_NexoMessageTypeDisp = dispinterface;
	_NexoMessageClass = interface;
	_NexoMessageClassDisp = dispinterface;
	_NexoMessageCategory = interface;
	_NexoMessageCategoryDisp = dispinterface;
	_NexoTerminalEnvironment = interface;
	_NexoTerminalEnvironmentDisp = dispinterface;
	_NexoSaleCapabilities = interface;
	_NexoSaleCapabilitiesDisp = dispinterface;
	_NexoProtocolVersion = interface;
	_NexoProtocolVersionDisp = dispinterface;
	_NexoID = interface;
	_NexoIDDisp = dispinterface;
	_NexoServiceID = interface;
	_NexoServiceIDDisp = dispinterface;
	_NexoDeviceID = interface;
	_NexoDeviceIDDisp = dispinterface;
	_NexoPOIID = interface;
	_NexoPOIIDDisp = dispinterface;
	_NexoSaleID = interface;
	_NexoSaleIDDisp = dispinterface;
	_NexoOperatorLanguage = interface;
	_NexoOperatorLanguageDisp = dispinterface;
	_NexoResult = interface;
	_NexoResultDisp = dispinterface;
	_NexoErrorCondition = interface;
	_NexoErrorConditionDisp = dispinterface;
	_NexoAdditionalResponse = interface;
	_NexoAdditionalResponseDisp = dispinterface;
	_NexoGlobalStatus = interface;
	_NexoGlobalStatusDisp = dispinterface;
	_NexoCertificationCode = interface;
	_NexoCertificationCodeDisp = dispinterface;
	_NexoSoftwareVersion = interface;
	_NexoSoftwareVersionDisp = dispinterface;
	_NexoApplicationName = interface;
	_NexoApplicationNameDisp = dispinterface;
	_NexoManufacturerID = interface;
	_NexoManufacturerIDDisp = dispinterface;
	_NexoPOISerialNumber = interface;
	_NexoPOISerialNumberDisp = dispinterface;
	_NexoOperatorID = interface;
	_NexoOperatorIDDisp = dispinterface;
	_NexoDateTime = interface;
	_NexoDateTimeDisp = dispinterface;
	_NexoInputCommand = interface;
	_NexoInputCommandDisp = dispinterface;
	_NexoEventToNotify = interface;
	_NexoEventToNotifyDisp = dispinterface;
	_NexoPaymentIntrumentType = interface;
	_NexoPaymentIntrumentTypeDisp = dispinterface;
	_NexoVersion = interface;
	_NexoVersionDisp = dispinterface;
	_NexoCurrentVersion = interface;
	_NexoCurrentVersionDisp = dispinterface;
	INexoRetailerServerActivity = interface;
	INexoRetailerServerActivityDisp = dispinterface;
	_NexoRetailerServerDatabaseConnection = interface;
	_NexoRetailerServerDatabaseConnectionDisp = dispinterface;
	_NexoRetailerServerDatabaseEndPoint = interface;
	_NexoRetailerServerDatabaseEndPointDisp = dispinterface;
	_NexoRetailerServerDatabaseSale = interface;
	_NexoRetailerServerDatabaseSaleDisp = dispinterface;
	_NexoRetailerServerDatabaseMessage = interface;
	_NexoRetailerServerDatabaseMessageDisp = dispinterface;
	INexoRetailerServerDatabaseSettings = interface;
	INexoRetailerServerDatabaseSettingsDisp = dispinterface;
	_NexoRetailerServerDatabase = interface;
	_NexoRetailerServerDatabaseDisp = dispinterface;
	INexoRetailerServerSettings = interface;
	INexoRetailerServerSettingsDisp = dispinterface;
	INexoRetailerClientHandle = interface;
	INexoRetailerClientHandleDisp = dispinterface;
	INexoRetailerClient = interface;
	INexoRetailerClientDisp = dispinterface;
	INexoRetailerClientSettings = interface;
	INexoRetailerClientSettingsDisp = dispinterface;
	INexoRetailerClientConnectionSettings = interface;
	INexoRetailerClientConnectionSettingsDisp = dispinterface;
	INexoRetailerClientActivity = interface;
	INexoRetailerClientActivityDisp = dispinterface;

	// *********************************************************************//
	// Déclaration de CoClasses définies dans la bibliothèque de types
	// (REMARQUE: On affecte chaque CoClasse à son Interface par défaut)
	// *********************************************************************//
	AbortRequestType = IAbortRequestType;
	MessageReferenceType = IMessageReferenceType;
	DisplayResponseType = IDisplayResponseType;
	OutputResultType = IOutputResultType;
	ResponseType = IResponseType;
	DisplayRequestType = IDisplayRequestType;
	DisplayOutputType = IDisplayOutputType;
	OutputContentType = IOutputContentType;
	PredefinedContentType = IPredefinedContentType;
	OutputTextType = IOutputTextType;
	OutputBarcodeType = IOutputBarcodeType;
	MenuEntryType = IMenuEntryType;
	AdminRequestType = IAdminRequestType;
	AdminResponseType = IAdminResponseType;
	AllowedProductType = IAllowedProductType;
	AmountsReqType = IAmountsReqType;
	AmountsRespType = IAmountsRespType;
	AreaSizeType = IAreaSizeType;
	BalanceInquiryRequestType = IBalanceInquiryRequestType;
	PaymentAccountReqType = IPaymentAccountReqType;
	TransactionIdentificationType = ITransactionIdentificationType;
	PaymentInstrumentDataType = IPaymentInstrumentDataType;
	CardDataType = ICardDataType;
	ContentInformationType = IContentInformationType;
	AuthenticatedDataType = IAuthenticatedDataType;
	KEKType = IKEKType;
	KEKIdentifierType = IKEKIdentifierType;
	AlgorithmIdentifier = IAlgorithmIdentifier;
	ParameterType = IParameterType;
	KeyTransportType = IKeyTransportType;
	RecipientIdentifierType = IRecipientIdentifierType;
	IssuerAndSerialNumberType = IIssuerAndSerialNumberType;
	RelativeDistinguishedNameType = IRelativeDistinguishedNameType;
	EncapsulatedContentType = IEncapsulatedContentType;
	DigestedDataType = IDigestedDataType;
	EnvelopedDataType = IEnvelopedDataType;
	EncryptedContentType = IEncryptedContentType;
	NamedKeyEncryptedDataType = INamedKeyEncryptedDataType;
	SignedDataType = ISignedDataType;
	SignerType = ISignerType;
	SignerIdentifierType = ISignerIdentifierType;
	SensitiveCardDataType = ISensitiveCardDataType;
	TrackDataType = ITrackDataType;
	PaymentTokenType = IPaymentTokenType;
	CustomerOrderType = ICustomerOrderType;
	CheckDataType = ICheckDataType;
	MobileDataType = IMobileDataType;
	GeolocationType = IGeolocationType;
	GeographicCoordinatesType = IGeographicCoordinatesType;
	UTMCoordinatesType = IUTMCoordinatesType;
	SensitiveMobileDataType = ISensitiveMobileDataType;
	LoyaltyAccountReqType = ILoyaltyAccountReqType;
	LoyaltyAccountIDType = ILoyaltyAccountIDType;
	BalanceInquiryResponseType = IBalanceInquiryResponseType;
	PaymentAccountStatusType = IPaymentAccountStatusType;
	PaymentAcquirerDataType = IPaymentAcquirerDataType;
	LoyaltyAccountStatusType = ILoyaltyAccountStatusType;
	LoyaltyAccountType = ILoyaltyAccountType;
	BatchRequestType = IBatchRequestType;
	TransactionToPerformType = ITransactionToPerformType;
	LoyaltyRequestType = ILoyaltyRequestType;
	SaleDataType = ISaleDataType;
	SaleTerminalDataType = ISaleTerminalDataType;
	SaleProfileType = ISaleProfileType;
	SponsoredMerchantType = ISponsoredMerchantType;
	SaleToIssuerDataType = ISaleToIssuerDataType;
	LoyaltyTransactionType = ILoyaltyTransactionType;
	OriginalPOITransactionType = IOriginalPOITransactionType;
	TransactionConditionsType = ITransactionConditionsType;
	SaleItemType = ISaleItemType;
	LoyaltyDataType = ILoyaltyDataType;
	LoyaltyAmountType = ILoyaltyAmountType;
	PaymentRequestType = IPaymentRequestType;
	PaymentTransactionType = IPaymentTransactionType;
	PaymentDataType = IPaymentDataType;
	InstalmentType = IInstalmentType;
	ReversalRequestType = IReversalRequestType;
	BatchResponseType = IBatchResponseType;
	PerformedTransactionType = IPerformedTransactionType;
	POIDataType = IPOIDataType;
	PaymentResultType = IPaymentResultType;
	CurrencyConversionType = ICurrencyConversionType;
	AmountType = IAmountType;
	CapturedSignatureType = ICapturedSignatureType;
	SignaturePointType = ISignaturePointType;
	LoyaltyResultType = ILoyaltyResultType;
	LoyaltyAcquirerDataType = ILoyaltyAcquirerDataType;
	RebatesType = IRebatesType;
	SaleItemRebateType = ISaleItemRebateType;
	CardAcquisitionRequestType = ICardAcquisitionRequestType;
	CardAcquisitionTransactionType = ICardAcquisitionTransactionType;
	CardAcquisitionResponseType = ICardAcquisitionResponseType;
	CardholderPINType = ICardholderPINType;
	CardReaderAPDURequestType = ICardReaderAPDURequestType;
	CardReaderAPDUResponseType = ICardReaderAPDUResponseType;
	CardReaderInitRequestType = ICardReaderInitRequestType;
	CardReaderInitResponseType = ICardReaderInitResponseType;
	ICCResetDataType = IICCResetDataType;
	CardReaderPowerOffRequestType = ICardReaderPowerOffRequestType;
	CardReaderPowerOffResponseType = ICardReaderPowerOffResponseType;
	CashHandlingDeviceType = ICashHandlingDeviceType;
	CoinsOrBillsType = ICoinsOrBillsType;
	DiagnosisRequestType = IDiagnosisRequestType;
	DiagnosisResponseType = IDiagnosisResponseType;
	POIStatusType = IPOIStatusType;
	HostStatusType = IHostStatusType;
	EnableServiceRequestType = IEnableServiceRequestType;
	EnableServiceResponseType = IEnableServiceResponseType;
	EventNotificationType = IEventNotificationType;
	GetTotalsRequestType = IGetTotalsRequestType;
	TotalFilterType = ITotalFilterType;
	GetTotalsResponseType = IGetTotalsResponseType;
	TransactionTotalsType = ITransactionTotalsType;
	PaymentTotalsType = IPaymentTotalsType;
	LoyaltyTotalsType = ILoyaltyTotalsType;
	InputType = IInputType;
	InputDataType = IInputDataType;
	InputRequestType = IInputRequestType;
	InputResponseType = IInputResponseType;
	InputResultType = IInputResultType;
	InputUpdateType = IInputUpdateType;
	LoginRequestType = ILoginRequestType;
	SaleSoftwareType = ISaleSoftwareType;
	LoginResponseType = ILoginResponseType;
	POISystemDataType = IPOISystemDataType;
	POISoftwareType = IPOISoftwareType;
	POITerminalDataType = IPOITerminalDataType;
	POIProfileType = IPOIProfileType;
	LogoutRequestType = ILogoutRequestType;
	LogoutResponseType = ILogoutResponseType;
	LoyaltyResponseType = ILoyaltyResponseType;
	PaymentReceiptType = IPaymentReceiptType;
	MessageHeaderType = IMessageHeaderType;
	PaymentResponseType = IPaymentResponseType;
	PINRequestType = IPINRequestType;
	PINResponseType = IPINResponseType;
	PrintOutputType = IPrintOutputType;
	PrintRequestType = IPrintRequestType;
	PrintResponseType = IPrintResponseType;
	ReconciliationRequestType = IReconciliationRequestType;
	ReconciliationResponseType = IReconciliationResponseType;
	RepeatedMessageResponseType = IRepeatedMessageResponseType;
	ReversalResponseType = IReversalResponseType;
	StoredValueResponseType = IStoredValueResponseType;
	StoredValueResultType = IStoredValueResultType;
	StoredValueAccountStatusType = IStoredValueAccountStatusType;
	StoredValueAccountIDType = IStoredValueAccountIDType;
	SoundContentType = ISoundContentType;
	SoundRequestType = ISoundRequestType;
	SoundResponseType = ISoundResponseType;
	StoredValueDataType = IStoredValueDataType;
	StoredValueRequestType = IStoredValueRequestType;
	TransmitRequestType = ITransmitRequestType;
	TransmitResponseType = ITransmitResponseType;
	TransactionStatusRequestType = ITransactionStatusRequestType;
	TransactionStatusResponseType = ITransactionStatusResponseType;
	SaleToPOIRequest = ISaleToPOIRequest;
	SaleToPOIResponse = ISaleToPOIResponse;
	IssuerType = IIssuerType;
	NexoActivity = INexoActivity;
	NexoDictionaryOfMessages = IEnumerable;
	NexoListOfEndPoints = IEnumerable;
	NexoDictionaryOfEndPoints = IEnumerable;
	NexoListOfSessions = IEnumerable;
	NexoDictionaryOfSessions = IEnumerable;
	NexoListOfNexoKeys = IEnumerable;
	NexoDictionaryOfNexoKeys = IEnumerable;
	NexoListOfAnyMessages = IEnumerable;
	NexoDictionaryOfAnyMessages = IEnumerable;
	NexoAcceptedCommands = IEnumerable;
	NexoItem = INexoItem;
	NexoBalanceInquiry = INexoBalanceInquiry;
	NexoBatch = INexoBatch;
	NexoCardAcquisition = INexoCardAcquisition;
	NexoCardReaderInit = INexoCardReaderInit;
	NexoCardReaderAPDU = INexoCardReaderAPDU;
	NexoCardReaderPowerOFF = INexoCardReaderPowerOFF;
	NexoDeviceDisplay = INexoDeviceDisplay;
	NexoDeviceInputUpdate = INexoDeviceInputUpdate;
	NexoDeviceSound = INexoDeviceSound;
	NexoEnableService = INexoEnableService;
	NexoGetTotals = INexoGetTotals;
	NexoLoyalty = INexoLoyalty;
	NexoPayment = INexoPayment;
	NexoPIN = INexoPIN;
	NexoReconciliation = INexoReconciliation;
	NexoStoredValue = INexoStoredValue;
	NexoTransmit = INexoTransmit;
	NexoAbort = INexoAbort;
	NexoDiagnosis = INexoDiagnosis;
	NexoEvent = INexoEvent;
	NexoTransactionStatus = INexoTransactionStatus;
	NexoResponseType = INexoResponseType;
	NexoDeviceInput = INexoDeviceInput;
	NexoDevicePrint = INexoDevicePrint;
	NexoLogin = INexoLogin;
	NexoLogout = INexoLogout;
	NexoAdmin = INexoAdmin;
	NexoObject = INexoObject;
	NexoReversal = INexoReversal;
	NexoObjectToProcess = INexoObjectToProcess;
	NexoTextString = INexoTextString;
	NexoBoolean = INexoBooleanType;
	NexoInteger = INexoInteger;
	NexoDecimal = INexoDecimal;
	NexoSimpleAmount = INexoDecimal;
	NexoLabel = INexoLabel;
	NexoEnumeration = INexoEnumeration;
	NexoCluster = INexoCluster;
	NexoLengthDrivenTextString = INexoLengthDrivenTextString;
	NexoDigitString = INexoDigitString;
	NexoISOCurrency3A = INexoISOData;
	NexoISOCountry3A = INexoISOData;
	NexoISOLanguage2A = INexoISOData;
	NexoISODateTime = INexoISODateTime;
	NexoISODate = INexoISODate;
	NexoByteSequence = INexoNonStringType;
	NexoCurrency = INexoCurrency;
	NexoCurrencyEUR = INexoCurrency;
	NexoCurrencyUSD = INexoCurrency;
	NexoCurrencyGBP = INexoCurrency;
	NexoCurrencyCHF = INexoCurrency;
	NexoSupportedProtocolVersions = IEnumerable;
	NexoRetailerServerActivity = INexoRetailerServerActivity;
	NexoRetailerServerDatabaseSettings = INexoRetailerServerDatabaseSettings;
	NexoRetailerServerSettings = INexoRetailerServerSettings;
	NexoRetailerClientHandle = INexoRetailerClientHandle;
	NexoRetailerClient = INexoRetailerClient;
	NexoRetailerClientSettings = INexoRetailerClientSettings;
	NexoRetailerClientConnectionSettings = INexoRetailerClientConnectionSettings;
	NexoRetailerClientActivity = INexoRetailerClientActivity;
	NexoMessage = _NexoMessage;
	NexoPartner = _NexoPartner;
	NexoEndPoint = _NexoEndPoint;
	NexoSession = _NexoSession;
	NexoDelegates = _NexoDelegates;
	NexoKey = _NexoKey;
	NexoMessageType = _NexoMessageType;
	NexoMessageClass = _NexoMessageClass;
	NexoMessageCategory = _NexoMessageCategory;
	NexoTerminalEnvironment = _NexoTerminalEnvironment;
	NexoSaleCapabilities = _NexoSaleCapabilities;
	NexoProtocolVersion = _NexoProtocolVersion;
	NexoID = _NexoID;
	NexoServiceID = _NexoServiceID;
	NexoDeviceID = _NexoDeviceID;
	NexoPOIID = _NexoPOIID;
	NexoSaleID = _NexoSaleID;
	NexoOperatorLanguage = _NexoOperatorLanguage;
	NexoResult = _NexoResult;
	NexoErrorCondition = _NexoErrorCondition;
	NexoAdditionalResponse = _NexoAdditionalResponse;
	NexoGlobalStatus = _NexoGlobalStatus;
	NexoCertificationCode = _NexoCertificationCode;
	NexoSoftwareVersion = _NexoSoftwareVersion;
	NexoApplicationName = _NexoApplicationName;
	NexoManufacturerID = _NexoManufacturerID;
	NexoPOISerialNumber = _NexoPOISerialNumber;
	NexoOperatorID = _NexoOperatorID;
	NexoDateTime = _NexoDateTime;
	NexoInputCommand = _NexoInputCommand;
	NexoEventToNotify = _NexoEventToNotify;
	NexoPaymentIntrumentType = _NexoPaymentIntrumentType;
	NexoVersion = _NexoVersion;
	NexoCurrentVersion = _NexoCurrentVersion;
	NexoRetailerServerDatabaseConnection = _NexoRetailerServerDatabaseConnection;
	NexoRetailerServerDatabaseEndPoint = _NexoRetailerServerDatabaseEndPoint;
	NexoRetailerServerDatabaseSale = _NexoRetailerServerDatabaseSale;
	NexoRetailerServerDatabaseMessage = _NexoRetailerServerDatabaseMessage;
	NexoRetailerServerDatabase = _NexoRetailerServerDatabase;

	// *********************************************************************//
	// Interface :   IAbortRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {1206C434-3A1D-46AF-B151-F0732E1DA08C}
	// *********************************************************************//
	IAbortRequestType = interface(IDispatch)
		['{1206C434-3A1D-46AF-B151-F0732E1DA08C}']
		function Get_MessageReference: IMessageReferenceType; safecall;
		procedure _Set_MessageReference(const pRetVal: IMessageReferenceType); safecall;
		function Get_AbortReason: WideString; safecall;
		procedure Set_AbortReason(const pRetVal: WideString); safecall;
		function Get_DisplayOutput: IDisplayOutputType; safecall;
		procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
		property MessageReference: IMessageReferenceType read Get_MessageReference write _Set_MessageReference;
		property AbortReason: WideString read Get_AbortReason write Set_AbortReason;
		property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
	end;

	// *********************************************************************//
	// DispIntf :    IAbortRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {1206C434-3A1D-46AF-B151-F0732E1DA08C}
	// *********************************************************************//
	IAbortRequestTypeDisp = dispinterface
		['{1206C434-3A1D-46AF-B151-F0732E1DA08C}']
		property MessageReference: IMessageReferenceType dispid 1;
		property AbortReason: WideString dispid 2;
		property DisplayOutput: IDisplayOutputType dispid 3;
	end;

	// *********************************************************************//
	// Interface :   IMessageReferenceType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {5CDDA95E-10E1-440A-B097-386E52ED1BE5}
	// *********************************************************************//
	IMessageReferenceType = interface(IDispatch)
		['{5CDDA95E-10E1-440A-B097-386E52ED1BE5}']
		function Get_MessageCategory: WideString; safecall;
		procedure Set_MessageCategory(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		property MessageCategory: WideString read Get_MessageCategory write Set_MessageCategory;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
	end;

	// *********************************************************************//
	// DispIntf :    IMessageReferenceTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {5CDDA95E-10E1-440A-B097-386E52ED1BE5}
	// *********************************************************************//
	IMessageReferenceTypeDisp = dispinterface
		['{5CDDA95E-10E1-440A-B097-386E52ED1BE5}']
		property MessageCategory: WideString dispid 1;
		property ServiceID: WideString dispid 2;
		property DeviceID: WideString dispid 3;
		property SaleID: WideString dispid 4;
		property POIID: WideString dispid 5;
	end;

	// *********************************************************************//
	// Interface :   IDisplayResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {635927F7-7386-47A1-80F7-EFA12953B1AA}
	// *********************************************************************//
	IDisplayResponseType = interface(IDispatch)
		['{635927F7-7386-47A1-80F7-EFA12953B1AA}']
		function Get_OutputResult: PSafeArray; safecall;
		procedure Set_OutputResult(pRetVal: PSafeArray); safecall;
		function OutputResultSize: Integer; safecall;
		function OutputResultGetItem(index: Integer): IOutputResultType; safecall;
		function OutputResultSetItem(index: Integer; const value: IOutputResultType): WordBool; safecall;
		function OutputResultAddItem(const value: IOutputResultType): WordBool; safecall;
		function OutputResultRemoveItem(index: Integer): WordBool; safecall;
		property OutputResult: PSafeArray read Get_OutputResult write Set_OutputResult;
	end;

	// *********************************************************************//
	// DispIntf :    IDisplayResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {635927F7-7386-47A1-80F7-EFA12953B1AA}
	// *********************************************************************//
	IDisplayResponseTypeDisp = dispinterface
		['{635927F7-7386-47A1-80F7-EFA12953B1AA}']
		property OutputResult: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 1;
		function OutputResultSize: Integer; dispid 2;
		function OutputResultGetItem(index: Integer): IOutputResultType; dispid 3;
		function OutputResultSetItem(index: Integer; const value: IOutputResultType): WordBool; dispid 4;
		function OutputResultAddItem(const value: IOutputResultType): WordBool; dispid 5;
		function OutputResultRemoveItem(index: Integer): WordBool; dispid 6;
	end;

	// *********************************************************************//
	// Interface :   IOutputResultType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {DCF50BE8-6CF2-4C3F-952E-91A98AFD0BED}
	// *********************************************************************//
	IOutputResultType = interface(IDispatch)
		['{DCF50BE8-6CF2-4C3F-952E-91A98AFD0BED}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_Device: WideString; safecall;
		procedure Set_Device(const pRetVal: WideString); safecall;
		function Get_InfoQualify: WideString; safecall;
		procedure Set_InfoQualify(const pRetVal: WideString); safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property Device: WideString read Get_Device write Set_Device;
		property InfoQualify: WideString read Get_InfoQualify write Set_InfoQualify;
	end;

	// *********************************************************************//
	// DispIntf :    IOutputResultTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {DCF50BE8-6CF2-4C3F-952E-91A98AFD0BED}
	// *********************************************************************//
	IOutputResultTypeDisp = dispinterface
		['{DCF50BE8-6CF2-4C3F-952E-91A98AFD0BED}']
		property Response: IResponseType dispid 1;
		property Device: WideString dispid 2;
		property InfoQualify: WideString dispid 3;
	end;

	// *********************************************************************//
	// Interface :   IResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2D008BBE-C7FA-44C5-9A76-8DE4240AD46D}
	// *********************************************************************//
	IResponseType = interface(IDispatch)
		['{2D008BBE-C7FA-44C5-9A76-8DE4240AD46D}']
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_Result: WideString; safecall;
		procedure Set_Result(const pRetVal: WideString); safecall;
		function Get_ErrorCondition: WideString; safecall;
		procedure Set_ErrorCondition(const pRetVal: WideString); safecall;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property Result: WideString read Get_Result write Set_Result;
		property ErrorCondition: WideString read Get_ErrorCondition write Set_ErrorCondition;
	end;

	// *********************************************************************//
	// DispIntf :    IResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2D008BBE-C7FA-44C5-9A76-8DE4240AD46D}
	// *********************************************************************//
	IResponseTypeDisp = dispinterface
		['{2D008BBE-C7FA-44C5-9A76-8DE4240AD46D}']
		property AdditionalResponse: WideString dispid 1;
		property Result: WideString dispid 2;
		property ErrorCondition: WideString dispid 3;
	end;

	// *********************************************************************//
	// Interface :   IDisplayRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D96FD155-357D-4ACA-9BA0-15C03FA11E9B}
	// *********************************************************************//
	IDisplayRequestType = interface(IDispatch)
		['{D96FD155-357D-4ACA-9BA0-15C03FA11E9B}']
		function Get_DisplayOutput: PSafeArray; safecall;
		procedure Set_DisplayOutput(pRetVal: PSafeArray); safecall;
		function DisplayOutputSize: Integer; safecall;
		function DisplayOutputGetItem(index: Integer): IDisplayOutputType; safecall;
		function DisplayOutputSetItem(index: Integer; const value: IDisplayOutputType): WordBool; safecall;
		function DisplayOutputAddItem(const value: IDisplayOutputType): WordBool; safecall;
		function DisplayOutputRemoveItem(index: Integer): WordBool; safecall;
		property DisplayOutput: PSafeArray read Get_DisplayOutput write Set_DisplayOutput;
	end;

	// *********************************************************************//
	// DispIntf :    IDisplayRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D96FD155-357D-4ACA-9BA0-15C03FA11E9B}
	// *********************************************************************//
	IDisplayRequestTypeDisp = dispinterface
		['{D96FD155-357D-4ACA-9BA0-15C03FA11E9B}']
		property DisplayOutput: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 1;
		function DisplayOutputSize: Integer; dispid 2;
		function DisplayOutputGetItem(index: Integer): IDisplayOutputType; dispid 3;
		function DisplayOutputSetItem(index: Integer; const value: IDisplayOutputType): WordBool; dispid 4;
		function DisplayOutputAddItem(const value: IDisplayOutputType): WordBool; dispid 5;
		function DisplayOutputRemoveItem(index: Integer): WordBool; dispid 6;
	end;

	// *********************************************************************//
	// Interface :   IDisplayOutputType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {277E1CEE-3FF6-424D-969E-C6FD2FD8ED1C}
	// *********************************************************************//
	IDisplayOutputType = interface(IDispatch)
		['{277E1CEE-3FF6-424D-969E-C6FD2FD8ED1C}']
		function Get_OutputContent: IOutputContentType; safecall;
		procedure _Set_OutputContent(const pRetVal: IOutputContentType); safecall;
		function Get_MenuEntry: PSafeArray; safecall;
		procedure Set_MenuEntry(pRetVal: PSafeArray); safecall;
		function Get_OutputSignature: PSafeArray; safecall;
		procedure Set_OutputSignature(pRetVal: PSafeArray); safecall;
		function Get_ResponseRequiredFlag: WordBool; safecall;
		procedure Set_ResponseRequiredFlag(pRetVal: WordBool); safecall;
		function Get_MinimumDisplayTime: WideString; safecall;
		procedure Set_MinimumDisplayTime(const pRetVal: WideString); safecall;
		function Get_Device: WideString; safecall;
		procedure Set_Device(const pRetVal: WideString); safecall;
		function Get_InfoQualify: WideString; safecall;
		procedure Set_InfoQualify(const pRetVal: WideString); safecall;
		function MenuEntrySize: Integer; safecall;
		function MenuEntryGetItem(index: Integer): IMenuEntryType; safecall;
		function MenuEntrySetItem(index: Integer; const value: IMenuEntryType): WordBool; safecall;
		function MenuEntryAddItem(const value: IMenuEntryType): WordBool; safecall;
		function MenuEntryRemoveItem(index: Integer): WordBool; safecall;
		function OutputSignatureSize: Integer; safecall;
		function OutputSignatureGetItem(index: Integer): Byte; safecall;
		function OutputSignatureSetItem(index: Integer; value: Byte): WordBool; safecall;
		function OutputSignatureAddItem(value: Byte): WordBool; safecall;
		function OutputSignatureRemoveItem(index: Integer): WordBool; safecall;
		property OutputContent: IOutputContentType read Get_OutputContent write _Set_OutputContent;
		property MenuEntry: PSafeArray read Get_MenuEntry write Set_MenuEntry;
		property OutputSignature: PSafeArray read Get_OutputSignature write Set_OutputSignature;
		property ResponseRequiredFlag: WordBool read Get_ResponseRequiredFlag write Set_ResponseRequiredFlag;
		property MinimumDisplayTime: WideString read Get_MinimumDisplayTime write Set_MinimumDisplayTime;
		property Device: WideString read Get_Device write Set_Device;
		property InfoQualify: WideString read Get_InfoQualify write Set_InfoQualify;
	end;

	// *********************************************************************//
	// DispIntf :    IDisplayOutputTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {277E1CEE-3FF6-424D-969E-C6FD2FD8ED1C}
	// *********************************************************************//
	IDisplayOutputTypeDisp = dispinterface
		['{277E1CEE-3FF6-424D-969E-C6FD2FD8ED1C}']
		property OutputContent: IOutputContentType dispid 2;
		property MenuEntry: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		property OutputSignature: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		property ResponseRequiredFlag: WordBool dispid 5;
		property MinimumDisplayTime: WideString dispid 6;
		property Device: WideString dispid 7;
		property InfoQualify: WideString dispid 8;
		function MenuEntrySize: Integer; dispid 9;
		function MenuEntryGetItem(index: Integer): IMenuEntryType; dispid 10;
		function MenuEntrySetItem(index: Integer; const value: IMenuEntryType): WordBool; dispid 11;
		function MenuEntryAddItem(const value: IMenuEntryType): WordBool; dispid 12;
		function MenuEntryRemoveItem(index: Integer): WordBool; dispid 13;
		function OutputSignatureSize: Integer; dispid 14;
		function OutputSignatureGetItem(index: Integer): Byte; dispid 15;
		function OutputSignatureSetItem(index: Integer; value: Byte): WordBool; dispid 16;
		function OutputSignatureAddItem(value: Byte): WordBool; dispid 17;
		function OutputSignatureRemoveItem(index: Integer): WordBool; dispid 18;
	end;

	// *********************************************************************//
	// Interface :   IOutputContentType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {14A8AFAE-7502-427E-A06E-38CE05F83015}
	// *********************************************************************//
	IOutputContentType = interface(IDispatch)
		['{14A8AFAE-7502-427E-A06E-38CE05F83015}']
		function Get_PredefinedContent: IPredefinedContentType; safecall;
		procedure _Set_PredefinedContent(const pRetVal: IPredefinedContentType); safecall;
		function Get_OutputText: PSafeArray; safecall;
		procedure Set_OutputText(pRetVal: PSafeArray); safecall;
		function Get_OutputXHTML: PSafeArray; safecall;
		procedure Set_OutputXHTML(pRetVal: PSafeArray); safecall;
		function Get_OutputBarcode: IOutputBarcodeType; safecall;
		procedure _Set_OutputBarcode(const pRetVal: IOutputBarcodeType); safecall;
		function Get_OutputFormat: WideString; safecall;
		procedure Set_OutputFormat(const pRetVal: WideString); safecall;
		function OutputTextSize: Integer; safecall;
		function OutputTextGetItem(index: Integer): IOutputTextType; safecall;
		function OutputTextSetItem(index: Integer; const value: IOutputTextType): WordBool; safecall;
		function OutputTextAddItem(const value: IOutputTextType): WordBool; safecall;
		function OutputTextRemoveItem(index: Integer): WordBool; safecall;
		function OutputXHTMLSize: Integer; safecall;
		function OutputXHTMLGetItem(index: Integer): Byte; safecall;
		function OutputXHTMLSetItem(index: Integer; value: Byte): WordBool; safecall;
		function OutputXHTMLAddItem(value: Byte): WordBool; safecall;
		function OutputXHTMLRemoveItem(index: Integer): WordBool; safecall;
		property PredefinedContent: IPredefinedContentType read Get_PredefinedContent write _Set_PredefinedContent;
		property OutputText: PSafeArray read Get_OutputText write Set_OutputText;
		property OutputXHTML: PSafeArray read Get_OutputXHTML write Set_OutputXHTML;
		property OutputBarcode: IOutputBarcodeType read Get_OutputBarcode write _Set_OutputBarcode;
		property OutputFormat: WideString read Get_OutputFormat write Set_OutputFormat;
	end;

	// *********************************************************************//
	// DispIntf :    IOutputContentTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {14A8AFAE-7502-427E-A06E-38CE05F83015}
	// *********************************************************************//
	IOutputContentTypeDisp = dispinterface
		['{14A8AFAE-7502-427E-A06E-38CE05F83015}']
		property PredefinedContent: IPredefinedContentType dispid 1;
		property OutputText: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property OutputXHTML: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		property OutputBarcode: IOutputBarcodeType dispid 4;
		property OutputFormat: WideString dispid 5;
		function OutputTextSize: Integer; dispid 6;
		function OutputTextGetItem(index: Integer): IOutputTextType; dispid 7;
		function OutputTextSetItem(index: Integer; const value: IOutputTextType): WordBool; dispid 8;
		function OutputTextAddItem(const value: IOutputTextType): WordBool; dispid 9;
		function OutputTextRemoveItem(index: Integer): WordBool; dispid 10;
		function OutputXHTMLSize: Integer; dispid 11;
		function OutputXHTMLGetItem(index: Integer): Byte; dispid 12;
		function OutputXHTMLSetItem(index: Integer; value: Byte): WordBool; dispid 13;
		function OutputXHTMLAddItem(value: Byte): WordBool; dispid 14;
		function OutputXHTMLRemoveItem(index: Integer): WordBool; dispid 15;
	end;

	// *********************************************************************//
	// Interface :   IPredefinedContentType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {BB18ECCD-40F0-4570-B782-9268B834268E}
	// *********************************************************************//
	IPredefinedContentType = interface(IDispatch)
		['{BB18ECCD-40F0-4570-B782-9268B834268E}']
		function Get_ReferenceID: WideString; safecall;
		procedure Set_ReferenceID(const pRetVal: WideString); safecall;
		function Get_Language: WideString; safecall;
		procedure Set_Language(const pRetVal: WideString); safecall;
		property ReferenceID: WideString read Get_ReferenceID write Set_ReferenceID;
		property Language: WideString read Get_Language write Set_Language;
	end;

	// *********************************************************************//
	// DispIntf :    IPredefinedContentTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {BB18ECCD-40F0-4570-B782-9268B834268E}
	// *********************************************************************//
	IPredefinedContentTypeDisp = dispinterface
		['{BB18ECCD-40F0-4570-B782-9268B834268E}']
		property ReferenceID: WideString dispid 1;
		property Language: WideString dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IOutputTextType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {29595E14-FBD0-4DD6-9E81-81C277E000E1}
	// *********************************************************************//
	IOutputTextType = interface(IDispatch)
		['{29595E14-FBD0-4DD6-9E81-81C277E000E1}']
		function Get_CharacterSet: WideString; safecall;
		procedure Set_CharacterSet(const pRetVal: WideString); safecall;
		function Get_Font: WideString; safecall;
		procedure Set_Font(const pRetVal: WideString); safecall;
		function Get_StartRow: WideString; safecall;
		procedure Set_StartRow(const pRetVal: WideString); safecall;
		function Get_StartColumn: WideString; safecall;
		procedure Set_StartColumn(const pRetVal: WideString); safecall;
		function Get_Color: WideString; safecall;
		procedure Set_Color(const pRetVal: WideString); safecall;
		function Get_CharacterWidth: WideString; safecall;
		procedure Set_CharacterWidth(const pRetVal: WideString); safecall;
		function Get_CharacterHeight: WideString; safecall;
		procedure Set_CharacterHeight(const pRetVal: WideString); safecall;
		function Get_CharacterStyle: WideString; safecall;
		procedure Set_CharacterStyle(const pRetVal: WideString); safecall;
		function Get_Alignment: WideString; safecall;
		procedure Set_Alignment(const pRetVal: WideString); safecall;
		function Get_EndOfLineFlag: WordBool; safecall;
		procedure Set_EndOfLineFlag(pRetVal: WordBool); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		property CharacterSet: WideString read Get_CharacterSet write Set_CharacterSet;
		property Font: WideString read Get_Font write Set_Font;
		property StartRow: WideString read Get_StartRow write Set_StartRow;
		property StartColumn: WideString read Get_StartColumn write Set_StartColumn;
		property Color: WideString read Get_Color write Set_Color;
		property CharacterWidth: WideString read Get_CharacterWidth write Set_CharacterWidth;
		property CharacterHeight: WideString read Get_CharacterHeight write Set_CharacterHeight;
		property CharacterStyle: WideString read Get_CharacterStyle write Set_CharacterStyle;
		property Alignment: WideString read Get_Alignment write Set_Alignment;
		property EndOfLineFlag: WordBool read Get_EndOfLineFlag write Set_EndOfLineFlag;
		property value: WideString read Get_value write Set_value;
	end;

	// *********************************************************************//
	// DispIntf :    IOutputTextTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {29595E14-FBD0-4DD6-9E81-81C277E000E1}
	// *********************************************************************//
	IOutputTextTypeDisp = dispinterface
		['{29595E14-FBD0-4DD6-9E81-81C277E000E1}']
		property CharacterSet: WideString dispid 2;
		property Font: WideString dispid 3;
		property StartRow: WideString dispid 4;
		property StartColumn: WideString dispid 5;
		property Color: WideString dispid 6;
		property CharacterWidth: WideString dispid 7;
		property CharacterHeight: WideString dispid 8;
		property CharacterStyle: WideString dispid 9;
		property Alignment: WideString dispid 10;
		property EndOfLineFlag: WordBool dispid 11;
		property value: WideString dispid 12;
	end;

	// *********************************************************************//
	// Interface :   IOutputBarcodeType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B07F5633-209A-48B9-8F7C-88EF1222FD4D}
	// *********************************************************************//
	IOutputBarcodeType = interface(IDispatch)
		['{B07F5633-209A-48B9-8F7C-88EF1222FD4D}']
		function Get_BarcodeType: WideString; safecall;
		procedure Set_BarcodeType(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		property BarcodeType: WideString read Get_BarcodeType write Set_BarcodeType;
		property value: WideString read Get_value write Set_value;
	end;

	// *********************************************************************//
	// DispIntf :    IOutputBarcodeTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B07F5633-209A-48B9-8F7C-88EF1222FD4D}
	// *********************************************************************//
	IOutputBarcodeTypeDisp = dispinterface
		['{B07F5633-209A-48B9-8F7C-88EF1222FD4D}']
		property BarcodeType: WideString dispid 2;
		property value: WideString dispid 3;
	end;

	// *********************************************************************//
	// Interface :   IMenuEntryType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {5FAF4E3B-9BEA-44F6-94FD-A6874460C3FE}
	// *********************************************************************//
	IMenuEntryType = interface(IDispatch)
		['{5FAF4E3B-9BEA-44F6-94FD-A6874460C3FE}']
		function Get_PredefinedContent: IPredefinedContentType; safecall;
		procedure _Set_PredefinedContent(const pRetVal: IPredefinedContentType); safecall;
		function Get_OutputText: PSafeArray; safecall;
		procedure Set_OutputText(pRetVal: PSafeArray); safecall;
		function Get_OutputXHTML: PSafeArray; safecall;
		procedure Set_OutputXHTML(pRetVal: PSafeArray); safecall;
		function Get_MenuEntryTag: WideString; safecall;
		procedure Set_MenuEntryTag(const pRetVal: WideString); safecall;
		function Get_OutputFormat: WideString; safecall;
		procedure Set_OutputFormat(const pRetVal: WideString); safecall;
		function Get_DefaultSelectedFlag: WordBool; safecall;
		procedure Set_DefaultSelectedFlag(pRetVal: WordBool); safecall;
		function OutputTextSize: Integer; safecall;
		function OutputTextGetItem(index: Integer): IOutputTextType; safecall;
		function OutputTextSetItem(index: Integer; const value: IOutputTextType): WordBool; safecall;
		function OutputTextAddItem(const value: IOutputTextType): WordBool; safecall;
		function OutputTextRemoveItem(index: Integer): WordBool; safecall;
		function OutputXHTMLSize: Integer; safecall;
		function OutputXHTMLGetItem(index: Integer): Byte; safecall;
		function OutputXHTMLSetItem(index: Integer; value: Byte): WordBool; safecall;
		function OutputXHTMLAddItem(value: Byte): WordBool; safecall;
		function OutputXHTMLRemoveItem(index: Integer): WordBool; safecall;
		property PredefinedContent: IPredefinedContentType read Get_PredefinedContent write _Set_PredefinedContent;
		property OutputText: PSafeArray read Get_OutputText write Set_OutputText;
		property OutputXHTML: PSafeArray read Get_OutputXHTML write Set_OutputXHTML;
		property MenuEntryTag: WideString read Get_MenuEntryTag write Set_MenuEntryTag;
		property OutputFormat: WideString read Get_OutputFormat write Set_OutputFormat;
		property DefaultSelectedFlag: WordBool read Get_DefaultSelectedFlag write Set_DefaultSelectedFlag;
	end;

	// *********************************************************************//
	// DispIntf :    IMenuEntryTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {5FAF4E3B-9BEA-44F6-94FD-A6874460C3FE}
	// *********************************************************************//
	IMenuEntryTypeDisp = dispinterface
		['{5FAF4E3B-9BEA-44F6-94FD-A6874460C3FE}']
		property PredefinedContent: IPredefinedContentType dispid 2;
		property OutputText: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		property OutputXHTML: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		property MenuEntryTag: WideString dispid 5;
		property OutputFormat: WideString dispid 6;
		property DefaultSelectedFlag: WordBool dispid 7;
		function OutputTextSize: Integer; dispid 8;
		function OutputTextGetItem(index: Integer): IOutputTextType; dispid 9;
		function OutputTextSetItem(index: Integer; const value: IOutputTextType): WordBool; dispid 10;
		function OutputTextAddItem(const value: IOutputTextType): WordBool; dispid 11;
		function OutputTextRemoveItem(index: Integer): WordBool; dispid 12;
		function OutputXHTMLSize: Integer; dispid 13;
		function OutputXHTMLGetItem(index: Integer): Byte; dispid 14;
		function OutputXHTMLSetItem(index: Integer; value: Byte): WordBool; dispid 15;
		function OutputXHTMLAddItem(value: Byte): WordBool; dispid 16;
		function OutputXHTMLRemoveItem(index: Integer): WordBool; dispid 17;
	end;

	// *********************************************************************//
	// Interface :   IAdminRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {3591D357-6ED0-43C6-81CB-10F962B19065}
	// *********************************************************************//
	IAdminRequestType = interface(IDispatch)
		['{3591D357-6ED0-43C6-81CB-10F962B19065}']
		function Get_ServiceIdentification: WideString; safecall;
		procedure Set_ServiceIdentification(const pRetVal: WideString); safecall;
		property ServiceIdentification: WideString read Get_ServiceIdentification write Set_ServiceIdentification;
	end;

	// *********************************************************************//
	// DispIntf :    IAdminRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {3591D357-6ED0-43C6-81CB-10F962B19065}
	// *********************************************************************//
	IAdminRequestTypeDisp = dispinterface
		['{3591D357-6ED0-43C6-81CB-10F962B19065}']
		property ServiceIdentification: WideString dispid 1;
	end;

	// *********************************************************************//
	// Interface :   IAdminResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {DE8E1F3B-3301-4D6C-9613-AD52EF138F62}
	// *********************************************************************//
	IAdminResponseType = interface(IDispatch)
		['{DE8E1F3B-3301-4D6C-9613-AD52EF138F62}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
	end;

	// *********************************************************************//
	// DispIntf :    IAdminResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {DE8E1F3B-3301-4D6C-9613-AD52EF138F62}
	// *********************************************************************//
	IAdminResponseTypeDisp = dispinterface
		['{DE8E1F3B-3301-4D6C-9613-AD52EF138F62}']
		property Response: IResponseType dispid 1;
	end;

	// *********************************************************************//
	// Interface :   IAllowedProductType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {525DFCD5-26C9-452B-9BBA-DE384F560ACD}
	// *********************************************************************//
	IAllowedProductType = interface(IDispatch)
		['{525DFCD5-26C9-452B-9BBA-DE384F560ACD}']
		function Get_ProductLabel: WideString; safecall;
		procedure Set_ProductLabel(const pRetVal: WideString); safecall;
		function Get_AdditionalProductInfo: WideString; safecall;
		procedure Set_AdditionalProductInfo(const pRetVal: WideString); safecall;
		function Get_ProductCode: WideString; safecall;
		procedure Set_ProductCode(const pRetVal: WideString); safecall;
		function Get_EanUpc: WideString; safecall;
		procedure Set_EanUpc(const pRetVal: WideString); safecall;
		property ProductLabel: WideString read Get_ProductLabel write Set_ProductLabel;
		property AdditionalProductInfo: WideString read Get_AdditionalProductInfo write Set_AdditionalProductInfo;
		property ProductCode: WideString read Get_ProductCode write Set_ProductCode;
		property EanUpc: WideString read Get_EanUpc write Set_EanUpc;
	end;

	// *********************************************************************//
	// DispIntf :    IAllowedProductTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {525DFCD5-26C9-452B-9BBA-DE384F560ACD}
	// *********************************************************************//
	IAllowedProductTypeDisp = dispinterface
		['{525DFCD5-26C9-452B-9BBA-DE384F560ACD}']
		property ProductLabel: WideString dispid 1;
		property AdditionalProductInfo: WideString dispid 2;
		property ProductCode: WideString dispid 3;
		property EanUpc: WideString dispid 4;
	end;

	// *********************************************************************//
	// Interface :   IAmountsReqType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {8D066C16-02CC-4406-8D96-D9263B693723}
	// *********************************************************************//
	IAmountsReqType = interface(IDispatch)
		['{8D066C16-02CC-4406-8D96-D9263B693723}']
		function Get_Currency: WideString; safecall;
		procedure Set_Currency(const pRetVal: WideString); safecall;
		function Get_RequestedAmount: Double; safecall;
		procedure Set_RequestedAmount(pRetVal: Double); safecall;
		function Get_RequestedAmountSpecified: WordBool; safecall;
		procedure Set_RequestedAmountSpecified(pRetVal: WordBool); safecall;
		function Get_CashBackAmount: Double; safecall;
		procedure Set_CashBackAmount(pRetVal: Double); safecall;
		function Get_CashBackAmountSpecified: WordBool; safecall;
		procedure Set_CashBackAmountSpecified(pRetVal: WordBool); safecall;
		function Get_TipAmount: Double; safecall;
		procedure Set_TipAmount(pRetVal: Double); safecall;
		function Get_TipAmountSpecified: WordBool; safecall;
		procedure Set_TipAmountSpecified(pRetVal: WordBool); safecall;
		function Get_PaidAmount: Double; safecall;
		procedure Set_PaidAmount(pRetVal: Double); safecall;
		function Get_PaidAmountSpecified: WordBool; safecall;
		procedure Set_PaidAmountSpecified(pRetVal: WordBool); safecall;
		function Get_MinimumAmountToDeliver: Double; safecall;
		procedure Set_MinimumAmountToDeliver(pRetVal: Double); safecall;
		function Get_MinimumAmountToDeliverSpecified: WordBool; safecall;
		procedure Set_MinimumAmountToDeliverSpecified(pRetVal: WordBool); safecall;
		function Get_MaximumCashBackAmount: Double; safecall;
		procedure Set_MaximumCashBackAmount(pRetVal: Double); safecall;
		function Get_MaximumCashBackAmountSpecified: WordBool; safecall;
		procedure Set_MaximumCashBackAmountSpecified(pRetVal: WordBool); safecall;
		function Get_MinimumSplitAmount: Double; safecall;
		procedure Set_MinimumSplitAmount(pRetVal: Double); safecall;
		function Get_MinimumSplitAmountSpecified: WordBool; safecall;
		procedure Set_MinimumSplitAmountSpecified(pRetVal: WordBool); safecall;
		property Currency: WideString read Get_Currency write Set_Currency;
		property RequestedAmount: Double read Get_RequestedAmount write Set_RequestedAmount;
		property RequestedAmountSpecified: WordBool read Get_RequestedAmountSpecified write Set_RequestedAmountSpecified;
		property CashBackAmount: Double read Get_CashBackAmount write Set_CashBackAmount;
		property CashBackAmountSpecified: WordBool read Get_CashBackAmountSpecified write Set_CashBackAmountSpecified;
		property TipAmount: Double read Get_TipAmount write Set_TipAmount;
		property TipAmountSpecified: WordBool read Get_TipAmountSpecified write Set_TipAmountSpecified;
		property PaidAmount: Double read Get_PaidAmount write Set_PaidAmount;
		property PaidAmountSpecified: WordBool read Get_PaidAmountSpecified write Set_PaidAmountSpecified;
		property MinimumAmountToDeliver: Double read Get_MinimumAmountToDeliver write Set_MinimumAmountToDeliver;
		property MinimumAmountToDeliverSpecified: WordBool read Get_MinimumAmountToDeliverSpecified write Set_MinimumAmountToDeliverSpecified;
		property MaximumCashBackAmount: Double read Get_MaximumCashBackAmount write Set_MaximumCashBackAmount;
		property MaximumCashBackAmountSpecified: WordBool read Get_MaximumCashBackAmountSpecified write Set_MaximumCashBackAmountSpecified;
		property MinimumSplitAmount: Double read Get_MinimumSplitAmount write Set_MinimumSplitAmount;
		property MinimumSplitAmountSpecified: WordBool read Get_MinimumSplitAmountSpecified write Set_MinimumSplitAmountSpecified;
	end;

	// *********************************************************************//
	// DispIntf :    IAmountsReqTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {8D066C16-02CC-4406-8D96-D9263B693723}
	// *********************************************************************//
	IAmountsReqTypeDisp = dispinterface
		['{8D066C16-02CC-4406-8D96-D9263B693723}']
		property Currency: WideString dispid 1;
		property RequestedAmount: Double dispid 2;
		property RequestedAmountSpecified: WordBool dispid 3;
		property CashBackAmount: Double dispid 4;
		property CashBackAmountSpecified: WordBool dispid 5;
		property TipAmount: Double dispid 6;
		property TipAmountSpecified: WordBool dispid 7;
		property PaidAmount: Double dispid 8;
		property PaidAmountSpecified: WordBool dispid 9;
		property MinimumAmountToDeliver: Double dispid 10;
		property MinimumAmountToDeliverSpecified: WordBool dispid 11;
		property MaximumCashBackAmount: Double dispid 12;
		property MaximumCashBackAmountSpecified: WordBool dispid 13;
		property MinimumSplitAmount: Double dispid 14;
		property MinimumSplitAmountSpecified: WordBool dispid 15;
	end;

	// *********************************************************************//
	// Interface :   IAmountsRespType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {84FDB5BC-B655-4100-8B7F-E94D1D9E8466}
	// *********************************************************************//
	IAmountsRespType = interface(IDispatch)
		['{84FDB5BC-B655-4100-8B7F-E94D1D9E8466}']
		function Get_Currency: WideString; safecall;
		procedure Set_Currency(const pRetVal: WideString); safecall;
		function Get_AuthorizedAmount: Double; safecall;
		procedure Set_AuthorizedAmount(pRetVal: Double); safecall;
		function Get_TotalRebatesAmount: Double; safecall;
		procedure Set_TotalRebatesAmount(pRetVal: Double); safecall;
		function Get_TotalRebatesAmountSpecified: WordBool; safecall;
		procedure Set_TotalRebatesAmountSpecified(pRetVal: WordBool); safecall;
		function Get_TotalFeesAmount: Double; safecall;
		procedure Set_TotalFeesAmount(pRetVal: Double); safecall;
		function Get_TotalFeesAmountSpecified: WordBool; safecall;
		procedure Set_TotalFeesAmountSpecified(pRetVal: WordBool); safecall;
		function Get_CashBackAmount: Double; safecall;
		procedure Set_CashBackAmount(pRetVal: Double); safecall;
		function Get_CashBackAmountSpecified: WordBool; safecall;
		procedure Set_CashBackAmountSpecified(pRetVal: WordBool); safecall;
		function Get_TipAmount: Double; safecall;
		procedure Set_TipAmount(pRetVal: Double); safecall;
		function Get_TipAmountSpecified: WordBool; safecall;
		procedure Set_TipAmountSpecified(pRetVal: WordBool); safecall;
		property Currency: WideString read Get_Currency write Set_Currency;
		property AuthorizedAmount: Double read Get_AuthorizedAmount write Set_AuthorizedAmount;
		property TotalRebatesAmount: Double read Get_TotalRebatesAmount write Set_TotalRebatesAmount;
		property TotalRebatesAmountSpecified: WordBool read Get_TotalRebatesAmountSpecified write Set_TotalRebatesAmountSpecified;
		property TotalFeesAmount: Double read Get_TotalFeesAmount write Set_TotalFeesAmount;
		property TotalFeesAmountSpecified: WordBool read Get_TotalFeesAmountSpecified write Set_TotalFeesAmountSpecified;
		property CashBackAmount: Double read Get_CashBackAmount write Set_CashBackAmount;
		property CashBackAmountSpecified: WordBool read Get_CashBackAmountSpecified write Set_CashBackAmountSpecified;
		property TipAmount: Double read Get_TipAmount write Set_TipAmount;
		property TipAmountSpecified: WordBool read Get_TipAmountSpecified write Set_TipAmountSpecified;
	end;

	// *********************************************************************//
	// DispIntf :    IAmountsRespTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {84FDB5BC-B655-4100-8B7F-E94D1D9E8466}
	// *********************************************************************//
	IAmountsRespTypeDisp = dispinterface
		['{84FDB5BC-B655-4100-8B7F-E94D1D9E8466}']
		property Currency: WideString dispid 1;
		property AuthorizedAmount: Double dispid 2;
		property TotalRebatesAmount: Double dispid 3;
		property TotalRebatesAmountSpecified: WordBool dispid 4;
		property TotalFeesAmount: Double dispid 5;
		property TotalFeesAmountSpecified: WordBool dispid 6;
		property CashBackAmount: Double dispid 7;
		property CashBackAmountSpecified: WordBool dispid 8;
		property TipAmount: Double dispid 9;
		property TipAmountSpecified: WordBool dispid 10;
	end;

	// *********************************************************************//
	// Interface :   IAreaSizeType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {81D0FE3F-6458-44D7-8458-81AF632DCC05}
	// *********************************************************************//
	IAreaSizeType = interface(IDispatch)
		['{81D0FE3F-6458-44D7-8458-81AF632DCC05}']
		function Get_X: WideString; safecall;
		procedure Set_X(const pRetVal: WideString); safecall;
		function Get_Y: WideString; safecall;
		procedure Set_Y(const pRetVal: WideString); safecall;
		property X: WideString read Get_X write Set_X;
		property Y: WideString read Get_Y write Set_Y;
	end;

	// *********************************************************************//
	// DispIntf :    IAreaSizeTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {81D0FE3F-6458-44D7-8458-81AF632DCC05}
	// *********************************************************************//
	IAreaSizeTypeDisp = dispinterface
		['{81D0FE3F-6458-44D7-8458-81AF632DCC05}']
		property X: WideString dispid 1;
		property Y: WideString dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IBalanceInquiryRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F8EAB8E7-81F0-4F6B-9677-11D1965F9E5C}
	// *********************************************************************//
	IBalanceInquiryRequestType = interface(IDispatch)
		['{F8EAB8E7-81F0-4F6B-9677-11D1965F9E5C}']
		function Get_PaymentAccountReq: IPaymentAccountReqType; safecall;
		procedure _Set_PaymentAccountReq(const pRetVal: IPaymentAccountReqType); safecall;
		function Get_LoyaltyAccountReq: ILoyaltyAccountReqType; safecall;
		procedure _Set_LoyaltyAccountReq(const pRetVal: ILoyaltyAccountReqType); safecall;
		property PaymentAccountReq: IPaymentAccountReqType read Get_PaymentAccountReq write _Set_PaymentAccountReq;
		property LoyaltyAccountReq: ILoyaltyAccountReqType read Get_LoyaltyAccountReq write _Set_LoyaltyAccountReq;
	end;

	// *********************************************************************//
	// DispIntf :    IBalanceInquiryRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F8EAB8E7-81F0-4F6B-9677-11D1965F9E5C}
	// *********************************************************************//
	IBalanceInquiryRequestTypeDisp = dispinterface
		['{F8EAB8E7-81F0-4F6B-9677-11D1965F9E5C}']
		property PaymentAccountReq: IPaymentAccountReqType dispid 1;
		property LoyaltyAccountReq: ILoyaltyAccountReqType dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IPaymentAccountReqType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {606E336E-50E8-47FF-9DCC-77F4B7580B5E}
	// *********************************************************************//
	IPaymentAccountReqType = interface(IDispatch)
		['{606E336E-50E8-47FF-9DCC-77F4B7580B5E}']
		function Get_CardAcquisitionReference: ITransactionIdentificationType; safecall;
		procedure _Set_CardAcquisitionReference(const pRetVal: ITransactionIdentificationType); safecall;
		function Get_PaymentInstrumentData: IPaymentInstrumentDataType; safecall;
		procedure _Set_PaymentInstrumentData(const pRetVal: IPaymentInstrumentDataType); safecall;
		function Get_AccountType: WideString; safecall;
		procedure Set_AccountType(const pRetVal: WideString); safecall;
		property CardAcquisitionReference: ITransactionIdentificationType read Get_CardAcquisitionReference write _Set_CardAcquisitionReference;
		property PaymentInstrumentData: IPaymentInstrumentDataType read Get_PaymentInstrumentData write _Set_PaymentInstrumentData;
		property AccountType: WideString read Get_AccountType write Set_AccountType;
	end;

	// *********************************************************************//
	// DispIntf :    IPaymentAccountReqTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {606E336E-50E8-47FF-9DCC-77F4B7580B5E}
	// *********************************************************************//
	IPaymentAccountReqTypeDisp = dispinterface
		['{606E336E-50E8-47FF-9DCC-77F4B7580B5E}']
		property CardAcquisitionReference: ITransactionIdentificationType dispid 2;
		property PaymentInstrumentData: IPaymentInstrumentDataType dispid 3;
		property AccountType: WideString dispid 4;
	end;

	// *********************************************************************//
	// Interface :   ITransactionIdentificationType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4FEF9E59-B676-43CF-A9C0-75384973FC77}
	// *********************************************************************//
	ITransactionIdentificationType = interface(IDispatch)
		['{4FEF9E59-B676-43CF-A9C0-75384973FC77}']
		function Get_TransactionID: WideString; safecall;
		procedure Set_TransactionID(const pRetVal: WideString); safecall;
		function Get_TimeStamp: WideString; safecall;
		procedure Set_TimeStamp(const pRetVal: WideString); safecall;
		property TransactionID: WideString read Get_TransactionID write Set_TransactionID;
		property TimeStamp: WideString read Get_TimeStamp write Set_TimeStamp;
	end;

	// *********************************************************************//
	// DispIntf :    ITransactionIdentificationTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4FEF9E59-B676-43CF-A9C0-75384973FC77}
	// *********************************************************************//
	ITransactionIdentificationTypeDisp = dispinterface
		['{4FEF9E59-B676-43CF-A9C0-75384973FC77}']
		property TransactionID: WideString dispid 1;
		property TimeStamp: WideString dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IPaymentInstrumentDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2626E0FA-AB17-464D-8EC1-67F1D41DDFB5}
	// *********************************************************************//
	IPaymentInstrumentDataType = interface(IDispatch)
		['{2626E0FA-AB17-464D-8EC1-67F1D41DDFB5}']
		function Get_CardData: ICardDataType; safecall;
		procedure _Set_CardData(const pRetVal: ICardDataType); safecall;
		function Get_CheckData: ICheckDataType; safecall;
		procedure _Set_CheckData(const pRetVal: ICheckDataType); safecall;
		function Get_MobileData: IMobileDataType; safecall;
		procedure _Set_MobileData(const pRetVal: IMobileDataType); safecall;
		function Get_PaymentInstrumentType: WideString; safecall;
		procedure Set_PaymentInstrumentType(const pRetVal: WideString); safecall;
		property CardData: ICardDataType read Get_CardData write _Set_CardData;
		property CheckData: ICheckDataType read Get_CheckData write _Set_CheckData;
		property MobileData: IMobileDataType read Get_MobileData write _Set_MobileData;
		property PaymentInstrumentType: WideString read Get_PaymentInstrumentType write Set_PaymentInstrumentType;
	end;

	// *********************************************************************//
	// DispIntf :    IPaymentInstrumentDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2626E0FA-AB17-464D-8EC1-67F1D41DDFB5}
	// *********************************************************************//
	IPaymentInstrumentDataTypeDisp = dispinterface
		['{2626E0FA-AB17-464D-8EC1-67F1D41DDFB5}']
		property CardData: ICardDataType dispid 1;
		property CheckData: ICheckDataType dispid 2;
		property MobileData: IMobileDataType dispid 3;
		property PaymentInstrumentType: WideString dispid 4;
	end;

	// *********************************************************************//
	// Interface :   ICardDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {1F8845EF-C5CA-4299-9EF6-95006D7561F8}
	// *********************************************************************//
	ICardDataType = interface(IDispatch)
		['{1F8845EF-C5CA-4299-9EF6-95006D7561F8}']
		function Get_ProtectedCardData: IContentInformationType; safecall;
		procedure _Set_ProtectedCardData(const pRetVal: IContentInformationType); safecall;
		function Get_SensitiveCardData: ISensitiveCardDataType; safecall;
		procedure _Set_SensitiveCardData(const pRetVal: ISensitiveCardDataType); safecall;
		function Get_AllowedProductCode: PSafeArray; safecall;
		procedure Set_AllowedProductCode(pRetVal: PSafeArray); safecall;
		function Get_AllowedProduct: PSafeArray; safecall;
		procedure Set_AllowedProduct(pRetVal: PSafeArray); safecall;
		function Get_PaymentToken: IPaymentTokenType; safecall;
		procedure _Set_PaymentToken(const pRetVal: IPaymentTokenType); safecall;
		function Get_CustomerOrder: PSafeArray; safecall;
		procedure Set_CustomerOrder(pRetVal: PSafeArray); safecall;
		function Get_PaymentBrand: WideString; safecall;
		procedure Set_PaymentBrand(const pRetVal: WideString); safecall;
		function Get_MaskedPAN: WideString; safecall;
		procedure Set_MaskedPAN(const pRetVal: WideString); safecall;
		function Get_PaymentAccountRef: WideString; safecall;
		procedure Set_PaymentAccountRef(const pRetVal: WideString); safecall;
		function Get_EntryMode: PSafeArray; safecall;
		procedure Set_EntryMode(pRetVal: PSafeArray); safecall;
		function Get_CardCountryCode: WideString; safecall;
		procedure Set_CardCountryCode(const pRetVal: WideString); safecall;
		function AllowedProductCodeSize: Integer; safecall;
		function AllowedProductCodeGetItem(index: Integer): WideString; safecall;
		function AllowedProductCodeSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function AllowedProductCodeAddItem(const value: WideString): WordBool; safecall;
		function AllowedProductCodeRemoveItem(index: Integer): WordBool; safecall;
		function AllowedProductSize: Integer; safecall;
		function AllowedProductGetItem(index: Integer): IAllowedProductType; safecall;
		function AllowedProductSetItem(index: Integer; const value: IAllowedProductType): WordBool; safecall;
		function AllowedProductAddItem(const value: IAllowedProductType): WordBool; safecall;
		function AllowedProductRemoveItem(index: Integer): WordBool; safecall;
		function CustomerOrderSize: Integer; safecall;
		function CustomerOrderGetItem(index: Integer): ICustomerOrderType; safecall;
		function CustomerOrderSetItem(index: Integer; const value: ICustomerOrderType): WordBool; safecall;
		function CustomerOrderAddItem(const value: ICustomerOrderType): WordBool; safecall;
		function CustomerOrderRemoveItem(index: Integer): WordBool; safecall;
		function EntryModeSize: Integer; safecall;
		function EntryModeGetItem(index: Integer): WideString; safecall;
		function EntryModeSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function EntryModeAddItem(const value: WideString): WordBool; safecall;
		function EntryModeRemoveItem(index: Integer): WordBool; safecall;
		property ProtectedCardData: IContentInformationType read Get_ProtectedCardData write _Set_ProtectedCardData;
		property SensitiveCardData: ISensitiveCardDataType read Get_SensitiveCardData write _Set_SensitiveCardData;
		property AllowedProductCode: PSafeArray read Get_AllowedProductCode write Set_AllowedProductCode;
		property AllowedProduct: PSafeArray read Get_AllowedProduct write Set_AllowedProduct;
		property PaymentToken: IPaymentTokenType read Get_PaymentToken write _Set_PaymentToken;
		property CustomerOrder: PSafeArray read Get_CustomerOrder write Set_CustomerOrder;
		property PaymentBrand: WideString read Get_PaymentBrand write Set_PaymentBrand;
		property MaskedPAN: WideString read Get_MaskedPAN write Set_MaskedPAN;
		property PaymentAccountRef: WideString read Get_PaymentAccountRef write Set_PaymentAccountRef;
		property EntryMode: PSafeArray read Get_EntryMode write Set_EntryMode;
		property CardCountryCode: WideString read Get_CardCountryCode write Set_CardCountryCode;
	end;

	// *********************************************************************//
	// DispIntf :    ICardDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {1F8845EF-C5CA-4299-9EF6-95006D7561F8}
	// *********************************************************************//
	ICardDataTypeDisp = dispinterface
		['{1F8845EF-C5CA-4299-9EF6-95006D7561F8}']
		property ProtectedCardData: IContentInformationType dispid 1;
		property SensitiveCardData: ISensitiveCardDataType dispid 2;
		property AllowedProductCode: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		property AllowedProduct: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		property PaymentToken: IPaymentTokenType dispid 5;
		property CustomerOrder: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 6;
		property PaymentBrand: WideString dispid 7;
		property MaskedPAN: WideString dispid 8;
		property PaymentAccountRef: WideString dispid 9;
		property EntryMode: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 10;
		property CardCountryCode: WideString dispid 11;
		function AllowedProductCodeSize: Integer; dispid 12;
		function AllowedProductCodeGetItem(index: Integer): WideString; dispid 13;
		function AllowedProductCodeSetItem(index: Integer; const value: WideString): WordBool; dispid 14;
		function AllowedProductCodeAddItem(const value: WideString): WordBool; dispid 15;
		function AllowedProductCodeRemoveItem(index: Integer): WordBool; dispid 16;
		function AllowedProductSize: Integer; dispid 17;
		function AllowedProductGetItem(index: Integer): IAllowedProductType; dispid 18;
		function AllowedProductSetItem(index: Integer; const value: IAllowedProductType): WordBool; dispid 19;
		function AllowedProductAddItem(const value: IAllowedProductType): WordBool; dispid 20;
		function AllowedProductRemoveItem(index: Integer): WordBool; dispid 21;
		function CustomerOrderSize: Integer; dispid 22;
		function CustomerOrderGetItem(index: Integer): ICustomerOrderType; dispid 23;
		function CustomerOrderSetItem(index: Integer; const value: ICustomerOrderType): WordBool; dispid 24;
		function CustomerOrderAddItem(const value: ICustomerOrderType): WordBool; dispid 25;
		function CustomerOrderRemoveItem(index: Integer): WordBool; dispid 26;
		function EntryModeSize: Integer; dispid 27;
		function EntryModeGetItem(index: Integer): WideString; dispid 28;
		function EntryModeSetItem(index: Integer; const value: WideString): WordBool; dispid 29;
		function EntryModeAddItem(const value: WideString): WordBool; dispid 30;
		function EntryModeRemoveItem(index: Integer): WordBool; dispid 31;
	end;

	// *********************************************************************//
	// Interface :   IContentInformationType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {AB43B0EF-C381-4DC1-9767-ED789E86BEA6}
	// *********************************************************************//
	IContentInformationType = interface(IDispatch)
		['{AB43B0EF-C381-4DC1-9767-ED789E86BEA6}']
		function Get_Item: OleVariant; safecall;
		procedure _Set_Item(pRetVal: OleVariant); safecall;
		function Get_ContentType: WideString; safecall;
		procedure Set_ContentType(const pRetVal: WideString); safecall;
		property Item: OleVariant read Get_Item write _Set_Item;
		property ContentType: WideString read Get_ContentType write Set_ContentType;
	end;

	// *********************************************************************//
	// DispIntf :    IContentInformationTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {AB43B0EF-C381-4DC1-9767-ED789E86BEA6}
	// *********************************************************************//
	IContentInformationTypeDisp = dispinterface
		['{AB43B0EF-C381-4DC1-9767-ED789E86BEA6}']
		property Item: OleVariant dispid 1;
		property ContentType: WideString dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IAuthenticatedDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B6F90539-85F3-40E3-AD94-C072BF505F12}
	// *********************************************************************//
	IAuthenticatedDataType = interface(IDispatch)
		['{B6F90539-85F3-40E3-AD94-C072BF505F12}']
		function Get_Items: PSafeArray; safecall;
		procedure Set_Items(pRetVal: PSafeArray); safecall;
		function Get_MACAlgorithm: IAlgorithmIdentifier; safecall;
		procedure _Set_MACAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
		function Get_EncapsulatedContent: IEncapsulatedContentType; safecall;
		procedure _Set_EncapsulatedContent(const pRetVal: IEncapsulatedContentType); safecall;
		function Get_Version: WideString; safecall;
		procedure Set_Version(const pRetVal: WideString); safecall;
		function Get_MAC: PSafeArray; safecall;
		procedure Set_MAC(pRetVal: PSafeArray); safecall;
		function ItemsSize: Integer; safecall;
		function ItemsGetItem(index: Integer): OleVariant; safecall;
		function ItemsSetItem(index: Integer; value: OleVariant): WordBool; safecall;
		function ItemsAddItem(value: OleVariant): WordBool; safecall;
		function ItemsRemoveItem(index: Integer): WordBool; safecall;
		function MACSize: Integer; safecall;
		function MACGetItem(index: Integer): Byte; safecall;
		function MACSetItem(index: Integer; value: Byte): WordBool; safecall;
		function MACAddItem(value: Byte): WordBool; safecall;
		function MACRemoveItem(index: Integer): WordBool; safecall;
		property Items: PSafeArray read Get_Items write Set_Items;
		property MACAlgorithm: IAlgorithmIdentifier read Get_MACAlgorithm write _Set_MACAlgorithm;
		property EncapsulatedContent: IEncapsulatedContentType read Get_EncapsulatedContent write _Set_EncapsulatedContent;
		property Version: WideString read Get_Version write Set_Version;
		property MAC: PSafeArray read Get_MAC write Set_MAC;
	end;

	// *********************************************************************//
	// DispIntf :    IAuthenticatedDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B6F90539-85F3-40E3-AD94-C072BF505F12}
	// *********************************************************************//
	IAuthenticatedDataTypeDisp = dispinterface
		['{B6F90539-85F3-40E3-AD94-C072BF505F12}']
		property Items: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property MACAlgorithm: IAlgorithmIdentifier dispid 3;
		property EncapsulatedContent: IEncapsulatedContentType dispid 4;
		property Version: WideString dispid 5;
		property MAC: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 6;
		function ItemsSize: Integer; dispid 7;
		function ItemsGetItem(index: Integer): OleVariant; dispid 8;
		function ItemsSetItem(index: Integer; value: OleVariant): WordBool; dispid 9;
		function ItemsAddItem(value: OleVariant): WordBool; dispid 10;
		function ItemsRemoveItem(index: Integer): WordBool; dispid 11;
		function MACSize: Integer; dispid 12;
		function MACGetItem(index: Integer): Byte; dispid 13;
		function MACSetItem(index: Integer; value: Byte): WordBool; dispid 14;
		function MACAddItem(value: Byte): WordBool; dispid 15;
		function MACRemoveItem(index: Integer): WordBool; dispid 16;
	end;

	// *********************************************************************//
	// Interface :   IKEKType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {C04C9578-1CF0-418D-A428-C6C6CA13C713}
	// *********************************************************************//
	IKEKType = interface(IDispatch)
		['{C04C9578-1CF0-418D-A428-C6C6CA13C713}']
		function Get_KEKIdentifier: IKEKIdentifierType; safecall;
		procedure _Set_KEKIdentifier(const pRetVal: IKEKIdentifierType); safecall;
		function Get_KeyEncryptionAlgorithm: IAlgorithmIdentifier; safecall;
		procedure _Set_KeyEncryptionAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
		function Get_Version: WideString; safecall;
		procedure Set_Version(const pRetVal: WideString); safecall;
		function Get_EncryptedKey: PSafeArray; safecall;
		procedure Set_EncryptedKey(pRetVal: PSafeArray); safecall;
		function EncryptedKeySize: Integer; safecall;
		function EncryptedKeyGetItem(index: Integer): Byte; safecall;
		function EncryptedKeySetItem(index: Integer; value: Byte): WordBool; safecall;
		function EncryptedKeyAddItem(value: Byte): WordBool; safecall;
		function EncryptedKeyRemoveItem(index: Integer): WordBool; safecall;
		property KEKIdentifier: IKEKIdentifierType read Get_KEKIdentifier write _Set_KEKIdentifier;
		property KeyEncryptionAlgorithm: IAlgorithmIdentifier read Get_KeyEncryptionAlgorithm write _Set_KeyEncryptionAlgorithm;
		property Version: WideString read Get_Version write Set_Version;
		property EncryptedKey: PSafeArray read Get_EncryptedKey write Set_EncryptedKey;
	end;

	// *********************************************************************//
	// DispIntf :    IKEKTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {C04C9578-1CF0-418D-A428-C6C6CA13C713}
	// *********************************************************************//
	IKEKTypeDisp = dispinterface
		['{C04C9578-1CF0-418D-A428-C6C6CA13C713}']
		property KEKIdentifier: IKEKIdentifierType dispid 2;
		property KeyEncryptionAlgorithm: IAlgorithmIdentifier dispid 3;
		property Version: WideString dispid 4;
		property EncryptedKey: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 5;
		function EncryptedKeySize: Integer; dispid 6;
		function EncryptedKeyGetItem(index: Integer): Byte; dispid 7;
		function EncryptedKeySetItem(index: Integer; value: Byte): WordBool; dispid 8;
		function EncryptedKeyAddItem(value: Byte): WordBool; dispid 9;
		function EncryptedKeyRemoveItem(index: Integer): WordBool; dispid 10;
	end;

	// *********************************************************************//
	// Interface :   IKEKIdentifierType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {90188E86-AB6C-487A-86E5-67BC124A471A}
	// *********************************************************************//
	IKEKIdentifierType = interface(IDispatch)
		['{90188E86-AB6C-487A-86E5-67BC124A471A}']
		function Get_KeyIdentifier: WideString; safecall;
		procedure Set_KeyIdentifier(const pRetVal: WideString); safecall;
		function Get_KeyVersion: WideString; safecall;
		procedure Set_KeyVersion(const pRetVal: WideString); safecall;
		function Get_DerivationIdentifier: PSafeArray; safecall;
		procedure Set_DerivationIdentifier(pRetVal: PSafeArray); safecall;
		function DerivationIdentifierSize: Integer; safecall;
		function DerivationIdentifierGetItem(index: Integer): Byte; safecall;
		function DerivationIdentifierSetItem(index: Integer; value: Byte): WordBool; safecall;
		function DerivationIdentifierAddItem(value: Byte): WordBool; safecall;
		function DerivationIdentifierRemoveItem(index: Integer): WordBool; safecall;
		property KeyIdentifier: WideString read Get_KeyIdentifier write Set_KeyIdentifier;
		property KeyVersion: WideString read Get_KeyVersion write Set_KeyVersion;
		property DerivationIdentifier: PSafeArray read Get_DerivationIdentifier write Set_DerivationIdentifier;
	end;

	// *********************************************************************//
	// DispIntf :    IKEKIdentifierTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {90188E86-AB6C-487A-86E5-67BC124A471A}
	// *********************************************************************//
	IKEKIdentifierTypeDisp = dispinterface
		['{90188E86-AB6C-487A-86E5-67BC124A471A}']
		property KeyIdentifier: WideString dispid 1;
		property KeyVersion: WideString dispid 2;
		property DerivationIdentifier: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		function DerivationIdentifierSize: Integer; dispid 4;
		function DerivationIdentifierGetItem(index: Integer): Byte; dispid 5;
		function DerivationIdentifierSetItem(index: Integer; value: Byte): WordBool; dispid 6;
		function DerivationIdentifierAddItem(value: Byte): WordBool; dispid 7;
		function DerivationIdentifierRemoveItem(index: Integer): WordBool; dispid 8;
	end;

	// *********************************************************************//
	// Interface :   IAlgorithmIdentifier
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {BD6B7298-EC71-4A5E-BF46-7A963E6EC710}
	// *********************************************************************//
	IAlgorithmIdentifier = interface(IDispatch)
		['{BD6B7298-EC71-4A5E-BF46-7A963E6EC710}']
		function Get_Parameter: IParameterType; safecall;
		procedure _Set_Parameter(const pRetVal: IParameterType); safecall;
		function Get_Algorithm: WideString; safecall;
		procedure Set_Algorithm(const pRetVal: WideString); safecall;
		property Parameter: IParameterType read Get_Parameter write _Set_Parameter;
		property Algorithm: WideString read Get_Algorithm write Set_Algorithm;
	end;

	// *********************************************************************//
	// DispIntf :    IAlgorithmIdentifierDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {BD6B7298-EC71-4A5E-BF46-7A963E6EC710}
	// *********************************************************************//
	IAlgorithmIdentifierDisp = dispinterface
		['{BD6B7298-EC71-4A5E-BF46-7A963E6EC710}']
		property Parameter: IParameterType dispid 1;
		property Algorithm: WideString dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IParameterType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {EACAF4BE-C05D-4504-881C-6312DE123D50}
	// *********************************************************************//
	IParameterType = interface(IDispatch)
		['{EACAF4BE-C05D-4504-881C-6312DE123D50}']
		function Get_InitialisationVector: PSafeArray; safecall;
		procedure Set_InitialisationVector(pRetVal: PSafeArray); safecall;
		function InitialisationVectorSize: Integer; safecall;
		function InitialisationVectorGetItem(index: Integer): Byte; safecall;
		function InitialisationVectorSetItem(index: Integer; value: Byte): WordBool; safecall;
		function InitialisationVectorAddItem(value: Byte): WordBool; safecall;
		function InitialisationVectorRemoveItem(index: Integer): WordBool; safecall;
		property InitialisationVector: PSafeArray read Get_InitialisationVector write Set_InitialisationVector;
	end;

	// *********************************************************************//
	// DispIntf :    IParameterTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {EACAF4BE-C05D-4504-881C-6312DE123D50}
	// *********************************************************************//
	IParameterTypeDisp = dispinterface
		['{EACAF4BE-C05D-4504-881C-6312DE123D50}']
		property InitialisationVector: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 1;
		function InitialisationVectorSize: Integer; dispid 2;
		function InitialisationVectorGetItem(index: Integer): Byte; dispid 3;
		function InitialisationVectorSetItem(index: Integer; value: Byte): WordBool; dispid 4;
		function InitialisationVectorAddItem(value: Byte): WordBool; dispid 5;
		function InitialisationVectorRemoveItem(index: Integer): WordBool; dispid 6;
	end;

	// *********************************************************************//
	// Interface :   IKeyTransportType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D388F8FD-D161-4ED9-8EEC-EAFA61DEA8B3}
	// *********************************************************************//
	IKeyTransportType = interface(IDispatch)
		['{D388F8FD-D161-4ED9-8EEC-EAFA61DEA8B3}']
		function Get_RecipientIdentifier: IRecipientIdentifierType; safecall;
		procedure _Set_RecipientIdentifier(const pRetVal: IRecipientIdentifierType); safecall;
		function Get_KeyEncryptionAlgorithm: IAlgorithmIdentifier; safecall;
		procedure _Set_KeyEncryptionAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
		function Get_Version: WideString; safecall;
		procedure Set_Version(const pRetVal: WideString); safecall;
		function Get_EncryptedKey: PSafeArray; safecall;
		procedure Set_EncryptedKey(pRetVal: PSafeArray); safecall;
		function EncryptedKeySize: Integer; safecall;
		function EncryptedKeyGetItem(index: Integer): Byte; safecall;
		function EncryptedKeySetItem(index: Integer; value: Byte): WordBool; safecall;
		function EncryptedKeyAddItem(value: Byte): WordBool; safecall;
		function EncryptedKeyRemoveItem(index: Integer): WordBool; safecall;
		property RecipientIdentifier: IRecipientIdentifierType read Get_RecipientIdentifier write _Set_RecipientIdentifier;
		property KeyEncryptionAlgorithm: IAlgorithmIdentifier read Get_KeyEncryptionAlgorithm write _Set_KeyEncryptionAlgorithm;
		property Version: WideString read Get_Version write Set_Version;
		property EncryptedKey: PSafeArray read Get_EncryptedKey write Set_EncryptedKey;
	end;

	// *********************************************************************//
	// DispIntf :    IKeyTransportTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D388F8FD-D161-4ED9-8EEC-EAFA61DEA8B3}
	// *********************************************************************//
	IKeyTransportTypeDisp = dispinterface
		['{D388F8FD-D161-4ED9-8EEC-EAFA61DEA8B3}']
		property RecipientIdentifier: IRecipientIdentifierType dispid 2;
		property KeyEncryptionAlgorithm: IAlgorithmIdentifier dispid 3;
		property Version: WideString dispid 4;
		property EncryptedKey: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 5;
		function EncryptedKeySize: Integer; dispid 6;
		function EncryptedKeyGetItem(index: Integer): Byte; dispid 7;
		function EncryptedKeySetItem(index: Integer; value: Byte): WordBool; dispid 8;
		function EncryptedKeyAddItem(value: Byte): WordBool; dispid 9;
		function EncryptedKeyRemoveItem(index: Integer): WordBool; dispid 10;
	end;

	// *********************************************************************//
	// Interface :   IRecipientIdentifierType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {0542EE57-7075-49F5-86F1-FCBED5306724}
	// *********************************************************************//
	IRecipientIdentifierType = interface(IDispatch)
		['{0542EE57-7075-49F5-86F1-FCBED5306724}']
		function Get_IssuerAndSerialNumber: IIssuerAndSerialNumberType; safecall;
		procedure _Set_IssuerAndSerialNumber(const pRetVal: IIssuerAndSerialNumberType); safecall;
		property IssuerAndSerialNumber: IIssuerAndSerialNumberType read Get_IssuerAndSerialNumber write _Set_IssuerAndSerialNumber;
	end;

	// *********************************************************************//
	// DispIntf :    IRecipientIdentifierTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {0542EE57-7075-49F5-86F1-FCBED5306724}
	// *********************************************************************//
	IRecipientIdentifierTypeDisp = dispinterface
		['{0542EE57-7075-49F5-86F1-FCBED5306724}']
		property IssuerAndSerialNumber: IIssuerAndSerialNumberType dispid 1;
	end;

	// *********************************************************************//
	// Interface :   IIssuerAndSerialNumberType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {20CEF69A-65E4-4660-B864-66AC7D0F6BF0}
	// *********************************************************************//
	IIssuerAndSerialNumberType = interface(IDispatch)
		['{20CEF69A-65E4-4660-B864-66AC7D0F6BF0}']
		function Get_Issuer: PSafeArray; safecall;
		procedure Set_Issuer(pRetVal: PSafeArray); safecall;
		function Get_SerialNumber: WideString; safecall;
		procedure Set_SerialNumber(const pRetVal: WideString); safecall;
		function IssuerSize: Integer; safecall;
		function IssuerGetItem(index: Integer): IRelativeDistinguishedNameType; safecall;
		function IssuerSetItem(index: Integer; const value: IRelativeDistinguishedNameType): WordBool; safecall;
		function IssuerAddItem(const value: IRelativeDistinguishedNameType): WordBool; safecall;
		function IssuerRemoveItem(index: Integer): WordBool; safecall;
		property Issuer: PSafeArray read Get_Issuer write Set_Issuer;
		property SerialNumber: WideString read Get_SerialNumber write Set_SerialNumber;
	end;

	// *********************************************************************//
	// DispIntf :    IIssuerAndSerialNumberTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {20CEF69A-65E4-4660-B864-66AC7D0F6BF0}
	// *********************************************************************//
	IIssuerAndSerialNumberTypeDisp = dispinterface
		['{20CEF69A-65E4-4660-B864-66AC7D0F6BF0}']
		property Issuer: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 1;
		property SerialNumber: WideString dispid 2;
		function IssuerSize: Integer; dispid 3;
		function IssuerGetItem(index: Integer): IRelativeDistinguishedNameType; dispid 4;
		function IssuerSetItem(index: Integer; const value: IRelativeDistinguishedNameType): WordBool; dispid 5;
		function IssuerAddItem(const value: IRelativeDistinguishedNameType): WordBool; dispid 6;
		function IssuerRemoveItem(index: Integer): WordBool; dispid 7;
	end;

	// *********************************************************************//
	// Interface :   IRelativeDistinguishedNameType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2C1FE857-6DB3-47AC-838B-10853C3BDBE0}
	// *********************************************************************//
	IRelativeDistinguishedNameType = interface(IDispatch)
		['{2C1FE857-6DB3-47AC-838B-10853C3BDBE0}']
		function Get_AttributeType: WideString; safecall;
		procedure Set_AttributeType(const pRetVal: WideString); safecall;
		function Get_AttributeValue: WideString; safecall;
		procedure Set_AttributeValue(const pRetVal: WideString); safecall;
		property AttributeType: WideString read Get_AttributeType write Set_AttributeType;
		property AttributeValue: WideString read Get_AttributeValue write Set_AttributeValue;
	end;

	// *********************************************************************//
	// DispIntf :    IRelativeDistinguishedNameTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2C1FE857-6DB3-47AC-838B-10853C3BDBE0}
	// *********************************************************************//
	IRelativeDistinguishedNameTypeDisp = dispinterface
		['{2C1FE857-6DB3-47AC-838B-10853C3BDBE0}']
		property AttributeType: WideString dispid 1;
		property AttributeValue: WideString dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IEncapsulatedContentType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {744CC28F-0187-4E6D-B72D-A6B188713DDF}
	// *********************************************************************//
	IEncapsulatedContentType = interface(IDispatch)
		['{744CC28F-0187-4E6D-B72D-A6B188713DDF}']
		function Get_Content: PSafeArray; safecall;
		procedure Set_Content(pRetVal: PSafeArray); safecall;
		function Get_ContentType: WideString; safecall;
		procedure Set_ContentType(const pRetVal: WideString); safecall;
		function ContentSize: Integer; safecall;
		function ContentGetItem(index: Integer): Byte; safecall;
		function ContentSetItem(index: Integer; value: Byte): WordBool; safecall;
		function ContentAddItem(value: Byte): WordBool; safecall;
		function ContentRemoveItem(index: Integer): WordBool; safecall;
		property Content: PSafeArray read Get_Content write Set_Content;
		property ContentType: WideString read Get_ContentType write Set_ContentType;
	end;

	// *********************************************************************//
	// DispIntf :    IEncapsulatedContentTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {744CC28F-0187-4E6D-B72D-A6B188713DDF}
	// *********************************************************************//
	IEncapsulatedContentTypeDisp = dispinterface
		['{744CC28F-0187-4E6D-B72D-A6B188713DDF}']
		property Content: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 1;
		property ContentType: WideString dispid 2;
		function ContentSize: Integer; dispid 3;
		function ContentGetItem(index: Integer): Byte; dispid 4;
		function ContentSetItem(index: Integer; value: Byte): WordBool; dispid 5;
		function ContentAddItem(value: Byte): WordBool; dispid 6;
		function ContentRemoveItem(index: Integer): WordBool; dispid 7;
	end;

	// *********************************************************************//
	// Interface :   IDigestedDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {9A7093CB-09BF-4F0D-B226-B9AA2688EDCD}
	// *********************************************************************//
	IDigestedDataType = interface(IDispatch)
		['{9A7093CB-09BF-4F0D-B226-B9AA2688EDCD}']
		function Get_DigestAlgorithm: IAlgorithmIdentifier; safecall;
		procedure _Set_DigestAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
		function Get_EncapsulatedContent: IEncapsulatedContentType; safecall;
		procedure _Set_EncapsulatedContent(const pRetVal: IEncapsulatedContentType); safecall;
		function Get_Digest: PSafeArray; safecall;
		procedure Set_Digest(pRetVal: PSafeArray); safecall;
		function Get_Version: WideString; safecall;
		procedure Set_Version(const pRetVal: WideString); safecall;
		function DigestSize: Integer; safecall;
		function DigestGetItem(index: Integer): Byte; safecall;
		function DigestSetItem(index: Integer; value: Byte): WordBool; safecall;
		function DigestAddItem(value: Byte): WordBool; safecall;
		function DigestRemoveItem(index: Integer): WordBool; safecall;
		property DigestAlgorithm: IAlgorithmIdentifier read Get_DigestAlgorithm write _Set_DigestAlgorithm;
		property EncapsulatedContent: IEncapsulatedContentType read Get_EncapsulatedContent write _Set_EncapsulatedContent;
		property Digest: PSafeArray read Get_Digest write Set_Digest;
		property Version: WideString read Get_Version write Set_Version;
	end;

	// *********************************************************************//
	// DispIntf :    IDigestedDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {9A7093CB-09BF-4F0D-B226-B9AA2688EDCD}
	// *********************************************************************//
	IDigestedDataTypeDisp = dispinterface
		['{9A7093CB-09BF-4F0D-B226-B9AA2688EDCD}']
		property DigestAlgorithm: IAlgorithmIdentifier dispid 1;
		property EncapsulatedContent: IEncapsulatedContentType dispid 2;
		property Digest: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		property Version: WideString dispid 4;
		function DigestSize: Integer; dispid 5;
		function DigestGetItem(index: Integer): Byte; dispid 6;
		function DigestSetItem(index: Integer; value: Byte): WordBool; dispid 7;
		function DigestAddItem(value: Byte): WordBool; dispid 8;
		function DigestRemoveItem(index: Integer): WordBool; dispid 9;
	end;

	// *********************************************************************//
	// Interface :   IEnvelopedDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {59517152-8CFC-44E8-9F28-D18FBF62B644}
	// *********************************************************************//
	IEnvelopedDataType = interface(IDispatch)
		['{59517152-8CFC-44E8-9F28-D18FBF62B644}']
		function Get_Items: PSafeArray; safecall;
		procedure Set_Items(pRetVal: PSafeArray); safecall;
		function Get_EncryptedContent: IEncryptedContentType; safecall;
		procedure _Set_EncryptedContent(const pRetVal: IEncryptedContentType); safecall;
		function Get_Version: WideString; safecall;
		procedure Set_Version(const pRetVal: WideString); safecall;
		function ItemsSize: Integer; safecall;
		function ItemsGetItem(index: Integer): OleVariant; safecall;
		function ItemsSetItem(index: Integer; value: OleVariant): WordBool; safecall;
		function ItemsAddItem(value: OleVariant): WordBool; safecall;
		function ItemsRemoveItem(index: Integer): WordBool; safecall;
		property Items: PSafeArray read Get_Items write Set_Items;
		property EncryptedContent: IEncryptedContentType read Get_EncryptedContent write _Set_EncryptedContent;
		property Version: WideString read Get_Version write Set_Version;
	end;

	// *********************************************************************//
	// DispIntf :    IEnvelopedDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {59517152-8CFC-44E8-9F28-D18FBF62B644}
	// *********************************************************************//
	IEnvelopedDataTypeDisp = dispinterface
		['{59517152-8CFC-44E8-9F28-D18FBF62B644}']
		property Items: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property EncryptedContent: IEncryptedContentType dispid 3;
		property Version: WideString dispid 4;
		function ItemsSize: Integer; dispid 5;
		function ItemsGetItem(index: Integer): OleVariant; dispid 6;
		function ItemsSetItem(index: Integer; value: OleVariant): WordBool; dispid 7;
		function ItemsAddItem(value: OleVariant): WordBool; dispid 8;
		function ItemsRemoveItem(index: Integer): WordBool; dispid 9;
	end;

	// *********************************************************************//
	// Interface :   IEncryptedContentType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {682B13F7-C7C5-4937-8FB9-476675C54B26}
	// *********************************************************************//
	IEncryptedContentType = interface(IDispatch)
		['{682B13F7-C7C5-4937-8FB9-476675C54B26}']
		function Get_ContentEncryptionAlgorithm: IAlgorithmIdentifier; safecall;
		procedure _Set_ContentEncryptionAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
		function Get_EncryptedData: PSafeArray; safecall;
		procedure Set_EncryptedData(pRetVal: PSafeArray); safecall;
		function Get_ContentType: WideString; safecall;
		procedure Set_ContentType(const pRetVal: WideString); safecall;
		function EncryptedDataSize: Integer; safecall;
		function EncryptedDataGetItem(index: Integer): Byte; safecall;
		function EncryptedDataSetItem(index: Integer; value: Byte): WordBool; safecall;
		function EncryptedDataAddItem(value: Byte): WordBool; safecall;
		function EncryptedDataRemoveItem(index: Integer): WordBool; safecall;
		property ContentEncryptionAlgorithm: IAlgorithmIdentifier read Get_ContentEncryptionAlgorithm write _Set_ContentEncryptionAlgorithm;
		property EncryptedData: PSafeArray read Get_EncryptedData write Set_EncryptedData;
		property ContentType: WideString read Get_ContentType write Set_ContentType;
	end;

	// *********************************************************************//
	// DispIntf :    IEncryptedContentTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {682B13F7-C7C5-4937-8FB9-476675C54B26}
	// *********************************************************************//
	IEncryptedContentTypeDisp = dispinterface
		['{682B13F7-C7C5-4937-8FB9-476675C54B26}']
		property ContentEncryptionAlgorithm: IAlgorithmIdentifier dispid 1;
		property EncryptedData: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property ContentType: WideString dispid 3;
		function EncryptedDataSize: Integer; dispid 4;
		function EncryptedDataGetItem(index: Integer): Byte; dispid 5;
		function EncryptedDataSetItem(index: Integer; value: Byte): WordBool; dispid 6;
		function EncryptedDataAddItem(value: Byte): WordBool; dispid 7;
		function EncryptedDataRemoveItem(index: Integer): WordBool; dispid 8;
	end;

	// *********************************************************************//
	// Interface :   INamedKeyEncryptedDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {E14A93BB-1F6C-4EEC-9410-C668ADF2836C}
	// *********************************************************************//
	INamedKeyEncryptedDataType = interface(IDispatch)
		['{E14A93BB-1F6C-4EEC-9410-C668ADF2836C}']
		function Get_KeyName: WideString; safecall;
		procedure Set_KeyName(const pRetVal: WideString); safecall;
		function Get_EncryptedContent: IEncryptedContentType; safecall;
		procedure _Set_EncryptedContent(const pRetVal: IEncryptedContentType); safecall;
		function Get_Version: WideString; safecall;
		procedure Set_Version(const pRetVal: WideString); safecall;
		property KeyName: WideString read Get_KeyName write Set_KeyName;
		property EncryptedContent: IEncryptedContentType read Get_EncryptedContent write _Set_EncryptedContent;
		property Version: WideString read Get_Version write Set_Version;
	end;

	// *********************************************************************//
	// DispIntf :    INamedKeyEncryptedDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {E14A93BB-1F6C-4EEC-9410-C668ADF2836C}
	// *********************************************************************//
	INamedKeyEncryptedDataTypeDisp = dispinterface
		['{E14A93BB-1F6C-4EEC-9410-C668ADF2836C}']
		property KeyName: WideString dispid 2;
		property EncryptedContent: IEncryptedContentType dispid 3;
		property Version: WideString dispid 4;
	end;

	// *********************************************************************//
	// Interface :   ISignedDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {043F6910-2283-4B81-BA25-47DCD9A15BB5}
	// *********************************************************************//
	ISignedDataType = interface(IDispatch)
		['{043F6910-2283-4B81-BA25-47DCD9A15BB5}']
		function Get_DigestAlgorithm: PSafeArray; safecall;
		procedure Set_DigestAlgorithm(pRetVal: PSafeArray); safecall;
		function Get_EncapsulatedContent: IEncapsulatedContentType; safecall;
		procedure _Set_EncapsulatedContent(const pRetVal: IEncapsulatedContentType); safecall;
		function Get_Certificate: PSafeArray; safecall;
		procedure Set_Certificate(pRetVal: PSafeArray); safecall;
		function Get_Signer: PSafeArray; safecall;
		procedure Set_Signer(pRetVal: PSafeArray); safecall;
		function Get_Version: WideString; safecall;
		procedure Set_Version(const pRetVal: WideString); safecall;
		function DigestAlgorithmSize: Integer; safecall;
		function DigestAlgorithmGetItem(index: Integer): IAlgorithmIdentifier; safecall;
		function DigestAlgorithmSetItem(index: Integer; const value: IAlgorithmIdentifier): WordBool; safecall;
		function DigestAlgorithmAddItem(const value: IAlgorithmIdentifier): WordBool; safecall;
		function DigestAlgorithmRemoveItem(index: Integer): WordBool; safecall;
		function CertificateSize: Integer; safecall;
		function CertificateGetItem(index: Integer): Byte; safecall;
		function CertificateSetItem(index: Integer; value: Byte): WordBool; safecall;
		function CertificateAddItem(value: Byte): WordBool; safecall;
		function CertificateRemoveItem(index: Integer): WordBool; safecall;
		function SignerSize: Integer; safecall;
		function SignerGetItem(index: Integer): ISignerType; safecall;
		function SignerSetItem(index: Integer; const value: ISignerType): WordBool; safecall;
		function SignerAddItem(const value: ISignerType): WordBool; safecall;
		function SignerRemoveItem(index: Integer): WordBool; safecall;
		property DigestAlgorithm: PSafeArray read Get_DigestAlgorithm write Set_DigestAlgorithm;
		property EncapsulatedContent: IEncapsulatedContentType read Get_EncapsulatedContent write _Set_EncapsulatedContent;
		property Certificate: PSafeArray read Get_Certificate write Set_Certificate;
		property Signer: PSafeArray read Get_Signer write Set_Signer;
		property Version: WideString read Get_Version write Set_Version;
	end;

	// *********************************************************************//
	// DispIntf :    ISignedDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {043F6910-2283-4B81-BA25-47DCD9A15BB5}
	// *********************************************************************//
	ISignedDataTypeDisp = dispinterface
		['{043F6910-2283-4B81-BA25-47DCD9A15BB5}']
		property DigestAlgorithm: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property EncapsulatedContent: IEncapsulatedContentType dispid 3;
		property Certificate: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		property Signer: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 5;
		property Version: WideString dispid 6;
		function DigestAlgorithmSize: Integer; dispid 7;
		function DigestAlgorithmGetItem(index: Integer): IAlgorithmIdentifier; dispid 8;
		function DigestAlgorithmSetItem(index: Integer; const value: IAlgorithmIdentifier): WordBool; dispid 9;
		function DigestAlgorithmAddItem(const value: IAlgorithmIdentifier): WordBool; dispid 10;
		function DigestAlgorithmRemoveItem(index: Integer): WordBool; dispid 11;
		function CertificateSize: Integer; dispid 12;
		function CertificateGetItem(index: Integer): Byte; dispid 13;
		function CertificateSetItem(index: Integer; value: Byte): WordBool; dispid 14;
		function CertificateAddItem(value: Byte): WordBool; dispid 15;
		function CertificateRemoveItem(index: Integer): WordBool; dispid 16;
		function SignerSize: Integer; dispid 17;
		function SignerGetItem(index: Integer): ISignerType; dispid 18;
		function SignerSetItem(index: Integer; const value: ISignerType): WordBool; dispid 19;
		function SignerAddItem(const value: ISignerType): WordBool; dispid 20;
		function SignerRemoveItem(index: Integer): WordBool; dispid 21;
	end;

	// *********************************************************************//
	// Interface :   ISignerType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F4BBD845-640F-41F6-88A7-D3B7DA1C615F}
	// *********************************************************************//
	ISignerType = interface(IDispatch)
		['{F4BBD845-640F-41F6-88A7-D3B7DA1C615F}']
		function Get_SignerIdentifier: ISignerIdentifierType; safecall;
		procedure _Set_SignerIdentifier(const pRetVal: ISignerIdentifierType); safecall;
		function Get_DigestAlgorithm: IAlgorithmIdentifier; safecall;
		procedure _Set_DigestAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
		function Get_SignatureAlgorithm: IAlgorithmIdentifier; safecall;
		procedure _Set_SignatureAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
		function Get_Signature: PSafeArray; safecall;
		procedure Set_Signature(pRetVal: PSafeArray); safecall;
		function Get_Version: WideString; safecall;
		procedure Set_Version(const pRetVal: WideString); safecall;
		function SignatureSize: Integer; safecall;
		function SignatureGetItem(index: Integer): Byte; safecall;
		function SignatureSetItem(index: Integer; value: Byte): WordBool; safecall;
		function SignatureAddItem(value: Byte): WordBool; safecall;
		function SignatureRemoveItem(index: Integer): WordBool; safecall;
		property SignerIdentifier: ISignerIdentifierType read Get_SignerIdentifier write _Set_SignerIdentifier;
		property DigestAlgorithm: IAlgorithmIdentifier read Get_DigestAlgorithm write _Set_DigestAlgorithm;
		property SignatureAlgorithm: IAlgorithmIdentifier read Get_SignatureAlgorithm write _Set_SignatureAlgorithm;
		property Signature: PSafeArray read Get_Signature write Set_Signature;
		property Version: WideString read Get_Version write Set_Version;
	end;

	// *********************************************************************//
	// DispIntf :    ISignerTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F4BBD845-640F-41F6-88A7-D3B7DA1C615F}
	// *********************************************************************//
	ISignerTypeDisp = dispinterface
		['{F4BBD845-640F-41F6-88A7-D3B7DA1C615F}']
		property SignerIdentifier: ISignerIdentifierType dispid 2;
		property DigestAlgorithm: IAlgorithmIdentifier dispid 3;
		property SignatureAlgorithm: IAlgorithmIdentifier dispid 4;
		property Signature: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 5;
		property Version: WideString dispid 6;
		function SignatureSize: Integer; dispid 7;
		function SignatureGetItem(index: Integer): Byte; dispid 8;
		function SignatureSetItem(index: Integer; value: Byte): WordBool; dispid 9;
		function SignatureAddItem(value: Byte): WordBool; dispid 10;
		function SignatureRemoveItem(index: Integer): WordBool; dispid 11;
	end;

	// *********************************************************************//
	// Interface :   ISignerIdentifierType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {28CF88AD-5AD1-46C4-99F0-05B01884EF21}
	// *********************************************************************//
	ISignerIdentifierType = interface(IDispatch)
		['{28CF88AD-5AD1-46C4-99F0-05B01884EF21}']
		function Get_IssuerAndSerialNumber: IIssuerAndSerialNumberType; safecall;
		procedure _Set_IssuerAndSerialNumber(const pRetVal: IIssuerAndSerialNumberType); safecall;
		property IssuerAndSerialNumber: IIssuerAndSerialNumberType read Get_IssuerAndSerialNumber write _Set_IssuerAndSerialNumber;
	end;

	// *********************************************************************//
	// DispIntf :    ISignerIdentifierTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {28CF88AD-5AD1-46C4-99F0-05B01884EF21}
	// *********************************************************************//
	ISignerIdentifierTypeDisp = dispinterface
		['{28CF88AD-5AD1-46C4-99F0-05B01884EF21}']
		property IssuerAndSerialNumber: IIssuerAndSerialNumberType dispid 1;
	end;

	// *********************************************************************//
	// Interface :   ISensitiveCardDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2599BCE4-C214-4992-B19B-A0A8954D5D8D}
	// *********************************************************************//
	ISensitiveCardDataType = interface(IDispatch)
		['{2599BCE4-C214-4992-B19B-A0A8954D5D8D}']
		function Get_TrackData: PSafeArray; safecall;
		procedure Set_TrackData(pRetVal: PSafeArray); safecall;
		function Get_PAN: WideString; safecall;
		procedure Set_PAN(const pRetVal: WideString); safecall;
		function Get_CardSeqNumb: WideString; safecall;
		procedure Set_CardSeqNumb(const pRetVal: WideString); safecall;
		function Get_ExpiryDate: WideString; safecall;
		procedure Set_ExpiryDate(const pRetVal: WideString); safecall;
		function TrackDataSize: Integer; safecall;
		function TrackDataGetItem(index: Integer): ITrackDataType; safecall;
		function TrackDataSetItem(index: Integer; const value: ITrackDataType): WordBool; safecall;
		function TrackDataAddItem(const value: ITrackDataType): WordBool; safecall;
		function TrackDataRemoveItem(index: Integer): WordBool; safecall;
		property TrackData: PSafeArray read Get_TrackData write Set_TrackData;
		property PAN: WideString read Get_PAN write Set_PAN;
		property CardSeqNumb: WideString read Get_CardSeqNumb write Set_CardSeqNumb;
		property ExpiryDate: WideString read Get_ExpiryDate write Set_ExpiryDate;
	end;

	// *********************************************************************//
	// DispIntf :    ISensitiveCardDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2599BCE4-C214-4992-B19B-A0A8954D5D8D}
	// *********************************************************************//
	ISensitiveCardDataTypeDisp = dispinterface
		['{2599BCE4-C214-4992-B19B-A0A8954D5D8D}']
		property TrackData: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 1;
		property PAN: WideString dispid 2;
		property CardSeqNumb: WideString dispid 3;
		property ExpiryDate: WideString dispid 4;
		function TrackDataSize: Integer; dispid 5;
		function TrackDataGetItem(index: Integer): ITrackDataType; dispid 6;
		function TrackDataSetItem(index: Integer; const value: ITrackDataType): WordBool; dispid 7;
		function TrackDataAddItem(const value: ITrackDataType): WordBool; dispid 8;
		function TrackDataRemoveItem(index: Integer): WordBool; dispid 9;
	end;

	// *********************************************************************//
	// Interface :   ITrackDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2FCFC638-FDA0-4F05-B52B-7EF20435AC79}
	// *********************************************************************//
	ITrackDataType = interface(IDispatch)
		['{2FCFC638-FDA0-4F05-B52B-7EF20435AC79}']
		function Get_TrackNumb: WideString; safecall;
		procedure Set_TrackNumb(const pRetVal: WideString); safecall;
		function Get_TrackFormat: WideString; safecall;
		procedure Set_TrackFormat(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		property TrackNumb: WideString read Get_TrackNumb write Set_TrackNumb;
		property TrackFormat: WideString read Get_TrackFormat write Set_TrackFormat;
		property value: WideString read Get_value write Set_value;
	end;

	// *********************************************************************//
	// DispIntf :    ITrackDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2FCFC638-FDA0-4F05-B52B-7EF20435AC79}
	// *********************************************************************//
	ITrackDataTypeDisp = dispinterface
		['{2FCFC638-FDA0-4F05-B52B-7EF20435AC79}']
		property TrackNumb: WideString dispid 2;
		property TrackFormat: WideString dispid 3;
		property value: WideString dispid 4;
	end;

	// *********************************************************************//
	// Interface :   IPaymentTokenType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {0CEAD8D5-7971-4F97-999E-FCCF8047590D}
	// *********************************************************************//
	IPaymentTokenType = interface(IDispatch)
		['{0CEAD8D5-7971-4F97-999E-FCCF8047590D}']
		function Get_TokenRequestedType: WideString; safecall;
		procedure Set_TokenRequestedType(const pRetVal: WideString); safecall;
		function Get_TokenValue: WideString; safecall;
		procedure Set_TokenValue(const pRetVal: WideString); safecall;
		function Get_ExpiryDateTime: WideString; safecall;
		procedure Set_ExpiryDateTime(const pRetVal: WideString); safecall;
		function Get_ExpiryDateTimeSpecified: WordBool; safecall;
		procedure Set_ExpiryDateTimeSpecified(pRetVal: WordBool); safecall;
		property TokenRequestedType: WideString read Get_TokenRequestedType write Set_TokenRequestedType;
		property TokenValue: WideString read Get_TokenValue write Set_TokenValue;
		property ExpiryDateTime: WideString read Get_ExpiryDateTime write Set_ExpiryDateTime;
		property ExpiryDateTimeSpecified: WordBool read Get_ExpiryDateTimeSpecified write Set_ExpiryDateTimeSpecified;
	end;

	// *********************************************************************//
	// DispIntf :    IPaymentTokenTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {0CEAD8D5-7971-4F97-999E-FCCF8047590D}
	// *********************************************************************//
	IPaymentTokenTypeDisp = dispinterface
		['{0CEAD8D5-7971-4F97-999E-FCCF8047590D}']
		property TokenRequestedType: WideString dispid 1;
		property TokenValue: WideString dispid 2;
		property ExpiryDateTime: WideString dispid 3;
		property ExpiryDateTimeSpecified: WordBool dispid 4;
	end;

	// *********************************************************************//
	// Interface :   ICustomerOrderType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2FD88699-79B3-4D03-AE1F-89D2C1CEEE25}
	// *********************************************************************//
	ICustomerOrderType = interface(IDispatch)
		['{2FD88699-79B3-4D03-AE1F-89D2C1CEEE25}']
		function Get_AdditionalInformation: WideString; safecall;
		procedure Set_AdditionalInformation(const pRetVal: WideString); safecall;
		function Get_CustomerOrderID: WideString; safecall;
		procedure Set_CustomerOrderID(const pRetVal: WideString); safecall;
		function Get_OpenOrderState: WordBool; safecall;
		procedure Set_OpenOrderState(pRetVal: WordBool); safecall;
		function Get_StartDate: WideString; safecall;
		procedure Set_StartDate(const pRetVal: WideString); safecall;
		function Get_EndDate: WideString; safecall;
		procedure Set_EndDate(const pRetVal: WideString); safecall;
		function Get_EndDateSpecified: WordBool; safecall;
		procedure Set_EndDateSpecified(pRetVal: WordBool); safecall;
		function Get_ForecastedAmount: Double; safecall;
		procedure Set_ForecastedAmount(pRetVal: Double); safecall;
		function Get_CurrentAmount: Double; safecall;
		procedure Set_CurrentAmount(pRetVal: Double); safecall;
		function Get_Currency: WideString; safecall;
		procedure Set_Currency(const pRetVal: WideString); safecall;
		function Get_AccessedBy: WideString; safecall;
		procedure Set_AccessedBy(const pRetVal: WideString); safecall;
		property AdditionalInformation: WideString read Get_AdditionalInformation write Set_AdditionalInformation;
		property CustomerOrderID: WideString read Get_CustomerOrderID write Set_CustomerOrderID;
		property OpenOrderState: WordBool read Get_OpenOrderState write Set_OpenOrderState;
		property StartDate: WideString read Get_StartDate write Set_StartDate;
		property EndDate: WideString read Get_EndDate write Set_EndDate;
		property EndDateSpecified: WordBool read Get_EndDateSpecified write Set_EndDateSpecified;
		property ForecastedAmount: Double read Get_ForecastedAmount write Set_ForecastedAmount;
		property CurrentAmount: Double read Get_CurrentAmount write Set_CurrentAmount;
		property Currency: WideString read Get_Currency write Set_Currency;
		property AccessedBy: WideString read Get_AccessedBy write Set_AccessedBy;
	end;

	// *********************************************************************//
	// DispIntf :    ICustomerOrderTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2FD88699-79B3-4D03-AE1F-89D2C1CEEE25}
	// *********************************************************************//
	ICustomerOrderTypeDisp = dispinterface
		['{2FD88699-79B3-4D03-AE1F-89D2C1CEEE25}']
		property AdditionalInformation: WideString dispid 2;
		property CustomerOrderID: WideString dispid 3;
		property OpenOrderState: WordBool dispid 4;
		property StartDate: WideString dispid 5;
		property EndDate: WideString dispid 6;
		property EndDateSpecified: WordBool dispid 7;
		property ForecastedAmount: Double dispid 8;
		property CurrentAmount: Double dispid 9;
		property Currency: WideString dispid 10;
		property AccessedBy: WideString dispid 11;
	end;

	// *********************************************************************//
	// Interface :   ICheckDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {5C3D1A1B-CD2D-43A7-A707-347DF5DD6796}
	// *********************************************************************//
	ICheckDataType = interface(IDispatch)
		['{5C3D1A1B-CD2D-43A7-A707-347DF5DD6796}']
		function Get_BankID: WideString; safecall;
		procedure Set_BankID(const pRetVal: WideString); safecall;
		function Get_AccountNumber: WideString; safecall;
		procedure Set_AccountNumber(const pRetVal: WideString); safecall;
		function Get_CheckNumber: WideString; safecall;
		procedure Set_CheckNumber(const pRetVal: WideString); safecall;
		function Get_TrackData: ITrackDataType; safecall;
		procedure _Set_TrackData(const pRetVal: ITrackDataType); safecall;
		function Get_CheckCardNumber: WideString; safecall;
		procedure Set_CheckCardNumber(const pRetVal: WideString); safecall;
		function Get_TypeCode: WideString; safecall;
		procedure Set_TypeCode(const pRetVal: WideString); safecall;
		function Get_Country: WideString; safecall;
		procedure Set_Country(const pRetVal: WideString); safecall;
		property BankID: WideString read Get_BankID write Set_BankID;
		property AccountNumber: WideString read Get_AccountNumber write Set_AccountNumber;
		property CheckNumber: WideString read Get_CheckNumber write Set_CheckNumber;
		property TrackData: ITrackDataType read Get_TrackData write _Set_TrackData;
		property CheckCardNumber: WideString read Get_CheckCardNumber write Set_CheckCardNumber;
		property TypeCode: WideString read Get_TypeCode write Set_TypeCode;
		property Country: WideString read Get_Country write Set_Country;
	end;

	// *********************************************************************//
	// DispIntf :    ICheckDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {5C3D1A1B-CD2D-43A7-A707-347DF5DD6796}
	// *********************************************************************//
	ICheckDataTypeDisp = dispinterface
		['{5C3D1A1B-CD2D-43A7-A707-347DF5DD6796}']
		property BankID: WideString dispid 2;
		property AccountNumber: WideString dispid 3;
		property CheckNumber: WideString dispid 4;
		property TrackData: ITrackDataType dispid 5;
		property CheckCardNumber: WideString dispid 6;
		property TypeCode: WideString dispid 7;
		property Country: WideString dispid 8;
	end;

	// *********************************************************************//
	// Interface :   IMobileDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {9F5AC5CE-A14F-49BC-B6C4-1E7E7E97E96D}
	// *********************************************************************//
	IMobileDataType = interface(IDispatch)
		['{9F5AC5CE-A14F-49BC-B6C4-1E7E7E97E96D}']
		function Get_MobileCountryCode: WideString; safecall;
		procedure Set_MobileCountryCode(const pRetVal: WideString); safecall;
		function Get_Geolocation: IGeolocationType; safecall;
		procedure _Set_Geolocation(const pRetVal: IGeolocationType); safecall;
		function Get_ProtectedMobileData: IContentInformationType; safecall;
		procedure _Set_ProtectedMobileData(const pRetVal: IContentInformationType); safecall;
		function Get_SensitiveMobileData: ISensitiveMobileDataType; safecall;
		procedure _Set_SensitiveMobileData(const pRetVal: ISensitiveMobileDataType); safecall;
		function Get_MobileNetworkCode: WideString; safecall;
		procedure Set_MobileNetworkCode(const pRetVal: WideString); safecall;
		function Get_MaskedMSISDN: WideString; safecall;
		procedure Set_MaskedMSISDN(const pRetVal: WideString); safecall;
		property MobileCountryCode: WideString read Get_MobileCountryCode write Set_MobileCountryCode;
		property Geolocation: IGeolocationType read Get_Geolocation write _Set_Geolocation;
		property ProtectedMobileData: IContentInformationType read Get_ProtectedMobileData write _Set_ProtectedMobileData;
		property SensitiveMobileData: ISensitiveMobileDataType read Get_SensitiveMobileData write _Set_SensitiveMobileData;
		property MobileNetworkCode: WideString read Get_MobileNetworkCode write Set_MobileNetworkCode;
		property MaskedMSISDN: WideString read Get_MaskedMSISDN write Set_MaskedMSISDN;
	end;

	// *********************************************************************//
	// DispIntf :    IMobileDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {9F5AC5CE-A14F-49BC-B6C4-1E7E7E97E96D}
	// *********************************************************************//
	IMobileDataTypeDisp = dispinterface
		['{9F5AC5CE-A14F-49BC-B6C4-1E7E7E97E96D}']
		property MobileCountryCode: WideString dispid 1;
		property Geolocation: IGeolocationType dispid 2;
		property ProtectedMobileData: IContentInformationType dispid 3;
		property SensitiveMobileData: ISensitiveMobileDataType dispid 4;
		property MobileNetworkCode: WideString dispid 5;
		property MaskedMSISDN: WideString dispid 6;
	end;

	// *********************************************************************//
	// Interface :   IGeolocationType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {74787538-CEB1-4B31-BBE2-8361E2656AE3}
	// *********************************************************************//
	IGeolocationType = interface(IDispatch)
		['{74787538-CEB1-4B31-BBE2-8361E2656AE3}']
		function Get_GeographicCoordinates: IGeographicCoordinatesType; safecall;
		procedure _Set_GeographicCoordinates(const pRetVal: IGeographicCoordinatesType); safecall;
		function Get_UTMCoordinates: IUTMCoordinatesType; safecall;
		procedure _Set_UTMCoordinates(const pRetVal: IUTMCoordinatesType); safecall;
		property GeographicCoordinates: IGeographicCoordinatesType read Get_GeographicCoordinates write _Set_GeographicCoordinates;
		property UTMCoordinates: IUTMCoordinatesType read Get_UTMCoordinates write _Set_UTMCoordinates;
	end;

	// *********************************************************************//
	// DispIntf :    IGeolocationTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {74787538-CEB1-4B31-BBE2-8361E2656AE3}
	// *********************************************************************//
	IGeolocationTypeDisp = dispinterface
		['{74787538-CEB1-4B31-BBE2-8361E2656AE3}']
		property GeographicCoordinates: IGeographicCoordinatesType dispid 1;
		property UTMCoordinates: IUTMCoordinatesType dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IGeographicCoordinatesType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {C1AC5CFF-592C-4FD7-90BF-C5C98134CB2C}
	// *********************************************************************//
	IGeographicCoordinatesType = interface(IDispatch)
		['{C1AC5CFF-592C-4FD7-90BF-C5C98134CB2C}']
		function Get_Latitude: WideString; safecall;
		procedure Set_Latitude(const pRetVal: WideString); safecall;
		function Get_Longitude: WideString; safecall;
		procedure Set_Longitude(const pRetVal: WideString); safecall;
		property Latitude: WideString read Get_Latitude write Set_Latitude;
		property Longitude: WideString read Get_Longitude write Set_Longitude;
	end;

	// *********************************************************************//
	// DispIntf :    IGeographicCoordinatesTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {C1AC5CFF-592C-4FD7-90BF-C5C98134CB2C}
	// *********************************************************************//
	IGeographicCoordinatesTypeDisp = dispinterface
		['{C1AC5CFF-592C-4FD7-90BF-C5C98134CB2C}']
		property Latitude: WideString dispid 1;
		property Longitude: WideString dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IUTMCoordinatesType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {7483573D-908D-4007-A307-530C03F49A85}
	// *********************************************************************//
	IUTMCoordinatesType = interface(IDispatch)
		['{7483573D-908D-4007-A307-530C03F49A85}']
		function Get_UTMZone: WideString; safecall;
		procedure Set_UTMZone(const pRetVal: WideString); safecall;
		function Get_UTMEastward: WideString; safecall;
		procedure Set_UTMEastward(const pRetVal: WideString); safecall;
		function Get_UTMNorthward: WideString; safecall;
		procedure Set_UTMNorthward(const pRetVal: WideString); safecall;
		property UTMZone: WideString read Get_UTMZone write Set_UTMZone;
		property UTMEastward: WideString read Get_UTMEastward write Set_UTMEastward;
		property UTMNorthward: WideString read Get_UTMNorthward write Set_UTMNorthward;
	end;

	// *********************************************************************//
	// DispIntf :    IUTMCoordinatesTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {7483573D-908D-4007-A307-530C03F49A85}
	// *********************************************************************//
	IUTMCoordinatesTypeDisp = dispinterface
		['{7483573D-908D-4007-A307-530C03F49A85}']
		property UTMZone: WideString dispid 1;
		property UTMEastward: WideString dispid 2;
		property UTMNorthward: WideString dispid 3;
	end;

	// *********************************************************************//
	// Interface :   ISensitiveMobileDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {74919409-87B5-44AC-BA3D-5718B90FF741}
	// *********************************************************************//
	ISensitiveMobileDataType = interface(IDispatch)
		['{74919409-87B5-44AC-BA3D-5718B90FF741}']
		function Get_MSISDN: WideString; safecall;
		procedure Set_MSISDN(const pRetVal: WideString); safecall;
		function Get_IMSI: WideString; safecall;
		procedure Set_IMSI(const pRetVal: WideString); safecall;
		function Get_IMEI: WideString; safecall;
		procedure Set_IMEI(const pRetVal: WideString); safecall;
		property MSISDN: WideString read Get_MSISDN write Set_MSISDN;
		property IMSI: WideString read Get_IMSI write Set_IMSI;
		property IMEI: WideString read Get_IMEI write Set_IMEI;
	end;

	// *********************************************************************//
	// DispIntf :    ISensitiveMobileDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {74919409-87B5-44AC-BA3D-5718B90FF741}
	// *********************************************************************//
	ISensitiveMobileDataTypeDisp = dispinterface
		['{74919409-87B5-44AC-BA3D-5718B90FF741}']
		property MSISDN: WideString dispid 1;
		property IMSI: WideString dispid 2;
		property IMEI: WideString dispid 3;
	end;

	// *********************************************************************//
	// Interface :   ILoyaltyAccountReqType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {508B61C3-A186-4AB9-8A32-A03C3B4952F0}
	// *********************************************************************//
	ILoyaltyAccountReqType = interface(IDispatch)
		['{508B61C3-A186-4AB9-8A32-A03C3B4952F0}']
		function Get_CardAcquisitionReference: ITransactionIdentificationType; safecall;
		procedure _Set_CardAcquisitionReference(const pRetVal: ITransactionIdentificationType); safecall;
		function Get_LoyaltyAccountID: ILoyaltyAccountIDType; safecall;
		procedure _Set_LoyaltyAccountID(const pRetVal: ILoyaltyAccountIDType); safecall;
		property CardAcquisitionReference: ITransactionIdentificationType read Get_CardAcquisitionReference write _Set_CardAcquisitionReference;
		property LoyaltyAccountID: ILoyaltyAccountIDType read Get_LoyaltyAccountID write _Set_LoyaltyAccountID;
	end;

	// *********************************************************************//
	// DispIntf :    ILoyaltyAccountReqTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {508B61C3-A186-4AB9-8A32-A03C3B4952F0}
	// *********************************************************************//
	ILoyaltyAccountReqTypeDisp = dispinterface
		['{508B61C3-A186-4AB9-8A32-A03C3B4952F0}']
		property CardAcquisitionReference: ITransactionIdentificationType dispid 1;
		property LoyaltyAccountID: ILoyaltyAccountIDType dispid 2;
	end;

	// *********************************************************************//
	// Interface :   ILoyaltyAccountIDType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {E7A1962D-BC03-49EB-83A4-F7B0CB527F2E}
	// *********************************************************************//
	ILoyaltyAccountIDType = interface(IDispatch)
		['{E7A1962D-BC03-49EB-83A4-F7B0CB527F2E}']
		function Get_EntryMode: PSafeArray; safecall;
		procedure Set_EntryMode(pRetVal: PSafeArray); safecall;
		function Get_IdentificationType: WideString; safecall;
		procedure Set_IdentificationType(const pRetVal: WideString); safecall;
		function Get_IdentificationSupport: WideString; safecall;
		procedure Set_IdentificationSupport(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		function EntryModeSize: Integer; safecall;
		function EntryModeGetItem(index: Integer): WideString; safecall;
		function EntryModeSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function EntryModeAddItem(const value: WideString): WordBool; safecall;
		function EntryModeRemoveItem(index: Integer): WordBool; safecall;
		property EntryMode: PSafeArray read Get_EntryMode write Set_EntryMode;
		property IdentificationType: WideString read Get_IdentificationType write Set_IdentificationType;
		property IdentificationSupport: WideString read Get_IdentificationSupport write Set_IdentificationSupport;
		property value: WideString read Get_value write Set_value;
	end;

	// *********************************************************************//
	// DispIntf :    ILoyaltyAccountIDTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {E7A1962D-BC03-49EB-83A4-F7B0CB527F2E}
	// *********************************************************************//
	ILoyaltyAccountIDTypeDisp = dispinterface
		['{E7A1962D-BC03-49EB-83A4-F7B0CB527F2E}']
		property EntryMode: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 1;
		property IdentificationType: WideString dispid 2;
		property IdentificationSupport: WideString dispid 3;
		property value: WideString dispid 4;
		function EntryModeSize: Integer; dispid 5;
		function EntryModeGetItem(index: Integer): WideString; dispid 6;
		function EntryModeSetItem(index: Integer; const value: WideString): WordBool; dispid 7;
		function EntryModeAddItem(const value: WideString): WordBool; dispid 8;
		function EntryModeRemoveItem(index: Integer): WordBool; dispid 9;
	end;

	// *********************************************************************//
	// Interface :   IBalanceInquiryResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {96BCF7A1-DE25-4211-8A78-E0E6EF88DD50}
	// *********************************************************************//
	IBalanceInquiryResponseType = interface(IDispatch)
		['{96BCF7A1-DE25-4211-8A78-E0E6EF88DD50}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_PaymentAccountStatus: IPaymentAccountStatusType; safecall;
		procedure _Set_PaymentAccountStatus(const pRetVal: IPaymentAccountStatusType); safecall;
		function Get_LoyaltyAccountStatus: ILoyaltyAccountStatusType; safecall;
		procedure _Set_LoyaltyAccountStatus(const pRetVal: ILoyaltyAccountStatusType); safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property PaymentAccountStatus: IPaymentAccountStatusType read Get_PaymentAccountStatus write _Set_PaymentAccountStatus;
		property LoyaltyAccountStatus: ILoyaltyAccountStatusType read Get_LoyaltyAccountStatus write _Set_LoyaltyAccountStatus;
	end;

	// *********************************************************************//
	// DispIntf :    IBalanceInquiryResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {96BCF7A1-DE25-4211-8A78-E0E6EF88DD50}
	// *********************************************************************//
	IBalanceInquiryResponseTypeDisp = dispinterface
		['{96BCF7A1-DE25-4211-8A78-E0E6EF88DD50}']
		property Response: IResponseType dispid 1;
		property PaymentAccountStatus: IPaymentAccountStatusType dispid 2;
		property LoyaltyAccountStatus: ILoyaltyAccountStatusType dispid 3;
	end;

	// *********************************************************************//
	// Interface :   IPaymentAccountStatusType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F22DC0B8-0C7B-47A8-ABD9-C5AFD0259189}
	// *********************************************************************//
	IPaymentAccountStatusType = interface(IDispatch)
		['{F22DC0B8-0C7B-47A8-ABD9-C5AFD0259189}']
		function Get_PaymentInstrumentData: IPaymentInstrumentDataType; safecall;
		procedure _Set_PaymentInstrumentData(const pRetVal: IPaymentInstrumentDataType); safecall;
		function Get_PaymentAcquirerData: IPaymentAcquirerDataType; safecall;
		procedure _Set_PaymentAcquirerData(const pRetVal: IPaymentAcquirerDataType); safecall;
		function Get_LoyaltyAccountStatus: ILoyaltyAccountStatusType; safecall;
		procedure _Set_LoyaltyAccountStatus(const pRetVal: ILoyaltyAccountStatusType); safecall;
		function Get_Currency: WideString; safecall;
		procedure Set_Currency(const pRetVal: WideString); safecall;
		function Get_CurrentBalance: Double; safecall;
		procedure Set_CurrentBalance(pRetVal: Double); safecall;
		function Get_CurrentBalanceSpecified: WordBool; safecall;
		procedure Set_CurrentBalanceSpecified(pRetVal: WordBool); safecall;
		property PaymentInstrumentData: IPaymentInstrumentDataType read Get_PaymentInstrumentData write _Set_PaymentInstrumentData;
		property PaymentAcquirerData: IPaymentAcquirerDataType read Get_PaymentAcquirerData write _Set_PaymentAcquirerData;
		property LoyaltyAccountStatus: ILoyaltyAccountStatusType read Get_LoyaltyAccountStatus write _Set_LoyaltyAccountStatus;
		property Currency: WideString read Get_Currency write Set_Currency;
		property CurrentBalance: Double read Get_CurrentBalance write Set_CurrentBalance;
		property CurrentBalanceSpecified: WordBool read Get_CurrentBalanceSpecified write Set_CurrentBalanceSpecified;
	end;

	// *********************************************************************//
	// DispIntf :    IPaymentAccountStatusTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F22DC0B8-0C7B-47A8-ABD9-C5AFD0259189}
	// *********************************************************************//
	IPaymentAccountStatusTypeDisp = dispinterface
		['{F22DC0B8-0C7B-47A8-ABD9-C5AFD0259189}']
		property PaymentInstrumentData: IPaymentInstrumentDataType dispid 1;
		property PaymentAcquirerData: IPaymentAcquirerDataType dispid 2;
		property LoyaltyAccountStatus: ILoyaltyAccountStatusType dispid 3;
		property Currency: WideString dispid 4;
		property CurrentBalance: Double dispid 5;
		property CurrentBalanceSpecified: WordBool dispid 6;
	end;

	// *********************************************************************//
	// Interface :   IPaymentAcquirerDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {728AC4C7-DBBA-4FD7-B59C-268B09234817}
	// *********************************************************************//
	IPaymentAcquirerDataType = interface(IDispatch)
		['{728AC4C7-DBBA-4FD7-B59C-268B09234817}']
		function Get_AcquirerTransactionID: ITransactionIdentificationType; safecall;
		procedure _Set_AcquirerTransactionID(const pRetVal: ITransactionIdentificationType); safecall;
		function Get_ApprovalCode: WideString; safecall;
		procedure Set_ApprovalCode(const pRetVal: WideString); safecall;
		function Get_AcquirerID: WideString; safecall;
		procedure Set_AcquirerID(const pRetVal: WideString); safecall;
		function Get_MerchantID: WideString; safecall;
		procedure Set_MerchantID(const pRetVal: WideString); safecall;
		function Get_AcquirerPOIID: WideString; safecall;
		procedure Set_AcquirerPOIID(const pRetVal: WideString); safecall;
		property AcquirerTransactionID: ITransactionIdentificationType read Get_AcquirerTransactionID write _Set_AcquirerTransactionID;
		property ApprovalCode: WideString read Get_ApprovalCode write Set_ApprovalCode;
		property AcquirerID: WideString read Get_AcquirerID write Set_AcquirerID;
		property MerchantID: WideString read Get_MerchantID write Set_MerchantID;
		property AcquirerPOIID: WideString read Get_AcquirerPOIID write Set_AcquirerPOIID;
	end;

	// *********************************************************************//
	// DispIntf :    IPaymentAcquirerDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {728AC4C7-DBBA-4FD7-B59C-268B09234817}
	// *********************************************************************//
	IPaymentAcquirerDataTypeDisp = dispinterface
		['{728AC4C7-DBBA-4FD7-B59C-268B09234817}']
		property AcquirerTransactionID: ITransactionIdentificationType dispid 1;
		property ApprovalCode: WideString dispid 2;
		property AcquirerID: WideString dispid 3;
		property MerchantID: WideString dispid 4;
		property AcquirerPOIID: WideString dispid 5;
	end;

	// *********************************************************************//
	// Interface :   ILoyaltyAccountStatusType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {469514AB-3420-411A-A1CD-15E42497F27A}
	// *********************************************************************//
	ILoyaltyAccountStatusType = interface(IDispatch)
		['{469514AB-3420-411A-A1CD-15E42497F27A}']
		function Get_LoyaltyAccount: ILoyaltyAccountType; safecall;
		procedure _Set_LoyaltyAccount(const pRetVal: ILoyaltyAccountType); safecall;
		function Get_CurrentBalance: Double; safecall;
		procedure Set_CurrentBalance(pRetVal: Double); safecall;
		function Get_CurrentBalanceSpecified: WordBool; safecall;
		procedure Set_CurrentBalanceSpecified(pRetVal: WordBool); safecall;
		function Get_LoyaltyUnit: WideString; safecall;
		procedure Set_LoyaltyUnit(const pRetVal: WideString); safecall;
		function Get_Currency: WideString; safecall;
		procedure Set_Currency(const pRetVal: WideString); safecall;
		property LoyaltyAccount: ILoyaltyAccountType read Get_LoyaltyAccount write _Set_LoyaltyAccount;
		property CurrentBalance: Double read Get_CurrentBalance write Set_CurrentBalance;
		property CurrentBalanceSpecified: WordBool read Get_CurrentBalanceSpecified write Set_CurrentBalanceSpecified;
		property LoyaltyUnit: WideString read Get_LoyaltyUnit write Set_LoyaltyUnit;
		property Currency: WideString read Get_Currency write Set_Currency;
	end;

	// *********************************************************************//
	// DispIntf :    ILoyaltyAccountStatusTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {469514AB-3420-411A-A1CD-15E42497F27A}
	// *********************************************************************//
	ILoyaltyAccountStatusTypeDisp = dispinterface
		['{469514AB-3420-411A-A1CD-15E42497F27A}']
		property LoyaltyAccount: ILoyaltyAccountType dispid 2;
		property CurrentBalance: Double dispid 3;
		property CurrentBalanceSpecified: WordBool dispid 4;
		property LoyaltyUnit: WideString dispid 5;
		property Currency: WideString dispid 6;
	end;

	// *********************************************************************//
	// Interface :   ILoyaltyAccountType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {C395A052-DDC1-4077-93D2-3F38CAB0AAF1}
	// *********************************************************************//
	ILoyaltyAccountType = interface(IDispatch)
		['{C395A052-DDC1-4077-93D2-3F38CAB0AAF1}']
		function Get_LoyaltyAccountID: ILoyaltyAccountIDType; safecall;
		procedure _Set_LoyaltyAccountID(const pRetVal: ILoyaltyAccountIDType); safecall;
		function Get_LoyaltyBrand: WideString; safecall;
		procedure Set_LoyaltyBrand(const pRetVal: WideString); safecall;
		property LoyaltyAccountID: ILoyaltyAccountIDType read Get_LoyaltyAccountID write _Set_LoyaltyAccountID;
		property LoyaltyBrand: WideString read Get_LoyaltyBrand write Set_LoyaltyBrand;
	end;

	// *********************************************************************//
	// DispIntf :    ILoyaltyAccountTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {C395A052-DDC1-4077-93D2-3F38CAB0AAF1}
	// *********************************************************************//
	ILoyaltyAccountTypeDisp = dispinterface
		['{C395A052-DDC1-4077-93D2-3F38CAB0AAF1}']
		property LoyaltyAccountID: ILoyaltyAccountIDType dispid 1;
		property LoyaltyBrand: WideString dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IBatchRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {46921368-4076-49A4-8DDC-F485D5D7DC3F}
	// *********************************************************************//
	IBatchRequestType = interface(IDispatch)
		['{46921368-4076-49A4-8DDC-F485D5D7DC3F}']
		function Get_TransactionToPerform: PSafeArray; safecall;
		procedure Set_TransactionToPerform(pRetVal: PSafeArray); safecall;
		function Get_RemoveAllFlag: WordBool; safecall;
		procedure Set_RemoveAllFlag(pRetVal: WordBool); safecall;
		function Get_RemoveAllFlagSpecified: WordBool; safecall;
		procedure Set_RemoveAllFlagSpecified(pRetVal: WordBool); safecall;
		function TransactionToPerformSize: Integer; safecall;
		function TransactionToPerformGetItem(index: Integer): ITransactionToPerformType; safecall;
		function TransactionToPerformSetItem(index: Integer; const value: ITransactionToPerformType): WordBool; safecall;
		function TransactionToPerformAddItem(const value: ITransactionToPerformType): WordBool; safecall;
		function TransactionToPerformRemoveItem(index: Integer): WordBool; safecall;
		property TransactionToPerform: PSafeArray read Get_TransactionToPerform write Set_TransactionToPerform;
		property RemoveAllFlag: WordBool read Get_RemoveAllFlag write Set_RemoveAllFlag;
		property RemoveAllFlagSpecified: WordBool read Get_RemoveAllFlagSpecified write Set_RemoveAllFlagSpecified;
	end;

	// *********************************************************************//
	// DispIntf :    IBatchRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {46921368-4076-49A4-8DDC-F485D5D7DC3F}
	// *********************************************************************//
	IBatchRequestTypeDisp = dispinterface
		['{46921368-4076-49A4-8DDC-F485D5D7DC3F}']
		property TransactionToPerform: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 1;
		property RemoveAllFlag: WordBool dispid 2;
		property RemoveAllFlagSpecified: WordBool dispid 3;
		function TransactionToPerformSize: Integer; dispid 4;
		function TransactionToPerformGetItem(index: Integer): ITransactionToPerformType; dispid 5;
		function TransactionToPerformSetItem(index: Integer; const value: ITransactionToPerformType): WordBool; dispid 6;
		function TransactionToPerformAddItem(const value: ITransactionToPerformType): WordBool; dispid 7;
		function TransactionToPerformRemoveItem(index: Integer): WordBool; dispid 8;
	end;

	// *********************************************************************//
	// Interface :   ITransactionToPerformType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {419B3E14-4D9A-426F-9131-B2D28709CB26}
	// *********************************************************************//
	ITransactionToPerformType = interface(IDispatch)
		['{419B3E14-4D9A-426F-9131-B2D28709CB26}']
		function Get_Item: OleVariant; safecall;
		procedure _Set_Item(pRetVal: OleVariant); safecall;
		property Item: OleVariant read Get_Item write _Set_Item;
	end;

	// *********************************************************************//
	// DispIntf :    ITransactionToPerformTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {419B3E14-4D9A-426F-9131-B2D28709CB26}
	// *********************************************************************//
	ITransactionToPerformTypeDisp = dispinterface
		['{419B3E14-4D9A-426F-9131-B2D28709CB26}']
		property Item: OleVariant dispid 1;
	end;

	// *********************************************************************//
	// Interface :   ILoyaltyRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {79D43E6D-6AD3-45DA-8F52-E4B476474298}
	// *********************************************************************//
	ILoyaltyRequestType = interface(IDispatch)
		['{79D43E6D-6AD3-45DA-8F52-E4B476474298}']
		function Get_SaleData: ISaleDataType; safecall;
		procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
		function Get_LoyaltyTransaction: ILoyaltyTransactionType; safecall;
		procedure _Set_LoyaltyTransaction(const pRetVal: ILoyaltyTransactionType); safecall;
		function Get_LoyaltyData: PSafeArray; safecall;
		procedure Set_LoyaltyData(pRetVal: PSafeArray); safecall;
		function LoyaltyDataSize: Integer; safecall;
		function LoyaltyDataGetItem(index: Integer): ILoyaltyDataType; safecall;
		function LoyaltyDataSetItem(index: Integer; const value: ILoyaltyDataType): WordBool; safecall;
		function LoyaltyDataAddItem(const value: ILoyaltyDataType): WordBool; safecall;
		function LoyaltyDataRemoveItem(index: Integer): WordBool; safecall;
		property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
		property LoyaltyTransaction: ILoyaltyTransactionType read Get_LoyaltyTransaction write _Set_LoyaltyTransaction;
		property LoyaltyData: PSafeArray read Get_LoyaltyData write Set_LoyaltyData;
	end;

	// *********************************************************************//
	// DispIntf :    ILoyaltyRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {79D43E6D-6AD3-45DA-8F52-E4B476474298}
	// *********************************************************************//
	ILoyaltyRequestTypeDisp = dispinterface
		['{79D43E6D-6AD3-45DA-8F52-E4B476474298}']
		property SaleData: ISaleDataType dispid 1;
		property LoyaltyTransaction: ILoyaltyTransactionType dispid 2;
		property LoyaltyData: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		function LoyaltyDataSize: Integer; dispid 4;
		function LoyaltyDataGetItem(index: Integer): ILoyaltyDataType; dispid 5;
		function LoyaltyDataSetItem(index: Integer; const value: ILoyaltyDataType): WordBool; dispid 6;
		function LoyaltyDataAddItem(const value: ILoyaltyDataType): WordBool; dispid 7;
		function LoyaltyDataRemoveItem(index: Integer): WordBool; dispid 8;
	end;

	// *********************************************************************//
	// Interface :   ISaleDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {84951631-1768-4B6B-9049-8233122E1C62}
	// *********************************************************************//
	ISaleDataType = interface(IDispatch)
		['{84951631-1768-4B6B-9049-8233122E1C62}']
		function Get_SaleTransactionID: ITransactionIdentificationType; safecall;
		procedure _Set_SaleTransactionID(const pRetVal: ITransactionIdentificationType); safecall;
		function Get_SaleTerminalData: ISaleTerminalDataType; safecall;
		procedure _Set_SaleTerminalData(const pRetVal: ISaleTerminalDataType); safecall;
		function Get_SponsoredMerchant: PSafeArray; safecall;
		procedure Set_SponsoredMerchant(pRetVal: PSafeArray); safecall;
		function Get_SaleToPOIData: WideString; safecall;
		procedure Set_SaleToPOIData(const pRetVal: WideString); safecall;
		function Get_SaleToAcquirerData: WideString; safecall;
		procedure Set_SaleToAcquirerData(const pRetVal: WideString); safecall;
		function Get_SaleToIssuerData: ISaleToIssuerDataType; safecall;
		procedure _Set_SaleToIssuerData(const pRetVal: ISaleToIssuerDataType); safecall;
		function Get_OperatorID: WideString; safecall;
		procedure Set_OperatorID(const pRetVal: WideString); safecall;
		function Get_OperatorLanguage: WideString; safecall;
		procedure Set_OperatorLanguage(const pRetVal: WideString); safecall;
		function Get_ShiftNumber: WideString; safecall;
		procedure Set_ShiftNumber(const pRetVal: WideString); safecall;
		function Get_SaleReferenceID: WideString; safecall;
		procedure Set_SaleReferenceID(const pRetVal: WideString); safecall;
		function Get_TokenRequestedType: WideString; safecall;
		procedure Set_TokenRequestedType(const pRetVal: WideString); safecall;
		function Get_CustomerOrderID: WideString; safecall;
		procedure Set_CustomerOrderID(const pRetVal: WideString); safecall;
		function Get_CustomerOrderReq: PSafeArray; safecall;
		procedure Set_CustomerOrderReq(pRetVal: PSafeArray); safecall;
		function SponsoredMerchantSize: Integer; safecall;
		function SponsoredMerchantGetItem(index: Integer): ISponsoredMerchantType; safecall;
		function SponsoredMerchantSetItem(index: Integer; const value: ISponsoredMerchantType): WordBool; safecall;
		function SponsoredMerchantAddItem(const value: ISponsoredMerchantType): WordBool; safecall;
		function SponsoredMerchantRemoveItem(index: Integer): WordBool; safecall;
		function CustomerOrderReqSize: Integer; safecall;
		function CustomerOrderReqGetItem(index: Integer): WideString; safecall;
		function CustomerOrderReqSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function CustomerOrderReqAddItem(const value: WideString): WordBool; safecall;
		function CustomerOrderReqRemoveItem(index: Integer): WordBool; safecall;
		property SaleTransactionID: ITransactionIdentificationType read Get_SaleTransactionID write _Set_SaleTransactionID;
		property SaleTerminalData: ISaleTerminalDataType read Get_SaleTerminalData write _Set_SaleTerminalData;
		property SponsoredMerchant: PSafeArray read Get_SponsoredMerchant write Set_SponsoredMerchant;
		property SaleToPOIData: WideString read Get_SaleToPOIData write Set_SaleToPOIData;
		property SaleToAcquirerData: WideString read Get_SaleToAcquirerData write Set_SaleToAcquirerData;
		property SaleToIssuerData: ISaleToIssuerDataType read Get_SaleToIssuerData write _Set_SaleToIssuerData;
		property OperatorID: WideString read Get_OperatorID write Set_OperatorID;
		property OperatorLanguage: WideString read Get_OperatorLanguage write Set_OperatorLanguage;
		property ShiftNumber: WideString read Get_ShiftNumber write Set_ShiftNumber;
		property SaleReferenceID: WideString read Get_SaleReferenceID write Set_SaleReferenceID;
		property TokenRequestedType: WideString read Get_TokenRequestedType write Set_TokenRequestedType;
		property CustomerOrderID: WideString read Get_CustomerOrderID write Set_CustomerOrderID;
		property CustomerOrderReq: PSafeArray read Get_CustomerOrderReq write Set_CustomerOrderReq;
	end;

	// *********************************************************************//
	// DispIntf :    ISaleDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {84951631-1768-4B6B-9049-8233122E1C62}
	// *********************************************************************//
	ISaleDataTypeDisp = dispinterface
		['{84951631-1768-4B6B-9049-8233122E1C62}']
		property SaleTransactionID: ITransactionIdentificationType dispid 1;
		property SaleTerminalData: ISaleTerminalDataType dispid 2;
		property SponsoredMerchant: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		property SaleToPOIData: WideString dispid 4;
		property SaleToAcquirerData: WideString dispid 5;
		property SaleToIssuerData: ISaleToIssuerDataType dispid 6;
		property OperatorID: WideString dispid 7;
		property OperatorLanguage: WideString dispid 8;
		property ShiftNumber: WideString dispid 9;
		property SaleReferenceID: WideString dispid 10;
		property TokenRequestedType: WideString dispid 11;
		property CustomerOrderID: WideString dispid 12;
		property CustomerOrderReq: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 13;
		function SponsoredMerchantSize: Integer; dispid 14;
		function SponsoredMerchantGetItem(index: Integer): ISponsoredMerchantType; dispid 15;
		function SponsoredMerchantSetItem(index: Integer; const value: ISponsoredMerchantType): WordBool; dispid 16;
		function SponsoredMerchantAddItem(const value: ISponsoredMerchantType): WordBool; dispid 17;
		function SponsoredMerchantRemoveItem(index: Integer): WordBool; dispid 18;
		function CustomerOrderReqSize: Integer; dispid 19;
		function CustomerOrderReqGetItem(index: Integer): WideString; dispid 20;
		function CustomerOrderReqSetItem(index: Integer; const value: WideString): WordBool; dispid 21;
		function CustomerOrderReqAddItem(const value: WideString): WordBool; dispid 22;
		function CustomerOrderReqRemoveItem(index: Integer): WordBool; dispid 23;
	end;

	// *********************************************************************//
	// Interface :   ISaleTerminalDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {397CF063-5E6A-46FA-95AA-C4E7248E5536}
	// *********************************************************************//
	ISaleTerminalDataType = interface(IDispatch)
		['{397CF063-5E6A-46FA-95AA-C4E7248E5536}']
		function Get_SaleCapabilities: WideString; safecall;
		procedure Set_SaleCapabilities(const pRetVal: WideString); safecall;
		function Get_SaleProfile: ISaleProfileType; safecall;
		procedure _Set_SaleProfile(const pRetVal: ISaleProfileType); safecall;
		function Get_TerminalEnvironment: WideString; safecall;
		procedure Set_TerminalEnvironment(const pRetVal: WideString); safecall;
		function Get_TotalsGroupID: WideString; safecall;
		procedure Set_TotalsGroupID(const pRetVal: WideString); safecall;
		property SaleCapabilities: WideString read Get_SaleCapabilities write Set_SaleCapabilities;
		property SaleProfile: ISaleProfileType read Get_SaleProfile write _Set_SaleProfile;
		property TerminalEnvironment: WideString read Get_TerminalEnvironment write Set_TerminalEnvironment;
		property TotalsGroupID: WideString read Get_TotalsGroupID write Set_TotalsGroupID;
	end;

	// *********************************************************************//
	// DispIntf :    ISaleTerminalDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {397CF063-5E6A-46FA-95AA-C4E7248E5536}
	// *********************************************************************//
	ISaleTerminalDataTypeDisp = dispinterface
		['{397CF063-5E6A-46FA-95AA-C4E7248E5536}']
		property SaleCapabilities: WideString dispid 1;
		property SaleProfile: ISaleProfileType dispid 2;
		property TerminalEnvironment: WideString dispid 3;
		property TotalsGroupID: WideString dispid 4;
	end;

	// *********************************************************************//
	// Interface :   ISaleProfileType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {FBFED959-1890-4FE4-9D47-1A1107E190FC}
	// *********************************************************************//
	ISaleProfileType = interface(IDispatch)
		['{FBFED959-1890-4FE4-9D47-1A1107E190FC}']
		function Get_ServiceProfiles: WideString; safecall;
		procedure Set_ServiceProfiles(const pRetVal: WideString); safecall;
		function Get_GenericProfile: WideString; safecall;
		procedure Set_GenericProfile(const pRetVal: WideString); safecall;
		property ServiceProfiles: WideString read Get_ServiceProfiles write Set_ServiceProfiles;
		property GenericProfile: WideString read Get_GenericProfile write Set_GenericProfile;
	end;

	// *********************************************************************//
	// DispIntf :    ISaleProfileTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {FBFED959-1890-4FE4-9D47-1A1107E190FC}
	// *********************************************************************//
	ISaleProfileTypeDisp = dispinterface
		['{FBFED959-1890-4FE4-9D47-1A1107E190FC}']
		property ServiceProfiles: WideString dispid 2;
		property GenericProfile: WideString dispid 3;
	end;

	// *********************************************************************//
	// Interface :   ISponsoredMerchantType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {1A748205-06FA-446D-AA6B-88BFE891D490}
	// *********************************************************************//
	ISponsoredMerchantType = interface(IDispatch)
		['{1A748205-06FA-446D-AA6B-88BFE891D490}']
		function Get_MerchantName: WideString; safecall;
		procedure Set_MerchantName(const pRetVal: WideString); safecall;
		function Get_MerchantAddress: WideString; safecall;
		procedure Set_MerchantAddress(const pRetVal: WideString); safecall;
		function Get_MerchantCountry: WideString; safecall;
		procedure Set_MerchantCountry(const pRetVal: WideString); safecall;
		function Get_MerchantCategoryCode: WideString; safecall;
		procedure Set_MerchantCategoryCode(const pRetVal: WideString); safecall;
		function Get_RegistrationID: WideString; safecall;
		procedure Set_RegistrationID(const pRetVal: WideString); safecall;
		property MerchantName: WideString read Get_MerchantName write Set_MerchantName;
		property MerchantAddress: WideString read Get_MerchantAddress write Set_MerchantAddress;
		property MerchantCountry: WideString read Get_MerchantCountry write Set_MerchantCountry;
		property MerchantCategoryCode: WideString read Get_MerchantCategoryCode write Set_MerchantCategoryCode;
		property RegistrationID: WideString read Get_RegistrationID write Set_RegistrationID;
	end;

	// *********************************************************************//
	// DispIntf :    ISponsoredMerchantTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {1A748205-06FA-446D-AA6B-88BFE891D490}
	// *********************************************************************//
	ISponsoredMerchantTypeDisp = dispinterface
		['{1A748205-06FA-446D-AA6B-88BFE891D490}']
		property MerchantName: WideString dispid 1;
		property MerchantAddress: WideString dispid 2;
		property MerchantCountry: WideString dispid 3;
		property MerchantCategoryCode: WideString dispid 4;
		property RegistrationID: WideString dispid 5;
	end;

	// *********************************************************************//
	// Interface :   ISaleToIssuerDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {8446AA48-7E9F-40FB-AA26-46B22EA6DD65}
	// *********************************************************************//
	ISaleToIssuerDataType = interface(IDispatch)
		['{8446AA48-7E9F-40FB-AA26-46B22EA6DD65}']
		function Get_StatementReference: WideString; safecall;
		procedure Set_StatementReference(const pRetVal: WideString); safecall;
		property StatementReference: WideString read Get_StatementReference write Set_StatementReference;
	end;

	// *********************************************************************//
	// DispIntf :    ISaleToIssuerDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {8446AA48-7E9F-40FB-AA26-46B22EA6DD65}
	// *********************************************************************//
	ISaleToIssuerDataTypeDisp = dispinterface
		['{8446AA48-7E9F-40FB-AA26-46B22EA6DD65}']
		property StatementReference: WideString dispid 1;
	end;

	// *********************************************************************//
	// Interface :   ILoyaltyTransactionType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {EE278FF3-7809-46D4-9F1A-C9BE0CECD558}
	// *********************************************************************//
	ILoyaltyTransactionType = interface(IDispatch)
		['{EE278FF3-7809-46D4-9F1A-C9BE0CECD558}']
		function Get_OriginalPOITransaction: IOriginalPOITransactionType; safecall;
		procedure _Set_OriginalPOITransaction(const pRetVal: IOriginalPOITransactionType); safecall;
		function Get_TransactionConditions: ITransactionConditionsType; safecall;
		procedure _Set_TransactionConditions(const pRetVal: ITransactionConditionsType); safecall;
		function Get_SaleItem: PSafeArray; safecall;
		procedure Set_SaleItem(pRetVal: PSafeArray); safecall;
		function Get_LoyaltyTransactionType1: WideString; safecall;
		procedure Set_LoyaltyTransactionType1(const pRetVal: WideString); safecall;
		function Get_Currency: WideString; safecall;
		procedure Set_Currency(const pRetVal: WideString); safecall;
		function Get_TotalAmount: Double; safecall;
		procedure Set_TotalAmount(pRetVal: Double); safecall;
		function Get_TotalAmountSpecified: WordBool; safecall;
		procedure Set_TotalAmountSpecified(pRetVal: WordBool); safecall;
		function SaleItemSize: Integer; safecall;
		function SaleItemGetItem(index: Integer): ISaleItemType; safecall;
		function SaleItemSetItem(index: Integer; const value: ISaleItemType): WordBool; safecall;
		function SaleItemAddItem(const value: ISaleItemType): WordBool; safecall;
		function SaleItemRemoveItem(index: Integer): WordBool; safecall;
		property OriginalPOITransaction: IOriginalPOITransactionType read Get_OriginalPOITransaction write _Set_OriginalPOITransaction;
		property TransactionConditions: ITransactionConditionsType read Get_TransactionConditions write _Set_TransactionConditions;
		property SaleItem: PSafeArray read Get_SaleItem write Set_SaleItem;
		property LoyaltyTransactionType1: WideString read Get_LoyaltyTransactionType1 write Set_LoyaltyTransactionType1;
		property Currency: WideString read Get_Currency write Set_Currency;
		property TotalAmount: Double read Get_TotalAmount write Set_TotalAmount;
		property TotalAmountSpecified: WordBool read Get_TotalAmountSpecified write Set_TotalAmountSpecified;
	end;

	// *********************************************************************//
	// DispIntf :    ILoyaltyTransactionTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {EE278FF3-7809-46D4-9F1A-C9BE0CECD558}
	// *********************************************************************//
	ILoyaltyTransactionTypeDisp = dispinterface
		['{EE278FF3-7809-46D4-9F1A-C9BE0CECD558}']
		property OriginalPOITransaction: IOriginalPOITransactionType dispid 1;
		property TransactionConditions: ITransactionConditionsType dispid 2;
		property SaleItem: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		property LoyaltyTransactionType1: WideString dispid 4;
		property Currency: WideString dispid 5;
		property TotalAmount: Double dispid 6;
		property TotalAmountSpecified: WordBool dispid 7;
		function SaleItemSize: Integer; dispid 8;
		function SaleItemGetItem(index: Integer): ISaleItemType; dispid 9;
		function SaleItemSetItem(index: Integer; const value: ISaleItemType): WordBool; dispid 10;
		function SaleItemAddItem(const value: ISaleItemType): WordBool; dispid 11;
		function SaleItemRemoveItem(index: Integer): WordBool; dispid 12;
	end;

	// *********************************************************************//
	// Interface :   IOriginalPOITransactionType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {8A0294ED-FA0B-4DE3-B044-FBD3D26A7C88}
	// *********************************************************************//
	IOriginalPOITransactionType = interface(IDispatch)
		['{8A0294ED-FA0B-4DE3-B044-FBD3D26A7C88}']
		function Get_POITransactionID: ITransactionIdentificationType; safecall;
		procedure _Set_POITransactionID(const pRetVal: ITransactionIdentificationType); safecall;
		function Get_ApprovalCode: WideString; safecall;
		procedure Set_ApprovalCode(const pRetVal: WideString); safecall;
		function Get_HostTransactionID: ITransactionIdentificationType; safecall;
		procedure _Set_HostTransactionID(const pRetVal: ITransactionIdentificationType); safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ReuseCardDataFlag: WordBool; safecall;
		procedure Set_ReuseCardDataFlag(pRetVal: WordBool); safecall;
		function Get_CustomerLanguage: WideString; safecall;
		procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
		function Get_AcquirerID: WideString; safecall;
		procedure Set_AcquirerID(const pRetVal: WideString); safecall;
		property POITransactionID: ITransactionIdentificationType read Get_POITransactionID write _Set_POITransactionID;
		property ApprovalCode: WideString read Get_ApprovalCode write Set_ApprovalCode;
		property HostTransactionID: ITransactionIdentificationType read Get_HostTransactionID write _Set_HostTransactionID;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ReuseCardDataFlag: WordBool read Get_ReuseCardDataFlag write Set_ReuseCardDataFlag;
		property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
		property AcquirerID: WideString read Get_AcquirerID write Set_AcquirerID;
	end;

	// *********************************************************************//
	// DispIntf :    IOriginalPOITransactionTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {8A0294ED-FA0B-4DE3-B044-FBD3D26A7C88}
	// *********************************************************************//
	IOriginalPOITransactionTypeDisp = dispinterface
		['{8A0294ED-FA0B-4DE3-B044-FBD3D26A7C88}']
		property POITransactionID: ITransactionIdentificationType dispid 2;
		property ApprovalCode: WideString dispid 3;
		property HostTransactionID: ITransactionIdentificationType dispid 4;
		property SaleID: WideString dispid 5;
		property POIID: WideString dispid 6;
		property ReuseCardDataFlag: WordBool dispid 7;
		property CustomerLanguage: WideString dispid 8;
		property AcquirerID: WideString dispid 9;
	end;

	// *********************************************************************//
	// Interface :   ITransactionConditionsType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {9B83A85E-54D8-47E9-9771-AA333A1E1312}
	// *********************************************************************//
	ITransactionConditionsType = interface(IDispatch)
		['{9B83A85E-54D8-47E9-9771-AA333A1E1312}']
		function Get_AllowedPaymentBrand: PSafeArray; safecall;
		procedure Set_AllowedPaymentBrand(pRetVal: PSafeArray); safecall;
		function Get_AcquirerID: PSafeArray; safecall;
		procedure Set_AcquirerID(pRetVal: PSafeArray); safecall;
		function Get_AllowedLoyaltyBrand: PSafeArray; safecall;
		procedure Set_AllowedLoyaltyBrand(pRetVal: PSafeArray); safecall;
		function Get_ForceEntryMode: PSafeArray; safecall;
		procedure Set_ForceEntryMode(pRetVal: PSafeArray); safecall;
		function Get_DebitPreferredFlag: WordBool; safecall;
		procedure Set_DebitPreferredFlag(pRetVal: WordBool); safecall;
		function Get_LoyaltyHandling: WideString; safecall;
		procedure Set_LoyaltyHandling(const pRetVal: WideString); safecall;
		function Get_CustomerLanguage: WideString; safecall;
		procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
		function Get_ForceOnlineFlag: WordBool; safecall;
		procedure Set_ForceOnlineFlag(pRetVal: WordBool); safecall;
		function Get_MerchantCategoryCode: WideString; safecall;
		procedure Set_MerchantCategoryCode(const pRetVal: WideString); safecall;
		function AllowedPaymentBrandSize: Integer; safecall;
		function AllowedPaymentBrandGetItem(index: Integer): WideString; safecall;
		function AllowedPaymentBrandSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function AllowedPaymentBrandAddItem(const value: WideString): WordBool; safecall;
		function AllowedPaymentBrandRemoveItem(index: Integer): WordBool; safecall;
		function AcquirerIDSize: Integer; safecall;
		function AcquirerIDGetItem(index: Integer): WideString; safecall;
		function AcquirerIDSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function AcquirerIDAddItem(const value: WideString): WordBool; safecall;
		function AcquirerIDRemoveItem(index: Integer): WordBool; safecall;
		function AllowedLoyaltyBrandSize: Integer; safecall;
		function AllowedLoyaltyBrandGetItem(index: Integer): WideString; safecall;
		function AllowedLoyaltyBrandSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function AllowedLoyaltyBrandAddItem(const value: WideString): WordBool; safecall;
		function AllowedLoyaltyBrandRemoveItem(index: Integer): WordBool; safecall;
		function ForceEntryModeSize: Integer; safecall;
		function ForceEntryModeGetItem(index: Integer): WideString; safecall;
		function ForceEntryModeSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function ForceEntryModeAddItem(const value: WideString): WordBool; safecall;
		function ForceEntryModeRemoveItem(index: Integer): WordBool; safecall;
		property AllowedPaymentBrand: PSafeArray read Get_AllowedPaymentBrand write Set_AllowedPaymentBrand;
		property AcquirerID: PSafeArray read Get_AcquirerID write Set_AcquirerID;
		property AllowedLoyaltyBrand: PSafeArray read Get_AllowedLoyaltyBrand write Set_AllowedLoyaltyBrand;
		property ForceEntryMode: PSafeArray read Get_ForceEntryMode write Set_ForceEntryMode;
		property DebitPreferredFlag: WordBool read Get_DebitPreferredFlag write Set_DebitPreferredFlag;
		property LoyaltyHandling: WideString read Get_LoyaltyHandling write Set_LoyaltyHandling;
		property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
		property ForceOnlineFlag: WordBool read Get_ForceOnlineFlag write Set_ForceOnlineFlag;
		property MerchantCategoryCode: WideString read Get_MerchantCategoryCode write Set_MerchantCategoryCode;
	end;

	// *********************************************************************//
	// DispIntf :    ITransactionConditionsTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {9B83A85E-54D8-47E9-9771-AA333A1E1312}
	// *********************************************************************//
	ITransactionConditionsTypeDisp = dispinterface
		['{9B83A85E-54D8-47E9-9771-AA333A1E1312}']
		property AllowedPaymentBrand: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property AcquirerID: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		property AllowedLoyaltyBrand: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		property ForceEntryMode: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 5;
		property DebitPreferredFlag: WordBool dispid 6;
		property LoyaltyHandling: WideString dispid 7;
		property CustomerLanguage: WideString dispid 8;
		property ForceOnlineFlag: WordBool dispid 9;
		property MerchantCategoryCode: WideString dispid 10;
		function AllowedPaymentBrandSize: Integer; dispid 11;
		function AllowedPaymentBrandGetItem(index: Integer): WideString; dispid 12;
		function AllowedPaymentBrandSetItem(index: Integer; const value: WideString): WordBool; dispid 13;
		function AllowedPaymentBrandAddItem(const value: WideString): WordBool; dispid 14;
		function AllowedPaymentBrandRemoveItem(index: Integer): WordBool; dispid 15;
		function AcquirerIDSize: Integer; dispid 16;
		function AcquirerIDGetItem(index: Integer): WideString; dispid 17;
		function AcquirerIDSetItem(index: Integer; const value: WideString): WordBool; dispid 18;
		function AcquirerIDAddItem(const value: WideString): WordBool; dispid 19;
		function AcquirerIDRemoveItem(index: Integer): WordBool; dispid 20;
		function AllowedLoyaltyBrandSize: Integer; dispid 21;
		function AllowedLoyaltyBrandGetItem(index: Integer): WideString; dispid 22;
		function AllowedLoyaltyBrandSetItem(index: Integer; const value: WideString): WordBool; dispid 23;
		function AllowedLoyaltyBrandAddItem(const value: WideString): WordBool; dispid 24;
		function AllowedLoyaltyBrandRemoveItem(index: Integer): WordBool; dispid 25;
		function ForceEntryModeSize: Integer; dispid 26;
		function ForceEntryModeGetItem(index: Integer): WideString; dispid 27;
		function ForceEntryModeSetItem(index: Integer; const value: WideString): WordBool; dispid 28;
		function ForceEntryModeAddItem(const value: WideString): WordBool; dispid 29;
		function ForceEntryModeRemoveItem(index: Integer): WordBool; dispid 30;
	end;

	// *********************************************************************//
	// Interface :   ISaleItemType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4C7F39E8-EF01-4597-8B83-DA6C3CB6870E}
	// *********************************************************************//
	ISaleItemType = interface(IDispatch)
		['{4C7F39E8-EF01-4597-8B83-DA6C3CB6870E}']
		function Get_UnitOfMeasure: WideString; safecall;
		procedure Set_UnitOfMeasure(const pRetVal: WideString); safecall;
		function Get_Quantity: Double; safecall;
		procedure Set_Quantity(pRetVal: Double); safecall;
		function Get_QuantitySpecified: WordBool; safecall;
		procedure Set_QuantitySpecified(pRetVal: WordBool); safecall;
		function Get_UnitPrice: Double; safecall;
		procedure Set_UnitPrice(pRetVal: Double); safecall;
		function Get_UnitPriceSpecified: WordBool; safecall;
		procedure Set_UnitPriceSpecified(pRetVal: WordBool); safecall;
		function Get_TaxCode: WideString; safecall;
		procedure Set_TaxCode(const pRetVal: WideString); safecall;
		function Get_SaleChannel: WideString; safecall;
		procedure Set_SaleChannel(const pRetVal: WideString); safecall;
		function Get_ProductLabel: WideString; safecall;
		procedure Set_ProductLabel(const pRetVal: WideString); safecall;
		function Get_AdditionalProductInfo: WideString; safecall;
		procedure Set_AdditionalProductInfo(const pRetVal: WideString); safecall;
		function Get_ItemID: WideString; safecall;
		procedure Set_ItemID(const pRetVal: WideString); safecall;
		function Get_ProductCode: WideString; safecall;
		procedure Set_ProductCode(const pRetVal: WideString); safecall;
		function Get_EanUpc: WideString; safecall;
		procedure Set_EanUpc(const pRetVal: WideString); safecall;
		function Get_ItemAmount: Double; safecall;
		procedure Set_ItemAmount(pRetVal: Double); safecall;
		property UnitOfMeasure: WideString read Get_UnitOfMeasure write Set_UnitOfMeasure;
		property Quantity: Double read Get_Quantity write Set_Quantity;
		property QuantitySpecified: WordBool read Get_QuantitySpecified write Set_QuantitySpecified;
		property UnitPrice: Double read Get_UnitPrice write Set_UnitPrice;
		property UnitPriceSpecified: WordBool read Get_UnitPriceSpecified write Set_UnitPriceSpecified;
		property TaxCode: WideString read Get_TaxCode write Set_TaxCode;
		property SaleChannel: WideString read Get_SaleChannel write Set_SaleChannel;
		property ProductLabel: WideString read Get_ProductLabel write Set_ProductLabel;
		property AdditionalProductInfo: WideString read Get_AdditionalProductInfo write Set_AdditionalProductInfo;
		property ItemID: WideString read Get_ItemID write Set_ItemID;
		property ProductCode: WideString read Get_ProductCode write Set_ProductCode;
		property EanUpc: WideString read Get_EanUpc write Set_EanUpc;
		property ItemAmount: Double read Get_ItemAmount write Set_ItemAmount;
	end;

	// *********************************************************************//
	// DispIntf :    ISaleItemTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4C7F39E8-EF01-4597-8B83-DA6C3CB6870E}
	// *********************************************************************//
	ISaleItemTypeDisp = dispinterface
		['{4C7F39E8-EF01-4597-8B83-DA6C3CB6870E}']
		property UnitOfMeasure: WideString dispid 1;
		property Quantity: Double dispid 2;
		property QuantitySpecified: WordBool dispid 3;
		property UnitPrice: Double dispid 4;
		property UnitPriceSpecified: WordBool dispid 5;
		property TaxCode: WideString dispid 6;
		property SaleChannel: WideString dispid 7;
		property ProductLabel: WideString dispid 8;
		property AdditionalProductInfo: WideString dispid 9;
		property ItemID: WideString dispid 10;
		property ProductCode: WideString dispid 11;
		property EanUpc: WideString dispid 12;
		property ItemAmount: Double dispid 13;
	end;

	// *********************************************************************//
	// Interface :   ILoyaltyDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D3413EE3-1C89-44FA-BD4D-C8EB8DA58F93}
	// *********************************************************************//
	ILoyaltyDataType = interface(IDispatch)
		['{D3413EE3-1C89-44FA-BD4D-C8EB8DA58F93}']
		function Get_CardAcquisitionReference: ITransactionIdentificationType; safecall;
		procedure _Set_CardAcquisitionReference(const pRetVal: ITransactionIdentificationType); safecall;
		function Get_LoyaltyAccountID: ILoyaltyAccountIDType; safecall;
		procedure _Set_LoyaltyAccountID(const pRetVal: ILoyaltyAccountIDType); safecall;
		function Get_LoyaltyAmount: ILoyaltyAmountType; safecall;
		procedure _Set_LoyaltyAmount(const pRetVal: ILoyaltyAmountType); safecall;
		property CardAcquisitionReference: ITransactionIdentificationType read Get_CardAcquisitionReference write _Set_CardAcquisitionReference;
		property LoyaltyAccountID: ILoyaltyAccountIDType read Get_LoyaltyAccountID write _Set_LoyaltyAccountID;
		property LoyaltyAmount: ILoyaltyAmountType read Get_LoyaltyAmount write _Set_LoyaltyAmount;
	end;

	// *********************************************************************//
	// DispIntf :    ILoyaltyDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D3413EE3-1C89-44FA-BD4D-C8EB8DA58F93}
	// *********************************************************************//
	ILoyaltyDataTypeDisp = dispinterface
		['{D3413EE3-1C89-44FA-BD4D-C8EB8DA58F93}']
		property CardAcquisitionReference: ITransactionIdentificationType dispid 1;
		property LoyaltyAccountID: ILoyaltyAccountIDType dispid 2;
		property LoyaltyAmount: ILoyaltyAmountType dispid 3;
	end;

	// *********************************************************************//
	// Interface :   ILoyaltyAmountType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {FA3813B4-8BE1-42AB-9EE5-08139C3780B1}
	// *********************************************************************//
	ILoyaltyAmountType = interface(IDispatch)
		['{FA3813B4-8BE1-42AB-9EE5-08139C3780B1}']
		function Get_LoyaltyUnit: WideString; safecall;
		procedure Set_LoyaltyUnit(const pRetVal: WideString); safecall;
		function Get_Currency: WideString; safecall;
		procedure Set_Currency(const pRetVal: WideString); safecall;
		function Get_value: Double; safecall;
		procedure Set_value(pRetVal: Double); safecall;
		property LoyaltyUnit: WideString read Get_LoyaltyUnit write Set_LoyaltyUnit;
		property Currency: WideString read Get_Currency write Set_Currency;
		property value: Double read Get_value write Set_value;
	end;

	// *********************************************************************//
	// DispIntf :    ILoyaltyAmountTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {FA3813B4-8BE1-42AB-9EE5-08139C3780B1}
	// *********************************************************************//
	ILoyaltyAmountTypeDisp = dispinterface
		['{FA3813B4-8BE1-42AB-9EE5-08139C3780B1}']
		property LoyaltyUnit: WideString dispid 2;
		property Currency: WideString dispid 3;
		property value: Double dispid 4;
	end;

	// *********************************************************************//
	// Interface :   IPaymentRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {89A3C4A9-DE34-40A3-A931-C33A01830C2E}
	// *********************************************************************//
	IPaymentRequestType = interface(IDispatch)
		['{89A3C4A9-DE34-40A3-A931-C33A01830C2E}']
		function Get_SaleData: ISaleDataType; safecall;
		procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
		function Get_PaymentTransaction: IPaymentTransactionType; safecall;
		procedure _Set_PaymentTransaction(const pRetVal: IPaymentTransactionType); safecall;
		function Get_PaymentData: IPaymentDataType; safecall;
		procedure _Set_PaymentData(const pRetVal: IPaymentDataType); safecall;
		function Get_LoyaltyData: PSafeArray; safecall;
		procedure Set_LoyaltyData(pRetVal: PSafeArray); safecall;
		function LoyaltyDataSize: Integer; safecall;
		function LoyaltyDataGetItem(index: Integer): ILoyaltyDataType; safecall;
		function LoyaltyDataSetItem(index: Integer; const value: ILoyaltyDataType): WordBool; safecall;
		function LoyaltyDataAddItem(const value: ILoyaltyDataType): WordBool; safecall;
		function LoyaltyDataRemoveItem(index: Integer): WordBool; safecall;
		property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
		property PaymentTransaction: IPaymentTransactionType read Get_PaymentTransaction write _Set_PaymentTransaction;
		property PaymentData: IPaymentDataType read Get_PaymentData write _Set_PaymentData;
		property LoyaltyData: PSafeArray read Get_LoyaltyData write Set_LoyaltyData;
	end;

	// *********************************************************************//
	// DispIntf :    IPaymentRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {89A3C4A9-DE34-40A3-A931-C33A01830C2E}
	// *********************************************************************//
	IPaymentRequestTypeDisp = dispinterface
		['{89A3C4A9-DE34-40A3-A931-C33A01830C2E}']
		property SaleData: ISaleDataType dispid 1;
		property PaymentTransaction: IPaymentTransactionType dispid 2;
		property PaymentData: IPaymentDataType dispid 3;
		property LoyaltyData: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		function LoyaltyDataSize: Integer; dispid 5;
		function LoyaltyDataGetItem(index: Integer): ILoyaltyDataType; dispid 6;
		function LoyaltyDataSetItem(index: Integer; const value: ILoyaltyDataType): WordBool; dispid 7;
		function LoyaltyDataAddItem(const value: ILoyaltyDataType): WordBool; dispid 8;
		function LoyaltyDataRemoveItem(index: Integer): WordBool; dispid 9;
	end;

	// *********************************************************************//
	// Interface :   IPaymentTransactionType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B8F24B25-7773-4594-90FA-265717648C7D}
	// *********************************************************************//
	IPaymentTransactionType = interface(IDispatch)
		['{B8F24B25-7773-4594-90FA-265717648C7D}']
		function Get_AmountsReq: IAmountsReqType; safecall;
		procedure _Set_AmountsReq(const pRetVal: IAmountsReqType); safecall;
		function Get_OriginalPOITransaction: IOriginalPOITransactionType; safecall;
		procedure _Set_OriginalPOITransaction(const pRetVal: IOriginalPOITransactionType); safecall;
		function Get_TransactionConditions: ITransactionConditionsType; safecall;
		procedure _Set_TransactionConditions(const pRetVal: ITransactionConditionsType); safecall;
		function Get_SaleItem: PSafeArray; safecall;
		procedure Set_SaleItem(pRetVal: PSafeArray); safecall;
		function SaleItemSize: Integer; safecall;
		function SaleItemGetItem(index: Integer): ISaleItemType; safecall;
		function SaleItemSetItem(index: Integer; const value: ISaleItemType): WordBool; safecall;
		function SaleItemAddItem(const value: ISaleItemType): WordBool; safecall;
		function SaleItemRemoveItem(index: Integer): WordBool; safecall;
		property AmountsReq: IAmountsReqType read Get_AmountsReq write _Set_AmountsReq;
		property OriginalPOITransaction: IOriginalPOITransactionType read Get_OriginalPOITransaction write _Set_OriginalPOITransaction;
		property TransactionConditions: ITransactionConditionsType read Get_TransactionConditions write _Set_TransactionConditions;
		property SaleItem: PSafeArray read Get_SaleItem write Set_SaleItem;
	end;

	// *********************************************************************//
	// DispIntf :    IPaymentTransactionTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B8F24B25-7773-4594-90FA-265717648C7D}
	// *********************************************************************//
	IPaymentTransactionTypeDisp = dispinterface
		['{B8F24B25-7773-4594-90FA-265717648C7D}']
		property AmountsReq: IAmountsReqType dispid 1;
		property OriginalPOITransaction: IOriginalPOITransactionType dispid 2;
		property TransactionConditions: ITransactionConditionsType dispid 3;
		property SaleItem: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		function SaleItemSize: Integer; dispid 5;
		function SaleItemGetItem(index: Integer): ISaleItemType; dispid 6;
		function SaleItemSetItem(index: Integer; const value: ISaleItemType): WordBool; dispid 7;
		function SaleItemAddItem(const value: ISaleItemType): WordBool; dispid 8;
		function SaleItemRemoveItem(index: Integer): WordBool; dispid 9;
	end;

	// *********************************************************************//
	// Interface :   IPaymentDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4AD2DDE4-9CDE-4F0C-B296-0B741777836E}
	// *********************************************************************//
	IPaymentDataType = interface(IDispatch)
		['{4AD2DDE4-9CDE-4F0C-B296-0B741777836E}']
		function Get_CardAcquisitionReference: ITransactionIdentificationType; safecall;
		procedure _Set_CardAcquisitionReference(const pRetVal: ITransactionIdentificationType); safecall;
		function Get_RequestedValidityDate: WideString; safecall;
		procedure Set_RequestedValidityDate(const pRetVal: WideString); safecall;
		function Get_Instalment: IInstalmentType; safecall;
		procedure _Set_Instalment(const pRetVal: IInstalmentType); safecall;
		function Get_CustomerOrder: ICustomerOrderType; safecall;
		procedure _Set_CustomerOrder(const pRetVal: ICustomerOrderType); safecall;
		function Get_PaymentInstrumentData: IPaymentInstrumentDataType; safecall;
		procedure _Set_PaymentInstrumentData(const pRetVal: IPaymentInstrumentDataType); safecall;
		function Get_PaymentType: WideString; safecall;
		procedure Set_PaymentType(const pRetVal: WideString); safecall;
		function Get_SplitPaymentFlag: WordBool; safecall;
		procedure Set_SplitPaymentFlag(pRetVal: WordBool); safecall;
		property CardAcquisitionReference: ITransactionIdentificationType read Get_CardAcquisitionReference write _Set_CardAcquisitionReference;
		property RequestedValidityDate: WideString read Get_RequestedValidityDate write Set_RequestedValidityDate;
		property Instalment: IInstalmentType read Get_Instalment write _Set_Instalment;
		property CustomerOrder: ICustomerOrderType read Get_CustomerOrder write _Set_CustomerOrder;
		property PaymentInstrumentData: IPaymentInstrumentDataType read Get_PaymentInstrumentData write _Set_PaymentInstrumentData;
		property PaymentType: WideString read Get_PaymentType write Set_PaymentType;
		property SplitPaymentFlag: WordBool read Get_SplitPaymentFlag write Set_SplitPaymentFlag;
	end;

	// *********************************************************************//
	// DispIntf :    IPaymentDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4AD2DDE4-9CDE-4F0C-B296-0B741777836E}
	// *********************************************************************//
	IPaymentDataTypeDisp = dispinterface
		['{4AD2DDE4-9CDE-4F0C-B296-0B741777836E}']
		property CardAcquisitionReference: ITransactionIdentificationType dispid 2;
		property RequestedValidityDate: WideString dispid 3;
		property Instalment: IInstalmentType dispid 4;
		property CustomerOrder: ICustomerOrderType dispid 5;
		property PaymentInstrumentData: IPaymentInstrumentDataType dispid 6;
		property PaymentType: WideString dispid 7;
		property SplitPaymentFlag: WordBool dispid 8;
	end;

	// *********************************************************************//
	// Interface :   IInstalmentType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {18FDE60C-2EF3-4272-BB03-A246CACEA310}
	// *********************************************************************//
	IInstalmentType = interface(IDispatch)
		['{18FDE60C-2EF3-4272-BB03-A246CACEA310}']
		function Get_InstalmentType1: WideString; safecall;
		procedure Set_InstalmentType1(const pRetVal: WideString); safecall;
		function Get_SequenceNumber: WideString; safecall;
		procedure Set_SequenceNumber(const pRetVal: WideString); safecall;
		function Get_PlanID: WideString; safecall;
		procedure Set_PlanID(const pRetVal: WideString); safecall;
		function Get_Period: WideString; safecall;
		procedure Set_Period(const pRetVal: WideString); safecall;
		function Get_PeriodUnit: WideString; safecall;
		procedure Set_PeriodUnit(const pRetVal: WideString); safecall;
		function Get_FirstPaymentDate: WideString; safecall;
		procedure Set_FirstPaymentDate(const pRetVal: WideString); safecall;
		function Get_TotalNbOfPayments: WideString; safecall;
		procedure Set_TotalNbOfPayments(const pRetVal: WideString); safecall;
		function Get_CumulativeAmount: Double; safecall;
		procedure Set_CumulativeAmount(pRetVal: Double); safecall;
		function Get_CumulativeAmountSpecified: WordBool; safecall;
		procedure Set_CumulativeAmountSpecified(pRetVal: WordBool); safecall;
		function Get_FirstAmount: Double; safecall;
		procedure Set_FirstAmount(pRetVal: Double); safecall;
		function Get_FirstAmountSpecified: WordBool; safecall;
		procedure Set_FirstAmountSpecified(pRetVal: WordBool); safecall;
		function Get_Charges: Double; safecall;
		procedure Set_Charges(pRetVal: Double); safecall;
		function Get_ChargesSpecified: WordBool; safecall;
		procedure Set_ChargesSpecified(pRetVal: WordBool); safecall;
		property InstalmentType1: WideString read Get_InstalmentType1 write Set_InstalmentType1;
		property SequenceNumber: WideString read Get_SequenceNumber write Set_SequenceNumber;
		property PlanID: WideString read Get_PlanID write Set_PlanID;
		property Period: WideString read Get_Period write Set_Period;
		property PeriodUnit: WideString read Get_PeriodUnit write Set_PeriodUnit;
		property FirstPaymentDate: WideString read Get_FirstPaymentDate write Set_FirstPaymentDate;
		property TotalNbOfPayments: WideString read Get_TotalNbOfPayments write Set_TotalNbOfPayments;
		property CumulativeAmount: Double read Get_CumulativeAmount write Set_CumulativeAmount;
		property CumulativeAmountSpecified: WordBool read Get_CumulativeAmountSpecified write Set_CumulativeAmountSpecified;
		property FirstAmount: Double read Get_FirstAmount write Set_FirstAmount;
		property FirstAmountSpecified: WordBool read Get_FirstAmountSpecified write Set_FirstAmountSpecified;
		property Charges: Double read Get_Charges write Set_Charges;
		property ChargesSpecified: WordBool read Get_ChargesSpecified write Set_ChargesSpecified;
	end;

	// *********************************************************************//
	// DispIntf :    IInstalmentTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {18FDE60C-2EF3-4272-BB03-A246CACEA310}
	// *********************************************************************//
	IInstalmentTypeDisp = dispinterface
		['{18FDE60C-2EF3-4272-BB03-A246CACEA310}']
		property InstalmentType1: WideString dispid 1;
		property SequenceNumber: WideString dispid 2;
		property PlanID: WideString dispid 3;
		property Period: WideString dispid 4;
		property PeriodUnit: WideString dispid 5;
		property FirstPaymentDate: WideString dispid 6;
		property TotalNbOfPayments: WideString dispid 7;
		property CumulativeAmount: Double dispid 8;
		property CumulativeAmountSpecified: WordBool dispid 9;
		property FirstAmount: Double dispid 10;
		property FirstAmountSpecified: WordBool dispid 11;
		property Charges: Double dispid 12;
		property ChargesSpecified: WordBool dispid 13;
	end;

	// *********************************************************************//
	// Interface :   IReversalRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {49A4AB91-8D5B-48CF-A9E4-4956824EAFA1}
	// *********************************************************************//
	IReversalRequestType = interface(IDispatch)
		['{49A4AB91-8D5B-48CF-A9E4-4956824EAFA1}']
		function Get_OriginalPOITransaction: IOriginalPOITransactionType; safecall;
		procedure _Set_OriginalPOITransaction(const pRetVal: IOriginalPOITransactionType); safecall;
		function Get_CustomerOrderID: ICustomerOrderType; safecall;
		procedure _Set_CustomerOrderID(const pRetVal: ICustomerOrderType); safecall;
		function Get_SaleReferenceID: WideString; safecall;
		procedure Set_SaleReferenceID(const pRetVal: WideString); safecall;
		function Get_ReversalReason: WideString; safecall;
		procedure Set_ReversalReason(const pRetVal: WideString); safecall;
		function Get_ReversedAmount: Double; safecall;
		procedure Set_ReversedAmount(pRetVal: Double); safecall;
		function Get_ReversedAmountSpecified: WordBool; safecall;
		procedure Set_ReversedAmountSpecified(pRetVal: WordBool); safecall;
		property OriginalPOITransaction: IOriginalPOITransactionType read Get_OriginalPOITransaction write _Set_OriginalPOITransaction;
		property CustomerOrderID: ICustomerOrderType read Get_CustomerOrderID write _Set_CustomerOrderID;
		property SaleReferenceID: WideString read Get_SaleReferenceID write Set_SaleReferenceID;
		property ReversalReason: WideString read Get_ReversalReason write Set_ReversalReason;
		property ReversedAmount: Double read Get_ReversedAmount write Set_ReversedAmount;
		property ReversedAmountSpecified: WordBool read Get_ReversedAmountSpecified write Set_ReversedAmountSpecified;
	end;

	// *********************************************************************//
	// DispIntf :    IReversalRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {49A4AB91-8D5B-48CF-A9E4-4956824EAFA1}
	// *********************************************************************//
	IReversalRequestTypeDisp = dispinterface
		['{49A4AB91-8D5B-48CF-A9E4-4956824EAFA1}']
		property OriginalPOITransaction: IOriginalPOITransactionType dispid 1;
		property CustomerOrderID: ICustomerOrderType dispid 2;
		property SaleReferenceID: WideString dispid 3;
		property ReversalReason: WideString dispid 4;
		property ReversedAmount: Double dispid 5;
		property ReversedAmountSpecified: WordBool dispid 6;
	end;

	// *********************************************************************//
	// Interface :   IBatchResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2B65C4CB-D6B3-45B3-8A16-CCAE1566085A}
	// *********************************************************************//
	IBatchResponseType = interface(IDispatch)
		['{2B65C4CB-D6B3-45B3-8A16-CCAE1566085A}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_PerformedTransaction: PSafeArray; safecall;
		procedure Set_PerformedTransaction(pRetVal: PSafeArray); safecall;
		function PerformedTransactionSize: Integer; safecall;
		function PerformedTransactionGetItem(index: Integer): IPerformedTransactionType; safecall;
		function PerformedTransactionSetItem(index: Integer; const value: IPerformedTransactionType): WordBool; safecall;
		function PerformedTransactionAddItem(const value: IPerformedTransactionType): WordBool; safecall;
		function PerformedTransactionRemoveItem(index: Integer): WordBool; safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property PerformedTransaction: PSafeArray read Get_PerformedTransaction write Set_PerformedTransaction;
	end;

	// *********************************************************************//
	// DispIntf :    IBatchResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2B65C4CB-D6B3-45B3-8A16-CCAE1566085A}
	// *********************************************************************//
	IBatchResponseTypeDisp = dispinterface
		['{2B65C4CB-D6B3-45B3-8A16-CCAE1566085A}']
		property Response: IResponseType dispid 1;
		property PerformedTransaction: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		function PerformedTransactionSize: Integer; dispid 3;
		function PerformedTransactionGetItem(index: Integer): IPerformedTransactionType; dispid 4;
		function PerformedTransactionSetItem(index: Integer; const value: IPerformedTransactionType): WordBool; dispid 5;
		function PerformedTransactionAddItem(const value: IPerformedTransactionType): WordBool; dispid 6;
		function PerformedTransactionRemoveItem(index: Integer): WordBool; dispid 7;
	end;

	// *********************************************************************//
	// Interface :   IPerformedTransactionType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {92A2FBA2-17D9-4C83-87BE-4BB0679E6EE9}
	// *********************************************************************//
	IPerformedTransactionType = interface(IDispatch)
		['{92A2FBA2-17D9-4C83-87BE-4BB0679E6EE9}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_SaleData: ISaleDataType; safecall;
		procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
		function Get_POIData: IPOIDataType; safecall;
		procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
		function Get_PaymentResult: IPaymentResultType; safecall;
		procedure _Set_PaymentResult(const pRetVal: IPaymentResultType); safecall;
		function Get_LoyaltyResult: PSafeArray; safecall;
		procedure Set_LoyaltyResult(pRetVal: PSafeArray); safecall;
		function Get_ReversedAmount: Double; safecall;
		procedure Set_ReversedAmount(pRetVal: Double); safecall;
		function Get_ReversedAmountSpecified: WordBool; safecall;
		procedure Set_ReversedAmountSpecified(pRetVal: WordBool); safecall;
		function LoyaltyResultSize: Integer; safecall;
		function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; safecall;
		function LoyaltyResultSetItem(index: Integer; const value: ILoyaltyResultType): WordBool; safecall;
		function LoyaltyResultAddItem(const value: ILoyaltyResultType): WordBool; safecall;
		function LoyaltyResultRemoveItem(index: Integer): WordBool; safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
		property POIData: IPOIDataType read Get_POIData write _Set_POIData;
		property PaymentResult: IPaymentResultType read Get_PaymentResult write _Set_PaymentResult;
		property LoyaltyResult: PSafeArray read Get_LoyaltyResult write Set_LoyaltyResult;
		property ReversedAmount: Double read Get_ReversedAmount write Set_ReversedAmount;
		property ReversedAmountSpecified: WordBool read Get_ReversedAmountSpecified write Set_ReversedAmountSpecified;
	end;

	// *********************************************************************//
	// DispIntf :    IPerformedTransactionTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {92A2FBA2-17D9-4C83-87BE-4BB0679E6EE9}
	// *********************************************************************//
	IPerformedTransactionTypeDisp = dispinterface
		['{92A2FBA2-17D9-4C83-87BE-4BB0679E6EE9}']
		property Response: IResponseType dispid 1;
		property SaleData: ISaleDataType dispid 2;
		property POIData: IPOIDataType dispid 3;
		property PaymentResult: IPaymentResultType dispid 4;
		property LoyaltyResult: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 5;
		property ReversedAmount: Double dispid 6;
		property ReversedAmountSpecified: WordBool dispid 7;
		function LoyaltyResultSize: Integer; dispid 8;
		function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; dispid 9;
		function LoyaltyResultSetItem(index: Integer; const value: ILoyaltyResultType): WordBool; dispid 10;
		function LoyaltyResultAddItem(const value: ILoyaltyResultType): WordBool; dispid 11;
		function LoyaltyResultRemoveItem(index: Integer): WordBool; dispid 12;
	end;

	// *********************************************************************//
	// Interface :   IPOIDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {CFEC2E3B-A798-4BE7-9C1C-60B64FD7F8A7}
	// *********************************************************************//
	IPOIDataType = interface(IDispatch)
		['{CFEC2E3B-A798-4BE7-9C1C-60B64FD7F8A7}']
		function Get_POITransactionID: ITransactionIdentificationType; safecall;
		procedure _Set_POITransactionID(const pRetVal: ITransactionIdentificationType); safecall;
		function Get_POIReconciliationID: WideString; safecall;
		procedure Set_POIReconciliationID(const pRetVal: WideString); safecall;
		property POITransactionID: ITransactionIdentificationType read Get_POITransactionID write _Set_POITransactionID;
		property POIReconciliationID: WideString read Get_POIReconciliationID write Set_POIReconciliationID;
	end;

	// *********************************************************************//
	// DispIntf :    IPOIDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {CFEC2E3B-A798-4BE7-9C1C-60B64FD7F8A7}
	// *********************************************************************//
	IPOIDataTypeDisp = dispinterface
		['{CFEC2E3B-A798-4BE7-9C1C-60B64FD7F8A7}']
		property POITransactionID: ITransactionIdentificationType dispid 1;
		property POIReconciliationID: WideString dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IPaymentResultType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {CFA87128-AF4D-4BFC-A0AE-D66E12ED33C0}
	// *********************************************************************//
	IPaymentResultType = interface(IDispatch)
		['{CFA87128-AF4D-4BFC-A0AE-D66E12ED33C0}']
		function Get_PaymentInstrumentData: IPaymentInstrumentDataType; safecall;
		procedure _Set_PaymentInstrumentData(const pRetVal: IPaymentInstrumentDataType); safecall;
		function Get_AmountsResp: IAmountsRespType; safecall;
		procedure _Set_AmountsResp(const pRetVal: IAmountsRespType); safecall;
		function Get_Instalment: IInstalmentType; safecall;
		procedure _Set_Instalment(const pRetVal: IInstalmentType); safecall;
		function Get_CurrencyConversion: PSafeArray; safecall;
		procedure Set_CurrencyConversion(pRetVal: PSafeArray); safecall;
		function Get_CapturedSignature: ICapturedSignatureType; safecall;
		procedure _Set_CapturedSignature(const pRetVal: ICapturedSignatureType); safecall;
		function Get_ProtectedSignature: IContentInformationType; safecall;
		procedure _Set_ProtectedSignature(const pRetVal: IContentInformationType); safecall;
		function Get_PaymentAcquirerData: IPaymentAcquirerDataType; safecall;
		procedure _Set_PaymentAcquirerData(const pRetVal: IPaymentAcquirerDataType); safecall;
		function Get_PaymentType: WideString; safecall;
		procedure Set_PaymentType(const pRetVal: WideString); safecall;
		function Get_MerchantOverrideFlag: WordBool; safecall;
		procedure Set_MerchantOverrideFlag(pRetVal: WordBool); safecall;
		function Get_CustomerLanguage: WideString; safecall;
		procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
		function Get_OnlineFlag: WordBool; safecall;
		procedure Set_OnlineFlag(pRetVal: WordBool); safecall;
		function Get_AuthenticationMethod: PSafeArray; safecall;
		procedure Set_AuthenticationMethod(pRetVal: PSafeArray); safecall;
		function Get_ValidityDate: WideString; safecall;
		procedure Set_ValidityDate(const pRetVal: WideString); safecall;
		function CurrencyConversionSize: Integer; safecall;
		function CurrencyConversionGetItem(index: Integer): ICurrencyConversionType; safecall;
		function CurrencyConversionSetItem(index: Integer; const value: ICurrencyConversionType): WordBool; safecall;
		function CurrencyConversionAddItem(const value: ICurrencyConversionType): WordBool; safecall;
		function CurrencyConversionRemoveItem(index: Integer): WordBool; safecall;
		function AuthenticationMethodSize: Integer; safecall;
		function AuthenticationMethodGetItem(index: Integer): WideString; safecall;
		function AuthenticationMethodSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function AuthenticationMethodAddItem(const value: WideString): WordBool; safecall;
		function AuthenticationMethodRemoveItem(index: Integer): WordBool; safecall;
		property PaymentInstrumentData: IPaymentInstrumentDataType read Get_PaymentInstrumentData write _Set_PaymentInstrumentData;
		property AmountsResp: IAmountsRespType read Get_AmountsResp write _Set_AmountsResp;
		property Instalment: IInstalmentType read Get_Instalment write _Set_Instalment;
		property CurrencyConversion: PSafeArray read Get_CurrencyConversion write Set_CurrencyConversion;
		property CapturedSignature: ICapturedSignatureType read Get_CapturedSignature write _Set_CapturedSignature;
		property ProtectedSignature: IContentInformationType read Get_ProtectedSignature write _Set_ProtectedSignature;
		property PaymentAcquirerData: IPaymentAcquirerDataType read Get_PaymentAcquirerData write _Set_PaymentAcquirerData;
		property PaymentType: WideString read Get_PaymentType write Set_PaymentType;
		property MerchantOverrideFlag: WordBool read Get_MerchantOverrideFlag write Set_MerchantOverrideFlag;
		property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
		property OnlineFlag: WordBool read Get_OnlineFlag write Set_OnlineFlag;
		property AuthenticationMethod: PSafeArray read Get_AuthenticationMethod write Set_AuthenticationMethod;
		property ValidityDate: WideString read Get_ValidityDate write Set_ValidityDate;
	end;

	// *********************************************************************//
	// DispIntf :    IPaymentResultTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {CFA87128-AF4D-4BFC-A0AE-D66E12ED33C0}
	// *********************************************************************//
	IPaymentResultTypeDisp = dispinterface
		['{CFA87128-AF4D-4BFC-A0AE-D66E12ED33C0}']
		property PaymentInstrumentData: IPaymentInstrumentDataType dispid 2;
		property AmountsResp: IAmountsRespType dispid 3;
		property Instalment: IInstalmentType dispid 4;
		property CurrencyConversion: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 5;
		property CapturedSignature: ICapturedSignatureType dispid 6;
		property ProtectedSignature: IContentInformationType dispid 7;
		property PaymentAcquirerData: IPaymentAcquirerDataType dispid 8;
		property PaymentType: WideString dispid 9;
		property MerchantOverrideFlag: WordBool dispid 10;
		property CustomerLanguage: WideString dispid 11;
		property OnlineFlag: WordBool dispid 12;
		property AuthenticationMethod: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 13;
		property ValidityDate: WideString dispid 14;
		function CurrencyConversionSize: Integer; dispid 15;
		function CurrencyConversionGetItem(index: Integer): ICurrencyConversionType; dispid 16;
		function CurrencyConversionSetItem(index: Integer; const value: ICurrencyConversionType): WordBool; dispid 17;
		function CurrencyConversionAddItem(const value: ICurrencyConversionType): WordBool; dispid 18;
		function CurrencyConversionRemoveItem(index: Integer): WordBool; dispid 19;
		function AuthenticationMethodSize: Integer; dispid 20;
		function AuthenticationMethodGetItem(index: Integer): WideString; dispid 21;
		function AuthenticationMethodSetItem(index: Integer; const value: WideString): WordBool; dispid 22;
		function AuthenticationMethodAddItem(const value: WideString): WordBool; dispid 23;
		function AuthenticationMethodRemoveItem(index: Integer): WordBool; dispid 24;
	end;

	// *********************************************************************//
	// Interface :   ICurrencyConversionType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {08E13FB8-4AB7-47F5-BBD5-637039963F11}
	// *********************************************************************//
	ICurrencyConversionType = interface(IDispatch)
		['{08E13FB8-4AB7-47F5-BBD5-637039963F11}']
		function Get_ConvertedAmount: IAmountType; safecall;
		procedure _Set_ConvertedAmount(const pRetVal: IAmountType); safecall;
		function Get_Commission: Double; safecall;
		procedure Set_Commission(pRetVal: Double); safecall;
		function Get_CommissionSpecified: WordBool; safecall;
		procedure Set_CommissionSpecified(pRetVal: WordBool); safecall;
		function Get_Declaration: WideString; safecall;
		procedure Set_Declaration(const pRetVal: WideString); safecall;
		function Get_CustomerApprovedFlag: WordBool; safecall;
		procedure Set_CustomerApprovedFlag(pRetVal: WordBool); safecall;
		function Get_Rate: Double; safecall;
		procedure Set_Rate(pRetVal: Double); safecall;
		function Get_RateSpecified: WordBool; safecall;
		procedure Set_RateSpecified(pRetVal: WordBool); safecall;
		function Get_Markup: Double; safecall;
		procedure Set_Markup(pRetVal: Double); safecall;
		function Get_MarkupSpecified: WordBool; safecall;
		procedure Set_MarkupSpecified(pRetVal: WordBool); safecall;
		property ConvertedAmount: IAmountType read Get_ConvertedAmount write _Set_ConvertedAmount;
		property Commission: Double read Get_Commission write Set_Commission;
		property CommissionSpecified: WordBool read Get_CommissionSpecified write Set_CommissionSpecified;
		property Declaration: WideString read Get_Declaration write Set_Declaration;
		property CustomerApprovedFlag: WordBool read Get_CustomerApprovedFlag write Set_CustomerApprovedFlag;
		property Rate: Double read Get_Rate write Set_Rate;
		property RateSpecified: WordBool read Get_RateSpecified write Set_RateSpecified;
		property Markup: Double read Get_Markup write Set_Markup;
		property MarkupSpecified: WordBool read Get_MarkupSpecified write Set_MarkupSpecified;
	end;

	// *********************************************************************//
	// DispIntf :    ICurrencyConversionTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {08E13FB8-4AB7-47F5-BBD5-637039963F11}
	// *********************************************************************//
	ICurrencyConversionTypeDisp = dispinterface
		['{08E13FB8-4AB7-47F5-BBD5-637039963F11}']
		property ConvertedAmount: IAmountType dispid 2;
		property Commission: Double dispid 3;
		property CommissionSpecified: WordBool dispid 4;
		property Declaration: WideString dispid 5;
		property CustomerApprovedFlag: WordBool dispid 6;
		property Rate: Double dispid 7;
		property RateSpecified: WordBool dispid 8;
		property Markup: Double dispid 9;
		property MarkupSpecified: WordBool dispid 10;
	end;

	// *********************************************************************//
	// Interface :   IAmountType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {98E4875A-CFB5-4D17-90DE-C765A5CCABC2}
	// *********************************************************************//
	IAmountType = interface(IDispatch)
		['{98E4875A-CFB5-4D17-90DE-C765A5CCABC2}']
		function Get_Currency: WideString; safecall;
		procedure Set_Currency(const pRetVal: WideString); safecall;
		function Get_value: Double; safecall;
		procedure Set_value(pRetVal: Double); safecall;
		property Currency: WideString read Get_Currency write Set_Currency;
		property value: Double read Get_value write Set_value;
	end;

	// *********************************************************************//
	// DispIntf :    IAmountTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {98E4875A-CFB5-4D17-90DE-C765A5CCABC2}
	// *********************************************************************//
	IAmountTypeDisp = dispinterface
		['{98E4875A-CFB5-4D17-90DE-C765A5CCABC2}']
		property Currency: WideString dispid 1;
		property value: Double dispid 2;
	end;

	// *********************************************************************//
	// Interface :   ICapturedSignatureType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {120DD984-C724-4BDB-8EDB-E214609157B7}
	// *********************************************************************//
	ICapturedSignatureType = interface(IDispatch)
		['{120DD984-C724-4BDB-8EDB-E214609157B7}']
		function Get_AreaSize: IAreaSizeType; safecall;
		procedure _Set_AreaSize(const pRetVal: IAreaSizeType); safecall;
		function Get_SignaturePoint: PSafeArray; safecall;
		procedure Set_SignaturePoint(pRetVal: PSafeArray); safecall;
		function SignaturePointSize: Integer; safecall;
		function SignaturePointGetItem(index: Integer): ISignaturePointType; safecall;
		function SignaturePointSetItem(index: Integer; const value: ISignaturePointType): WordBool; safecall;
		function SignaturePointAddItem(const value: ISignaturePointType): WordBool; safecall;
		function SignaturePointRemoveItem(index: Integer): WordBool; safecall;
		property AreaSize: IAreaSizeType read Get_AreaSize write _Set_AreaSize;
		property SignaturePoint: PSafeArray read Get_SignaturePoint write Set_SignaturePoint;
	end;

	// *********************************************************************//
	// DispIntf :    ICapturedSignatureTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {120DD984-C724-4BDB-8EDB-E214609157B7}
	// *********************************************************************//
	ICapturedSignatureTypeDisp = dispinterface
		['{120DD984-C724-4BDB-8EDB-E214609157B7}']
		property AreaSize: IAreaSizeType dispid 1;
		property SignaturePoint: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		function SignaturePointSize: Integer; dispid 3;
		function SignaturePointGetItem(index: Integer): ISignaturePointType; dispid 4;
		function SignaturePointSetItem(index: Integer; const value: ISignaturePointType): WordBool; dispid 5;
		function SignaturePointAddItem(const value: ISignaturePointType): WordBool; dispid 6;
		function SignaturePointRemoveItem(index: Integer): WordBool; dispid 7;
	end;

	// *********************************************************************//
	// Interface :   ISignaturePointType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {07D90B92-9ACD-4641-8058-B738EB33513E}
	// *********************************************************************//
	ISignaturePointType = interface(IDispatch)
		['{07D90B92-9ACD-4641-8058-B738EB33513E}']
		function Get_X: WideString; safecall;
		procedure Set_X(const pRetVal: WideString); safecall;
		function Get_Y: WideString; safecall;
		procedure Set_Y(const pRetVal: WideString); safecall;
		property X: WideString read Get_X write Set_X;
		property Y: WideString read Get_Y write Set_Y;
	end;

	// *********************************************************************//
	// DispIntf :    ISignaturePointTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {07D90B92-9ACD-4641-8058-B738EB33513E}
	// *********************************************************************//
	ISignaturePointTypeDisp = dispinterface
		['{07D90B92-9ACD-4641-8058-B738EB33513E}']
		property X: WideString dispid 1;
		property Y: WideString dispid 2;
	end;

	// *********************************************************************//
	// Interface :   ILoyaltyResultType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B8ABDDCB-D6E0-4544-80E3-18463ACD8DF8}
	// *********************************************************************//
	ILoyaltyResultType = interface(IDispatch)
		['{B8ABDDCB-D6E0-4544-80E3-18463ACD8DF8}']
		function Get_LoyaltyAccount: ILoyaltyAccountType; safecall;
		procedure _Set_LoyaltyAccount(const pRetVal: ILoyaltyAccountType); safecall;
		function Get_LoyaltyAmount: ILoyaltyAmountType; safecall;
		procedure _Set_LoyaltyAmount(const pRetVal: ILoyaltyAmountType); safecall;
		function Get_LoyaltyAcquirerData: ILoyaltyAcquirerDataType; safecall;
		procedure _Set_LoyaltyAcquirerData(const pRetVal: ILoyaltyAcquirerDataType); safecall;
		function Get_Rebates: IRebatesType; safecall;
		procedure _Set_Rebates(const pRetVal: IRebatesType); safecall;
		function Get_CurrentBalance: Double; safecall;
		procedure Set_CurrentBalance(pRetVal: Double); safecall;
		function Get_CurrentBalanceSpecified: WordBool; safecall;
		procedure Set_CurrentBalanceSpecified(pRetVal: WordBool); safecall;
		property LoyaltyAccount: ILoyaltyAccountType read Get_LoyaltyAccount write _Set_LoyaltyAccount;
		property LoyaltyAmount: ILoyaltyAmountType read Get_LoyaltyAmount write _Set_LoyaltyAmount;
		property LoyaltyAcquirerData: ILoyaltyAcquirerDataType read Get_LoyaltyAcquirerData write _Set_LoyaltyAcquirerData;
		property Rebates: IRebatesType read Get_Rebates write _Set_Rebates;
		property CurrentBalance: Double read Get_CurrentBalance write Set_CurrentBalance;
		property CurrentBalanceSpecified: WordBool read Get_CurrentBalanceSpecified write Set_CurrentBalanceSpecified;
	end;

	// *********************************************************************//
	// DispIntf :    ILoyaltyResultTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B8ABDDCB-D6E0-4544-80E3-18463ACD8DF8}
	// *********************************************************************//
	ILoyaltyResultTypeDisp = dispinterface
		['{B8ABDDCB-D6E0-4544-80E3-18463ACD8DF8}']
		property LoyaltyAccount: ILoyaltyAccountType dispid 1;
		property LoyaltyAmount: ILoyaltyAmountType dispid 2;
		property LoyaltyAcquirerData: ILoyaltyAcquirerDataType dispid 3;
		property Rebates: IRebatesType dispid 4;
		property CurrentBalance: Double dispid 5;
		property CurrentBalanceSpecified: WordBool dispid 6;
	end;

	// *********************************************************************//
	// Interface :   ILoyaltyAcquirerDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {620E8526-D843-48EA-89D2-3EE5D304CD3D}
	// *********************************************************************//
	ILoyaltyAcquirerDataType = interface(IDispatch)
		['{620E8526-D843-48EA-89D2-3EE5D304CD3D}']
		function Get_ApprovalCode: WideString; safecall;
		procedure Set_ApprovalCode(const pRetVal: WideString); safecall;
		function Get_LoyaltyTransactionID: ITransactionIdentificationType; safecall;
		procedure _Set_LoyaltyTransactionID(const pRetVal: ITransactionIdentificationType); safecall;
		function Get_LoyaltyAcquirerID: WideString; safecall;
		procedure Set_LoyaltyAcquirerID(const pRetVal: WideString); safecall;
		function Get_HostReconciliationID: WideString; safecall;
		procedure Set_HostReconciliationID(const pRetVal: WideString); safecall;
		property ApprovalCode: WideString read Get_ApprovalCode write Set_ApprovalCode;
		property LoyaltyTransactionID: ITransactionIdentificationType read Get_LoyaltyTransactionID write _Set_LoyaltyTransactionID;
		property LoyaltyAcquirerID: WideString read Get_LoyaltyAcquirerID write Set_LoyaltyAcquirerID;
		property HostReconciliationID: WideString read Get_HostReconciliationID write Set_HostReconciliationID;
	end;

	// *********************************************************************//
	// DispIntf :    ILoyaltyAcquirerDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {620E8526-D843-48EA-89D2-3EE5D304CD3D}
	// *********************************************************************//
	ILoyaltyAcquirerDataTypeDisp = dispinterface
		['{620E8526-D843-48EA-89D2-3EE5D304CD3D}']
		property ApprovalCode: WideString dispid 1;
		property LoyaltyTransactionID: ITransactionIdentificationType dispid 2;
		property LoyaltyAcquirerID: WideString dispid 3;
		property HostReconciliationID: WideString dispid 4;
	end;

	// *********************************************************************//
	// Interface :   IRebatesType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {88D0DC5E-E734-40FB-B2EB-17BB6D51D7F6}
	// *********************************************************************//
	IRebatesType = interface(IDispatch)
		['{88D0DC5E-E734-40FB-B2EB-17BB6D51D7F6}']
		function Get_TotalRebate: Double; safecall;
		procedure Set_TotalRebate(pRetVal: Double); safecall;
		function Get_TotalRebateSpecified: WordBool; safecall;
		procedure Set_TotalRebateSpecified(pRetVal: WordBool); safecall;
		function Get_RebateLabel: WideString; safecall;
		procedure Set_RebateLabel(const pRetVal: WideString); safecall;
		function Get_SaleItemRebate: PSafeArray; safecall;
		procedure Set_SaleItemRebate(pRetVal: PSafeArray); safecall;
		function SaleItemRebateSize: Integer; safecall;
		function SaleItemRebateGetItem(index: Integer): ISaleItemRebateType; safecall;
		function SaleItemRebateSetItem(index: Integer; const value: ISaleItemRebateType): WordBool; safecall;
		function SaleItemRebateAddItem(const value: ISaleItemRebateType): WordBool; safecall;
		function SaleItemRebateRemoveItem(index: Integer): WordBool; safecall;
		property TotalRebate: Double read Get_TotalRebate write Set_TotalRebate;
		property TotalRebateSpecified: WordBool read Get_TotalRebateSpecified write Set_TotalRebateSpecified;
		property RebateLabel: WideString read Get_RebateLabel write Set_RebateLabel;
		property SaleItemRebate: PSafeArray read Get_SaleItemRebate write Set_SaleItemRebate;
	end;

	// *********************************************************************//
	// DispIntf :    IRebatesTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {88D0DC5E-E734-40FB-B2EB-17BB6D51D7F6}
	// *********************************************************************//
	IRebatesTypeDisp = dispinterface
		['{88D0DC5E-E734-40FB-B2EB-17BB6D51D7F6}']
		property TotalRebate: Double dispid 1;
		property TotalRebateSpecified: WordBool dispid 2;
		property RebateLabel: WideString dispid 3;
		property SaleItemRebate: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		function SaleItemRebateSize: Integer; dispid 5;
		function SaleItemRebateGetItem(index: Integer): ISaleItemRebateType; dispid 6;
		function SaleItemRebateSetItem(index: Integer; const value: ISaleItemRebateType): WordBool; dispid 7;
		function SaleItemRebateAddItem(const value: ISaleItemRebateType): WordBool; dispid 8;
		function SaleItemRebateRemoveItem(index: Integer): WordBool; dispid 9;
	end;

	// *********************************************************************//
	// Interface :   ISaleItemRebateType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {5FC6EAA4-3E39-4BAD-A2B4-FE09C8D61341}
	// *********************************************************************//
	ISaleItemRebateType = interface(IDispatch)
		['{5FC6EAA4-3E39-4BAD-A2B4-FE09C8D61341}']
		function Get_UnitOfMeasure: WideString; safecall;
		procedure Set_UnitOfMeasure(const pRetVal: WideString); safecall;
		function Get_Quantity: Double; safecall;
		procedure Set_Quantity(pRetVal: Double); safecall;
		function Get_QuantitySpecified: WordBool; safecall;
		procedure Set_QuantitySpecified(pRetVal: WordBool); safecall;
		function Get_RebateLabel: WideString; safecall;
		procedure Set_RebateLabel(const pRetVal: WideString); safecall;
		function Get_ItemID: WideString; safecall;
		procedure Set_ItemID(const pRetVal: WideString); safecall;
		function Get_ProductCode: WideString; safecall;
		procedure Set_ProductCode(const pRetVal: WideString); safecall;
		function Get_EanUpc: WideString; safecall;
		procedure Set_EanUpc(const pRetVal: WideString); safecall;
		function Get_ItemAmount: Double; safecall;
		procedure Set_ItemAmount(pRetVal: Double); safecall;
		function Get_ItemAmountSpecified: WordBool; safecall;
		procedure Set_ItemAmountSpecified(pRetVal: WordBool); safecall;
		property UnitOfMeasure: WideString read Get_UnitOfMeasure write Set_UnitOfMeasure;
		property Quantity: Double read Get_Quantity write Set_Quantity;
		property QuantitySpecified: WordBool read Get_QuantitySpecified write Set_QuantitySpecified;
		property RebateLabel: WideString read Get_RebateLabel write Set_RebateLabel;
		property ItemID: WideString read Get_ItemID write Set_ItemID;
		property ProductCode: WideString read Get_ProductCode write Set_ProductCode;
		property EanUpc: WideString read Get_EanUpc write Set_EanUpc;
		property ItemAmount: Double read Get_ItemAmount write Set_ItemAmount;
		property ItemAmountSpecified: WordBool read Get_ItemAmountSpecified write Set_ItemAmountSpecified;
	end;

	// *********************************************************************//
	// DispIntf :    ISaleItemRebateTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {5FC6EAA4-3E39-4BAD-A2B4-FE09C8D61341}
	// *********************************************************************//
	ISaleItemRebateTypeDisp = dispinterface
		['{5FC6EAA4-3E39-4BAD-A2B4-FE09C8D61341}']
		property UnitOfMeasure: WideString dispid 1;
		property Quantity: Double dispid 2;
		property QuantitySpecified: WordBool dispid 3;
		property RebateLabel: WideString dispid 4;
		property ItemID: WideString dispid 5;
		property ProductCode: WideString dispid 6;
		property EanUpc: WideString dispid 7;
		property ItemAmount: Double dispid 8;
		property ItemAmountSpecified: WordBool dispid 9;
	end;

	// *********************************************************************//
	// Interface :   ICardAcquisitionRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {94AFFD20-D519-49C6-A204-7C74C7C13027}
	// *********************************************************************//
	ICardAcquisitionRequestType = interface(IDispatch)
		['{94AFFD20-D519-49C6-A204-7C74C7C13027}']
		function Get_SaleData: ISaleDataType; safecall;
		procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
		function Get_CardAcquisitionTransaction: ICardAcquisitionTransactionType; safecall;
		procedure _Set_CardAcquisitionTransaction(const pRetVal: ICardAcquisitionTransactionType); safecall;
		property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
		property CardAcquisitionTransaction: ICardAcquisitionTransactionType read Get_CardAcquisitionTransaction write _Set_CardAcquisitionTransaction;
	end;

	// *********************************************************************//
	// DispIntf :    ICardAcquisitionRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {94AFFD20-D519-49C6-A204-7C74C7C13027}
	// *********************************************************************//
	ICardAcquisitionRequestTypeDisp = dispinterface
		['{94AFFD20-D519-49C6-A204-7C74C7C13027}']
		property SaleData: ISaleDataType dispid 1;
		property CardAcquisitionTransaction: ICardAcquisitionTransactionType dispid 2;
	end;

	// *********************************************************************//
	// Interface :   ICardAcquisitionTransactionType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F49D42A9-51F5-4FC0-A39E-78F0BBF26C95}
	// *********************************************************************//
	ICardAcquisitionTransactionType = interface(IDispatch)
		['{F49D42A9-51F5-4FC0-A39E-78F0BBF26C95}']
		function Get_AllowedPaymentBrand: PSafeArray; safecall;
		procedure Set_AllowedPaymentBrand(pRetVal: PSafeArray); safecall;
		function Get_AllowedLoyaltyBrand: PSafeArray; safecall;
		procedure Set_AllowedLoyaltyBrand(pRetVal: PSafeArray); safecall;
		function Get_ForceEntryMode: PSafeArray; safecall;
		procedure Set_ForceEntryMode(pRetVal: PSafeArray); safecall;
		function Get_LoyaltyHandling: WideString; safecall;
		procedure Set_LoyaltyHandling(const pRetVal: WideString); safecall;
		function Get_CustomerLanguage: WideString; safecall;
		procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
		function Get_ForceCustomerSelectionFlag: WordBool; safecall;
		procedure Set_ForceCustomerSelectionFlag(pRetVal: WordBool); safecall;
		function Get_TotalAmount: Double; safecall;
		procedure Set_TotalAmount(pRetVal: Double); safecall;
		function Get_TotalAmountSpecified: WordBool; safecall;
		procedure Set_TotalAmountSpecified(pRetVal: WordBool); safecall;
		function Get_PaymentType: WideString; safecall;
		procedure Set_PaymentType(const pRetVal: WideString); safecall;
		function Get_CashBackFlag: WordBool; safecall;
		procedure Set_CashBackFlag(pRetVal: WordBool); safecall;
		function Get_CashBackFlagSpecified: WordBool; safecall;
		procedure Set_CashBackFlagSpecified(pRetVal: WordBool); safecall;
		function AllowedPaymentBrandSize: Integer; safecall;
		function AllowedPaymentBrandGetItem(index: Integer): WideString; safecall;
		function AllowedPaymentBrandSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function AllowedPaymentBrandAddItem(const value: WideString): WordBool; safecall;
		function AllowedPaymentBrandRemoveItem(index: Integer): WordBool; safecall;
		function AllowedLoyaltyBrandSize: Integer; safecall;
		function AllowedLoyaltyBrandGetItem(index: Integer): WideString; safecall;
		function AllowedLoyaltyBrandSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function AllowedLoyaltyBrandAddItem(const value: WideString): WordBool; safecall;
		function AllowedLoyaltyBrandRemoveItem(index: Integer): WordBool; safecall;
		function ForceEntryModeSize: Integer; safecall;
		function ForceEntryModeGetItem(index: Integer): WideString; safecall;
		function ForceEntryModeSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function ForceEntryModeAddItem(const value: WideString): WordBool; safecall;
		function ForceEntryModeRemoveItem(index: Integer): WordBool; safecall;
		property AllowedPaymentBrand: PSafeArray read Get_AllowedPaymentBrand write Set_AllowedPaymentBrand;
		property AllowedLoyaltyBrand: PSafeArray read Get_AllowedLoyaltyBrand write Set_AllowedLoyaltyBrand;
		property ForceEntryMode: PSafeArray read Get_ForceEntryMode write Set_ForceEntryMode;
		property LoyaltyHandling: WideString read Get_LoyaltyHandling write Set_LoyaltyHandling;
		property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
		property ForceCustomerSelectionFlag: WordBool read Get_ForceCustomerSelectionFlag write Set_ForceCustomerSelectionFlag;
		property TotalAmount: Double read Get_TotalAmount write Set_TotalAmount;
		property TotalAmountSpecified: WordBool read Get_TotalAmountSpecified write Set_TotalAmountSpecified;
		property PaymentType: WideString read Get_PaymentType write Set_PaymentType;
		property CashBackFlag: WordBool read Get_CashBackFlag write Set_CashBackFlag;
		property CashBackFlagSpecified: WordBool read Get_CashBackFlagSpecified write Set_CashBackFlagSpecified;
	end;

	// *********************************************************************//
	// DispIntf :    ICardAcquisitionTransactionTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F49D42A9-51F5-4FC0-A39E-78F0BBF26C95}
	// *********************************************************************//
	ICardAcquisitionTransactionTypeDisp = dispinterface
		['{F49D42A9-51F5-4FC0-A39E-78F0BBF26C95}']
		property AllowedPaymentBrand: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property AllowedLoyaltyBrand: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		property ForceEntryMode: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		property LoyaltyHandling: WideString dispid 5;
		property CustomerLanguage: WideString dispid 6;
		property ForceCustomerSelectionFlag: WordBool dispid 7;
		property TotalAmount: Double dispid 8;
		property TotalAmountSpecified: WordBool dispid 9;
		property PaymentType: WideString dispid 10;
		property CashBackFlag: WordBool dispid 11;
		property CashBackFlagSpecified: WordBool dispid 12;
		function AllowedPaymentBrandSize: Integer; dispid 13;
		function AllowedPaymentBrandGetItem(index: Integer): WideString; dispid 14;
		function AllowedPaymentBrandSetItem(index: Integer; const value: WideString): WordBool; dispid 15;
		function AllowedPaymentBrandAddItem(const value: WideString): WordBool; dispid 16;
		function AllowedPaymentBrandRemoveItem(index: Integer): WordBool; dispid 17;
		function AllowedLoyaltyBrandSize: Integer; dispid 18;
		function AllowedLoyaltyBrandGetItem(index: Integer): WideString; dispid 19;
		function AllowedLoyaltyBrandSetItem(index: Integer; const value: WideString): WordBool; dispid 20;
		function AllowedLoyaltyBrandAddItem(const value: WideString): WordBool; dispid 21;
		function AllowedLoyaltyBrandRemoveItem(index: Integer): WordBool; dispid 22;
		function ForceEntryModeSize: Integer; dispid 23;
		function ForceEntryModeGetItem(index: Integer): WideString; dispid 24;
		function ForceEntryModeSetItem(index: Integer; const value: WideString): WordBool; dispid 25;
		function ForceEntryModeAddItem(const value: WideString): WordBool; dispid 26;
		function ForceEntryModeRemoveItem(index: Integer): WordBool; dispid 27;
	end;

	// *********************************************************************//
	// Interface :   ICardAcquisitionResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {44D76C1A-A6BE-4B8B-BDFB-19DF57C905D9}
	// *********************************************************************//
	ICardAcquisitionResponseType = interface(IDispatch)
		['{44D76C1A-A6BE-4B8B-BDFB-19DF57C905D9}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_SaleData: ISaleDataType; safecall;
		procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
		function Get_POIData: IPOIDataType; safecall;
		procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
		function Get_PaymentBrand: PSafeArray; safecall;
		procedure Set_PaymentBrand(pRetVal: PSafeArray); safecall;
		function Get_PaymentInstrumentData: IPaymentInstrumentDataType; safecall;
		procedure _Set_PaymentInstrumentData(const pRetVal: IPaymentInstrumentDataType); safecall;
		function Get_LoyaltyAccount: PSafeArray; safecall;
		procedure Set_LoyaltyAccount(pRetVal: PSafeArray); safecall;
		function Get_CustomerOrder: PSafeArray; safecall;
		procedure Set_CustomerOrder(pRetVal: PSafeArray); safecall;
		function PaymentBrandSize: Integer; safecall;
		function PaymentBrandGetItem(index: Integer): WideString; safecall;
		function PaymentBrandSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function PaymentBrandAddItem(const value: WideString): WordBool; safecall;
		function PaymentBrandRemoveItem(index: Integer): WordBool; safecall;
		function LoyaltyAccountSize: Integer; safecall;
		function LoyaltyAccountGetItem(index: Integer): ILoyaltyAccountType; safecall;
		function LoyaltyAccountSetItem(index: Integer; const value: ILoyaltyAccountType): WordBool; safecall;
		function LoyaltyAccountAddItem(const value: ILoyaltyAccountType): WordBool; safecall;
		function LoyaltyAccountRemoveItem(index: Integer): WordBool; safecall;
		function CustomerOrderSize: Integer; safecall;
		function CustomerOrderGetItem(index: Integer): ICustomerOrderType; safecall;
		function CustomerOrderSetItem(index: Integer; const value: ICustomerOrderType): WordBool; safecall;
		function CustomerOrderAddItem(const value: ICustomerOrderType): WordBool; safecall;
		function CustomerOrderRemoveItem(index: Integer): WordBool; safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
		property POIData: IPOIDataType read Get_POIData write _Set_POIData;
		property PaymentBrand: PSafeArray read Get_PaymentBrand write Set_PaymentBrand;
		property PaymentInstrumentData: IPaymentInstrumentDataType read Get_PaymentInstrumentData write _Set_PaymentInstrumentData;
		property LoyaltyAccount: PSafeArray read Get_LoyaltyAccount write Set_LoyaltyAccount;
		property CustomerOrder: PSafeArray read Get_CustomerOrder write Set_CustomerOrder;
	end;

	// *********************************************************************//
	// DispIntf :    ICardAcquisitionResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {44D76C1A-A6BE-4B8B-BDFB-19DF57C905D9}
	// *********************************************************************//
	ICardAcquisitionResponseTypeDisp = dispinterface
		['{44D76C1A-A6BE-4B8B-BDFB-19DF57C905D9}']
		property Response: IResponseType dispid 1;
		property SaleData: ISaleDataType dispid 2;
		property POIData: IPOIDataType dispid 3;
		property PaymentBrand: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		property PaymentInstrumentData: IPaymentInstrumentDataType dispid 5;
		property LoyaltyAccount: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 6;
		property CustomerOrder: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 7;
		function PaymentBrandSize: Integer; dispid 8;
		function PaymentBrandGetItem(index: Integer): WideString; dispid 9;
		function PaymentBrandSetItem(index: Integer; const value: WideString): WordBool; dispid 10;
		function PaymentBrandAddItem(const value: WideString): WordBool; dispid 11;
		function PaymentBrandRemoveItem(index: Integer): WordBool; dispid 12;
		function LoyaltyAccountSize: Integer; dispid 13;
		function LoyaltyAccountGetItem(index: Integer): ILoyaltyAccountType; dispid 14;
		function LoyaltyAccountSetItem(index: Integer; const value: ILoyaltyAccountType): WordBool; dispid 15;
		function LoyaltyAccountAddItem(const value: ILoyaltyAccountType): WordBool; dispid 16;
		function LoyaltyAccountRemoveItem(index: Integer): WordBool; dispid 17;
		function CustomerOrderSize: Integer; dispid 18;
		function CustomerOrderGetItem(index: Integer): ICustomerOrderType; dispid 19;
		function CustomerOrderSetItem(index: Integer; const value: ICustomerOrderType): WordBool; dispid 20;
		function CustomerOrderAddItem(const value: ICustomerOrderType): WordBool; dispid 21;
		function CustomerOrderRemoveItem(index: Integer): WordBool; dispid 22;
	end;

	// *********************************************************************//
	// Interface :   ICardholderPINType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {FE920547-3AFD-4E79-9D52-BB93A46AFE81}
	// *********************************************************************//
	ICardholderPINType = interface(IDispatch)
		['{FE920547-3AFD-4E79-9D52-BB93A46AFE81}']
		function Get_EncrPINBlock: IContentInformationType; safecall;
		procedure _Set_EncrPINBlock(const pRetVal: IContentInformationType); safecall;
		function Get_PINFormat: WideString; safecall;
		procedure Set_PINFormat(const pRetVal: WideString); safecall;
		function Get_AdditionalInput: WideString; safecall;
		procedure Set_AdditionalInput(const pRetVal: WideString); safecall;
		property EncrPINBlock: IContentInformationType read Get_EncrPINBlock write _Set_EncrPINBlock;
		property PINFormat: WideString read Get_PINFormat write Set_PINFormat;
		property AdditionalInput: WideString read Get_AdditionalInput write Set_AdditionalInput;
	end;

	// *********************************************************************//
	// DispIntf :    ICardholderPINTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {FE920547-3AFD-4E79-9D52-BB93A46AFE81}
	// *********************************************************************//
	ICardholderPINTypeDisp = dispinterface
		['{FE920547-3AFD-4E79-9D52-BB93A46AFE81}']
		property EncrPINBlock: IContentInformationType dispid 1;
		property PINFormat: WideString dispid 2;
		property AdditionalInput: WideString dispid 3;
	end;

	// *********************************************************************//
	// Interface :   ICardReaderAPDURequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {21E99FB1-757A-42FF-8F14-B363FAB5042C}
	// *********************************************************************//
	ICardReaderAPDURequestType = interface(IDispatch)
		['{21E99FB1-757A-42FF-8F14-B363FAB5042C}']
		function Get_APDUData: PSafeArray; safecall;
		procedure Set_APDUData(pRetVal: PSafeArray); safecall;
		function Get_APDUClass: PSafeArray; safecall;
		procedure Set_APDUClass(pRetVal: PSafeArray); safecall;
		function Get_APDUInstruction: PSafeArray; safecall;
		procedure Set_APDUInstruction(pRetVal: PSafeArray); safecall;
		function Get_APDUPar1: PSafeArray; safecall;
		procedure Set_APDUPar1(pRetVal: PSafeArray); safecall;
		function Get_APDUPar2: PSafeArray; safecall;
		procedure Set_APDUPar2(pRetVal: PSafeArray); safecall;
		function Get_APDUExpectedLength: PSafeArray; safecall;
		procedure Set_APDUExpectedLength(pRetVal: PSafeArray); safecall;
		function APDUDataSize: Integer; safecall;
		function APDUDataGetItem(index: Integer): Byte; safecall;
		function APDUDataSetItem(index: Integer; value: Byte): WordBool; safecall;
		function APDUDataAddItem(value: Byte): WordBool; safecall;
		function APDUDataRemoveItem(index: Integer): WordBool; safecall;
		function APDUClassSize: Integer; safecall;
		function APDUClassGetItem(index: Integer): Byte; safecall;
		function APDUClassSetItem(index: Integer; value: Byte): WordBool; safecall;
		function APDUClassAddItem(value: Byte): WordBool; safecall;
		function APDUClassRemoveItem(index: Integer): WordBool; safecall;
		function APDUInstructionSize: Integer; safecall;
		function APDUInstructionGetItem(index: Integer): Byte; safecall;
		function APDUInstructionSetItem(index: Integer; value: Byte): WordBool; safecall;
		function APDUInstructionAddItem(value: Byte): WordBool; safecall;
		function APDUInstructionRemoveItem(index: Integer): WordBool; safecall;
		function APDUPar1Size: Integer; safecall;
		function APDUPar1GetItem(index: Integer): Byte; safecall;
		function APDUPar1SetItem(index: Integer; value: Byte): WordBool; safecall;
		function APDUPar1AddItem(value: Byte): WordBool; safecall;
		function APDUPar1RemoveItem(index: Integer): WordBool; safecall;
		function APDUPar2Size: Integer; safecall;
		function APDUPar2GetItem(index: Integer): Byte; safecall;
		function APDUPar2SetItem(index: Integer; value: Byte): WordBool; safecall;
		function APDUPar2AddItem(value: Byte): WordBool; safecall;
		function APDUPar2RemoveItem(index: Integer): WordBool; safecall;
		function APDUExpectedLengthSize: Integer; safecall;
		function APDUExpectedLengthGetItem(index: Integer): Byte; safecall;
		function APDUExpectedLengthSetItem(index: Integer; value: Byte): WordBool; safecall;
		function APDUExpectedLengthAddItem(value: Byte): WordBool; safecall;
		function APDUExpectedLengthRemoveItem(index: Integer): WordBool; safecall;
		property APDUData: PSafeArray read Get_APDUData write Set_APDUData;
		property APDUClass: PSafeArray read Get_APDUClass write Set_APDUClass;
		property APDUInstruction: PSafeArray read Get_APDUInstruction write Set_APDUInstruction;
		property APDUPar1: PSafeArray read Get_APDUPar1 write Set_APDUPar1;
		property APDUPar2: PSafeArray read Get_APDUPar2 write Set_APDUPar2;
		property APDUExpectedLength: PSafeArray read Get_APDUExpectedLength write Set_APDUExpectedLength;
	end;

	// *********************************************************************//
	// DispIntf :    ICardReaderAPDURequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {21E99FB1-757A-42FF-8F14-B363FAB5042C}
	// *********************************************************************//
	ICardReaderAPDURequestTypeDisp = dispinterface
		['{21E99FB1-757A-42FF-8F14-B363FAB5042C}']
		property APDUData: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 1;
		property APDUClass: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property APDUInstruction: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		property APDUPar1: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		property APDUPar2: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 5;
		property APDUExpectedLength: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 6;
		function APDUDataSize: Integer; dispid 7;
		function APDUDataGetItem(index: Integer): Byte; dispid 8;
		function APDUDataSetItem(index: Integer; value: Byte): WordBool; dispid 9;
		function APDUDataAddItem(value: Byte): WordBool; dispid 10;
		function APDUDataRemoveItem(index: Integer): WordBool; dispid 11;
		function APDUClassSize: Integer; dispid 12;
		function APDUClassGetItem(index: Integer): Byte; dispid 13;
		function APDUClassSetItem(index: Integer; value: Byte): WordBool; dispid 14;
		function APDUClassAddItem(value: Byte): WordBool; dispid 15;
		function APDUClassRemoveItem(index: Integer): WordBool; dispid 16;
		function APDUInstructionSize: Integer; dispid 17;
		function APDUInstructionGetItem(index: Integer): Byte; dispid 18;
		function APDUInstructionSetItem(index: Integer; value: Byte): WordBool; dispid 19;
		function APDUInstructionAddItem(value: Byte): WordBool; dispid 20;
		function APDUInstructionRemoveItem(index: Integer): WordBool; dispid 21;
		function APDUPar1Size: Integer; dispid 22;
		function APDUPar1GetItem(index: Integer): Byte; dispid 23;
		function APDUPar1SetItem(index: Integer; value: Byte): WordBool; dispid 24;
		function APDUPar1AddItem(value: Byte): WordBool; dispid 25;
		function APDUPar1RemoveItem(index: Integer): WordBool; dispid 26;
		function APDUPar2Size: Integer; dispid 27;
		function APDUPar2GetItem(index: Integer): Byte; dispid 28;
		function APDUPar2SetItem(index: Integer; value: Byte): WordBool; dispid 29;
		function APDUPar2AddItem(value: Byte): WordBool; dispid 30;
		function APDUPar2RemoveItem(index: Integer): WordBool; dispid 31;
		function APDUExpectedLengthSize: Integer; dispid 32;
		function APDUExpectedLengthGetItem(index: Integer): Byte; dispid 33;
		function APDUExpectedLengthSetItem(index: Integer; value: Byte): WordBool; dispid 34;
		function APDUExpectedLengthAddItem(value: Byte): WordBool; dispid 35;
		function APDUExpectedLengthRemoveItem(index: Integer): WordBool; dispid 36;
	end;

	// *********************************************************************//
	// Interface :   ICardReaderAPDUResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {9188E1C1-2F06-4397-8CF4-D59F940DBBDC}
	// *********************************************************************//
	ICardReaderAPDUResponseType = interface(IDispatch)
		['{9188E1C1-2F06-4397-8CF4-D59F940DBBDC}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_APDUData: PSafeArray; safecall;
		procedure Set_APDUData(pRetVal: PSafeArray); safecall;
		function Get_CardStatusWords: PSafeArray; safecall;
		procedure Set_CardStatusWords(pRetVal: PSafeArray); safecall;
		function APDUDataSize: Integer; safecall;
		function APDUDataGetItem(index: Integer): Byte; safecall;
		function APDUDataSetItem(index: Integer; value: Byte): WordBool; safecall;
		function APDUDataAddItem(value: Byte): WordBool; safecall;
		function APDUDataRemoveItem(index: Integer): WordBool; safecall;
		function CardStatusWordsSize: Integer; safecall;
		function CardStatusWordsGetItem(index: Integer): Byte; safecall;
		function CardStatusWordsSetItem(index: Integer; value: Byte): WordBool; safecall;
		function CardStatusWordsAddItem(value: Byte): WordBool; safecall;
		function CardStatusWordsRemoveItem(index: Integer): WordBool; safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property APDUData: PSafeArray read Get_APDUData write Set_APDUData;
		property CardStatusWords: PSafeArray read Get_CardStatusWords write Set_CardStatusWords;
	end;

	// *********************************************************************//
	// DispIntf :    ICardReaderAPDUResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {9188E1C1-2F06-4397-8CF4-D59F940DBBDC}
	// *********************************************************************//
	ICardReaderAPDUResponseTypeDisp = dispinterface
		['{9188E1C1-2F06-4397-8CF4-D59F940DBBDC}']
		property Response: IResponseType dispid 1;
		property APDUData: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property CardStatusWords: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		function APDUDataSize: Integer; dispid 4;
		function APDUDataGetItem(index: Integer): Byte; dispid 5;
		function APDUDataSetItem(index: Integer; value: Byte): WordBool; dispid 6;
		function APDUDataAddItem(value: Byte): WordBool; dispid 7;
		function APDUDataRemoveItem(index: Integer): WordBool; dispid 8;
		function CardStatusWordsSize: Integer; dispid 9;
		function CardStatusWordsGetItem(index: Integer): Byte; dispid 10;
		function CardStatusWordsSetItem(index: Integer; value: Byte): WordBool; dispid 11;
		function CardStatusWordsAddItem(value: Byte): WordBool; dispid 12;
		function CardStatusWordsRemoveItem(index: Integer): WordBool; dispid 13;
	end;

	// *********************************************************************//
	// Interface :   ICardReaderInitRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F78533AB-DA6C-46D4-B6E5-F115558DAF82}
	// *********************************************************************//
	ICardReaderInitRequestType = interface(IDispatch)
		['{F78533AB-DA6C-46D4-B6E5-F115558DAF82}']
		function Get_ForceEntryMode: PSafeArray; safecall;
		procedure Set_ForceEntryMode(pRetVal: PSafeArray); safecall;
		function Get_DisplayOutput: IDisplayOutputType; safecall;
		procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
		function Get_WarmResetFlag: WordBool; safecall;
		procedure Set_WarmResetFlag(pRetVal: WordBool); safecall;
		function Get_WarmResetFlagSpecified: WordBool; safecall;
		procedure Set_WarmResetFlagSpecified(pRetVal: WordBool); safecall;
		function Get_LeaveCardFlag: WordBool; safecall;
		procedure Set_LeaveCardFlag(pRetVal: WordBool); safecall;
		function Get_MaxWaitingTime: WideString; safecall;
		procedure Set_MaxWaitingTime(const pRetVal: WideString); safecall;
		function ForceEntryModeSize: Integer; safecall;
		function ForceEntryModeGetItem(index: Integer): WideString; safecall;
		function ForceEntryModeSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function ForceEntryModeAddItem(const value: WideString): WordBool; safecall;
		function ForceEntryModeRemoveItem(index: Integer): WordBool; safecall;
		property ForceEntryMode: PSafeArray read Get_ForceEntryMode write Set_ForceEntryMode;
		property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
		property WarmResetFlag: WordBool read Get_WarmResetFlag write Set_WarmResetFlag;
		property WarmResetFlagSpecified: WordBool read Get_WarmResetFlagSpecified write Set_WarmResetFlagSpecified;
		property LeaveCardFlag: WordBool read Get_LeaveCardFlag write Set_LeaveCardFlag;
		property MaxWaitingTime: WideString read Get_MaxWaitingTime write Set_MaxWaitingTime;
	end;

	// *********************************************************************//
	// DispIntf :    ICardReaderInitRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F78533AB-DA6C-46D4-B6E5-F115558DAF82}
	// *********************************************************************//
	ICardReaderInitRequestTypeDisp = dispinterface
		['{F78533AB-DA6C-46D4-B6E5-F115558DAF82}']
		property ForceEntryMode: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property DisplayOutput: IDisplayOutputType dispid 3;
		property WarmResetFlag: WordBool dispid 4;
		property WarmResetFlagSpecified: WordBool dispid 5;
		property LeaveCardFlag: WordBool dispid 6;
		property MaxWaitingTime: WideString dispid 7;
		function ForceEntryModeSize: Integer; dispid 8;
		function ForceEntryModeGetItem(index: Integer): WideString; dispid 9;
		function ForceEntryModeSetItem(index: Integer; const value: WideString): WordBool; dispid 10;
		function ForceEntryModeAddItem(const value: WideString): WordBool; dispid 11;
		function ForceEntryModeRemoveItem(index: Integer): WordBool; dispid 12;
	end;

	// *********************************************************************//
	// Interface :   ICardReaderInitResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {E4744367-ABEC-4730-82A6-FAED849250DB}
	// *********************************************************************//
	ICardReaderInitResponseType = interface(IDispatch)
		['{E4744367-ABEC-4730-82A6-FAED849250DB}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_TrackData: PSafeArray; safecall;
		procedure Set_TrackData(pRetVal: PSafeArray); safecall;
		function Get_ICCResetData: IICCResetDataType; safecall;
		procedure _Set_ICCResetData(const pRetVal: IICCResetDataType); safecall;
		function Get_EntryMode: PSafeArray; safecall;
		procedure Set_EntryMode(pRetVal: PSafeArray); safecall;
		function TrackDataSize: Integer; safecall;
		function TrackDataGetItem(index: Integer): ITrackDataType; safecall;
		function TrackDataSetItem(index: Integer; const value: ITrackDataType): WordBool; safecall;
		function TrackDataAddItem(const value: ITrackDataType): WordBool; safecall;
		function TrackDataRemoveItem(index: Integer): WordBool; safecall;
		function EntryModeSize: Integer; safecall;
		function EntryModeGetItem(index: Integer): WideString; safecall;
		function EntryModeSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function EntryModeAddItem(const value: WideString): WordBool; safecall;
		function EntryModeRemoveItem(index: Integer): WordBool; safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property TrackData: PSafeArray read Get_TrackData write Set_TrackData;
		property ICCResetData: IICCResetDataType read Get_ICCResetData write _Set_ICCResetData;
		property EntryMode: PSafeArray read Get_EntryMode write Set_EntryMode;
	end;

	// *********************************************************************//
	// DispIntf :    ICardReaderInitResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {E4744367-ABEC-4730-82A6-FAED849250DB}
	// *********************************************************************//
	ICardReaderInitResponseTypeDisp = dispinterface
		['{E4744367-ABEC-4730-82A6-FAED849250DB}']
		property Response: IResponseType dispid 1;
		property TrackData: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property ICCResetData: IICCResetDataType dispid 3;
		property EntryMode: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		function TrackDataSize: Integer; dispid 5;
		function TrackDataGetItem(index: Integer): ITrackDataType; dispid 6;
		function TrackDataSetItem(index: Integer; const value: ITrackDataType): WordBool; dispid 7;
		function TrackDataAddItem(const value: ITrackDataType): WordBool; dispid 8;
		function TrackDataRemoveItem(index: Integer): WordBool; dispid 9;
		function EntryModeSize: Integer; dispid 10;
		function EntryModeGetItem(index: Integer): WideString; dispid 11;
		function EntryModeSetItem(index: Integer; const value: WideString): WordBool; dispid 12;
		function EntryModeAddItem(const value: WideString): WordBool; dispid 13;
		function EntryModeRemoveItem(index: Integer): WordBool; dispid 14;
	end;

	// *********************************************************************//
	// Interface :   IICCResetDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2A075525-C89C-4153-8362-51E588EA999A}
	// *********************************************************************//
	IICCResetDataType = interface(IDispatch)
		['{2A075525-C89C-4153-8362-51E588EA999A}']
		function Get_ATRValue: PSafeArray; safecall;
		procedure Set_ATRValue(pRetVal: PSafeArray); safecall;
		function Get_CardStatusWords: PSafeArray; safecall;
		procedure Set_CardStatusWords(pRetVal: PSafeArray); safecall;
		function ATRValueSize: Integer; safecall;
		function ATRValueGetItem(index: Integer): Byte; safecall;
		function ATRValueSetItem(index: Integer; value: Byte): WordBool; safecall;
		function ATRValueAddItem(value: Byte): WordBool; safecall;
		function ATRValueRemoveItem(index: Integer): WordBool; safecall;
		function CardStatusWordsSize: Integer; safecall;
		function CardStatusWordsGetItem(index: Integer): Byte; safecall;
		function CardStatusWordsSetItem(index: Integer; value: Byte): WordBool; safecall;
		function CardStatusWordsAddItem(value: Byte): WordBool; safecall;
		function CardStatusWordsRemoveItem(index: Integer): WordBool; safecall;
		property ATRValue: PSafeArray read Get_ATRValue write Set_ATRValue;
		property CardStatusWords: PSafeArray read Get_CardStatusWords write Set_CardStatusWords;
	end;

	// *********************************************************************//
	// DispIntf :    IICCResetDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2A075525-C89C-4153-8362-51E588EA999A}
	// *********************************************************************//
	IICCResetDataTypeDisp = dispinterface
		['{2A075525-C89C-4153-8362-51E588EA999A}']
		property ATRValue: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 1;
		property CardStatusWords: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		function ATRValueSize: Integer; dispid 3;
		function ATRValueGetItem(index: Integer): Byte; dispid 4;
		function ATRValueSetItem(index: Integer; value: Byte): WordBool; dispid 5;
		function ATRValueAddItem(value: Byte): WordBool; dispid 6;
		function ATRValueRemoveItem(index: Integer): WordBool; dispid 7;
		function CardStatusWordsSize: Integer; dispid 8;
		function CardStatusWordsGetItem(index: Integer): Byte; dispid 9;
		function CardStatusWordsSetItem(index: Integer; value: Byte): WordBool; dispid 10;
		function CardStatusWordsAddItem(value: Byte): WordBool; dispid 11;
		function CardStatusWordsRemoveItem(index: Integer): WordBool; dispid 12;
	end;

	// *********************************************************************//
	// Interface :   ICardReaderPowerOffRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2E2E47EE-25AB-4AC5-A13C-0BFF82493175}
	// *********************************************************************//
	ICardReaderPowerOffRequestType = interface(IDispatch)
		['{2E2E47EE-25AB-4AC5-A13C-0BFF82493175}']
		function Get_DisplayOutput: IDisplayOutputType; safecall;
		procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
		function Get_MaxWaitingTime: WideString; safecall;
		procedure Set_MaxWaitingTime(const pRetVal: WideString); safecall;
		property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
		property MaxWaitingTime: WideString read Get_MaxWaitingTime write Set_MaxWaitingTime;
	end;

	// *********************************************************************//
	// DispIntf :    ICardReaderPowerOffRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2E2E47EE-25AB-4AC5-A13C-0BFF82493175}
	// *********************************************************************//
	ICardReaderPowerOffRequestTypeDisp = dispinterface
		['{2E2E47EE-25AB-4AC5-A13C-0BFF82493175}']
		property DisplayOutput: IDisplayOutputType dispid 1;
		property MaxWaitingTime: WideString dispid 2;
	end;

	// *********************************************************************//
	// Interface :   ICardReaderPowerOffResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {05F2CEE2-5106-43BA-B396-4261B4F8AAC3}
	// *********************************************************************//
	ICardReaderPowerOffResponseType = interface(IDispatch)
		['{05F2CEE2-5106-43BA-B396-4261B4F8AAC3}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
	end;

	// *********************************************************************//
	// DispIntf :    ICardReaderPowerOffResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {05F2CEE2-5106-43BA-B396-4261B4F8AAC3}
	// *********************************************************************//
	ICardReaderPowerOffResponseTypeDisp = dispinterface
		['{05F2CEE2-5106-43BA-B396-4261B4F8AAC3}']
		property Response: IResponseType dispid 1;
	end;

	// *********************************************************************//
	// Interface :   ICashHandlingDeviceType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4C449425-DF7A-468F-ADAC-9A17D62EB5CA}
	// *********************************************************************//
	ICashHandlingDeviceType = interface(IDispatch)
		['{4C449425-DF7A-468F-ADAC-9A17D62EB5CA}']
		function Get_CoinsOrBills: PSafeArray; safecall;
		procedure Set_CoinsOrBills(pRetVal: PSafeArray); safecall;
		function Get_CashHandlingOKFlag: WordBool; safecall;
		procedure Set_CashHandlingOKFlag(pRetVal: WordBool); safecall;
		function Get_Currency: WideString; safecall;
		procedure Set_Currency(const pRetVal: WideString); safecall;
		function CoinsOrBillsSize: Integer; safecall;
		function CoinsOrBillsGetItem(index: Integer): ICoinsOrBillsType; safecall;
		function CoinsOrBillsSetItem(index: Integer; const value: ICoinsOrBillsType): WordBool; safecall;
		function CoinsOrBillsAddItem(const value: ICoinsOrBillsType): WordBool; safecall;
		function CoinsOrBillsRemoveItem(index: Integer): WordBool; safecall;
		property CoinsOrBills: PSafeArray read Get_CoinsOrBills write Set_CoinsOrBills;
		property CashHandlingOKFlag: WordBool read Get_CashHandlingOKFlag write Set_CashHandlingOKFlag;
		property Currency: WideString read Get_Currency write Set_Currency;
	end;

	// *********************************************************************//
	// DispIntf :    ICashHandlingDeviceTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4C449425-DF7A-468F-ADAC-9A17D62EB5CA}
	// *********************************************************************//
	ICashHandlingDeviceTypeDisp = dispinterface
		['{4C449425-DF7A-468F-ADAC-9A17D62EB5CA}']
		property CoinsOrBills: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 1;
		property CashHandlingOKFlag: WordBool dispid 2;
		property Currency: WideString dispid 3;
		function CoinsOrBillsSize: Integer; dispid 4;
		function CoinsOrBillsGetItem(index: Integer): ICoinsOrBillsType; dispid 5;
		function CoinsOrBillsSetItem(index: Integer; const value: ICoinsOrBillsType): WordBool; dispid 6;
		function CoinsOrBillsAddItem(const value: ICoinsOrBillsType): WordBool; dispid 7;
		function CoinsOrBillsRemoveItem(index: Integer): WordBool; dispid 8;
	end;

	// *********************************************************************//
	// Interface :   ICoinsOrBillsType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {304F7E78-5552-4AEC-8AAC-036368858566}
	// *********************************************************************//
	ICoinsOrBillsType = interface(IDispatch)
		['{304F7E78-5552-4AEC-8AAC-036368858566}']
		function Get_UnitValue: Double; safecall;
		procedure Set_UnitValue(pRetVal: Double); safecall;
		function Get_Number: WideString; safecall;
		procedure Set_Number(const pRetVal: WideString); safecall;
		property UnitValue: Double read Get_UnitValue write Set_UnitValue;
		property Number: WideString read Get_Number write Set_Number;
	end;

	// *********************************************************************//
	// DispIntf :    ICoinsOrBillsTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {304F7E78-5552-4AEC-8AAC-036368858566}
	// *********************************************************************//
	ICoinsOrBillsTypeDisp = dispinterface
		['{304F7E78-5552-4AEC-8AAC-036368858566}']
		property UnitValue: Double dispid 1;
		property Number: WideString dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IDiagnosisRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F9900229-AC7F-41EE-B119-186F803316A0}
	// *********************************************************************//
	IDiagnosisRequestType = interface(IDispatch)
		['{F9900229-AC7F-41EE-B119-186F803316A0}']
		function Get_AcquirerID: PSafeArray; safecall;
		procedure Set_AcquirerID(pRetVal: PSafeArray); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_HostDiagnosisFlag: WordBool; safecall;
		procedure Set_HostDiagnosisFlag(pRetVal: WordBool); safecall;
		function AcquirerIDSize: Integer; safecall;
		function AcquirerIDGetItem(index: Integer): WideString; safecall;
		function AcquirerIDSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function AcquirerIDAddItem(const value: WideString): WordBool; safecall;
		function AcquirerIDRemoveItem(index: Integer): WordBool; safecall;
		property AcquirerID: PSafeArray read Get_AcquirerID write Set_AcquirerID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property HostDiagnosisFlag: WordBool read Get_HostDiagnosisFlag write Set_HostDiagnosisFlag;
	end;

	// *********************************************************************//
	// DispIntf :    IDiagnosisRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F9900229-AC7F-41EE-B119-186F803316A0}
	// *********************************************************************//
	IDiagnosisRequestTypeDisp = dispinterface
		['{F9900229-AC7F-41EE-B119-186F803316A0}']
		property AcquirerID: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property POIID: WideString dispid 3;
		property HostDiagnosisFlag: WordBool dispid 4;
		function AcquirerIDSize: Integer; dispid 5;
		function AcquirerIDGetItem(index: Integer): WideString; dispid 6;
		function AcquirerIDSetItem(index: Integer; const value: WideString): WordBool; dispid 7;
		function AcquirerIDAddItem(const value: WideString): WordBool; dispid 8;
		function AcquirerIDRemoveItem(index: Integer): WordBool; dispid 9;
	end;

	// *********************************************************************//
	// Interface :   IDiagnosisResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {A8B6AA97-EFE3-4A88-B117-07EF8A4626B9}
	// *********************************************************************//
	IDiagnosisResponseType = interface(IDispatch)
		['{A8B6AA97-EFE3-4A88-B117-07EF8A4626B9}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_LoggedSaleID: PSafeArray; safecall;
		procedure Set_LoggedSaleID(pRetVal: PSafeArray); safecall;
		function Get_POIStatus: IPOIStatusType; safecall;
		procedure _Set_POIStatus(const pRetVal: IPOIStatusType); safecall;
		function Get_HostStatus: PSafeArray; safecall;
		procedure Set_HostStatus(pRetVal: PSafeArray); safecall;
		function LoggedSaleIDSize: Integer; safecall;
		function LoggedSaleIDGetItem(index: Integer): WideString; safecall;
		function LoggedSaleIDSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function LoggedSaleIDAddItem(const value: WideString): WordBool; safecall;
		function LoggedSaleIDRemoveItem(index: Integer): WordBool; safecall;
		function HostStatusSize: Integer; safecall;
		function HostStatusGetItem(index: Integer): IHostStatusType; safecall;
		function HostStatusSetItem(index: Integer; const value: IHostStatusType): WordBool; safecall;
		function HostStatusAddItem(const value: IHostStatusType): WordBool; safecall;
		function HostStatusRemoveItem(index: Integer): WordBool; safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property LoggedSaleID: PSafeArray read Get_LoggedSaleID write Set_LoggedSaleID;
		property POIStatus: IPOIStatusType read Get_POIStatus write _Set_POIStatus;
		property HostStatus: PSafeArray read Get_HostStatus write Set_HostStatus;
	end;

	// *********************************************************************//
	// DispIntf :    IDiagnosisResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {A8B6AA97-EFE3-4A88-B117-07EF8A4626B9}
	// *********************************************************************//
	IDiagnosisResponseTypeDisp = dispinterface
		['{A8B6AA97-EFE3-4A88-B117-07EF8A4626B9}']
		property Response: IResponseType dispid 1;
		property LoggedSaleID: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property POIStatus: IPOIStatusType dispid 3;
		property HostStatus: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		function LoggedSaleIDSize: Integer; dispid 5;
		function LoggedSaleIDGetItem(index: Integer): WideString; dispid 6;
		function LoggedSaleIDSetItem(index: Integer; const value: WideString): WordBool; dispid 7;
		function LoggedSaleIDAddItem(const value: WideString): WordBool; dispid 8;
		function LoggedSaleIDRemoveItem(index: Integer): WordBool; dispid 9;
		function HostStatusSize: Integer; dispid 10;
		function HostStatusGetItem(index: Integer): IHostStatusType; dispid 11;
		function HostStatusSetItem(index: Integer; const value: IHostStatusType): WordBool; dispid 12;
		function HostStatusAddItem(const value: IHostStatusType): WordBool; dispid 13;
		function HostStatusRemoveItem(index: Integer): WordBool; dispid 14;
	end;

	// *********************************************************************//
	// Interface :   IPOIStatusType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {3E044915-7923-4E00-9AC6-EE83B38AB177}
	// *********************************************************************//
	IPOIStatusType = interface(IDispatch)
		['{3E044915-7923-4E00-9AC6-EE83B38AB177}']
		function Get_CashHandlingDevice: PSafeArray; safecall;
		procedure Set_CashHandlingDevice(pRetVal: PSafeArray); safecall;
		function Get_GlobalStatus: WideString; safecall;
		procedure Set_GlobalStatus(const pRetVal: WideString); safecall;
		function Get_SecurityOKFlag: WordBool; safecall;
		procedure Set_SecurityOKFlag(pRetVal: WordBool); safecall;
		function Get_SecurityOKFlagSpecified: WordBool; safecall;
		procedure Set_SecurityOKFlagSpecified(pRetVal: WordBool); safecall;
		function Get_PEDOKFlag: WordBool; safecall;
		procedure Set_PEDOKFlag(pRetVal: WordBool); safecall;
		function Get_PEDOKFlagSpecified: WordBool; safecall;
		procedure Set_PEDOKFlagSpecified(pRetVal: WordBool); safecall;
		function Get_CardReaderOKFlag: WordBool; safecall;
		procedure Set_CardReaderOKFlag(pRetVal: WordBool); safecall;
		function Get_CardReaderOKFlagSpecified: WordBool; safecall;
		procedure Set_CardReaderOKFlagSpecified(pRetVal: WordBool); safecall;
		function Get_PrinterStatus: WideString; safecall;
		procedure Set_PrinterStatus(const pRetVal: WideString); safecall;
		function Get_CommunicationOKFlag: WordBool; safecall;
		procedure Set_CommunicationOKFlag(pRetVal: WordBool); safecall;
		function Get_CommunicationOKFlagSpecified: WordBool; safecall;
		procedure Set_CommunicationOKFlagSpecified(pRetVal: WordBool); safecall;
		function Get_FraudPreventionFlag: WordBool; safecall;
		procedure Set_FraudPreventionFlag(pRetVal: WordBool); safecall;
		function Get_FraudPreventionFlagSpecified: WordBool; safecall;
		procedure Set_FraudPreventionFlagSpecified(pRetVal: WordBool); safecall;
		function CashHandlingDeviceSize: Integer; safecall;
		function CashHandlingDeviceGetItem(index: Integer): ICashHandlingDeviceType; safecall;
		function CashHandlingDeviceSetItem(index: Integer; const value: ICashHandlingDeviceType): WordBool; safecall;
		function CashHandlingDeviceAddItem(const value: ICashHandlingDeviceType): WordBool; safecall;
		function CashHandlingDeviceRemoveItem(index: Integer): WordBool; safecall;
		property CashHandlingDevice: PSafeArray read Get_CashHandlingDevice write Set_CashHandlingDevice;
		property GlobalStatus: WideString read Get_GlobalStatus write Set_GlobalStatus;
		property SecurityOKFlag: WordBool read Get_SecurityOKFlag write Set_SecurityOKFlag;
		property SecurityOKFlagSpecified: WordBool read Get_SecurityOKFlagSpecified write Set_SecurityOKFlagSpecified;
		property PEDOKFlag: WordBool read Get_PEDOKFlag write Set_PEDOKFlag;
		property PEDOKFlagSpecified: WordBool read Get_PEDOKFlagSpecified write Set_PEDOKFlagSpecified;
		property CardReaderOKFlag: WordBool read Get_CardReaderOKFlag write Set_CardReaderOKFlag;
		property CardReaderOKFlagSpecified: WordBool read Get_CardReaderOKFlagSpecified write Set_CardReaderOKFlagSpecified;
		property PrinterStatus: WideString read Get_PrinterStatus write Set_PrinterStatus;
		property CommunicationOKFlag: WordBool read Get_CommunicationOKFlag write Set_CommunicationOKFlag;
		property CommunicationOKFlagSpecified: WordBool read Get_CommunicationOKFlagSpecified write Set_CommunicationOKFlagSpecified;
		property FraudPreventionFlag: WordBool read Get_FraudPreventionFlag write Set_FraudPreventionFlag;
		property FraudPreventionFlagSpecified: WordBool read Get_FraudPreventionFlagSpecified write Set_FraudPreventionFlagSpecified;
	end;

	// *********************************************************************//
	// DispIntf :    IPOIStatusTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {3E044915-7923-4E00-9AC6-EE83B38AB177}
	// *********************************************************************//
	IPOIStatusTypeDisp = dispinterface
		['{3E044915-7923-4E00-9AC6-EE83B38AB177}']
		property CashHandlingDevice: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 1;
		property GlobalStatus: WideString dispid 2;
		property SecurityOKFlag: WordBool dispid 3;
		property SecurityOKFlagSpecified: WordBool dispid 4;
		property PEDOKFlag: WordBool dispid 5;
		property PEDOKFlagSpecified: WordBool dispid 6;
		property CardReaderOKFlag: WordBool dispid 7;
		property CardReaderOKFlagSpecified: WordBool dispid 8;
		property PrinterStatus: WideString dispid 9;
		property CommunicationOKFlag: WordBool dispid 10;
		property CommunicationOKFlagSpecified: WordBool dispid 11;
		property FraudPreventionFlag: WordBool dispid 12;
		property FraudPreventionFlagSpecified: WordBool dispid 13;
		function CashHandlingDeviceSize: Integer; dispid 14;
		function CashHandlingDeviceGetItem(index: Integer): ICashHandlingDeviceType; dispid 15;
		function CashHandlingDeviceSetItem(index: Integer; const value: ICashHandlingDeviceType): WordBool; dispid 16;
		function CashHandlingDeviceAddItem(const value: ICashHandlingDeviceType): WordBool; dispid 17;
		function CashHandlingDeviceRemoveItem(index: Integer): WordBool; dispid 18;
	end;

	// *********************************************************************//
	// Interface :   IHostStatusType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {11FAEEBC-68AF-4817-8664-59D021802657}
	// *********************************************************************//
	IHostStatusType = interface(IDispatch)
		['{11FAEEBC-68AF-4817-8664-59D021802657}']
		function Get_AcquirerID: WideString; safecall;
		procedure Set_AcquirerID(const pRetVal: WideString); safecall;
		function Get_IsReachableFlag: WordBool; safecall;
		procedure Set_IsReachableFlag(pRetVal: WordBool); safecall;
		property AcquirerID: WideString read Get_AcquirerID write Set_AcquirerID;
		property IsReachableFlag: WordBool read Get_IsReachableFlag write Set_IsReachableFlag;
	end;

	// *********************************************************************//
	// DispIntf :    IHostStatusTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {11FAEEBC-68AF-4817-8664-59D021802657}
	// *********************************************************************//
	IHostStatusTypeDisp = dispinterface
		['{11FAEEBC-68AF-4817-8664-59D021802657}']
		property AcquirerID: WideString dispid 2;
		property IsReachableFlag: WordBool dispid 3;
	end;

	// *********************************************************************//
	// Interface :   IEnableServiceRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {47266DE2-0560-429E-AA93-158BA3FD1A48}
	// *********************************************************************//
	IEnableServiceRequestType = interface(IDispatch)
		['{47266DE2-0560-429E-AA93-158BA3FD1A48}']
		function Get_ServicesEnabled: WideString; safecall;
		procedure Set_ServicesEnabled(const pRetVal: WideString); safecall;
		function Get_DisplayOutput: IDisplayOutputType; safecall;
		procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
		function Get_TransactionAction: WideString; safecall;
		procedure Set_TransactionAction(const pRetVal: WideString); safecall;
		property ServicesEnabled: WideString read Get_ServicesEnabled write Set_ServicesEnabled;
		property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
		property TransactionAction: WideString read Get_TransactionAction write Set_TransactionAction;
	end;

	// *********************************************************************//
	// DispIntf :    IEnableServiceRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {47266DE2-0560-429E-AA93-158BA3FD1A48}
	// *********************************************************************//
	IEnableServiceRequestTypeDisp = dispinterface
		['{47266DE2-0560-429E-AA93-158BA3FD1A48}']
		property ServicesEnabled: WideString dispid 1;
		property DisplayOutput: IDisplayOutputType dispid 2;
		property TransactionAction: WideString dispid 3;
	end;

	// *********************************************************************//
	// Interface :   IEnableServiceResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {CC4D39B1-2678-483C-9C98-582893B1CED7}
	// *********************************************************************//
	IEnableServiceResponseType = interface(IDispatch)
		['{CC4D39B1-2678-483C-9C98-582893B1CED7}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
	end;

	// *********************************************************************//
	// DispIntf :    IEnableServiceResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {CC4D39B1-2678-483C-9C98-582893B1CED7}
	// *********************************************************************//
	IEnableServiceResponseTypeDisp = dispinterface
		['{CC4D39B1-2678-483C-9C98-582893B1CED7}']
		property Response: IResponseType dispid 1;
	end;

	// *********************************************************************//
	// Interface :   IEventNotificationType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {EF05DABF-0F51-4F14-A42C-153268736263}
	// *********************************************************************//
	IEventNotificationType = interface(IDispatch)
		['{EF05DABF-0F51-4F14-A42C-153268736263}']
		function Get_EventDetails: WideString; safecall;
		procedure Set_EventDetails(const pRetVal: WideString); safecall;
		function Get_RejectedMessage: PSafeArray; safecall;
		procedure Set_RejectedMessage(pRetVal: PSafeArray); safecall;
		function Get_DisplayOutput: IDisplayOutputType; safecall;
		procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
		function Get_TimeStamp: WideString; safecall;
		procedure Set_TimeStamp(const pRetVal: WideString); safecall;
		function Get_EventToNotify: WideString; safecall;
		procedure Set_EventToNotify(const pRetVal: WideString); safecall;
		function Get_MaintenanceRequiredFlag: WordBool; safecall;
		procedure Set_MaintenanceRequiredFlag(pRetVal: WordBool); safecall;
		function Get_CustomerLanguage: WideString; safecall;
		procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
		function RejectedMessageSize: Integer; safecall;
		function RejectedMessageGetItem(index: Integer): Byte; safecall;
		function RejectedMessageSetItem(index: Integer; value: Byte): WordBool; safecall;
		function RejectedMessageAddItem(value: Byte): WordBool; safecall;
		function RejectedMessageRemoveItem(index: Integer): WordBool; safecall;
		property EventDetails: WideString read Get_EventDetails write Set_EventDetails;
		property RejectedMessage: PSafeArray read Get_RejectedMessage write Set_RejectedMessage;
		property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
		property TimeStamp: WideString read Get_TimeStamp write Set_TimeStamp;
		property EventToNotify: WideString read Get_EventToNotify write Set_EventToNotify;
		property MaintenanceRequiredFlag: WordBool read Get_MaintenanceRequiredFlag write Set_MaintenanceRequiredFlag;
		property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
	end;

	// *********************************************************************//
	// DispIntf :    IEventNotificationTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {EF05DABF-0F51-4F14-A42C-153268736263}
	// *********************************************************************//
	IEventNotificationTypeDisp = dispinterface
		['{EF05DABF-0F51-4F14-A42C-153268736263}']
		property EventDetails: WideString dispid 2;
		property RejectedMessage: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		property DisplayOutput: IDisplayOutputType dispid 4;
		property TimeStamp: WideString dispid 5;
		property EventToNotify: WideString dispid 6;
		property MaintenanceRequiredFlag: WordBool dispid 7;
		property CustomerLanguage: WideString dispid 8;
		function RejectedMessageSize: Integer; dispid 9;
		function RejectedMessageGetItem(index: Integer): Byte; dispid 10;
		function RejectedMessageSetItem(index: Integer; value: Byte): WordBool; dispid 11;
		function RejectedMessageAddItem(value: Byte): WordBool; dispid 12;
		function RejectedMessageRemoveItem(index: Integer): WordBool; dispid 13;
	end;

	// *********************************************************************//
	// Interface :   IGetTotalsRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {A637F421-7A0B-42CD-90B6-AAA3985B569D}
	// *********************************************************************//
	IGetTotalsRequestType = interface(IDispatch)
		['{A637F421-7A0B-42CD-90B6-AAA3985B569D}']
		function Get_TotalDetails: WideString; safecall;
		procedure Set_TotalDetails(const pRetVal: WideString); safecall;
		function Get_TotalFilter: ITotalFilterType; safecall;
		procedure _Set_TotalFilter(const pRetVal: ITotalFilterType); safecall;
		property TotalDetails: WideString read Get_TotalDetails write Set_TotalDetails;
		property TotalFilter: ITotalFilterType read Get_TotalFilter write _Set_TotalFilter;
	end;

	// *********************************************************************//
	// DispIntf :    IGetTotalsRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {A637F421-7A0B-42CD-90B6-AAA3985B569D}
	// *********************************************************************//
	IGetTotalsRequestTypeDisp = dispinterface
		['{A637F421-7A0B-42CD-90B6-AAA3985B569D}']
		property TotalDetails: WideString dispid 1;
		property TotalFilter: ITotalFilterType dispid 2;
	end;

	// *********************************************************************//
	// Interface :   ITotalFilterType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {9203420E-CB0D-4A08-9C60-BBC42344E048}
	// *********************************************************************//
	ITotalFilterType = interface(IDispatch)
		['{9203420E-CB0D-4A08-9C60-BBC42344E048}']
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_OperatorID: WideString; safecall;
		procedure Set_OperatorID(const pRetVal: WideString); safecall;
		function Get_ShiftNumber: WideString; safecall;
		procedure Set_ShiftNumber(const pRetVal: WideString); safecall;
		function Get_TotalsGroupID: WideString; safecall;
		procedure Set_TotalsGroupID(const pRetVal: WideString); safecall;
		property POIID: WideString read Get_POIID write Set_POIID;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property OperatorID: WideString read Get_OperatorID write Set_OperatorID;
		property ShiftNumber: WideString read Get_ShiftNumber write Set_ShiftNumber;
		property TotalsGroupID: WideString read Get_TotalsGroupID write Set_TotalsGroupID;
	end;

	// *********************************************************************//
	// DispIntf :    ITotalFilterTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {9203420E-CB0D-4A08-9C60-BBC42344E048}
	// *********************************************************************//
	ITotalFilterTypeDisp = dispinterface
		['{9203420E-CB0D-4A08-9C60-BBC42344E048}']
		property POIID: WideString dispid 1;
		property SaleID: WideString dispid 2;
		property OperatorID: WideString dispid 3;
		property ShiftNumber: WideString dispid 4;
		property TotalsGroupID: WideString dispid 5;
	end;

	// *********************************************************************//
	// Interface :   IGetTotalsResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D8D4B96C-A142-4F17-BF6E-91C3DF3C5000}
	// *********************************************************************//
	IGetTotalsResponseType = interface(IDispatch)
		['{D8D4B96C-A142-4F17-BF6E-91C3DF3C5000}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_TransactionTotals: PSafeArray; safecall;
		procedure Set_TransactionTotals(pRetVal: PSafeArray); safecall;
		function Get_POIReconciliationID: WideString; safecall;
		procedure Set_POIReconciliationID(const pRetVal: WideString); safecall;
		function TransactionTotalsSize: Integer; safecall;
		function TransactionTotalsGetItem(index: Integer): ITransactionTotalsType; safecall;
		function TransactionTotalsSetItem(index: Integer; const value: ITransactionTotalsType): WordBool; safecall;
		function TransactionTotalsAddItem(const value: ITransactionTotalsType): WordBool; safecall;
		function TransactionTotalsRemoveItem(index: Integer): WordBool; safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property TransactionTotals: PSafeArray read Get_TransactionTotals write Set_TransactionTotals;
		property POIReconciliationID: WideString read Get_POIReconciliationID write Set_POIReconciliationID;
	end;

	// *********************************************************************//
	// DispIntf :    IGetTotalsResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D8D4B96C-A142-4F17-BF6E-91C3DF3C5000}
	// *********************************************************************//
	IGetTotalsResponseTypeDisp = dispinterface
		['{D8D4B96C-A142-4F17-BF6E-91C3DF3C5000}']
		property Response: IResponseType dispid 1;
		property TransactionTotals: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property POIReconciliationID: WideString dispid 3;
		function TransactionTotalsSize: Integer; dispid 4;
		function TransactionTotalsGetItem(index: Integer): ITransactionTotalsType; dispid 5;
		function TransactionTotalsSetItem(index: Integer; const value: ITransactionTotalsType): WordBool; dispid 6;
		function TransactionTotalsAddItem(const value: ITransactionTotalsType): WordBool; dispid 7;
		function TransactionTotalsRemoveItem(index: Integer): WordBool; dispid 8;
	end;

	// *********************************************************************//
	// Interface :   ITransactionTotalsType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {8DCFEAA6-0387-45C0-BC04-DAAC66FA6F76}
	// *********************************************************************//
	ITransactionTotalsType = interface(IDispatch)
		['{8DCFEAA6-0387-45C0-BC04-DAAC66FA6F76}']
		function Get_PaymentTotals: PSafeArray; safecall;
		procedure Set_PaymentTotals(pRetVal: PSafeArray); safecall;
		function Get_LoyaltyTotals: PSafeArray; safecall;
		procedure Set_LoyaltyTotals(pRetVal: PSafeArray); safecall;
		function Get_PaymentInstrumentType: WideString; safecall;
		procedure Set_PaymentInstrumentType(const pRetVal: WideString); safecall;
		function Get_AcquirerID: WideString; safecall;
		procedure Set_AcquirerID(const pRetVal: WideString); safecall;
		function Get_ErrorCondition: WideString; safecall;
		procedure Set_ErrorCondition(const pRetVal: WideString); safecall;
		function Get_HostReconciliationID: WideString; safecall;
		procedure Set_HostReconciliationID(const pRetVal: WideString); safecall;
		function Get_CardBrand: WideString; safecall;
		procedure Set_CardBrand(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_OperatorID: WideString; safecall;
		procedure Set_OperatorID(const pRetVal: WideString); safecall;
		function Get_ShiftNumber: WideString; safecall;
		procedure Set_ShiftNumber(const pRetVal: WideString); safecall;
		function Get_TotalsGroupID: WideString; safecall;
		procedure Set_TotalsGroupID(const pRetVal: WideString); safecall;
		function Get_PaymentCurrency: WideString; safecall;
		procedure Set_PaymentCurrency(const pRetVal: WideString); safecall;
		function Get_LoyaltyUnit: WideString; safecall;
		procedure Set_LoyaltyUnit(const pRetVal: WideString); safecall;
		function Get_LoyaltyCurrency: WideString; safecall;
		procedure Set_LoyaltyCurrency(const pRetVal: WideString); safecall;
		function PaymentTotalsSize: Integer; safecall;
		function PaymentTotalsGetItem(index: Integer): IPaymentTotalsType; safecall;
		function PaymentTotalsSetItem(index: Integer; const value: IPaymentTotalsType): WordBool; safecall;
		function PaymentTotalsAddItem(const value: IPaymentTotalsType): WordBool; safecall;
		function PaymentTotalsRemoveItem(index: Integer): WordBool; safecall;
		function LoyaltyTotalsSize: Integer; safecall;
		function LoyaltyTotalsGetItem(index: Integer): ILoyaltyTotalsType; safecall;
		function LoyaltyTotalsSetItem(index: Integer; const value: ILoyaltyTotalsType): WordBool; safecall;
		function LoyaltyTotalsAddItem(const value: ILoyaltyTotalsType): WordBool; safecall;
		function LoyaltyTotalsRemoveItem(index: Integer): WordBool; safecall;
		property PaymentTotals: PSafeArray read Get_PaymentTotals write Set_PaymentTotals;
		property LoyaltyTotals: PSafeArray read Get_LoyaltyTotals write Set_LoyaltyTotals;
		property PaymentInstrumentType: WideString read Get_PaymentInstrumentType write Set_PaymentInstrumentType;
		property AcquirerID: WideString read Get_AcquirerID write Set_AcquirerID;
		property ErrorCondition: WideString read Get_ErrorCondition write Set_ErrorCondition;
		property HostReconciliationID: WideString read Get_HostReconciliationID write Set_HostReconciliationID;
		property CardBrand: WideString read Get_CardBrand write Set_CardBrand;
		property POIID: WideString read Get_POIID write Set_POIID;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property OperatorID: WideString read Get_OperatorID write Set_OperatorID;
		property ShiftNumber: WideString read Get_ShiftNumber write Set_ShiftNumber;
		property TotalsGroupID: WideString read Get_TotalsGroupID write Set_TotalsGroupID;
		property PaymentCurrency: WideString read Get_PaymentCurrency write Set_PaymentCurrency;
		property LoyaltyUnit: WideString read Get_LoyaltyUnit write Set_LoyaltyUnit;
		property LoyaltyCurrency: WideString read Get_LoyaltyCurrency write Set_LoyaltyCurrency;
	end;

	// *********************************************************************//
	// DispIntf :    ITransactionTotalsTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {8DCFEAA6-0387-45C0-BC04-DAAC66FA6F76}
	// *********************************************************************//
	ITransactionTotalsTypeDisp = dispinterface
		['{8DCFEAA6-0387-45C0-BC04-DAAC66FA6F76}']
		property PaymentTotals: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property LoyaltyTotals: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		property PaymentInstrumentType: WideString dispid 4;
		property AcquirerID: WideString dispid 5;
		property ErrorCondition: WideString dispid 6;
		property HostReconciliationID: WideString dispid 7;
		property CardBrand: WideString dispid 8;
		property POIID: WideString dispid 9;
		property SaleID: WideString dispid 10;
		property OperatorID: WideString dispid 11;
		property ShiftNumber: WideString dispid 12;
		property TotalsGroupID: WideString dispid 13;
		property PaymentCurrency: WideString dispid 14;
		property LoyaltyUnit: WideString dispid 15;
		property LoyaltyCurrency: WideString dispid 16;
		function PaymentTotalsSize: Integer; dispid 17;
		function PaymentTotalsGetItem(index: Integer): IPaymentTotalsType; dispid 18;
		function PaymentTotalsSetItem(index: Integer; const value: IPaymentTotalsType): WordBool; dispid 19;
		function PaymentTotalsAddItem(const value: IPaymentTotalsType): WordBool; dispid 20;
		function PaymentTotalsRemoveItem(index: Integer): WordBool; dispid 21;
		function LoyaltyTotalsSize: Integer; dispid 22;
		function LoyaltyTotalsGetItem(index: Integer): ILoyaltyTotalsType; dispid 23;
		function LoyaltyTotalsSetItem(index: Integer; const value: ILoyaltyTotalsType): WordBool; dispid 24;
		function LoyaltyTotalsAddItem(const value: ILoyaltyTotalsType): WordBool; dispid 25;
		function LoyaltyTotalsRemoveItem(index: Integer): WordBool; dispid 26;
	end;

	// *********************************************************************//
	// Interface :   IPaymentTotalsType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {E380FFE0-9B9C-49B5-A85F-F70E4EEF6194}
	// *********************************************************************//
	IPaymentTotalsType = interface(IDispatch)
		['{E380FFE0-9B9C-49B5-A85F-F70E4EEF6194}']
		function Get_TransactionType: WideString; safecall;
		procedure Set_TransactionType(const pRetVal: WideString); safecall;
		function Get_TransactionCount: WideString; safecall;
		procedure Set_TransactionCount(const pRetVal: WideString); safecall;
		function Get_TransactionAmount: Double; safecall;
		procedure Set_TransactionAmount(pRetVal: Double); safecall;
		property TransactionType: WideString read Get_TransactionType write Set_TransactionType;
		property TransactionCount: WideString read Get_TransactionCount write Set_TransactionCount;
		property TransactionAmount: Double read Get_TransactionAmount write Set_TransactionAmount;
	end;

	// *********************************************************************//
	// DispIntf :    IPaymentTotalsTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {E380FFE0-9B9C-49B5-A85F-F70E4EEF6194}
	// *********************************************************************//
	IPaymentTotalsTypeDisp = dispinterface
		['{E380FFE0-9B9C-49B5-A85F-F70E4EEF6194}']
		property TransactionType: WideString dispid 1;
		property TransactionCount: WideString dispid 2;
		property TransactionAmount: Double dispid 3;
	end;

	// *********************************************************************//
	// Interface :   ILoyaltyTotalsType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {782F33DE-2958-4256-9C4F-98F0E4526F0E}
	// *********************************************************************//
	ILoyaltyTotalsType = interface(IDispatch)
		['{782F33DE-2958-4256-9C4F-98F0E4526F0E}']
		function Get_TransactionType: WideString; safecall;
		procedure Set_TransactionType(const pRetVal: WideString); safecall;
		function Get_TransactionCount: WideString; safecall;
		procedure Set_TransactionCount(const pRetVal: WideString); safecall;
		function Get_TransactionAmount: Double; safecall;
		procedure Set_TransactionAmount(pRetVal: Double); safecall;
		property TransactionType: WideString read Get_TransactionType write Set_TransactionType;
		property TransactionCount: WideString read Get_TransactionCount write Set_TransactionCount;
		property TransactionAmount: Double read Get_TransactionAmount write Set_TransactionAmount;
	end;

	// *********************************************************************//
	// DispIntf :    ILoyaltyTotalsTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {782F33DE-2958-4256-9C4F-98F0E4526F0E}
	// *********************************************************************//
	ILoyaltyTotalsTypeDisp = dispinterface
		['{782F33DE-2958-4256-9C4F-98F0E4526F0E}']
		property TransactionType: WideString dispid 1;
		property TransactionCount: WideString dispid 2;
		property TransactionAmount: Double dispid 3;
	end;

	// *********************************************************************//
	// Interface :   IInputType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {1E30591B-9C48-4EBB-830C-7029BC0CF5C4}
	// *********************************************************************//
	IInputType = interface(IDispatch)
		['{1E30591B-9C48-4EBB-830C-7029BC0CF5C4}']
		function Get_ConfirmedFlag: WordBool; safecall;
		procedure Set_ConfirmedFlag(pRetVal: WordBool); safecall;
		function Get_ConfirmedFlagSpecified: WordBool; safecall;
		procedure Set_ConfirmedFlagSpecified(pRetVal: WordBool); safecall;
		function Get_FunctionKey: WideString; safecall;
		procedure Set_FunctionKey(const pRetVal: WideString); safecall;
		function Get_TextInput: WideString; safecall;
		procedure Set_TextInput(const pRetVal: WideString); safecall;
		function Get_DigitInput: WideString; safecall;
		procedure Set_DigitInput(const pRetVal: WideString); safecall;
		function Get_Password: IContentInformationType; safecall;
		procedure _Set_Password(const pRetVal: IContentInformationType); safecall;
		function Get_MenuEntryNumber: WideString; safecall;
		procedure Set_MenuEntryNumber(const pRetVal: WideString); safecall;
		function Get_InputCommand: WideString; safecall;
		procedure Set_InputCommand(const pRetVal: WideString); safecall;
		property ConfirmedFlag: WordBool read Get_ConfirmedFlag write Set_ConfirmedFlag;
		property ConfirmedFlagSpecified: WordBool read Get_ConfirmedFlagSpecified write Set_ConfirmedFlagSpecified;
		property FunctionKey: WideString read Get_FunctionKey write Set_FunctionKey;
		property TextInput: WideString read Get_TextInput write Set_TextInput;
		property DigitInput: WideString read Get_DigitInput write Set_DigitInput;
		property Password: IContentInformationType read Get_Password write _Set_Password;
		property MenuEntryNumber: WideString read Get_MenuEntryNumber write Set_MenuEntryNumber;
		property InputCommand: WideString read Get_InputCommand write Set_InputCommand;
	end;

	// *********************************************************************//
	// DispIntf :    IInputTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {1E30591B-9C48-4EBB-830C-7029BC0CF5C4}
	// *********************************************************************//
	IInputTypeDisp = dispinterface
		['{1E30591B-9C48-4EBB-830C-7029BC0CF5C4}']
		property ConfirmedFlag: WordBool dispid 1;
		property ConfirmedFlagSpecified: WordBool dispid 2;
		property FunctionKey: WideString dispid 3;
		property TextInput: WideString dispid 4;
		property DigitInput: WideString dispid 5;
		property Password: IContentInformationType dispid 6;
		property MenuEntryNumber: WideString dispid 7;
		property InputCommand: WideString dispid 8;
	end;

	// *********************************************************************//
	// Interface :   IInputDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {071BF5D3-0E94-40BA-8577-959D8B724B17}
	// *********************************************************************//
	IInputDataType = interface(IDispatch)
		['{071BF5D3-0E94-40BA-8577-959D8B724B17}']
		function Get_DefaultInputString: WideString; safecall;
		procedure Set_DefaultInputString(const pRetVal: WideString); safecall;
		function Get_StringMask: WideString; safecall;
		procedure Set_StringMask(const pRetVal: WideString); safecall;
		function Get_Device: WideString; safecall;
		procedure Set_Device(const pRetVal: WideString); safecall;
		function Get_InfoQualify: WideString; safecall;
		procedure Set_InfoQualify(const pRetVal: WideString); safecall;
		function Get_InputCommand: WideString; safecall;
		procedure Set_InputCommand(const pRetVal: WideString); safecall;
		function Get_NotifyCardInputFlag: WordBool; safecall;
		procedure Set_NotifyCardInputFlag(pRetVal: WordBool); safecall;
		function Get_MaxInputTime: WideString; safecall;
		procedure Set_MaxInputTime(const pRetVal: WideString); safecall;
		function Get_ImmediateResponseFlag: WordBool; safecall;
		procedure Set_ImmediateResponseFlag(pRetVal: WordBool); safecall;
		function Get_MinLength: WideString; safecall;
		procedure Set_MinLength(const pRetVal: WideString); safecall;
		function Get_MaxLength: WideString; safecall;
		procedure Set_MaxLength(const pRetVal: WideString); safecall;
		function Get_MaxDecimalLength: WideString; safecall;
		procedure Set_MaxDecimalLength(const pRetVal: WideString); safecall;
		function Get_WaitUserValidationFlag: WordBool; safecall;
		procedure Set_WaitUserValidationFlag(pRetVal: WordBool); safecall;
		function Get_FromRightToLeftFlag: WordBool; safecall;
		procedure Set_FromRightToLeftFlag(pRetVal: WordBool); safecall;
		function Get_MaskCharactersFlag: WordBool; safecall;
		procedure Set_MaskCharactersFlag(pRetVal: WordBool); safecall;
		function Get_BeepKeyFlag: WordBool; safecall;
		procedure Set_BeepKeyFlag(pRetVal: WordBool); safecall;
		function Get_GlobalCorrectionFlag: WordBool; safecall;
		procedure Set_GlobalCorrectionFlag(pRetVal: WordBool); safecall;
		function Get_DisableCancelFlag: WordBool; safecall;
		procedure Set_DisableCancelFlag(pRetVal: WordBool); safecall;
		function Get_DisableCorrectFlag: WordBool; safecall;
		procedure Set_DisableCorrectFlag(pRetVal: WordBool); safecall;
		function Get_DisableValidFlag: WordBool; safecall;
		procedure Set_DisableValidFlag(pRetVal: WordBool); safecall;
		function Get_MenuBackFlag: WordBool; safecall;
		procedure Set_MenuBackFlag(pRetVal: WordBool); safecall;
		property DefaultInputString: WideString read Get_DefaultInputString write Set_DefaultInputString;
		property StringMask: WideString read Get_StringMask write Set_StringMask;
		property Device: WideString read Get_Device write Set_Device;
		property InfoQualify: WideString read Get_InfoQualify write Set_InfoQualify;
		property InputCommand: WideString read Get_InputCommand write Set_InputCommand;
		property NotifyCardInputFlag: WordBool read Get_NotifyCardInputFlag write Set_NotifyCardInputFlag;
		property MaxInputTime: WideString read Get_MaxInputTime write Set_MaxInputTime;
		property ImmediateResponseFlag: WordBool read Get_ImmediateResponseFlag write Set_ImmediateResponseFlag;
		property MinLength: WideString read Get_MinLength write Set_MinLength;
		property MaxLength: WideString read Get_MaxLength write Set_MaxLength;
		property MaxDecimalLength: WideString read Get_MaxDecimalLength write Set_MaxDecimalLength;
		property WaitUserValidationFlag: WordBool read Get_WaitUserValidationFlag write Set_WaitUserValidationFlag;
		property FromRightToLeftFlag: WordBool read Get_FromRightToLeftFlag write Set_FromRightToLeftFlag;
		property MaskCharactersFlag: WordBool read Get_MaskCharactersFlag write Set_MaskCharactersFlag;
		property BeepKeyFlag: WordBool read Get_BeepKeyFlag write Set_BeepKeyFlag;
		property GlobalCorrectionFlag: WordBool read Get_GlobalCorrectionFlag write Set_GlobalCorrectionFlag;
		property DisableCancelFlag: WordBool read Get_DisableCancelFlag write Set_DisableCancelFlag;
		property DisableCorrectFlag: WordBool read Get_DisableCorrectFlag write Set_DisableCorrectFlag;
		property DisableValidFlag: WordBool read Get_DisableValidFlag write Set_DisableValidFlag;
		property MenuBackFlag: WordBool read Get_MenuBackFlag write Set_MenuBackFlag;
	end;

	// *********************************************************************//
	// DispIntf :    IInputDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {071BF5D3-0E94-40BA-8577-959D8B724B17}
	// *********************************************************************//
	IInputDataTypeDisp = dispinterface
		['{071BF5D3-0E94-40BA-8577-959D8B724B17}']
		property DefaultInputString: WideString dispid 2;
		property StringMask: WideString dispid 3;
		property Device: WideString dispid 4;
		property InfoQualify: WideString dispid 5;
		property InputCommand: WideString dispid 6;
		property NotifyCardInputFlag: WordBool dispid 7;
		property MaxInputTime: WideString dispid 8;
		property ImmediateResponseFlag: WordBool dispid 9;
		property MinLength: WideString dispid 10;
		property MaxLength: WideString dispid 11;
		property MaxDecimalLength: WideString dispid 12;
		property WaitUserValidationFlag: WordBool dispid 13;
		property FromRightToLeftFlag: WordBool dispid 14;
		property MaskCharactersFlag: WordBool dispid 15;
		property BeepKeyFlag: WordBool dispid 16;
		property GlobalCorrectionFlag: WordBool dispid 17;
		property DisableCancelFlag: WordBool dispid 18;
		property DisableCorrectFlag: WordBool dispid 19;
		property DisableValidFlag: WordBool dispid 20;
		property MenuBackFlag: WordBool dispid 21;
	end;

	// *********************************************************************//
	// Interface :   IInputRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {A630E6A9-BBAB-49CF-A750-DE28246D2B0A}
	// *********************************************************************//
	IInputRequestType = interface(IDispatch)
		['{A630E6A9-BBAB-49CF-A750-DE28246D2B0A}']
		function Get_DisplayOutput: IDisplayOutputType; safecall;
		procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
		function Get_InputData: IInputDataType; safecall;
		procedure _Set_InputData(const pRetVal: IInputDataType); safecall;
		property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
		property InputData: IInputDataType read Get_InputData write _Set_InputData;
	end;

	// *********************************************************************//
	// DispIntf :    IInputRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {A630E6A9-BBAB-49CF-A750-DE28246D2B0A}
	// *********************************************************************//
	IInputRequestTypeDisp = dispinterface
		['{A630E6A9-BBAB-49CF-A750-DE28246D2B0A}']
		property DisplayOutput: IDisplayOutputType dispid 1;
		property InputData: IInputDataType dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IInputResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {607D43D8-73A2-4E9D-8C7E-A312D48B1996}
	// *********************************************************************//
	IInputResponseType = interface(IDispatch)
		['{607D43D8-73A2-4E9D-8C7E-A312D48B1996}']
		function Get_OutputResult: IOutputResultType; safecall;
		procedure _Set_OutputResult(const pRetVal: IOutputResultType); safecall;
		function Get_InputResult: IInputResultType; safecall;
		procedure _Set_InputResult(const pRetVal: IInputResultType); safecall;
		property OutputResult: IOutputResultType read Get_OutputResult write _Set_OutputResult;
		property InputResult: IInputResultType read Get_InputResult write _Set_InputResult;
	end;

	// *********************************************************************//
	// DispIntf :    IInputResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {607D43D8-73A2-4E9D-8C7E-A312D48B1996}
	// *********************************************************************//
	IInputResponseTypeDisp = dispinterface
		['{607D43D8-73A2-4E9D-8C7E-A312D48B1996}']
		property OutputResult: IOutputResultType dispid 1;
		property InputResult: IInputResultType dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IInputResultType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {358A7E4F-4C0A-418B-B4F1-107C8D2D77D6}
	// *********************************************************************//
	IInputResultType = interface(IDispatch)
		['{358A7E4F-4C0A-418B-B4F1-107C8D2D77D6}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_Input: IInputType; safecall;
		procedure _Set_Input(const pRetVal: IInputType); safecall;
		function Get_Device: WideString; safecall;
		procedure Set_Device(const pRetVal: WideString); safecall;
		function Get_InfoQualify: WideString; safecall;
		procedure Set_InfoQualify(const pRetVal: WideString); safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property Input: IInputType read Get_Input write _Set_Input;
		property Device: WideString read Get_Device write Set_Device;
		property InfoQualify: WideString read Get_InfoQualify write Set_InfoQualify;
	end;

	// *********************************************************************//
	// DispIntf :    IInputResultTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {358A7E4F-4C0A-418B-B4F1-107C8D2D77D6}
	// *********************************************************************//
	IInputResultTypeDisp = dispinterface
		['{358A7E4F-4C0A-418B-B4F1-107C8D2D77D6}']
		property Response: IResponseType dispid 1;
		property Input: IInputType dispid 2;
		property Device: WideString dispid 3;
		property InfoQualify: WideString dispid 4;
	end;

	// *********************************************************************//
	// Interface :   IInputUpdateType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {69FD7961-D00B-4552-98B3-E41FFEA50B5F}
	// *********************************************************************//
	IInputUpdateType = interface(IDispatch)
		['{69FD7961-D00B-4552-98B3-E41FFEA50B5F}']
		function Get_MessageReference: IMessageReferenceType; safecall;
		procedure _Set_MessageReference(const pRetVal: IMessageReferenceType); safecall;
		function Get_OutputContent: IOutputContentType; safecall;
		procedure _Set_OutputContent(const pRetVal: IOutputContentType); safecall;
		function Get_MenuEntry: PSafeArray; safecall;
		procedure Set_MenuEntry(pRetVal: PSafeArray); safecall;
		function Get_OutputSignature: PSafeArray; safecall;
		procedure Set_OutputSignature(pRetVal: PSafeArray); safecall;
		function Get_MinLength: WideString; safecall;
		procedure Set_MinLength(const pRetVal: WideString); safecall;
		function Get_MaxLength: WideString; safecall;
		procedure Set_MaxLength(const pRetVal: WideString); safecall;
		function Get_MaxDecimalLength: WideString; safecall;
		procedure Set_MaxDecimalLength(const pRetVal: WideString); safecall;
		function MenuEntrySize: Integer; safecall;
		function MenuEntryGetItem(index: Integer): IMenuEntryType; safecall;
		function MenuEntrySetItem(index: Integer; const value: IMenuEntryType): WordBool; safecall;
		function MenuEntryAddItem(const value: IMenuEntryType): WordBool; safecall;
		function MenuEntryRemoveItem(index: Integer): WordBool; safecall;
		function OutputSignatureSize: Integer; safecall;
		function OutputSignatureGetItem(index: Integer): Byte; safecall;
		function OutputSignatureSetItem(index: Integer; value: Byte): WordBool; safecall;
		function OutputSignatureAddItem(value: Byte): WordBool; safecall;
		function OutputSignatureRemoveItem(index: Integer): WordBool; safecall;
		property MessageReference: IMessageReferenceType read Get_MessageReference write _Set_MessageReference;
		property OutputContent: IOutputContentType read Get_OutputContent write _Set_OutputContent;
		property MenuEntry: PSafeArray read Get_MenuEntry write Set_MenuEntry;
		property OutputSignature: PSafeArray read Get_OutputSignature write Set_OutputSignature;
		property MinLength: WideString read Get_MinLength write Set_MinLength;
		property MaxLength: WideString read Get_MaxLength write Set_MaxLength;
		property MaxDecimalLength: WideString read Get_MaxDecimalLength write Set_MaxDecimalLength;
	end;

	// *********************************************************************//
	// DispIntf :    IInputUpdateTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {69FD7961-D00B-4552-98B3-E41FFEA50B5F}
	// *********************************************************************//
	IInputUpdateTypeDisp = dispinterface
		['{69FD7961-D00B-4552-98B3-E41FFEA50B5F}']
		property MessageReference: IMessageReferenceType dispid 1;
		property OutputContent: IOutputContentType dispid 2;
		property MenuEntry: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		property OutputSignature: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		property MinLength: WideString dispid 5;
		property MaxLength: WideString dispid 6;
		property MaxDecimalLength: WideString dispid 7;
		function MenuEntrySize: Integer; dispid 8;
		function MenuEntryGetItem(index: Integer): IMenuEntryType; dispid 9;
		function MenuEntrySetItem(index: Integer; const value: IMenuEntryType): WordBool; dispid 10;
		function MenuEntryAddItem(const value: IMenuEntryType): WordBool; dispid 11;
		function MenuEntryRemoveItem(index: Integer): WordBool; dispid 12;
		function OutputSignatureSize: Integer; dispid 13;
		function OutputSignatureGetItem(index: Integer): Byte; dispid 14;
		function OutputSignatureSetItem(index: Integer; value: Byte): WordBool; dispid 15;
		function OutputSignatureAddItem(value: Byte): WordBool; dispid 16;
		function OutputSignatureRemoveItem(index: Integer): WordBool; dispid 17;
	end;

	// *********************************************************************//
	// Interface :   ILoginRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {EA819EB0-AE2D-4347-9FAF-1833F97A7BDB}
	// *********************************************************************//
	ILoginRequestType = interface(IDispatch)
		['{EA819EB0-AE2D-4347-9FAF-1833F97A7BDB}']
		function Get_DateTime: WideString; safecall;
		procedure Set_DateTime(const pRetVal: WideString); safecall;
		function Get_SaleSoftware: ISaleSoftwareType; safecall;
		procedure _Set_SaleSoftware(const pRetVal: ISaleSoftwareType); safecall;
		function Get_SaleTerminalData: ISaleTerminalDataType; safecall;
		procedure _Set_SaleTerminalData(const pRetVal: ISaleTerminalDataType); safecall;
		function Get_TrainingModeFlag: WordBool; safecall;
		procedure Set_TrainingModeFlag(pRetVal: WordBool); safecall;
		function Get_OperatorLanguage: WideString; safecall;
		procedure Set_OperatorLanguage(const pRetVal: WideString); safecall;
		function Get_OperatorID: WideString; safecall;
		procedure Set_OperatorID(const pRetVal: WideString); safecall;
		function Get_ShiftNumber: WideString; safecall;
		procedure Set_ShiftNumber(const pRetVal: WideString); safecall;
		function Get_TokenRequestedType: WideString; safecall;
		procedure Set_TokenRequestedType(const pRetVal: WideString); safecall;
		function Get_CustomerOrderReq: PSafeArray; safecall;
		procedure Set_CustomerOrderReq(pRetVal: PSafeArray); safecall;
		function Get_POISerialNumber: WideString; safecall;
		procedure Set_POISerialNumber(const pRetVal: WideString); safecall;
		function CustomerOrderReqSize: Integer; safecall;
		function CustomerOrderReqGetItem(index: Integer): WideString; safecall;
		function CustomerOrderReqSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function CustomerOrderReqAddItem(const value: WideString): WordBool; safecall;
		function CustomerOrderReqRemoveItem(index: Integer): WordBool; safecall;
		property DateTime: WideString read Get_DateTime write Set_DateTime;
		property SaleSoftware: ISaleSoftwareType read Get_SaleSoftware write _Set_SaleSoftware;
		property SaleTerminalData: ISaleTerminalDataType read Get_SaleTerminalData write _Set_SaleTerminalData;
		property TrainingModeFlag: WordBool read Get_TrainingModeFlag write Set_TrainingModeFlag;
		property OperatorLanguage: WideString read Get_OperatorLanguage write Set_OperatorLanguage;
		property OperatorID: WideString read Get_OperatorID write Set_OperatorID;
		property ShiftNumber: WideString read Get_ShiftNumber write Set_ShiftNumber;
		property TokenRequestedType: WideString read Get_TokenRequestedType write Set_TokenRequestedType;
		property CustomerOrderReq: PSafeArray read Get_CustomerOrderReq write Set_CustomerOrderReq;
		property POISerialNumber: WideString read Get_POISerialNumber write Set_POISerialNumber;
	end;

	// *********************************************************************//
	// DispIntf :    ILoginRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {EA819EB0-AE2D-4347-9FAF-1833F97A7BDB}
	// *********************************************************************//
	ILoginRequestTypeDisp = dispinterface
		['{EA819EB0-AE2D-4347-9FAF-1833F97A7BDB}']
		property DateTime: WideString dispid 2;
		property SaleSoftware: ISaleSoftwareType dispid 3;
		property SaleTerminalData: ISaleTerminalDataType dispid 4;
		property TrainingModeFlag: WordBool dispid 5;
		property OperatorLanguage: WideString dispid 6;
		property OperatorID: WideString dispid 7;
		property ShiftNumber: WideString dispid 8;
		property TokenRequestedType: WideString dispid 9;
		property CustomerOrderReq: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 10;
		property POISerialNumber: WideString dispid 11;
		function CustomerOrderReqSize: Integer; dispid 12;
		function CustomerOrderReqGetItem(index: Integer): WideString; dispid 13;
		function CustomerOrderReqSetItem(index: Integer; const value: WideString): WordBool; dispid 14;
		function CustomerOrderReqAddItem(const value: WideString): WordBool; dispid 15;
		function CustomerOrderReqRemoveItem(index: Integer): WordBool; dispid 16;
	end;

	// *********************************************************************//
	// Interface :   ISaleSoftwareType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {886E58EB-90B1-40FE-9964-79ACD43DEBA6}
	// *********************************************************************//
	ISaleSoftwareType = interface(IDispatch)
		['{886E58EB-90B1-40FE-9964-79ACD43DEBA6}']
		function Get_ManufacturerID: WideString; safecall;
		procedure Set_ManufacturerID(const pRetVal: WideString); safecall;
		function Get_ApplicationName: WideString; safecall;
		procedure Set_ApplicationName(const pRetVal: WideString); safecall;
		function Get_SoftwareVersion: WideString; safecall;
		procedure Set_SoftwareVersion(const pRetVal: WideString); safecall;
		function Get_CertificationCode: WideString; safecall;
		procedure Set_CertificationCode(const pRetVal: WideString); safecall;
		property ManufacturerID: WideString read Get_ManufacturerID write Set_ManufacturerID;
		property ApplicationName: WideString read Get_ApplicationName write Set_ApplicationName;
		property SoftwareVersion: WideString read Get_SoftwareVersion write Set_SoftwareVersion;
		property CertificationCode: WideString read Get_CertificationCode write Set_CertificationCode;
	end;

	// *********************************************************************//
	// DispIntf :    ISaleSoftwareTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {886E58EB-90B1-40FE-9964-79ACD43DEBA6}
	// *********************************************************************//
	ISaleSoftwareTypeDisp = dispinterface
		['{886E58EB-90B1-40FE-9964-79ACD43DEBA6}']
		property ManufacturerID: WideString dispid 1;
		property ApplicationName: WideString dispid 2;
		property SoftwareVersion: WideString dispid 3;
		property CertificationCode: WideString dispid 4;
	end;

	// *********************************************************************//
	// Interface :   ILoginResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {A886113B-9314-4EE7-9851-10C726583283}
	// *********************************************************************//
	ILoginResponseType = interface(IDispatch)
		['{A886113B-9314-4EE7-9851-10C726583283}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_POISystemData: IPOISystemDataType; safecall;
		procedure _Set_POISystemData(const pRetVal: IPOISystemDataType); safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property POISystemData: IPOISystemDataType read Get_POISystemData write _Set_POISystemData;
	end;

	// *********************************************************************//
	// DispIntf :    ILoginResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {A886113B-9314-4EE7-9851-10C726583283}
	// *********************************************************************//
	ILoginResponseTypeDisp = dispinterface
		['{A886113B-9314-4EE7-9851-10C726583283}']
		property Response: IResponseType dispid 1;
		property POISystemData: IPOISystemDataType dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IPOISystemDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {835B50ED-209A-4A7D-91F9-1F2FCA3C8183}
	// *********************************************************************//
	IPOISystemDataType = interface(IDispatch)
		['{835B50ED-209A-4A7D-91F9-1F2FCA3C8183}']
		function Get_DateTime: WideString; safecall;
		procedure Set_DateTime(const pRetVal: WideString); safecall;
		function Get_POISoftware: IPOISoftwareType; safecall;
		procedure _Set_POISoftware(const pRetVal: IPOISoftwareType); safecall;
		function Get_POITerminalData: IPOITerminalDataType; safecall;
		procedure _Set_POITerminalData(const pRetVal: IPOITerminalDataType); safecall;
		function Get_POIStatus: IPOIStatusType; safecall;
		procedure _Set_POIStatus(const pRetVal: IPOIStatusType); safecall;
		property DateTime: WideString read Get_DateTime write Set_DateTime;
		property POISoftware: IPOISoftwareType read Get_POISoftware write _Set_POISoftware;
		property POITerminalData: IPOITerminalDataType read Get_POITerminalData write _Set_POITerminalData;
		property POIStatus: IPOIStatusType read Get_POIStatus write _Set_POIStatus;
	end;

	// *********************************************************************//
	// DispIntf :    IPOISystemDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {835B50ED-209A-4A7D-91F9-1F2FCA3C8183}
	// *********************************************************************//
	IPOISystemDataTypeDisp = dispinterface
		['{835B50ED-209A-4A7D-91F9-1F2FCA3C8183}']
		property DateTime: WideString dispid 1;
		property POISoftware: IPOISoftwareType dispid 2;
		property POITerminalData: IPOITerminalDataType dispid 3;
		property POIStatus: IPOIStatusType dispid 4;
	end;

	// *********************************************************************//
	// Interface :   IPOISoftwareType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D9CD56C4-E866-4343-8B54-CDBD4C374DEE}
	// *********************************************************************//
	IPOISoftwareType = interface(IDispatch)
		['{D9CD56C4-E866-4343-8B54-CDBD4C374DEE}']
		function Get_ManufacturerID: WideString; safecall;
		procedure Set_ManufacturerID(const pRetVal: WideString); safecall;
		function Get_ApplicationName: WideString; safecall;
		procedure Set_ApplicationName(const pRetVal: WideString); safecall;
		function Get_SoftwareVersion: WideString; safecall;
		procedure Set_SoftwareVersion(const pRetVal: WideString); safecall;
		function Get_CertificationCode: WideString; safecall;
		procedure Set_CertificationCode(const pRetVal: WideString); safecall;
		property ManufacturerID: WideString read Get_ManufacturerID write Set_ManufacturerID;
		property ApplicationName: WideString read Get_ApplicationName write Set_ApplicationName;
		property SoftwareVersion: WideString read Get_SoftwareVersion write Set_SoftwareVersion;
		property CertificationCode: WideString read Get_CertificationCode write Set_CertificationCode;
	end;

	// *********************************************************************//
	// DispIntf :    IPOISoftwareTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D9CD56C4-E866-4343-8B54-CDBD4C374DEE}
	// *********************************************************************//
	IPOISoftwareTypeDisp = dispinterface
		['{D9CD56C4-E866-4343-8B54-CDBD4C374DEE}']
		property ManufacturerID: WideString dispid 1;
		property ApplicationName: WideString dispid 2;
		property SoftwareVersion: WideString dispid 3;
		property CertificationCode: WideString dispid 4;
	end;

	// *********************************************************************//
	// Interface :   IPOITerminalDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B0906BD8-F03E-4EFD-9C9F-A1741C880FAC}
	// *********************************************************************//
	IPOITerminalDataType = interface(IDispatch)
		['{B0906BD8-F03E-4EFD-9C9F-A1741C880FAC}']
		function Get_POICapabilities: WideString; safecall;
		procedure Set_POICapabilities(const pRetVal: WideString); safecall;
		function Get_POIProfile: IPOIProfileType; safecall;
		procedure _Set_POIProfile(const pRetVal: IPOIProfileType); safecall;
		function Get_TerminalEnvironment: WideString; safecall;
		procedure Set_TerminalEnvironment(const pRetVal: WideString); safecall;
		function Get_POISerialNumber: WideString; safecall;
		procedure Set_POISerialNumber(const pRetVal: WideString); safecall;
		property POICapabilities: WideString read Get_POICapabilities write Set_POICapabilities;
		property POIProfile: IPOIProfileType read Get_POIProfile write _Set_POIProfile;
		property TerminalEnvironment: WideString read Get_TerminalEnvironment write Set_TerminalEnvironment;
		property POISerialNumber: WideString read Get_POISerialNumber write Set_POISerialNumber;
	end;

	// *********************************************************************//
	// DispIntf :    IPOITerminalDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B0906BD8-F03E-4EFD-9C9F-A1741C880FAC}
	// *********************************************************************//
	IPOITerminalDataTypeDisp = dispinterface
		['{B0906BD8-F03E-4EFD-9C9F-A1741C880FAC}']
		property POICapabilities: WideString dispid 1;
		property POIProfile: IPOIProfileType dispid 2;
		property TerminalEnvironment: WideString dispid 3;
		property POISerialNumber: WideString dispid 4;
	end;

	// *********************************************************************//
	// Interface :   IPOIProfileType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {395D230D-9012-4ECA-975D-B960FC9F0868}
	// *********************************************************************//
	IPOIProfileType = interface(IDispatch)
		['{395D230D-9012-4ECA-975D-B960FC9F0868}']
		function Get_ServiceProfiles: WideString; safecall;
		procedure Set_ServiceProfiles(const pRetVal: WideString); safecall;
		function Get_GenericProfile: WideString; safecall;
		procedure Set_GenericProfile(const pRetVal: WideString); safecall;
		property ServiceProfiles: WideString read Get_ServiceProfiles write Set_ServiceProfiles;
		property GenericProfile: WideString read Get_GenericProfile write Set_GenericProfile;
	end;

	// *********************************************************************//
	// DispIntf :    IPOIProfileTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {395D230D-9012-4ECA-975D-B960FC9F0868}
	// *********************************************************************//
	IPOIProfileTypeDisp = dispinterface
		['{395D230D-9012-4ECA-975D-B960FC9F0868}']
		property ServiceProfiles: WideString dispid 2;
		property GenericProfile: WideString dispid 3;
	end;

	// *********************************************************************//
	// Interface :   ILogoutRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B94608E6-539B-4C68-9C37-7A951EF8CD66}
	// *********************************************************************//
	ILogoutRequestType = interface(IDispatch)
		['{B94608E6-539B-4C68-9C37-7A951EF8CD66}']
		function Get_MaintenanceAllowed: WordBool; safecall;
		procedure Set_MaintenanceAllowed(pRetVal: WordBool); safecall;
		property MaintenanceAllowed: WordBool read Get_MaintenanceAllowed write Set_MaintenanceAllowed;
	end;

	// *********************************************************************//
	// DispIntf :    ILogoutRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B94608E6-539B-4C68-9C37-7A951EF8CD66}
	// *********************************************************************//
	ILogoutRequestTypeDisp = dispinterface
		['{B94608E6-539B-4C68-9C37-7A951EF8CD66}']
		property MaintenanceAllowed: WordBool dispid 2;
	end;

	// *********************************************************************//
	// Interface :   ILogoutResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {ACCE3987-77D2-424D-9E00-F4AFCFEE98E3}
	// *********************************************************************//
	ILogoutResponseType = interface(IDispatch)
		['{ACCE3987-77D2-424D-9E00-F4AFCFEE98E3}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
	end;

	// *********************************************************************//
	// DispIntf :    ILogoutResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {ACCE3987-77D2-424D-9E00-F4AFCFEE98E3}
	// *********************************************************************//
	ILogoutResponseTypeDisp = dispinterface
		['{ACCE3987-77D2-424D-9E00-F4AFCFEE98E3}']
		property Response: IResponseType dispid 1;
	end;

	// *********************************************************************//
	// Interface :   ILoyaltyResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {BD84D3FF-86B9-4CDF-ACDD-E5DA7E841464}
	// *********************************************************************//
	ILoyaltyResponseType = interface(IDispatch)
		['{BD84D3FF-86B9-4CDF-ACDD-E5DA7E841464}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_SaleData: ISaleDataType; safecall;
		procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
		function Get_POIData: IPOIDataType; safecall;
		procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
		function Get_LoyaltyResult: PSafeArray; safecall;
		procedure Set_LoyaltyResult(pRetVal: PSafeArray); safecall;
		function Get_PaymentReceipt: PSafeArray; safecall;
		procedure Set_PaymentReceipt(pRetVal: PSafeArray); safecall;
		function LoyaltyResultSize: Integer; safecall;
		function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; safecall;
		function LoyaltyResultSetItem(index: Integer; const value: ILoyaltyResultType): WordBool; safecall;
		function LoyaltyResultAddItem(const value: ILoyaltyResultType): WordBool; safecall;
		function LoyaltyResultRemoveItem(index: Integer): WordBool; safecall;
		function PaymentReceiptSize: Integer; safecall;
		function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; safecall;
		function PaymentReceiptSetItem(index: Integer; const value: IPaymentReceiptType): WordBool; safecall;
		function PaymentReceiptAddItem(const value: IPaymentReceiptType): WordBool; safecall;
		function PaymentReceiptRemoveItem(index: Integer): WordBool; safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
		property POIData: IPOIDataType read Get_POIData write _Set_POIData;
		property LoyaltyResult: PSafeArray read Get_LoyaltyResult write Set_LoyaltyResult;
		property PaymentReceipt: PSafeArray read Get_PaymentReceipt write Set_PaymentReceipt;
	end;

	// *********************************************************************//
	// DispIntf :    ILoyaltyResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {BD84D3FF-86B9-4CDF-ACDD-E5DA7E841464}
	// *********************************************************************//
	ILoyaltyResponseTypeDisp = dispinterface
		['{BD84D3FF-86B9-4CDF-ACDD-E5DA7E841464}']
		property Response: IResponseType dispid 1;
		property SaleData: ISaleDataType dispid 2;
		property POIData: IPOIDataType dispid 3;
		property LoyaltyResult: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		property PaymentReceipt: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 5;
		function LoyaltyResultSize: Integer; dispid 6;
		function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; dispid 7;
		function LoyaltyResultSetItem(index: Integer; const value: ILoyaltyResultType): WordBool; dispid 8;
		function LoyaltyResultAddItem(const value: ILoyaltyResultType): WordBool; dispid 9;
		function LoyaltyResultRemoveItem(index: Integer): WordBool; dispid 10;
		function PaymentReceiptSize: Integer; dispid 11;
		function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; dispid 12;
		function PaymentReceiptSetItem(index: Integer; const value: IPaymentReceiptType): WordBool; dispid 13;
		function PaymentReceiptAddItem(const value: IPaymentReceiptType): WordBool; dispid 14;
		function PaymentReceiptRemoveItem(index: Integer): WordBool; dispid 15;
	end;

	// *********************************************************************//
	// Interface :   IPaymentReceiptType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {FB400495-9533-4175-8208-ECBCEFC425FB}
	// *********************************************************************//
	IPaymentReceiptType = interface(IDispatch)
		['{FB400495-9533-4175-8208-ECBCEFC425FB}']
		function Get_OutputContent: IOutputContentType; safecall;
		procedure _Set_OutputContent(const pRetVal: IOutputContentType); safecall;
		function Get_DocumentQualifier: WideString; safecall;
		procedure Set_DocumentQualifier(const pRetVal: WideString); safecall;
		function Get_IntegratedPrintFlag: WordBool; safecall;
		procedure Set_IntegratedPrintFlag(pRetVal: WordBool); safecall;
		function Get_RequiredSignatureFlag: WordBool; safecall;
		procedure Set_RequiredSignatureFlag(pRetVal: WordBool); safecall;
		property OutputContent: IOutputContentType read Get_OutputContent write _Set_OutputContent;
		property DocumentQualifier: WideString read Get_DocumentQualifier write Set_DocumentQualifier;
		property IntegratedPrintFlag: WordBool read Get_IntegratedPrintFlag write Set_IntegratedPrintFlag;
		property RequiredSignatureFlag: WordBool read Get_RequiredSignatureFlag write Set_RequiredSignatureFlag;
	end;

	// *********************************************************************//
	// DispIntf :    IPaymentReceiptTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {FB400495-9533-4175-8208-ECBCEFC425FB}
	// *********************************************************************//
	IPaymentReceiptTypeDisp = dispinterface
		['{FB400495-9533-4175-8208-ECBCEFC425FB}']
		property OutputContent: IOutputContentType dispid 2;
		property DocumentQualifier: WideString dispid 3;
		property IntegratedPrintFlag: WordBool dispid 4;
		property RequiredSignatureFlag: WordBool dispid 5;
	end;

	// *********************************************************************//
	// Interface :   IMessageHeaderType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4454EE07-4DE1-47F6-8ABC-C89818BCE1D9}
	// *********************************************************************//
	IMessageHeaderType = interface(IDispatch)
		['{4454EE07-4DE1-47F6-8ABC-C89818BCE1D9}']
		function Get_ProtocolVersion: WideString; safecall;
		procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
		function Get_MessageClass: WideString; safecall;
		procedure Set_MessageClass(const pRetVal: WideString); safecall;
		function Get_MessageCategory: WideString; safecall;
		procedure Set_MessageCategory(const pRetVal: WideString); safecall;
		function Get_MessageType: WideString; safecall;
		procedure Set_MessageType(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
		property MessageClass: WideString read Get_MessageClass write Set_MessageClass;
		property MessageCategory: WideString read Get_MessageCategory write Set_MessageCategory;
		property MessageType: WideString read Get_MessageType write Set_MessageType;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
	end;

	// *********************************************************************//
	// DispIntf :    IMessageHeaderTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4454EE07-4DE1-47F6-8ABC-C89818BCE1D9}
	// *********************************************************************//
	IMessageHeaderTypeDisp = dispinterface
		['{4454EE07-4DE1-47F6-8ABC-C89818BCE1D9}']
		property ProtocolVersion: WideString dispid 1;
		property MessageClass: WideString dispid 2;
		property MessageCategory: WideString dispid 3;
		property MessageType: WideString dispid 4;
		property ServiceID: WideString dispid 5;
		property DeviceID: WideString dispid 6;
		property SaleID: WideString dispid 7;
		property POIID: WideString dispid 8;
	end;

	// *********************************************************************//
	// Interface :   IPaymentResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {39FBB28A-45E2-4E7D-AD7A-0C377346421C}
	// *********************************************************************//
	IPaymentResponseType = interface(IDispatch)
		['{39FBB28A-45E2-4E7D-AD7A-0C377346421C}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_SaleData: ISaleDataType; safecall;
		procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
		function Get_POIData: IPOIDataType; safecall;
		procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
		function Get_PaymentResult: IPaymentResultType; safecall;
		procedure _Set_PaymentResult(const pRetVal: IPaymentResultType); safecall;
		function Get_LoyaltyResult: PSafeArray; safecall;
		procedure Set_LoyaltyResult(pRetVal: PSafeArray); safecall;
		function Get_PaymentReceipt: PSafeArray; safecall;
		procedure Set_PaymentReceipt(pRetVal: PSafeArray); safecall;
		function Get_CustomerOrder: PSafeArray; safecall;
		procedure Set_CustomerOrder(pRetVal: PSafeArray); safecall;
		function LoyaltyResultSize: Integer; safecall;
		function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; safecall;
		function LoyaltyResultSetItem(index: Integer; const value: ILoyaltyResultType): WordBool; safecall;
		function LoyaltyResultAddItem(const value: ILoyaltyResultType): WordBool; safecall;
		function LoyaltyResultRemoveItem(index: Integer): WordBool; safecall;
		function PaymentReceiptSize: Integer; safecall;
		function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; safecall;
		function PaymentReceiptSetItem(index: Integer; const value: IPaymentReceiptType): WordBool; safecall;
		function PaymentReceiptAddItem(const value: IPaymentReceiptType): WordBool; safecall;
		function PaymentReceiptRemoveItem(index: Integer): WordBool; safecall;
		function CustomerOrderSize: Integer; safecall;
		function CustomerOrderGetItem(index: Integer): ICustomerOrderType; safecall;
		function CustomerOrderSetItem(index: Integer; const value: ICustomerOrderType): WordBool; safecall;
		function CustomerOrderAddItem(const value: ICustomerOrderType): WordBool; safecall;
		function CustomerOrderRemoveItem(index: Integer): WordBool; safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
		property POIData: IPOIDataType read Get_POIData write _Set_POIData;
		property PaymentResult: IPaymentResultType read Get_PaymentResult write _Set_PaymentResult;
		property LoyaltyResult: PSafeArray read Get_LoyaltyResult write Set_LoyaltyResult;
		property PaymentReceipt: PSafeArray read Get_PaymentReceipt write Set_PaymentReceipt;
		property CustomerOrder: PSafeArray read Get_CustomerOrder write Set_CustomerOrder;
	end;

	// *********************************************************************//
	// DispIntf :    IPaymentResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {39FBB28A-45E2-4E7D-AD7A-0C377346421C}
	// *********************************************************************//
	IPaymentResponseTypeDisp = dispinterface
		['{39FBB28A-45E2-4E7D-AD7A-0C377346421C}']
		property Response: IResponseType dispid 1;
		property SaleData: ISaleDataType dispid 2;
		property POIData: IPOIDataType dispid 3;
		property PaymentResult: IPaymentResultType dispid 4;
		property LoyaltyResult: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 5;
		property PaymentReceipt: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 6;
		property CustomerOrder: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 7;
		function LoyaltyResultSize: Integer; dispid 8;
		function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; dispid 9;
		function LoyaltyResultSetItem(index: Integer; const value: ILoyaltyResultType): WordBool; dispid 10;
		function LoyaltyResultAddItem(const value: ILoyaltyResultType): WordBool; dispid 11;
		function LoyaltyResultRemoveItem(index: Integer): WordBool; dispid 12;
		function PaymentReceiptSize: Integer; dispid 13;
		function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; dispid 14;
		function PaymentReceiptSetItem(index: Integer; const value: IPaymentReceiptType): WordBool; dispid 15;
		function PaymentReceiptAddItem(const value: IPaymentReceiptType): WordBool; dispid 16;
		function PaymentReceiptRemoveItem(index: Integer): WordBool; dispid 17;
		function CustomerOrderSize: Integer; dispid 18;
		function CustomerOrderGetItem(index: Integer): ICustomerOrderType; dispid 19;
		function CustomerOrderSetItem(index: Integer; const value: ICustomerOrderType): WordBool; dispid 20;
		function CustomerOrderAddItem(const value: ICustomerOrderType): WordBool; dispid 21;
		function CustomerOrderRemoveItem(index: Integer): WordBool; dispid 22;
	end;

	// *********************************************************************//
	// Interface :   IPINRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2CF4ADCA-C83A-4C96-A2BF-539DB4F90097}
	// *********************************************************************//
	IPINRequestType = interface(IDispatch)
		['{2CF4ADCA-C83A-4C96-A2BF-539DB4F90097}']
		function Get_CardholderPIN: ICardholderPINType; safecall;
		procedure _Set_CardholderPIN(const pRetVal: ICardholderPINType); safecall;
		function Get_PINRequestType1: WideString; safecall;
		procedure Set_PINRequestType1(const pRetVal: WideString); safecall;
		function Get_PINVerifMethod: WideString; safecall;
		procedure Set_PINVerifMethod(const pRetVal: WideString); safecall;
		function Get_AdditionalInput: WideString; safecall;
		procedure Set_AdditionalInput(const pRetVal: WideString); safecall;
		function Get_PINEncAlgorithm: WideString; safecall;
		procedure Set_PINEncAlgorithm(const pRetVal: WideString); safecall;
		function Get_PINFormat: WideString; safecall;
		procedure Set_PINFormat(const pRetVal: WideString); safecall;
		function Get_KeyReference: WideString; safecall;
		procedure Set_KeyReference(const pRetVal: WideString); safecall;
		function Get_MaxWaitingTime: WideString; safecall;
		procedure Set_MaxWaitingTime(const pRetVal: WideString); safecall;
		property CardholderPIN: ICardholderPINType read Get_CardholderPIN write _Set_CardholderPIN;
		property PINRequestType1: WideString read Get_PINRequestType1 write Set_PINRequestType1;
		property PINVerifMethod: WideString read Get_PINVerifMethod write Set_PINVerifMethod;
		property AdditionalInput: WideString read Get_AdditionalInput write Set_AdditionalInput;
		property PINEncAlgorithm: WideString read Get_PINEncAlgorithm write Set_PINEncAlgorithm;
		property PINFormat: WideString read Get_PINFormat write Set_PINFormat;
		property KeyReference: WideString read Get_KeyReference write Set_KeyReference;
		property MaxWaitingTime: WideString read Get_MaxWaitingTime write Set_MaxWaitingTime;
	end;

	// *********************************************************************//
	// DispIntf :    IPINRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2CF4ADCA-C83A-4C96-A2BF-539DB4F90097}
	// *********************************************************************//
	IPINRequestTypeDisp = dispinterface
		['{2CF4ADCA-C83A-4C96-A2BF-539DB4F90097}']
		property CardholderPIN: ICardholderPINType dispid 1;
		property PINRequestType1: WideString dispid 2;
		property PINVerifMethod: WideString dispid 3;
		property AdditionalInput: WideString dispid 4;
		property PINEncAlgorithm: WideString dispid 5;
		property PINFormat: WideString dispid 6;
		property KeyReference: WideString dispid 7;
		property MaxWaitingTime: WideString dispid 8;
	end;

	// *********************************************************************//
	// Interface :   IPINResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {155CFF6B-D03E-40E1-B808-09989281E6E5}
	// *********************************************************************//
	IPINResponseType = interface(IDispatch)
		['{155CFF6B-D03E-40E1-B808-09989281E6E5}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_CardholderPIN: ICardholderPINType; safecall;
		procedure _Set_CardholderPIN(const pRetVal: ICardholderPINType); safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property CardholderPIN: ICardholderPINType read Get_CardholderPIN write _Set_CardholderPIN;
	end;

	// *********************************************************************//
	// DispIntf :    IPINResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {155CFF6B-D03E-40E1-B808-09989281E6E5}
	// *********************************************************************//
	IPINResponseTypeDisp = dispinterface
		['{155CFF6B-D03E-40E1-B808-09989281E6E5}']
		property Response: IResponseType dispid 1;
		property CardholderPIN: ICardholderPINType dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IPrintOutputType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {58B6D290-A5CE-432C-A569-2455BF463805}
	// *********************************************************************//
	IPrintOutputType = interface(IDispatch)
		['{58B6D290-A5CE-432C-A569-2455BF463805}']
		function Get_OutputContent: IOutputContentType; safecall;
		procedure _Set_OutputContent(const pRetVal: IOutputContentType); safecall;
		function Get_OutputSignature: PSafeArray; safecall;
		procedure Set_OutputSignature(pRetVal: PSafeArray); safecall;
		function Get_DocumentQualifier: WideString; safecall;
		procedure Set_DocumentQualifier(const pRetVal: WideString); safecall;
		function Get_ResponseMode: WideString; safecall;
		procedure Set_ResponseMode(const pRetVal: WideString); safecall;
		function Get_IntegratedPrintFlag: WordBool; safecall;
		procedure Set_IntegratedPrintFlag(pRetVal: WordBool); safecall;
		function Get_RequiredSignatureFlag: WordBool; safecall;
		procedure Set_RequiredSignatureFlag(pRetVal: WordBool); safecall;
		function OutputSignatureSize: Integer; safecall;
		function OutputSignatureGetItem(index: Integer): Byte; safecall;
		function OutputSignatureSetItem(index: Integer; value: Byte): WordBool; safecall;
		function OutputSignatureAddItem(value: Byte): WordBool; safecall;
		function OutputSignatureRemoveItem(index: Integer): WordBool; safecall;
		property OutputContent: IOutputContentType read Get_OutputContent write _Set_OutputContent;
		property OutputSignature: PSafeArray read Get_OutputSignature write Set_OutputSignature;
		property DocumentQualifier: WideString read Get_DocumentQualifier write Set_DocumentQualifier;
		property ResponseMode: WideString read Get_ResponseMode write Set_ResponseMode;
		property IntegratedPrintFlag: WordBool read Get_IntegratedPrintFlag write Set_IntegratedPrintFlag;
		property RequiredSignatureFlag: WordBool read Get_RequiredSignatureFlag write Set_RequiredSignatureFlag;
	end;

	// *********************************************************************//
	// DispIntf :    IPrintOutputTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {58B6D290-A5CE-432C-A569-2455BF463805}
	// *********************************************************************//
	IPrintOutputTypeDisp = dispinterface
		['{58B6D290-A5CE-432C-A569-2455BF463805}']
		property OutputContent: IOutputContentType dispid 2;
		property OutputSignature: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		property DocumentQualifier: WideString dispid 4;
		property ResponseMode: WideString dispid 5;
		property IntegratedPrintFlag: WordBool dispid 6;
		property RequiredSignatureFlag: WordBool dispid 7;
		function OutputSignatureSize: Integer; dispid 8;
		function OutputSignatureGetItem(index: Integer): Byte; dispid 9;
		function OutputSignatureSetItem(index: Integer; value: Byte): WordBool; dispid 10;
		function OutputSignatureAddItem(value: Byte): WordBool; dispid 11;
		function OutputSignatureRemoveItem(index: Integer): WordBool; dispid 12;
	end;

	// *********************************************************************//
	// Interface :   IPrintRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F9583EEA-5FB8-4B94-ABA7-3AD4E8C3ED32}
	// *********************************************************************//
	IPrintRequestType = interface(IDispatch)
		['{F9583EEA-5FB8-4B94-ABA7-3AD4E8C3ED32}']
		function Get_PrintOutput: IPrintOutputType; safecall;
		procedure _Set_PrintOutput(const pRetVal: IPrintOutputType); safecall;
		property PrintOutput: IPrintOutputType read Get_PrintOutput write _Set_PrintOutput;
	end;

	// *********************************************************************//
	// DispIntf :    IPrintRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F9583EEA-5FB8-4B94-ABA7-3AD4E8C3ED32}
	// *********************************************************************//
	IPrintRequestTypeDisp = dispinterface
		['{F9583EEA-5FB8-4B94-ABA7-3AD4E8C3ED32}']
		property PrintOutput: IPrintOutputType dispid 1;
	end;

	// *********************************************************************//
	// Interface :   IPrintResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D86324AE-C4AB-4644-8431-7FB48B7F58BD}
	// *********************************************************************//
	IPrintResponseType = interface(IDispatch)
		['{D86324AE-C4AB-4644-8431-7FB48B7F58BD}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_DocumentQualifier: WideString; safecall;
		procedure Set_DocumentQualifier(const pRetVal: WideString); safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property DocumentQualifier: WideString read Get_DocumentQualifier write Set_DocumentQualifier;
	end;

	// *********************************************************************//
	// DispIntf :    IPrintResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D86324AE-C4AB-4644-8431-7FB48B7F58BD}
	// *********************************************************************//
	IPrintResponseTypeDisp = dispinterface
		['{D86324AE-C4AB-4644-8431-7FB48B7F58BD}']
		property Response: IResponseType dispid 1;
		property DocumentQualifier: WideString dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IReconciliationRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {C78435AB-ED28-4443-BA66-F3C7F5539708}
	// *********************************************************************//
	IReconciliationRequestType = interface(IDispatch)
		['{C78435AB-ED28-4443-BA66-F3C7F5539708}']
		function Get_AcquirerID: PSafeArray; safecall;
		procedure Set_AcquirerID(pRetVal: PSafeArray); safecall;
		function Get_ReconciliationType: WideString; safecall;
		procedure Set_ReconciliationType(const pRetVal: WideString); safecall;
		function Get_POIReconciliationID: WideString; safecall;
		procedure Set_POIReconciliationID(const pRetVal: WideString); safecall;
		function AcquirerIDSize: Integer; safecall;
		function AcquirerIDGetItem(index: Integer): WideString; safecall;
		function AcquirerIDSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function AcquirerIDAddItem(const value: WideString): WordBool; safecall;
		function AcquirerIDRemoveItem(index: Integer): WordBool; safecall;
		property AcquirerID: PSafeArray read Get_AcquirerID write Set_AcquirerID;
		property ReconciliationType: WideString read Get_ReconciliationType write Set_ReconciliationType;
		property POIReconciliationID: WideString read Get_POIReconciliationID write Set_POIReconciliationID;
	end;

	// *********************************************************************//
	// DispIntf :    IReconciliationRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {C78435AB-ED28-4443-BA66-F3C7F5539708}
	// *********************************************************************//
	IReconciliationRequestTypeDisp = dispinterface
		['{C78435AB-ED28-4443-BA66-F3C7F5539708}']
		property AcquirerID: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 1;
		property ReconciliationType: WideString dispid 2;
		property POIReconciliationID: WideString dispid 3;
		function AcquirerIDSize: Integer; dispid 4;
		function AcquirerIDGetItem(index: Integer): WideString; dispid 5;
		function AcquirerIDSetItem(index: Integer; const value: WideString): WordBool; dispid 6;
		function AcquirerIDAddItem(const value: WideString): WordBool; dispid 7;
		function AcquirerIDRemoveItem(index: Integer): WordBool; dispid 8;
	end;

	// *********************************************************************//
	// Interface :   IReconciliationResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {29E7ABAE-C847-4091-AF8D-F91032FCAE32}
	// *********************************************************************//
	IReconciliationResponseType = interface(IDispatch)
		['{29E7ABAE-C847-4091-AF8D-F91032FCAE32}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_TransactionTotals: PSafeArray; safecall;
		procedure Set_TransactionTotals(pRetVal: PSafeArray); safecall;
		function Get_ReconciliationType: WideString; safecall;
		procedure Set_ReconciliationType(const pRetVal: WideString); safecall;
		function Get_POIReconciliationID: WideString; safecall;
		procedure Set_POIReconciliationID(const pRetVal: WideString); safecall;
		function TransactionTotalsSize: Integer; safecall;
		function TransactionTotalsGetItem(index: Integer): ITransactionTotalsType; safecall;
		function TransactionTotalsSetItem(index: Integer; const value: ITransactionTotalsType): WordBool; safecall;
		function TransactionTotalsAddItem(const value: ITransactionTotalsType): WordBool; safecall;
		function TransactionTotalsRemoveItem(index: Integer): WordBool; safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property TransactionTotals: PSafeArray read Get_TransactionTotals write Set_TransactionTotals;
		property ReconciliationType: WideString read Get_ReconciliationType write Set_ReconciliationType;
		property POIReconciliationID: WideString read Get_POIReconciliationID write Set_POIReconciliationID;
	end;

	// *********************************************************************//
	// DispIntf :    IReconciliationResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {29E7ABAE-C847-4091-AF8D-F91032FCAE32}
	// *********************************************************************//
	IReconciliationResponseTypeDisp = dispinterface
		['{29E7ABAE-C847-4091-AF8D-F91032FCAE32}']
		property Response: IResponseType dispid 1;
		property TransactionTotals: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property ReconciliationType: WideString dispid 3;
		property POIReconciliationID: WideString dispid 4;
		function TransactionTotalsSize: Integer; dispid 5;
		function TransactionTotalsGetItem(index: Integer): ITransactionTotalsType; dispid 6;
		function TransactionTotalsSetItem(index: Integer; const value: ITransactionTotalsType): WordBool; dispid 7;
		function TransactionTotalsAddItem(const value: ITransactionTotalsType): WordBool; dispid 8;
		function TransactionTotalsRemoveItem(index: Integer): WordBool; dispid 9;
	end;

	// *********************************************************************//
	// Interface :   IRepeatedMessageResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {0BB336CA-A0BD-4EB5-894F-CC9CA83021C3}
	// *********************************************************************//
	IRepeatedMessageResponseType = interface(IDispatch)
		['{0BB336CA-A0BD-4EB5-894F-CC9CA83021C3}']
		function Get_MessageHeader: IMessageHeaderType; safecall;
		procedure _Set_MessageHeader(const pRetVal: IMessageHeaderType); safecall;
		function Get_Item: OleVariant; safecall;
		procedure _Set_Item(pRetVal: OleVariant); safecall;
		property MessageHeader: IMessageHeaderType read Get_MessageHeader write _Set_MessageHeader;
		property Item: OleVariant read Get_Item write _Set_Item;
	end;

	// *********************************************************************//
	// DispIntf :    IRepeatedMessageResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {0BB336CA-A0BD-4EB5-894F-CC9CA83021C3}
	// *********************************************************************//
	IRepeatedMessageResponseTypeDisp = dispinterface
		['{0BB336CA-A0BD-4EB5-894F-CC9CA83021C3}']
		property MessageHeader: IMessageHeaderType dispid 1;
		property Item: OleVariant dispid 2;
	end;

	// *********************************************************************//
	// Interface :   IReversalResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {1C5C00FF-3B9E-4759-8168-C6A96F696A83}
	// *********************************************************************//
	IReversalResponseType = interface(IDispatch)
		['{1C5C00FF-3B9E-4759-8168-C6A96F696A83}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_POIData: IPOIDataType; safecall;
		procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
		function Get_OriginalPOITransaction: IOriginalPOITransactionType; safecall;
		procedure _Set_OriginalPOITransaction(const pRetVal: IOriginalPOITransactionType); safecall;
		function Get_PaymentReceipt: PSafeArray; safecall;
		procedure Set_PaymentReceipt(pRetVal: PSafeArray); safecall;
		function Get_ReversedAmount: Double; safecall;
		procedure Set_ReversedAmount(pRetVal: Double); safecall;
		function Get_ReversedAmountSpecified: WordBool; safecall;
		procedure Set_ReversedAmountSpecified(pRetVal: WordBool); safecall;
		function Get_CustomerOrderID: WideString; safecall;
		procedure Set_CustomerOrderID(const pRetVal: WideString); safecall;
		function PaymentReceiptSize: Integer; safecall;
		function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; safecall;
		function PaymentReceiptSetItem(index: Integer; const value: IPaymentReceiptType): WordBool; safecall;
		function PaymentReceiptAddItem(const value: IPaymentReceiptType): WordBool; safecall;
		function PaymentReceiptRemoveItem(index: Integer): WordBool; safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property POIData: IPOIDataType read Get_POIData write _Set_POIData;
		property OriginalPOITransaction: IOriginalPOITransactionType read Get_OriginalPOITransaction write _Set_OriginalPOITransaction;
		property PaymentReceipt: PSafeArray read Get_PaymentReceipt write Set_PaymentReceipt;
		property ReversedAmount: Double read Get_ReversedAmount write Set_ReversedAmount;
		property ReversedAmountSpecified: WordBool read Get_ReversedAmountSpecified write Set_ReversedAmountSpecified;
		property CustomerOrderID: WideString read Get_CustomerOrderID write Set_CustomerOrderID;
	end;

	// *********************************************************************//
	// DispIntf :    IReversalResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {1C5C00FF-3B9E-4759-8168-C6A96F696A83}
	// *********************************************************************//
	IReversalResponseTypeDisp = dispinterface
		['{1C5C00FF-3B9E-4759-8168-C6A96F696A83}']
		property Response: IResponseType dispid 1;
		property POIData: IPOIDataType dispid 2;
		property OriginalPOITransaction: IOriginalPOITransactionType dispid 3;
		property PaymentReceipt: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		property ReversedAmount: Double dispid 5;
		property ReversedAmountSpecified: WordBool dispid 6;
		property CustomerOrderID: WideString dispid 7;
		function PaymentReceiptSize: Integer; dispid 8;
		function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; dispid 9;
		function PaymentReceiptSetItem(index: Integer; const value: IPaymentReceiptType): WordBool; dispid 10;
		function PaymentReceiptAddItem(const value: IPaymentReceiptType): WordBool; dispid 11;
		function PaymentReceiptRemoveItem(index: Integer): WordBool; dispid 12;
	end;

	// *********************************************************************//
	// Interface :   IStoredValueResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {E27DBB16-20E1-49BF-9C96-E9D3FF0FFD9C}
	// *********************************************************************//
	IStoredValueResponseType = interface(IDispatch)
		['{E27DBB16-20E1-49BF-9C96-E9D3FF0FFD9C}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_SaleData: ISaleDataType; safecall;
		procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
		function Get_POIData: IPOIDataType; safecall;
		procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
		function Get_StoredValueResult: PSafeArray; safecall;
		procedure Set_StoredValueResult(pRetVal: PSafeArray); safecall;
		function StoredValueResultSize: Integer; safecall;
		function StoredValueResultGetItem(index: Integer): IStoredValueResultType; safecall;
		function StoredValueResultSetItem(index: Integer; const value: IStoredValueResultType): WordBool; safecall;
		function StoredValueResultAddItem(const value: IStoredValueResultType): WordBool; safecall;
		function StoredValueResultRemoveItem(index: Integer): WordBool; safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
		property POIData: IPOIDataType read Get_POIData write _Set_POIData;
		property StoredValueResult: PSafeArray read Get_StoredValueResult write Set_StoredValueResult;
	end;

	// *********************************************************************//
	// DispIntf :    IStoredValueResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {E27DBB16-20E1-49BF-9C96-E9D3FF0FFD9C}
	// *********************************************************************//
	IStoredValueResponseTypeDisp = dispinterface
		['{E27DBB16-20E1-49BF-9C96-E9D3FF0FFD9C}']
		property Response: IResponseType dispid 1;
		property SaleData: ISaleDataType dispid 2;
		property POIData: IPOIDataType dispid 3;
		property StoredValueResult: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 4;
		function StoredValueResultSize: Integer; dispid 5;
		function StoredValueResultGetItem(index: Integer): IStoredValueResultType; dispid 6;
		function StoredValueResultSetItem(index: Integer; const value: IStoredValueResultType): WordBool; dispid 7;
		function StoredValueResultAddItem(const value: IStoredValueResultType): WordBool; dispid 8;
		function StoredValueResultRemoveItem(index: Integer): WordBool; dispid 9;
	end;

	// *********************************************************************//
	// Interface :   IStoredValueResultType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {9CF92C9A-C19C-4D4B-85BE-B89389555966}
	// *********************************************************************//
	IStoredValueResultType = interface(IDispatch)
		['{9CF92C9A-C19C-4D4B-85BE-B89389555966}']
		function Get_StoredValueAccountStatus: IStoredValueAccountStatusType; safecall;
		procedure _Set_StoredValueAccountStatus(const pRetVal: IStoredValueAccountStatusType); safecall;
		function Get_HostTransactionID: ITransactionIdentificationType; safecall;
		procedure _Set_HostTransactionID(const pRetVal: ITransactionIdentificationType); safecall;
		function Get_StoredValueTransactionType: WideString; safecall;
		procedure Set_StoredValueTransactionType(const pRetVal: WideString); safecall;
		function Get_ProductCode: WideString; safecall;
		procedure Set_ProductCode(const pRetVal: WideString); safecall;
		function Get_EanUpc: WideString; safecall;
		procedure Set_EanUpc(const pRetVal: WideString); safecall;
		function Get_ItemAmount: Double; safecall;
		procedure Set_ItemAmount(pRetVal: Double); safecall;
		function Get_Currency: WideString; safecall;
		procedure Set_Currency(const pRetVal: WideString); safecall;
		property StoredValueAccountStatus: IStoredValueAccountStatusType read Get_StoredValueAccountStatus write _Set_StoredValueAccountStatus;
		property HostTransactionID: ITransactionIdentificationType read Get_HostTransactionID write _Set_HostTransactionID;
		property StoredValueTransactionType: WideString read Get_StoredValueTransactionType write Set_StoredValueTransactionType;
		property ProductCode: WideString read Get_ProductCode write Set_ProductCode;
		property EanUpc: WideString read Get_EanUpc write Set_EanUpc;
		property ItemAmount: Double read Get_ItemAmount write Set_ItemAmount;
		property Currency: WideString read Get_Currency write Set_Currency;
	end;

	// *********************************************************************//
	// DispIntf :    IStoredValueResultTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {9CF92C9A-C19C-4D4B-85BE-B89389555966}
	// *********************************************************************//
	IStoredValueResultTypeDisp = dispinterface
		['{9CF92C9A-C19C-4D4B-85BE-B89389555966}']
		property StoredValueAccountStatus: IStoredValueAccountStatusType dispid 1;
		property HostTransactionID: ITransactionIdentificationType dispid 2;
		property StoredValueTransactionType: WideString dispid 3;
		property ProductCode: WideString dispid 4;
		property EanUpc: WideString dispid 5;
		property ItemAmount: Double dispid 6;
		property Currency: WideString dispid 7;
	end;

	// *********************************************************************//
	// Interface :   IStoredValueAccountStatusType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2DE2E766-A6C3-4EBD-AF86-0BD508E8D948}
	// *********************************************************************//
	IStoredValueAccountStatusType = interface(IDispatch)
		['{2DE2E766-A6C3-4EBD-AF86-0BD508E8D948}']
		function Get_StoredValueAccountID: IStoredValueAccountIDType; safecall;
		procedure _Set_StoredValueAccountID(const pRetVal: IStoredValueAccountIDType); safecall;
		function Get_CurrentBalance: Double; safecall;
		procedure Set_CurrentBalance(pRetVal: Double); safecall;
		function Get_CurrentBalanceSpecified: WordBool; safecall;
		procedure Set_CurrentBalanceSpecified(pRetVal: WordBool); safecall;
		property StoredValueAccountID: IStoredValueAccountIDType read Get_StoredValueAccountID write _Set_StoredValueAccountID;
		property CurrentBalance: Double read Get_CurrentBalance write Set_CurrentBalance;
		property CurrentBalanceSpecified: WordBool read Get_CurrentBalanceSpecified write Set_CurrentBalanceSpecified;
	end;

	// *********************************************************************//
	// DispIntf :    IStoredValueAccountStatusTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2DE2E766-A6C3-4EBD-AF86-0BD508E8D948}
	// *********************************************************************//
	IStoredValueAccountStatusTypeDisp = dispinterface
		['{2DE2E766-A6C3-4EBD-AF86-0BD508E8D948}']
		property StoredValueAccountID: IStoredValueAccountIDType dispid 1;
		property CurrentBalance: Double dispid 2;
		property CurrentBalanceSpecified: WordBool dispid 3;
	end;

	// *********************************************************************//
	// Interface :   IStoredValueAccountIDType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {45215E0B-9EBC-4A5E-9A81-3C246A54E90C}
	// *********************************************************************//
	IStoredValueAccountIDType = interface(IDispatch)
		['{45215E0B-9EBC-4A5E-9A81-3C246A54E90C}']
		function Get_StoredValueAccountType: WideString; safecall;
		procedure Set_StoredValueAccountType(const pRetVal: WideString); safecall;
		function Get_StoredValueProvider: WideString; safecall;
		procedure Set_StoredValueProvider(const pRetVal: WideString); safecall;
		function Get_OwnerName: WideString; safecall;
		procedure Set_OwnerName(const pRetVal: WideString); safecall;
		function Get_ExpiryDate: WideString; safecall;
		procedure Set_ExpiryDate(const pRetVal: WideString); safecall;
		function Get_EntryMode: PSafeArray; safecall;
		procedure Set_EntryMode(pRetVal: PSafeArray); safecall;
		function Get_IdentificationType: WideString; safecall;
		procedure Set_IdentificationType(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		function EntryModeSize: Integer; safecall;
		function EntryModeGetItem(index: Integer): WideString; safecall;
		function EntryModeSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function EntryModeAddItem(const value: WideString): WordBool; safecall;
		function EntryModeRemoveItem(index: Integer): WordBool; safecall;
		property StoredValueAccountType: WideString read Get_StoredValueAccountType write Set_StoredValueAccountType;
		property StoredValueProvider: WideString read Get_StoredValueProvider write Set_StoredValueProvider;
		property OwnerName: WideString read Get_OwnerName write Set_OwnerName;
		property ExpiryDate: WideString read Get_ExpiryDate write Set_ExpiryDate;
		property EntryMode: PSafeArray read Get_EntryMode write Set_EntryMode;
		property IdentificationType: WideString read Get_IdentificationType write Set_IdentificationType;
		property value: WideString read Get_value write Set_value;
	end;

	// *********************************************************************//
	// DispIntf :    IStoredValueAccountIDTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {45215E0B-9EBC-4A5E-9A81-3C246A54E90C}
	// *********************************************************************//
	IStoredValueAccountIDTypeDisp = dispinterface
		['{45215E0B-9EBC-4A5E-9A81-3C246A54E90C}']
		property StoredValueAccountType: WideString dispid 1;
		property StoredValueProvider: WideString dispid 2;
		property OwnerName: WideString dispid 3;
		property ExpiryDate: WideString dispid 4;
		property EntryMode: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 5;
		property IdentificationType: WideString dispid 6;
		property value: WideString dispid 7;
		function EntryModeSize: Integer; dispid 8;
		function EntryModeGetItem(index: Integer): WideString; dispid 9;
		function EntryModeSetItem(index: Integer; const value: WideString): WordBool; dispid 10;
		function EntryModeAddItem(const value: WideString): WordBool; dispid 11;
		function EntryModeRemoveItem(index: Integer): WordBool; dispid 12;
	end;

	// *********************************************************************//
	// Interface :   ISoundContentType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {896AE9E6-6C51-4F4D-B305-673972D98CF8}
	// *********************************************************************//
	ISoundContentType = interface(IDispatch)
		['{896AE9E6-6C51-4F4D-B305-673972D98CF8}']
		function Get_SoundFormat: WideString; safecall;
		procedure Set_SoundFormat(const pRetVal: WideString); safecall;
		function Get_Language: WideString; safecall;
		procedure Set_Language(const pRetVal: WideString); safecall;
		function Get_ReferenceID: WideString; safecall;
		procedure Set_ReferenceID(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		property SoundFormat: WideString read Get_SoundFormat write Set_SoundFormat;
		property Language: WideString read Get_Language write Set_Language;
		property ReferenceID: WideString read Get_ReferenceID write Set_ReferenceID;
		property value: WideString read Get_value write Set_value;
	end;

	// *********************************************************************//
	// DispIntf :    ISoundContentTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {896AE9E6-6C51-4F4D-B305-673972D98CF8}
	// *********************************************************************//
	ISoundContentTypeDisp = dispinterface
		['{896AE9E6-6C51-4F4D-B305-673972D98CF8}']
		property SoundFormat: WideString dispid 1;
		property Language: WideString dispid 2;
		property ReferenceID: WideString dispid 3;
		property value: WideString dispid 4;
	end;

	// *********************************************************************//
	// Interface :   ISoundRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {7225C26A-0178-4999-A54F-D8F32DD36382}
	// *********************************************************************//
	ISoundRequestType = interface(IDispatch)
		['{7225C26A-0178-4999-A54F-D8F32DD36382}']
		function Get_SoundContent: ISoundContentType; safecall;
		procedure _Set_SoundContent(const pRetVal: ISoundContentType); safecall;
		function Get_ResponseMode: WideString; safecall;
		procedure Set_ResponseMode(const pRetVal: WideString); safecall;
		function Get_SoundAction: WideString; safecall;
		procedure Set_SoundAction(const pRetVal: WideString); safecall;
		function Get_SoundVolume: WideString; safecall;
		procedure Set_SoundVolume(const pRetVal: WideString); safecall;
		property SoundContent: ISoundContentType read Get_SoundContent write _Set_SoundContent;
		property ResponseMode: WideString read Get_ResponseMode write Set_ResponseMode;
		property SoundAction: WideString read Get_SoundAction write Set_SoundAction;
		property SoundVolume: WideString read Get_SoundVolume write Set_SoundVolume;
	end;

	// *********************************************************************//
	// DispIntf :    ISoundRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {7225C26A-0178-4999-A54F-D8F32DD36382}
	// *********************************************************************//
	ISoundRequestTypeDisp = dispinterface
		['{7225C26A-0178-4999-A54F-D8F32DD36382}']
		property SoundContent: ISoundContentType dispid 2;
		property ResponseMode: WideString dispid 3;
		property SoundAction: WideString dispid 4;
		property SoundVolume: WideString dispid 5;
	end;

	// *********************************************************************//
	// Interface :   ISoundResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {AC1AB91F-9F66-4169-A1E3-9D82C31A6BBC}
	// *********************************************************************//
	ISoundResponseType = interface(IDispatch)
		['{AC1AB91F-9F66-4169-A1E3-9D82C31A6BBC}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
	end;

	// *********************************************************************//
	// DispIntf :    ISoundResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {AC1AB91F-9F66-4169-A1E3-9D82C31A6BBC}
	// *********************************************************************//
	ISoundResponseTypeDisp = dispinterface
		['{AC1AB91F-9F66-4169-A1E3-9D82C31A6BBC}']
		property Response: IResponseType dispid 1;
	end;

	// *********************************************************************//
	// Interface :   IStoredValueDataType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4B35DE8B-F78F-474F-8755-3995083FCEF1}
	// *********************************************************************//
	IStoredValueDataType = interface(IDispatch)
		['{4B35DE8B-F78F-474F-8755-3995083FCEF1}']
		function Get_StoredValueAccountID: IStoredValueAccountIDType; safecall;
		procedure _Set_StoredValueAccountID(const pRetVal: IStoredValueAccountIDType); safecall;
		function Get_OriginalPOITransaction: IOriginalPOITransactionType; safecall;
		procedure _Set_OriginalPOITransaction(const pRetVal: IOriginalPOITransactionType); safecall;
		function Get_StoredValueProvider: WideString; safecall;
		procedure Set_StoredValueProvider(const pRetVal: WideString); safecall;
		function Get_StoredValueTransactionType: WideString; safecall;
		procedure Set_StoredValueTransactionType(const pRetVal: WideString); safecall;
		function Get_ProductCode: WideString; safecall;
		procedure Set_ProductCode(const pRetVal: WideString); safecall;
		function Get_EanUpc: WideString; safecall;
		procedure Set_EanUpc(const pRetVal: WideString); safecall;
		function Get_ItemAmount: Double; safecall;
		procedure Set_ItemAmount(pRetVal: Double); safecall;
		function Get_Currency: WideString; safecall;
		procedure Set_Currency(const pRetVal: WideString); safecall;
		property StoredValueAccountID: IStoredValueAccountIDType read Get_StoredValueAccountID write _Set_StoredValueAccountID;
		property OriginalPOITransaction: IOriginalPOITransactionType read Get_OriginalPOITransaction write _Set_OriginalPOITransaction;
		property StoredValueProvider: WideString read Get_StoredValueProvider write Set_StoredValueProvider;
		property StoredValueTransactionType: WideString read Get_StoredValueTransactionType write Set_StoredValueTransactionType;
		property ProductCode: WideString read Get_ProductCode write Set_ProductCode;
		property EanUpc: WideString read Get_EanUpc write Set_EanUpc;
		property ItemAmount: Double read Get_ItemAmount write Set_ItemAmount;
		property Currency: WideString read Get_Currency write Set_Currency;
	end;

	// *********************************************************************//
	// DispIntf :    IStoredValueDataTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4B35DE8B-F78F-474F-8755-3995083FCEF1}
	// *********************************************************************//
	IStoredValueDataTypeDisp = dispinterface
		['{4B35DE8B-F78F-474F-8755-3995083FCEF1}']
		property StoredValueAccountID: IStoredValueAccountIDType dispid 1;
		property OriginalPOITransaction: IOriginalPOITransactionType dispid 2;
		property StoredValueProvider: WideString dispid 3;
		property StoredValueTransactionType: WideString dispid 4;
		property ProductCode: WideString dispid 5;
		property EanUpc: WideString dispid 6;
		property ItemAmount: Double dispid 7;
		property Currency: WideString dispid 8;
	end;

	// *********************************************************************//
	// Interface :   IStoredValueRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {CEB4786D-626E-4584-8C37-0AEB96AF342C}
	// *********************************************************************//
	IStoredValueRequestType = interface(IDispatch)
		['{CEB4786D-626E-4584-8C37-0AEB96AF342C}']
		function Get_SaleData: ISaleDataType; safecall;
		procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
		function Get_StoredValueData: PSafeArray; safecall;
		procedure Set_StoredValueData(pRetVal: PSafeArray); safecall;
		function Get_CustomerLanguage: WideString; safecall;
		procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
		function StoredValueDataSize: Integer; safecall;
		function StoredValueDataGetItem(index: Integer): IStoredValueDataType; safecall;
		function StoredValueDataSetItem(index: Integer; const value: IStoredValueDataType): WordBool; safecall;
		function StoredValueDataAddItem(const value: IStoredValueDataType): WordBool; safecall;
		function StoredValueDataRemoveItem(index: Integer): WordBool; safecall;
		property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
		property StoredValueData: PSafeArray read Get_StoredValueData write Set_StoredValueData;
		property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
	end;

	// *********************************************************************//
	// DispIntf :    IStoredValueRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {CEB4786D-626E-4584-8C37-0AEB96AF342C}
	// *********************************************************************//
	IStoredValueRequestTypeDisp = dispinterface
		['{CEB4786D-626E-4584-8C37-0AEB96AF342C}']
		property SaleData: ISaleDataType dispid 1;
		property StoredValueData: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property CustomerLanguage: WideString dispid 3;
		function StoredValueDataSize: Integer; dispid 4;
		function StoredValueDataGetItem(index: Integer): IStoredValueDataType; dispid 5;
		function StoredValueDataSetItem(index: Integer; const value: IStoredValueDataType): WordBool; dispid 6;
		function StoredValueDataAddItem(const value: IStoredValueDataType): WordBool; dispid 7;
		function StoredValueDataRemoveItem(index: Integer): WordBool; dispid 8;
	end;

	// *********************************************************************//
	// Interface :   ITransmitRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {71C76C33-646B-4CB7-9D29-923B51463B2B}
	// *********************************************************************//
	ITransmitRequestType = interface(IDispatch)
		['{71C76C33-646B-4CB7-9D29-923B51463B2B}']
		function Get_Message: PSafeArray; safecall;
		procedure Set_Message(pRetVal: PSafeArray); safecall;
		function Get_WaitResponseFlag: WordBool; safecall;
		procedure Set_WaitResponseFlag(pRetVal: WordBool); safecall;
		function Get_MaximumTransmitTime: WideString; safecall;
		procedure Set_MaximumTransmitTime(const pRetVal: WideString); safecall;
		function Get_DestinationAddress: WideString; safecall;
		procedure Set_DestinationAddress(const pRetVal: WideString); safecall;
		function MessageSize: Integer; safecall;
		function MessageGetItem(index: Integer): Byte; safecall;
		function MessageSetItem(index: Integer; value: Byte): WordBool; safecall;
		function MessageAddItem(value: Byte): WordBool; safecall;
		function MessageRemoveItem(index: Integer): WordBool; safecall;
		property Message: PSafeArray read Get_Message write Set_Message;
		property WaitResponseFlag: WordBool read Get_WaitResponseFlag write Set_WaitResponseFlag;
		property MaximumTransmitTime: WideString read Get_MaximumTransmitTime write Set_MaximumTransmitTime;
		property DestinationAddress: WideString read Get_DestinationAddress write Set_DestinationAddress;
	end;

	// *********************************************************************//
	// DispIntf :    ITransmitRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {71C76C33-646B-4CB7-9D29-923B51463B2B}
	// *********************************************************************//
	ITransmitRequestTypeDisp = dispinterface
		['{71C76C33-646B-4CB7-9D29-923B51463B2B}']
		property Message: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property WaitResponseFlag: WordBool dispid 3;
		property MaximumTransmitTime: WideString dispid 4;
		property DestinationAddress: WideString dispid 5;
		function MessageSize: Integer; dispid 6;
		function MessageGetItem(index: Integer): Byte; dispid 7;
		function MessageSetItem(index: Integer; value: Byte): WordBool; dispid 8;
		function MessageAddItem(value: Byte): WordBool; dispid 9;
		function MessageRemoveItem(index: Integer): WordBool; dispid 10;
	end;

	// *********************************************************************//
	// Interface :   ITransmitResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {15A68480-8CB7-4EB8-BC42-DF3ADFD5C845}
	// *********************************************************************//
	ITransmitResponseType = interface(IDispatch)
		['{15A68480-8CB7-4EB8-BC42-DF3ADFD5C845}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_Message: PSafeArray; safecall;
		procedure Set_Message(pRetVal: PSafeArray); safecall;
		function MessageSize: Integer; safecall;
		function MessageGetItem(index: Integer): Byte; safecall;
		function MessageSetItem(index: Integer; value: Byte): WordBool; safecall;
		function MessageAddItem(value: Byte): WordBool; safecall;
		function MessageRemoveItem(index: Integer): WordBool; safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property Message: PSafeArray read Get_Message write Set_Message;
	end;

	// *********************************************************************//
	// DispIntf :    ITransmitResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {15A68480-8CB7-4EB8-BC42-DF3ADFD5C845}
	// *********************************************************************//
	ITransmitResponseTypeDisp = dispinterface
		['{15A68480-8CB7-4EB8-BC42-DF3ADFD5C845}']
		property Response: IResponseType dispid 1;
		property Message: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		function MessageSize: Integer; dispid 3;
		function MessageGetItem(index: Integer): Byte; dispid 4;
		function MessageSetItem(index: Integer; value: Byte): WordBool; dispid 5;
		function MessageAddItem(value: Byte): WordBool; dispid 6;
		function MessageRemoveItem(index: Integer): WordBool; dispid 7;
	end;

	// *********************************************************************//
	// Interface :   ITransactionStatusRequestType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4580FE3F-D883-4487-BB73-D31CBE4AC983}
	// *********************************************************************//
	ITransactionStatusRequestType = interface(IDispatch)
		['{4580FE3F-D883-4487-BB73-D31CBE4AC983}']
		function Get_MessageReference: IMessageReferenceType; safecall;
		procedure _Set_MessageReference(const pRetVal: IMessageReferenceType); safecall;
		function Get_DocumentQualifier: PSafeArray; safecall;
		procedure Set_DocumentQualifier(pRetVal: PSafeArray); safecall;
		function Get_ReceiptReprintFlag: WordBool; safecall;
		procedure Set_ReceiptReprintFlag(pRetVal: WordBool); safecall;
		function DocumentQualifierSize: Integer; safecall;
		function DocumentQualifierGetItem(index: Integer): WideString; safecall;
		function DocumentQualifierSetItem(index: Integer; const value: WideString): WordBool; safecall;
		function DocumentQualifierAddItem(const value: WideString): WordBool; safecall;
		function DocumentQualifierRemoveItem(index: Integer): WordBool; safecall;
		property MessageReference: IMessageReferenceType read Get_MessageReference write _Set_MessageReference;
		property DocumentQualifier: PSafeArray read Get_DocumentQualifier write Set_DocumentQualifier;
		property ReceiptReprintFlag: WordBool read Get_ReceiptReprintFlag write Set_ReceiptReprintFlag;
	end;

	// *********************************************************************//
	// DispIntf :    ITransactionStatusRequestTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4580FE3F-D883-4487-BB73-D31CBE4AC983}
	// *********************************************************************//
	ITransactionStatusRequestTypeDisp = dispinterface
		['{4580FE3F-D883-4487-BB73-D31CBE4AC983}']
		property MessageReference: IMessageReferenceType dispid 2;
		property DocumentQualifier: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 3;
		property ReceiptReprintFlag: WordBool dispid 4;
		function DocumentQualifierSize: Integer; dispid 5;
		function DocumentQualifierGetItem(index: Integer): WideString; dispid 6;
		function DocumentQualifierSetItem(index: Integer; const value: WideString): WordBool; dispid 7;
		function DocumentQualifierAddItem(const value: WideString): WordBool; dispid 8;
		function DocumentQualifierRemoveItem(index: Integer): WordBool; dispid 9;
	end;

	// *********************************************************************//
	// Interface :   ITransactionStatusResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {A2746A54-A932-4B57-9A6A-E34E6E4F8F60}
	// *********************************************************************//
	ITransactionStatusResponseType = interface(IDispatch)
		['{A2746A54-A932-4B57-9A6A-E34E6E4F8F60}']
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageReference: IMessageReferenceType; safecall;
		procedure _Set_MessageReference(const pRetVal: IMessageReferenceType); safecall;
		function Get_RepeatedMessageResponse: IRepeatedMessageResponseType; safecall;
		procedure _Set_RepeatedMessageResponse(const pRetVal: IRepeatedMessageResponseType); safecall;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageReference: IMessageReferenceType read Get_MessageReference write _Set_MessageReference;
		property RepeatedMessageResponse: IRepeatedMessageResponseType read Get_RepeatedMessageResponse write _Set_RepeatedMessageResponse;
	end;

	// *********************************************************************//
	// DispIntf :    ITransactionStatusResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {A2746A54-A932-4B57-9A6A-E34E6E4F8F60}
	// *********************************************************************//
	ITransactionStatusResponseTypeDisp = dispinterface
		['{A2746A54-A932-4B57-9A6A-E34E6E4F8F60}']
		property Response: IResponseType dispid 1;
		property MessageReference: IMessageReferenceType dispid 2;
		property RepeatedMessageResponse: IRepeatedMessageResponseType dispid 3;
	end;

	// *********************************************************************//
	// Interface :   ISaleToPOIRequest
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {701EB83C-5F69-49E1-B583-D983674A0058}
	// *********************************************************************//
	ISaleToPOIRequest = interface(IDispatch)
		['{701EB83C-5F69-49E1-B583-D983674A0058}']
		function Get_MessageHeader: IMessageHeaderType; safecall;
		procedure _Set_MessageHeader(const pRetVal: IMessageHeaderType); safecall;
		function Get_Item: OleVariant; safecall;
		procedure _Set_Item(pRetVal: OleVariant); safecall;
		function Get_SecurityTrailer: IContentInformationType; safecall;
		procedure _Set_SecurityTrailer(const pRetVal: IContentInformationType); safecall;
		property MessageHeader: IMessageHeaderType read Get_MessageHeader write _Set_MessageHeader;
		property Item: OleVariant read Get_Item write _Set_Item;
		property SecurityTrailer: IContentInformationType read Get_SecurityTrailer write _Set_SecurityTrailer;
	end;

	// *********************************************************************//
	// DispIntf :    ISaleToPOIRequestDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {701EB83C-5F69-49E1-B583-D983674A0058}
	// *********************************************************************//
	ISaleToPOIRequestDisp = dispinterface
		['{701EB83C-5F69-49E1-B583-D983674A0058}']
		property MessageHeader: IMessageHeaderType dispid 1;
		property Item: OleVariant dispid 2;
		property SecurityTrailer: IContentInformationType dispid 3;
	end;

	// *********************************************************************//
	// Interface :   ISaleToPOIResponse
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {38659EBC-E719-4581-967F-1C494A3163E9}
	// *********************************************************************//
	ISaleToPOIResponse = interface(IDispatch)
		['{38659EBC-E719-4581-967F-1C494A3163E9}']
		function Get_MessageHeader: IMessageHeaderType; safecall;
		procedure _Set_MessageHeader(const pRetVal: IMessageHeaderType); safecall;
		function Get_Item: OleVariant; safecall;
		procedure _Set_Item(pRetVal: OleVariant); safecall;
		function Get_SecurityTrailer: IContentInformationType; safecall;
		procedure _Set_SecurityTrailer(const pRetVal: IContentInformationType); safecall;
		property MessageHeader: IMessageHeaderType read Get_MessageHeader write _Set_MessageHeader;
		property Item: OleVariant read Get_Item write _Set_Item;
		property SecurityTrailer: IContentInformationType read Get_SecurityTrailer write _Set_SecurityTrailer;
	end;

	// *********************************************************************//
	// DispIntf :    ISaleToPOIResponseDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {38659EBC-E719-4581-967F-1C494A3163E9}
	// *********************************************************************//
	ISaleToPOIResponseDisp = dispinterface
		['{38659EBC-E719-4581-967F-1C494A3163E9}']
		property MessageHeader: IMessageHeaderType dispid 1;
		property Item: OleVariant dispid 2;
		property SecurityTrailer: IContentInformationType dispid 3;
	end;

	// *********************************************************************//
	// Interface :   IIssuerType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {758B225E-1402-4CF7-B71C-90DDFE162DAD}
	// *********************************************************************//
	IIssuerType = interface(IDispatch)
		['{758B225E-1402-4CF7-B71C-90DDFE162DAD}']
		function Get_RelativeDistinguishedName: PSafeArray; safecall;
		procedure Set_RelativeDistinguishedName(pRetVal: PSafeArray); safecall;
		function RelativeDistinguishedNameSize: Integer; safecall;
		function RelativeDistinguishedNameGetItem(index: Integer): IRelativeDistinguishedNameType; safecall;
		function RelativeDistinguishedNameSetItem(index: Integer; const value: IRelativeDistinguishedNameType): WordBool; safecall;
		function RelativeDistinguishedNameAddItem(const value: IRelativeDistinguishedNameType): WordBool; safecall;
		function RelativeDistinguishedNameRemoveItem(index: Integer): WordBool; safecall;
		property RelativeDistinguishedName: PSafeArray read Get_RelativeDistinguishedName write Set_RelativeDistinguishedName;
	end;

	// *********************************************************************//
	// DispIntf :    IIssuerTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {758B225E-1402-4CF7-B71C-90DDFE162DAD}
	// *********************************************************************//
	IIssuerTypeDisp = dispinterface
		['{758B225E-1402-4CF7-B71C-90DDFE162DAD}']
		property RelativeDistinguishedName: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 1;
		function RelativeDistinguishedNameSize: Integer; dispid 2;
		function RelativeDistinguishedNameGetItem(index: Integer): IRelativeDistinguishedNameType; dispid 3;
		function RelativeDistinguishedNameSetItem(index: Integer; const value: IRelativeDistinguishedNameType): WordBool; dispid 4;
		function RelativeDistinguishedNameAddItem(const value: IRelativeDistinguishedNameType): WordBool; dispid 5;
		function RelativeDistinguishedNameRemoveItem(index: Integer): WordBool; dispid 6;
	end;

	// *********************************************************************//
	// Interface :   INexoActivity
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {1ADB3E04-8743-492B-94C5-4F973C27B951}
	// *********************************************************************//
	INexoActivity = interface(IDispatch)
		['{1ADB3E04-8743-492B-94C5-4F973C27B951}']
		function AddSentMessage(const o: IUnknown): WordBool; safecall;
		function AddReceivedMessage(const o: IUnknown): WordBool; safecall;
	end;

	// *********************************************************************//
	// DispIntf :    INexoActivityDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {1ADB3E04-8743-492B-94C5-4F973C27B951}
	// *********************************************************************//
	INexoActivityDisp = dispinterface
		['{1ADB3E04-8743-492B-94C5-4F973C27B951}']
		function AddSentMessage(const o: IUnknown): WordBool; dispid 100;
		function AddReceivedMessage(const o: IUnknown): WordBool; dispid 101;
	end;

	// *********************************************************************//
	// Interface :   _NexoMessage
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {7DA4FB59-22EF-399D-B3B4-1E0397E4CCF5}
	// *********************************************************************//
	_NexoMessage = interface(IDispatch)
		['{7DA4FB59-22EF-399D-B3B4-1E0397E4CCF5}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoMessageDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {7DA4FB59-22EF-399D-B3B4-1E0397E4CCF5}
	// *********************************************************************//
	_NexoMessageDisp = dispinterface
		['{7DA4FB59-22EF-399D-B3B4-1E0397E4CCF5}']
	end;

	// *********************************************************************//
	// Interface :   _NexoPartner
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {59BB3895-65B2-3942-940E-6DD04810656E}
	// *********************************************************************//
	_NexoPartner = interface(IDispatch)
		['{59BB3895-65B2-3942-940E-6DD04810656E}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoPartnerDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {59BB3895-65B2-3942-940E-6DD04810656E}
	// *********************************************************************//
	_NexoPartnerDisp = dispinterface
		['{59BB3895-65B2-3942-940E-6DD04810656E}']
	end;

	// *********************************************************************//
	// Interface :   _NexoEndPoint
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {5339D5FB-D6F3-3710-B640-21CEF51B9F46}
	// *********************************************************************//
	_NexoEndPoint = interface(IDispatch)
		['{5339D5FB-D6F3-3710-B640-21CEF51B9F46}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoEndPointDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {5339D5FB-D6F3-3710-B640-21CEF51B9F46}
	// *********************************************************************//
	_NexoEndPointDisp = dispinterface
		['{5339D5FB-D6F3-3710-B640-21CEF51B9F46}']
	end;

	// *********************************************************************//
	// Interface :   _NexoSession
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {22FDEE0C-B93F-3CF0-A2A2-BA85F2288CED}
	// *********************************************************************//
	_NexoSession = interface(IDispatch)
		['{22FDEE0C-B93F-3CF0-A2A2-BA85F2288CED}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoSessionDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {22FDEE0C-B93F-3CF0-A2A2-BA85F2288CED}
	// *********************************************************************//
	_NexoSessionDisp = dispinterface
		['{22FDEE0C-B93F-3CF0-A2A2-BA85F2288CED}']
	end;

	// *********************************************************************//
	// Interface :   INexoAnyMessage
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {91849B50-192A-4811-8BFA-A506BD74E778}
	// *********************************************************************//
	INexoAnyMessage = interface(IDispatch)
		['{91849B50-192A-4811-8BFA-A506BD74E778}']
		function Get_Processed: WordBool; safecall;
		procedure Set_Processed(pRetVal: WordBool); safecall;
		function Get_XML: WideString; safecall;
		function Get_TimeStamp: TDateTime; safecall;
		function Get_ToString(addkey: WordBool): WideString; safecall;
		property Processed: WordBool read Get_Processed write Set_Processed;
		property XML: WideString read Get_XML;
		property TimeStamp: TDateTime read Get_TimeStamp;
		property ToString[addkey: WordBool]: WideString read Get_ToString;
	end;

	// *********************************************************************//
	// DispIntf :    INexoAnyMessageDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {91849B50-192A-4811-8BFA-A506BD74E778}
	// *********************************************************************//
	INexoAnyMessageDisp = dispinterface
		['{91849B50-192A-4811-8BFA-A506BD74E778}']
		property Processed: WordBool dispid 1;
		property XML: WideString readonly dispid 2;
		property TimeStamp: TDateTime readonly dispid 3;
		property ToString[addkey: WordBool]: WideString readonly dispid 100;
	end;

	// *********************************************************************//
	// Interface :   _NexoDelegates
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {9D53AE2A-5E06-352F-A630-F76256357105}
	// *********************************************************************//
	_NexoDelegates = interface(IDispatch)
		['{9D53AE2A-5E06-352F-A630-F76256357105}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoDelegatesDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {9D53AE2A-5E06-352F-A630-F76256357105}
	// *********************************************************************//
	_NexoDelegatesDisp = dispinterface
		['{9D53AE2A-5E06-352F-A630-F76256357105}']
	end;

	// *********************************************************************//
	// Interface :   INexoItem
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B7773C1A-8091-4B2A-A54E-74E686E5F91E}
	// *********************************************************************//
	INexoItem = interface(IDispatch)
		['{B7773C1A-8091-4B2A-A54E-74E686E5F91E}']
		function Get_Item: OleVariant; safecall;
		function Get_XML: WideString; safecall;
		function Get_IsRequest: WordBool; safecall;
		function Get_IsReply: WordBool; safecall;
		function Get_IsNotification: WordBool; safecall;
		function Get_type_: MessageTypeEnumeration; safecall;
		function Get_Category: MessageCategoryEnumeration; safecall;
		function Get_Class_: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_IsValid: WordBool; safecall;
		function Get_IsRequestValidForServer: WordBool; safecall;
		function Get_IsRequestValidForClient: WordBool; safecall;
		function Get_ReplyRequired: WordBool; safecall;
		function Get_SupportsAbort: WordBool; safecall;
		function Get_ToString: WideString; safecall;
		function MatchesRequest(const Item: INexoItem): WordBool; safecall;
		property Item: OleVariant read Get_Item;
		property XML: WideString read Get_XML;
		property IsRequest: WordBool read Get_IsRequest;
		property IsReply: WordBool read Get_IsReply;
		property IsNotification: WordBool read Get_IsNotification;
		property type_: MessageTypeEnumeration read Get_type_;
		property Category: MessageCategoryEnumeration read Get_Category;
		property Class_: MessageClassEnumeration read Get_Class_;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property IsValid: WordBool read Get_IsValid;
		property IsRequestValidForServer: WordBool read Get_IsRequestValidForServer;
		property IsRequestValidForClient: WordBool read Get_IsRequestValidForClient;
		property ReplyRequired: WordBool read Get_ReplyRequired;
		property SupportsAbort: WordBool read Get_SupportsAbort;
		property ToString: WideString read Get_ToString;
	end;

	// *********************************************************************//
	// DispIntf :    INexoItemDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B7773C1A-8091-4B2A-A54E-74E686E5F91E}
	// *********************************************************************//
	INexoItemDisp = dispinterface
		['{B7773C1A-8091-4B2A-A54E-74E686E5F91E}']
		property Item: OleVariant readonly dispid 1;
		property XML: WideString readonly dispid 2;
		property IsRequest: WordBool readonly dispid 3;
		property IsReply: WordBool readonly dispid 4;
		property IsNotification: WordBool readonly dispid 5;
		property type_: MessageTypeEnumeration readonly dispid 6;
		property Category: MessageCategoryEnumeration readonly dispid 7;
		property Class_: MessageClassEnumeration readonly dispid 8;
		property IsService: WordBool readonly dispid 9;
		property IsDevice: WordBool readonly dispid 10;
		property IsEvent: WordBool readonly dispid 11;
		property IsValid: WordBool readonly dispid 12;
		property IsRequestValidForServer: WordBool readonly dispid 13;
		property IsRequestValidForClient: WordBool readonly dispid 14;
		property ReplyRequired: WordBool readonly dispid 15;
		property SupportsAbort: WordBool readonly dispid 16;
		property ToString: WideString readonly dispid 100;
		function MatchesRequest(const Item: INexoItem): WordBool; dispid 101;
	end;

	// *********************************************************************//
	// Interface :   _NexoKey
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {89CFED27-307C-3ADA-BBD6-40800D474F0F}
	// *********************************************************************//
	_NexoKey = interface(IDispatch)
		['{89CFED27-307C-3ADA-BBD6-40800D474F0F}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoKeyDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {89CFED27-307C-3ADA-BBD6-40800D474F0F}
	// *********************************************************************//
	_NexoKeyDisp = dispinterface
		['{89CFED27-307C-3ADA-BBD6-40800D474F0F}']
	end;

	// *********************************************************************//
	// Interface :   INexoAdmin
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {9A3C60DD-2D50-4515-9762-4632AA45BBC5}
	// *********************************************************************//
	INexoAdmin = interface(IDispatch)
		['{9A3C60DD-2D50-4515-9762-4632AA45BBC5}']
		function Get_RequestData: IAdminRequestType; safecall;
		function Get_ReplyData: IAdminResponseType; safecall;
		function Get_RequestServiceIdentification: WideString; safecall;
		procedure Set_RequestServiceIdentification(const pRetVal: WideString); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IAdminRequestType read Get_RequestData;
		property ReplyData: IAdminResponseType read Get_ReplyData;
		property RequestServiceIdentification: WideString read Get_RequestServiceIdentification write Set_RequestServiceIdentification;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoAdminDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {9A3C60DD-2D50-4515-9762-4632AA45BBC5}
	// *********************************************************************//
	INexoAdminDisp = dispinterface
		['{9A3C60DD-2D50-4515-9762-4632AA45BBC5}']
		property RequestData: IAdminRequestType readonly dispid 1;
		property ReplyData: IAdminResponseType readonly dispid 2;
		property RequestServiceIdentification: WideString dispid 3;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoObject
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {70469D2A-4EFD-4023-82BB-7F6D382A5D83}
	// *********************************************************************//
	INexoObject = interface(IDispatch)
		['{70469D2A-4EFD-4023-82BB-7F6D382A5D83}']
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
	end;

	// *********************************************************************//
	// DispIntf :    INexoObjectDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {70469D2A-4EFD-4023-82BB-7F6D382A5D83}
	// *********************************************************************//
	INexoObjectDisp = dispinterface
		['{70469D2A-4EFD-4023-82BB-7F6D382A5D83}']
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
	end;

	// *********************************************************************//
	// Interface :   INexoBalanceInquiry
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {CDC42997-48E2-4D4A-9DD4-4CEBCA16652B}
	// *********************************************************************//
	INexoBalanceInquiry = interface(IDispatch)
		['{CDC42997-48E2-4D4A-9DD4-4CEBCA16652B}']
		function Get_RequestData: IBalanceInquiryRequestType; safecall;
		function Get_ReplyData: IBalanceInquiryResponseType; safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IBalanceInquiryRequestType read Get_RequestData;
		property ReplyData: IBalanceInquiryResponseType read Get_ReplyData;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoBalanceInquiryDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {CDC42997-48E2-4D4A-9DD4-4CEBCA16652B}
	// *********************************************************************//
	INexoBalanceInquiryDisp = dispinterface
		['{CDC42997-48E2-4D4A-9DD4-4CEBCA16652B}']
		property RequestData: IBalanceInquiryRequestType readonly dispid 1;
		property ReplyData: IBalanceInquiryResponseType readonly dispid 2;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoBatch
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {0AB85F76-922F-46EF-8DCB-A050E7030921}
	// *********************************************************************//
	INexoBatch = interface(IDispatch)
		['{0AB85F76-922F-46EF-8DCB-A050E7030921}']
		function Get_RequestData: IBatchRequestType; safecall;
		function Get_ReplyData: IBatchResponseType; safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IBatchRequestType read Get_RequestData;
		property ReplyData: IBatchResponseType read Get_ReplyData;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoBatchDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {0AB85F76-922F-46EF-8DCB-A050E7030921}
	// *********************************************************************//
	INexoBatchDisp = dispinterface
		['{0AB85F76-922F-46EF-8DCB-A050E7030921}']
		property RequestData: IBatchRequestType readonly dispid 1;
		property ReplyData: IBatchResponseType readonly dispid 2;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoCardAcquisition
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {85FADEEB-5156-405B-87EE-54D9AE22E316}
	// *********************************************************************//
	INexoCardAcquisition = interface(IDispatch)
		['{85FADEEB-5156-405B-87EE-54D9AE22E316}']
		function Get_RequestData: ICardAcquisitionRequestType; safecall;
		function Get_ReplyData: ICardAcquisitionResponseType; safecall;
		function Get_RequestSaleTransactionID: WideString; safecall;
		procedure Set_RequestSaleTransactionID(const pRetVal: WideString); safecall;
		function Get_RequestSaleTransactionTimestamp: WideString; safecall;
		procedure Set_RequestSaleTransactionTimestamp(const pRetVal: WideString); safecall;
		function Get_ReplyPOITransactionID: WideString; safecall;
		procedure Set_ReplyPOITransactionID(const pRetVal: WideString); safecall;
		function Get_ReplyPOITransactionTimestamp: WideString; safecall;
		procedure Set_ReplyPOITransactionTimestamp(const pRetVal: WideString); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: ICardAcquisitionRequestType read Get_RequestData;
		property ReplyData: ICardAcquisitionResponseType read Get_ReplyData;
		property RequestSaleTransactionID: WideString read Get_RequestSaleTransactionID write Set_RequestSaleTransactionID;
		property RequestSaleTransactionTimestamp: WideString read Get_RequestSaleTransactionTimestamp write Set_RequestSaleTransactionTimestamp;
		property ReplyPOITransactionID: WideString read Get_ReplyPOITransactionID write Set_ReplyPOITransactionID;
		property ReplyPOITransactionTimestamp: WideString read Get_ReplyPOITransactionTimestamp write Set_ReplyPOITransactionTimestamp;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoCardAcquisitionDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {85FADEEB-5156-405B-87EE-54D9AE22E316}
	// *********************************************************************//
	INexoCardAcquisitionDisp = dispinterface
		['{85FADEEB-5156-405B-87EE-54D9AE22E316}']
		property RequestData: ICardAcquisitionRequestType readonly dispid 1;
		property ReplyData: ICardAcquisitionResponseType readonly dispid 2;
		property RequestSaleTransactionID: WideString dispid 3;
		property RequestSaleTransactionTimestamp: WideString dispid 4;
		property ReplyPOITransactionID: WideString dispid 50;
		property ReplyPOITransactionTimestamp: WideString dispid 51;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoCardReaderInit
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {424AC59E-6B02-46F1-97AD-F4DAF1BEBDCE}
	// *********************************************************************//
	INexoCardReaderInit = interface(IDispatch)
		['{424AC59E-6B02-46F1-97AD-F4DAF1BEBDCE}']
		function Get_RequestData: ICardReaderInitRequestType; safecall;
		function Get_ReplyData: ICardReaderInitResponseType; safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: ICardReaderInitRequestType read Get_RequestData;
		property ReplyData: ICardReaderInitResponseType read Get_ReplyData;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoCardReaderInitDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {424AC59E-6B02-46F1-97AD-F4DAF1BEBDCE}
	// *********************************************************************//
	INexoCardReaderInitDisp = dispinterface
		['{424AC59E-6B02-46F1-97AD-F4DAF1BEBDCE}']
		property RequestData: ICardReaderInitRequestType readonly dispid 1;
		property ReplyData: ICardReaderInitResponseType readonly dispid 2;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoCardReaderAPDU
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {CB4E4768-D56A-4105-B780-004E97929361}
	// *********************************************************************//
	INexoCardReaderAPDU = interface(IDispatch)
		['{CB4E4768-D56A-4105-B780-004E97929361}']
		function Get_RequestData: ICardReaderAPDURequestType; safecall;
		function Get_ReplyData: ICardReaderAPDUResponseType; safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: ICardReaderAPDURequestType read Get_RequestData;
		property ReplyData: ICardReaderAPDUResponseType read Get_ReplyData;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoCardReaderAPDUDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {CB4E4768-D56A-4105-B780-004E97929361}
	// *********************************************************************//
	INexoCardReaderAPDUDisp = dispinterface
		['{CB4E4768-D56A-4105-B780-004E97929361}']
		property RequestData: ICardReaderAPDURequestType readonly dispid 1;
		property ReplyData: ICardReaderAPDUResponseType readonly dispid 2;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoCardReaderPowerOFF
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {70C8C7A9-62C2-4729-929C-8163614D09DA}
	// *********************************************************************//
	INexoCardReaderPowerOFF = interface(IDispatch)
		['{70C8C7A9-62C2-4729-929C-8163614D09DA}']
		function Get_RequestData: ICardReaderPowerOffRequestType; safecall;
		function Get_ReplyData: ICardReaderPowerOffResponseType; safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: ICardReaderPowerOffRequestType read Get_RequestData;
		property ReplyData: ICardReaderPowerOffResponseType read Get_ReplyData;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoCardReaderPowerOFFDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {70C8C7A9-62C2-4729-929C-8163614D09DA}
	// *********************************************************************//
	INexoCardReaderPowerOFFDisp = dispinterface
		['{70C8C7A9-62C2-4729-929C-8163614D09DA}']
		property RequestData: ICardReaderPowerOffRequestType readonly dispid 1;
		property ReplyData: ICardReaderPowerOffResponseType readonly dispid 2;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoDeviceDisplay
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F6DC1D06-11C7-4814-9326-E68C4A9EBF4E}
	// *********************************************************************//
	INexoDeviceDisplay = interface(IDispatch)
		['{F6DC1D06-11C7-4814-9326-E68C4A9EBF4E}']
		function Get_RequestData: IDisplayRequestType; safecall;
		function Get_ReplyData: IDisplayResponseType; safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IDisplayRequestType read Get_RequestData;
		property ReplyData: IDisplayResponseType read Get_ReplyData;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoDeviceDisplayDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F6DC1D06-11C7-4814-9326-E68C4A9EBF4E}
	// *********************************************************************//
	INexoDeviceDisplayDisp = dispinterface
		['{F6DC1D06-11C7-4814-9326-E68C4A9EBF4E}']
		property RequestData: IDisplayRequestType readonly dispid 1;
		property ReplyData: IDisplayResponseType readonly dispid 2;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoDeviceInputUpdate
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {529FFD3D-658C-49C5-85A3-66799AAA5E34}
	// *********************************************************************//
	INexoDeviceInputUpdate = interface(IDispatch)
		['{529FFD3D-658C-49C5-85A3-66799AAA5E34}']
		function Get_RequestData: IInputUpdateType; safecall;
		function Get_RequestMessageReferenceServiceID: WideString; safecall;
		procedure Set_RequestMessageReferenceServiceID(const pRetVal: WideString); safecall;
		function Get_RequestMessageReferenceDeviceID: WideString; safecall;
		procedure Set_RequestMessageReferenceDeviceID(const pRetVal: WideString); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IInputUpdateType read Get_RequestData;
		property RequestMessageReferenceServiceID: WideString read Get_RequestMessageReferenceServiceID write Set_RequestMessageReferenceServiceID;
		property RequestMessageReferenceDeviceID: WideString read Get_RequestMessageReferenceDeviceID write Set_RequestMessageReferenceDeviceID;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoDeviceInputUpdateDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {529FFD3D-658C-49C5-85A3-66799AAA5E34}
	// *********************************************************************//
	INexoDeviceInputUpdateDisp = dispinterface
		['{529FFD3D-658C-49C5-85A3-66799AAA5E34}']
		property RequestData: IInputUpdateType readonly dispid 1;
		property RequestMessageReferenceServiceID: WideString dispid 3;
		property RequestMessageReferenceDeviceID: WideString dispid 4;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoDeviceSound
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {A3534554-E05D-4A11-BB41-88DEC0B20EE4}
	// *********************************************************************//
	INexoDeviceSound = interface(IDispatch)
		['{A3534554-E05D-4A11-BB41-88DEC0B20EE4}']
		function Get_RequestData: ISoundRequestType; safecall;
		function Get_ReplyData: ISoundResponseType; safecall;
		function Get_RequestSoundAction: SoundActionEnumeration; safecall;
		procedure Set_RequestSoundAction(pRetVal: SoundActionEnumeration); safecall;
		function Get_RequestSoundVolume: Integer; safecall;
		procedure Set_RequestSoundVolume(pRetVal: Integer); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: ISoundRequestType read Get_RequestData;
		property ReplyData: ISoundResponseType read Get_ReplyData;
		property RequestSoundAction: SoundActionEnumeration read Get_RequestSoundAction write Set_RequestSoundAction;
		property RequestSoundVolume: Integer read Get_RequestSoundVolume write Set_RequestSoundVolume;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoDeviceSoundDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {A3534554-E05D-4A11-BB41-88DEC0B20EE4}
	// *********************************************************************//
	INexoDeviceSoundDisp = dispinterface
		['{A3534554-E05D-4A11-BB41-88DEC0B20EE4}']
		property RequestData: ISoundRequestType readonly dispid 1;
		property ReplyData: ISoundResponseType readonly dispid 2;
		property RequestSoundAction: SoundActionEnumeration dispid 3;
		property RequestSoundVolume: Integer dispid 4;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoEnableService
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {459D4296-691D-48D6-84E5-F9069D5B85D6}
	// *********************************************************************//
	INexoEnableService = interface(IDispatch)
		['{459D4296-691D-48D6-84E5-F9069D5B85D6}']
		function Get_RequestData: IEnableServiceRequestType; safecall;
		function Get_ReplyData: IEnableServiceResponseType; safecall;
		function Get_RequestTransactionAction: TransactionActionEnumeration; safecall;
		procedure Set_RequestTransactionAction(pRetVal: TransactionActionEnumeration); safecall;
		function Get_RequestServicesEnabled: WideString; safecall;
		procedure Set_RequestServicesEnabled(const pRetVal: WideString); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IEnableServiceRequestType read Get_RequestData;
		property ReplyData: IEnableServiceResponseType read Get_ReplyData;
		property RequestTransactionAction: TransactionActionEnumeration read Get_RequestTransactionAction write Set_RequestTransactionAction;
		property RequestServicesEnabled: WideString read Get_RequestServicesEnabled write Set_RequestServicesEnabled;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoEnableServiceDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {459D4296-691D-48D6-84E5-F9069D5B85D6}
	// *********************************************************************//
	INexoEnableServiceDisp = dispinterface
		['{459D4296-691D-48D6-84E5-F9069D5B85D6}']
		property RequestData: IEnableServiceRequestType readonly dispid 1;
		property ReplyData: IEnableServiceResponseType readonly dispid 2;
		property RequestTransactionAction: TransactionActionEnumeration dispid 3;
		property RequestServicesEnabled: WideString dispid 4;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoGetTotals
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {ED6FDAD1-7D79-4DA6-8F4F-35BCAFADF772}
	// *********************************************************************//
	INexoGetTotals = interface(IDispatch)
		['{ED6FDAD1-7D79-4DA6-8F4F-35BCAFADF772}']
		function Get_RequestData: IGetTotalsRequestType; safecall;
		function Get_ReplyData: IGetTotalsResponseType; safecall;
		function Get_ReplyPOIReconciliationID: WideString; safecall;
		procedure Set_ReplyPOIReconciliationID(const pRetVal: WideString); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IGetTotalsRequestType read Get_RequestData;
		property ReplyData: IGetTotalsResponseType read Get_ReplyData;
		property ReplyPOIReconciliationID: WideString read Get_ReplyPOIReconciliationID write Set_ReplyPOIReconciliationID;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoGetTotalsDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {ED6FDAD1-7D79-4DA6-8F4F-35BCAFADF772}
	// *********************************************************************//
	INexoGetTotalsDisp = dispinterface
		['{ED6FDAD1-7D79-4DA6-8F4F-35BCAFADF772}']
		property RequestData: IGetTotalsRequestType readonly dispid 1;
		property ReplyData: IGetTotalsResponseType readonly dispid 2;
		property ReplyPOIReconciliationID: WideString dispid 50;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoLoyalty
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {C69EE5BC-630A-4D1F-990B-0D0984E07F08}
	// *********************************************************************//
	INexoLoyalty = interface(IDispatch)
		['{C69EE5BC-630A-4D1F-990B-0D0984E07F08}']
		function Get_RequestData: ILoyaltyRequestType; safecall;
		function Get_ReplyData: ILoyaltyResponseType; safecall;
		function Get_RequestSaleTransactionID: WideString; safecall;
		procedure Set_RequestSaleTransactionID(const pRetVal: WideString); safecall;
		function Get_RequestSaleTransactionTimestamp: WideString; safecall;
		procedure Set_RequestSaleTransactionTimestamp(const pRetVal: WideString); safecall;
		function Get_RequestOriginalPOITransactionID: WideString; safecall;
		procedure Set_RequestOriginalPOITransactionID(const pRetVal: WideString); safecall;
		function Get_RequestOriginalPOITransactionTimestamp: WideString; safecall;
		procedure Set_RequestOriginalPOITransactionTimestamp(const pRetVal: WideString); safecall;
		function Get_RequestLoyaltyTransactionType: WideString; safecall;
		procedure Set_RequestLoyaltyTransactionType(const pRetVal: WideString); safecall;
		function Get_ReplySaleTransactionID: WideString; safecall;
		procedure Set_ReplySaleTransactionID(const pRetVal: WideString); safecall;
		function Get_ReplySaleTransactionTimestamp: WideString; safecall;
		procedure Set_ReplySaleTransactionTimestamp(const pRetVal: WideString); safecall;
		function Get_ReplyPOITransactionID: WideString; safecall;
		procedure Set_ReplyPOITransactionID(const pRetVal: WideString); safecall;
		function Get_ReplyPOITransactionTimestamp: WideString; safecall;
		procedure Set_ReplyPOITransactionTimestamp(const pRetVal: WideString); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: ILoyaltyRequestType read Get_RequestData;
		property ReplyData: ILoyaltyResponseType read Get_ReplyData;
		property RequestSaleTransactionID: WideString read Get_RequestSaleTransactionID write Set_RequestSaleTransactionID;
		property RequestSaleTransactionTimestamp: WideString read Get_RequestSaleTransactionTimestamp write Set_RequestSaleTransactionTimestamp;
		property RequestOriginalPOITransactionID: WideString read Get_RequestOriginalPOITransactionID write Set_RequestOriginalPOITransactionID;
		property RequestOriginalPOITransactionTimestamp: WideString read Get_RequestOriginalPOITransactionTimestamp
			write Set_RequestOriginalPOITransactionTimestamp;
		property RequestLoyaltyTransactionType: WideString read Get_RequestLoyaltyTransactionType write Set_RequestLoyaltyTransactionType;
		property ReplySaleTransactionID: WideString read Get_ReplySaleTransactionID write Set_ReplySaleTransactionID;
		property ReplySaleTransactionTimestamp: WideString read Get_ReplySaleTransactionTimestamp write Set_ReplySaleTransactionTimestamp;
		property ReplyPOITransactionID: WideString read Get_ReplyPOITransactionID write Set_ReplyPOITransactionID;
		property ReplyPOITransactionTimestamp: WideString read Get_ReplyPOITransactionTimestamp write Set_ReplyPOITransactionTimestamp;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoLoyaltyDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {C69EE5BC-630A-4D1F-990B-0D0984E07F08}
	// *********************************************************************//
	INexoLoyaltyDisp = dispinterface
		['{C69EE5BC-630A-4D1F-990B-0D0984E07F08}']
		property RequestData: ILoyaltyRequestType readonly dispid 1;
		property ReplyData: ILoyaltyResponseType readonly dispid 2;
		property RequestSaleTransactionID: WideString dispid 3;
		property RequestSaleTransactionTimestamp: WideString dispid 4;
		property RequestOriginalPOITransactionID: WideString dispid 5;
		property RequestOriginalPOITransactionTimestamp: WideString dispid 6;
		property RequestLoyaltyTransactionType: WideString dispid 7;
		property ReplySaleTransactionID: WideString dispid 51;
		property ReplySaleTransactionTimestamp: WideString dispid 52;
		property ReplyPOITransactionID: WideString dispid 53;
		property ReplyPOITransactionTimestamp: WideString dispid 54;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoPayment
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {BD2E9B0D-1DE8-4D77-A974-0E6078206FAA}
	// *********************************************************************//
	INexoPayment = interface(IDispatch)
		['{BD2E9B0D-1DE8-4D77-A974-0E6078206FAA}']
		function Get_RequestData: IPaymentRequestType; safecall;
		function Get_ReplyData: IPaymentResponseType; safecall;
		function Get_RequestSaleTransactionID: WideString; safecall;
		procedure Set_RequestSaleTransactionID(const pRetVal: WideString); safecall;
		function Get_RequestSaleTransactionTimestamp: WideString; safecall;
		procedure Set_RequestSaleTransactionTimestamp(const pRetVal: WideString); safecall;
		function Get_RequestOriginalPOITransactionID: WideString; safecall;
		procedure Set_RequestOriginalPOITransactionID(const pRetVal: WideString); safecall;
		function Get_RequestOriginalPOITransactionTimestamp: WideString; safecall;
		procedure Set_RequestOriginalPOITransactionTimestamp(const pRetVal: WideString); safecall;
		function Get_RequestRequestedAmount: Double; safecall;
		procedure Set_RequestRequestedAmount(pRetVal: Double); safecall;
		function Get_RequestCurrency: WideString; safecall;
		procedure Set_RequestCurrency(const pRetVal: WideString); safecall;
		function Get_RequestSaleReferenceID: WideString; safecall;
		procedure Set_RequestSaleReferenceID(const pRetVal: WideString); safecall;
		function Get_ReplyPOITransactionID: WideString; safecall;
		procedure Set_ReplyPOITransactionID(const pRetVal: WideString); safecall;
		function Get_ReplyPOITransactionTimestamp: WideString; safecall;
		procedure Set_ReplyPOITransactionTimestamp(const pRetVal: WideString); safecall;
		function Get_ReplyAuthorizedAmount: Double; safecall;
		procedure Set_ReplyAuthorizedAmount(pRetVal: Double); safecall;
		function Get_ReplyPaymentInstrumentType: PaymentInstrumentTypeEnumeration; safecall;
		procedure Set_ReplyPaymentInstrumentType(pRetVal: PaymentInstrumentTypeEnumeration); safecall;
		function Get_ReplyPaymentBrand: WideString; safecall;
		procedure Set_ReplyPaymentBrand(const pRetVal: WideString); safecall;
		function Get_ReplyCardCountryCode: WideString; safecall;
		procedure Set_ReplyCardCountryCode(const pRetVal: WideString); safecall;
		function Get_ReplySensitiveCardData: ISensitiveCardDataType; safecall;
		procedure _Set_ReplySensitiveCardData(const pRetVal: ISensitiveCardDataType); safecall;
		function Get_ReplyProtectedCardData: IContentInformationType; safecall;
		procedure _Set_ReplyProtectedCardData(const pRetVal: IContentInformationType); safecall;
		function Get_Accepted: WordBool; safecall;
		function Get_PaymentType: PaymentTypeEnumeration; safecall;
		function Get_IsNormalPayment: WordBool; safecall;
		function Get_IsRefund: WordBool; safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IPaymentRequestType read Get_RequestData;
		property ReplyData: IPaymentResponseType read Get_ReplyData;
		property RequestSaleTransactionID: WideString read Get_RequestSaleTransactionID write Set_RequestSaleTransactionID;
		property RequestSaleTransactionTimestamp: WideString read Get_RequestSaleTransactionTimestamp write Set_RequestSaleTransactionTimestamp;
		property RequestOriginalPOITransactionID: WideString read Get_RequestOriginalPOITransactionID write Set_RequestOriginalPOITransactionID;
		property RequestOriginalPOITransactionTimestamp: WideString read Get_RequestOriginalPOITransactionTimestamp
			write Set_RequestOriginalPOITransactionTimestamp;
		property RequestRequestedAmount: Double read Get_RequestRequestedAmount write Set_RequestRequestedAmount;
		property RequestCurrency: WideString read Get_RequestCurrency write Set_RequestCurrency;
		property RequestSaleReferenceID: WideString read Get_RequestSaleReferenceID write Set_RequestSaleReferenceID;
		property ReplyPOITransactionID: WideString read Get_ReplyPOITransactionID write Set_ReplyPOITransactionID;
		property ReplyPOITransactionTimestamp: WideString read Get_ReplyPOITransactionTimestamp write Set_ReplyPOITransactionTimestamp;
		property ReplyAuthorizedAmount: Double read Get_ReplyAuthorizedAmount write Set_ReplyAuthorizedAmount;
		property ReplyPaymentInstrumentType: PaymentInstrumentTypeEnumeration read Get_ReplyPaymentInstrumentType write Set_ReplyPaymentInstrumentType;
		property ReplyPaymentBrand: WideString read Get_ReplyPaymentBrand write Set_ReplyPaymentBrand;
		property ReplyCardCountryCode: WideString read Get_ReplyCardCountryCode write Set_ReplyCardCountryCode;
		property ReplySensitiveCardData: ISensitiveCardDataType read Get_ReplySensitiveCardData write _Set_ReplySensitiveCardData;
		property ReplyProtectedCardData: IContentInformationType read Get_ReplyProtectedCardData write _Set_ReplyProtectedCardData;
		property Accepted: WordBool read Get_Accepted;
		property PaymentType: PaymentTypeEnumeration read Get_PaymentType;
		property IsNormalPayment: WordBool read Get_IsNormalPayment;
		property IsRefund: WordBool read Get_IsRefund;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoPaymentDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {BD2E9B0D-1DE8-4D77-A974-0E6078206FAA}
	// *********************************************************************//
	INexoPaymentDisp = dispinterface
		['{BD2E9B0D-1DE8-4D77-A974-0E6078206FAA}']
		property RequestData: IPaymentRequestType readonly dispid 1;
		property ReplyData: IPaymentResponseType readonly dispid 2;
		property RequestSaleTransactionID: WideString dispid 5;
		property RequestSaleTransactionTimestamp: WideString dispid 6;
		property RequestOriginalPOITransactionID: WideString dispid 7;
		property RequestOriginalPOITransactionTimestamp: WideString dispid 8;
		property RequestRequestedAmount: Double dispid 9;
		property RequestCurrency: WideString dispid 10;
		property RequestSaleReferenceID: WideString dispid 11;
		property ReplyPOITransactionID: WideString dispid 50;
		property ReplyPOITransactionTimestamp: WideString dispid 51;
		property ReplyAuthorizedAmount: Double dispid 52;
		property ReplyPaymentInstrumentType: PaymentInstrumentTypeEnumeration dispid 53;
		property ReplyPaymentBrand: WideString dispid 54;
		property ReplyCardCountryCode: WideString dispid 55;
		property ReplySensitiveCardData: ISensitiveCardDataType dispid 56;
		property ReplyProtectedCardData: IContentInformationType dispid 57;
		property Accepted: WordBool readonly dispid 500;
		property PaymentType: PaymentTypeEnumeration readonly dispid 501;
		property IsNormalPayment: WordBool readonly dispid 502;
		property IsRefund: WordBool readonly dispid 503;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoPIN
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {877BE257-F158-4A4F-9646-6080B193749B}
	// *********************************************************************//
	INexoPIN = interface(IDispatch)
		['{877BE257-F158-4A4F-9646-6080B193749B}']
		function Get_RequestData: IPINRequestType; safecall;
		function Get_ReplyData: IPINResponseType; safecall;
		function Get_RequestPINRequestType: PINRequestTypeEnumeration; safecall;
		procedure Set_RequestPINRequestType(pRetVal: PINRequestTypeEnumeration); safecall;
		function Get_RequestMaxWaitingTime: Integer; safecall;
		procedure Set_RequestMaxWaitingTime(pRetVal: Integer); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IPINRequestType read Get_RequestData;
		property ReplyData: IPINResponseType read Get_ReplyData;
		property RequestPINRequestType: PINRequestTypeEnumeration read Get_RequestPINRequestType write Set_RequestPINRequestType;
		property RequestMaxWaitingTime: Integer read Get_RequestMaxWaitingTime write Set_RequestMaxWaitingTime;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoPINDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {877BE257-F158-4A4F-9646-6080B193749B}
	// *********************************************************************//
	INexoPINDisp = dispinterface
		['{877BE257-F158-4A4F-9646-6080B193749B}']
		property RequestData: IPINRequestType readonly dispid 1;
		property ReplyData: IPINResponseType readonly dispid 2;
		property RequestPINRequestType: PINRequestTypeEnumeration dispid 3;
		property RequestMaxWaitingTime: Integer dispid 4;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoReconciliation
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {7ADA4C0C-EEAD-4B53-8089-A8B7491D1FB6}
	// *********************************************************************//
	INexoReconciliation = interface(IDispatch)
		['{7ADA4C0C-EEAD-4B53-8089-A8B7491D1FB6}']
		function Get_RequestData: IReconciliationRequestType; safecall;
		function Get_ReplyData: IReconciliationResponseType; safecall;
		function Get_RequestReconciliationType: ReconciliationTypeEnumeration; safecall;
		procedure Set_RequestReconciliationType(pRetVal: ReconciliationTypeEnumeration); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IReconciliationRequestType read Get_RequestData;
		property ReplyData: IReconciliationResponseType read Get_ReplyData;
		property RequestReconciliationType: ReconciliationTypeEnumeration read Get_RequestReconciliationType write Set_RequestReconciliationType;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoReconciliationDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {7ADA4C0C-EEAD-4B53-8089-A8B7491D1FB6}
	// *********************************************************************//
	INexoReconciliationDisp = dispinterface
		['{7ADA4C0C-EEAD-4B53-8089-A8B7491D1FB6}']
		property RequestData: IReconciliationRequestType readonly dispid 1;
		property ReplyData: IReconciliationResponseType readonly dispid 2;
		property RequestReconciliationType: ReconciliationTypeEnumeration dispid 3;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoStoredValue
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2F3C26FD-174D-45BC-86A4-981B953C6611}
	// *********************************************************************//
	INexoStoredValue = interface(IDispatch)
		['{2F3C26FD-174D-45BC-86A4-981B953C6611}']
		function Get_RequestData: IStoredValueRequestType; safecall;
		function Get_ReplyData: IStoredValueResponseType; safecall;
		function Get_RequestSaleTransactionID: WideString; safecall;
		procedure Set_RequestSaleTransactionID(const pRetVal: WideString); safecall;
		function Get_RequestSaleTransactionTimestamp: WideString; safecall;
		procedure Set_RequestSaleTransactionTimestamp(const pRetVal: WideString); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IStoredValueRequestType read Get_RequestData;
		property ReplyData: IStoredValueResponseType read Get_ReplyData;
		property RequestSaleTransactionID: WideString read Get_RequestSaleTransactionID write Set_RequestSaleTransactionID;
		property RequestSaleTransactionTimestamp: WideString read Get_RequestSaleTransactionTimestamp write Set_RequestSaleTransactionTimestamp;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoStoredValueDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2F3C26FD-174D-45BC-86A4-981B953C6611}
	// *********************************************************************//
	INexoStoredValueDisp = dispinterface
		['{2F3C26FD-174D-45BC-86A4-981B953C6611}']
		property RequestData: IStoredValueRequestType readonly dispid 1;
		property ReplyData: IStoredValueResponseType readonly dispid 2;
		property RequestSaleTransactionID: WideString dispid 3;
		property RequestSaleTransactionTimestamp: WideString dispid 4;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoTransmit
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {8314ADA0-DD56-497D-9FFA-02A86CB305CA}
	// *********************************************************************//
	INexoTransmit = interface(IDispatch)
		['{8314ADA0-DD56-497D-9FFA-02A86CB305CA}']
		function Get_RequestData: ITransmitRequestType; safecall;
		function Get_ReplyData: ITransmitResponseType; safecall;
		function Get_RequestMaximumTransmitTime: Integer; safecall;
		procedure Set_RequestMaximumTransmitTime(pRetVal: Integer); safecall;
		function Get_RequestDestinationAddress: WideString; safecall;
		procedure Set_RequestDestinationAddress(const pRetVal: WideString); safecall;
		function Get_RequestMessage: WideString; safecall;
		procedure Set_RequestMessage(const pRetVal: WideString); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: ITransmitRequestType read Get_RequestData;
		property ReplyData: ITransmitResponseType read Get_ReplyData;
		property RequestMaximumTransmitTime: Integer read Get_RequestMaximumTransmitTime write Set_RequestMaximumTransmitTime;
		property RequestDestinationAddress: WideString read Get_RequestDestinationAddress write Set_RequestDestinationAddress;
		property RequestMessage: WideString read Get_RequestMessage write Set_RequestMessage;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoTransmitDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {8314ADA0-DD56-497D-9FFA-02A86CB305CA}
	// *********************************************************************//
	INexoTransmitDisp = dispinterface
		['{8314ADA0-DD56-497D-9FFA-02A86CB305CA}']
		property RequestData: ITransmitRequestType readonly dispid 1;
		property ReplyData: ITransmitResponseType readonly dispid 2;
		property RequestMaximumTransmitTime: Integer dispid 3;
		property RequestDestinationAddress: WideString dispid 4;
		property RequestMessage: WideString dispid 5;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoAbort
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D71CE22F-0AA1-4792-9857-864A5E29A2BE}
	// *********************************************************************//
	INexoAbort = interface(IDispatch)
		['{D71CE22F-0AA1-4792-9857-864A5E29A2BE}']
		function Get_RequestData: IAbortRequestType; safecall;
		function Get_AbortPOIID: WideString; safecall;
		procedure Set_AbortPOIID(const pRetVal: WideString); safecall;
		function Get_AbortSaleID: WideString; safecall;
		procedure Set_AbortSaleID(const pRetVal: WideString); safecall;
		function Get_AbortServiceID: WideString; safecall;
		procedure Set_AbortServiceID(const pRetVal: WideString); safecall;
		function Get_AbortDeviceID: WideString; safecall;
		procedure Set_AbortDeviceID(const pRetVal: WideString); safecall;
		function Get_AbortMessageCategory: MessageCategoryEnumeration; safecall;
		procedure Set_AbortMessageCategory(pRetVal: MessageCategoryEnumeration); safecall;
		function Get_AbortReason: WideString; safecall;
		procedure Set_AbortReason(const pRetVal: WideString); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IAbortRequestType read Get_RequestData;
		property AbortPOIID: WideString read Get_AbortPOIID write Set_AbortPOIID;
		property AbortSaleID: WideString read Get_AbortSaleID write Set_AbortSaleID;
		property AbortServiceID: WideString read Get_AbortServiceID write Set_AbortServiceID;
		property AbortDeviceID: WideString read Get_AbortDeviceID write Set_AbortDeviceID;
		property AbortMessageCategory: MessageCategoryEnumeration read Get_AbortMessageCategory write Set_AbortMessageCategory;
		property AbortReason: WideString read Get_AbortReason write Set_AbortReason;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoAbortDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D71CE22F-0AA1-4792-9857-864A5E29A2BE}
	// *********************************************************************//
	INexoAbortDisp = dispinterface
		['{D71CE22F-0AA1-4792-9857-864A5E29A2BE}']
		property RequestData: IAbortRequestType readonly dispid 1;
		property AbortPOIID: WideString dispid 3;
		property AbortSaleID: WideString dispid 4;
		property AbortServiceID: WideString dispid 5;
		property AbortDeviceID: WideString dispid 6;
		property AbortMessageCategory: MessageCategoryEnumeration dispid 7;
		property AbortReason: WideString dispid 8;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoDiagnosis
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {E8C62FFB-C292-4592-A538-8283E5807DA1}
	// *********************************************************************//
	INexoDiagnosis = interface(IDispatch)
		['{E8C62FFB-C292-4592-A538-8283E5807DA1}']
		function Get_RequestData: IDiagnosisRequestType; safecall;
		function Get_ReplyData: IDiagnosisResponseType; safecall;
		function Get_RequestPOIID: WideString; safecall;
		procedure Set_RequestPOIID(const pRetVal: WideString); safecall;
		function Get_RequestHostDiagnosisFlag: WordBool; safecall;
		procedure Set_RequestHostDiagnosisFlag(pRetVal: WordBool); safecall;
		function Get_ReplyGlobalStatus: GlobalStatusEnumeration; safecall;
		procedure Set_ReplyGlobalStatus(pRetVal: GlobalStatusEnumeration); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IDiagnosisRequestType read Get_RequestData;
		property ReplyData: IDiagnosisResponseType read Get_ReplyData;
		property RequestPOIID: WideString read Get_RequestPOIID write Set_RequestPOIID;
		property RequestHostDiagnosisFlag: WordBool read Get_RequestHostDiagnosisFlag write Set_RequestHostDiagnosisFlag;
		property ReplyGlobalStatus: GlobalStatusEnumeration read Get_ReplyGlobalStatus write Set_ReplyGlobalStatus;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoDiagnosisDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {E8C62FFB-C292-4592-A538-8283E5807DA1}
	// *********************************************************************//
	INexoDiagnosisDisp = dispinterface
		['{E8C62FFB-C292-4592-A538-8283E5807DA1}']
		property RequestData: IDiagnosisRequestType readonly dispid 1;
		property ReplyData: IDiagnosisResponseType readonly dispid 2;
		property RequestPOIID: WideString dispid 3;
		property RequestHostDiagnosisFlag: WordBool dispid 4;
		property ReplyGlobalStatus: GlobalStatusEnumeration dispid 50;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoEvent
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {389CD3D9-3950-4A61-B90E-BC9EB85E0008}
	// *********************************************************************//
	INexoEvent = interface(IDispatch)
		['{389CD3D9-3950-4A61-B90E-BC9EB85E0008}']
		function Get_RequestData: IEventNotificationType; safecall;
		function Get_EventTimestamp: WideString; safecall;
		procedure Set_EventTimestamp(const pRetVal: WideString); safecall;
		function Get_EventToNotify: EventToNotifyEnumeration; safecall;
		procedure Set_EventToNotify(pRetVal: EventToNotifyEnumeration); safecall;
		function Get_EventDetails: WideString; safecall;
		procedure Set_EventDetails(const pRetVal: WideString); safecall;
		function Get_EventRejectedMessage: INexoNonStringType; safecall;
		procedure _Set_EventRejectedMessage(const pRetVal: INexoNonStringType); safecall;
		function Get_EventMaintenanceRequiredFlag: WordBool; safecall;
		procedure Set_EventMaintenanceRequiredFlag(pRetVal: WordBool); safecall;
		function Get_EventCustomerLanguage: WideString; safecall;
		procedure Set_EventCustomerLanguage(const pRetVal: WideString); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IEventNotificationType read Get_RequestData;
		property EventTimestamp: WideString read Get_EventTimestamp write Set_EventTimestamp;
		property EventToNotify: EventToNotifyEnumeration read Get_EventToNotify write Set_EventToNotify;
		property EventDetails: WideString read Get_EventDetails write Set_EventDetails;
		property EventRejectedMessage: INexoNonStringType read Get_EventRejectedMessage write _Set_EventRejectedMessage;
		property EventMaintenanceRequiredFlag: WordBool read Get_EventMaintenanceRequiredFlag write Set_EventMaintenanceRequiredFlag;
		property EventCustomerLanguage: WideString read Get_EventCustomerLanguage write Set_EventCustomerLanguage;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoEventDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {389CD3D9-3950-4A61-B90E-BC9EB85E0008}
	// *********************************************************************//
	INexoEventDisp = dispinterface
		['{389CD3D9-3950-4A61-B90E-BC9EB85E0008}']
		property RequestData: IEventNotificationType readonly dispid 1;
		property EventTimestamp: WideString dispid 2;
		property EventToNotify: EventToNotifyEnumeration dispid 3;
		property EventDetails: WideString dispid 4;
		property EventRejectedMessage: INexoNonStringType dispid 5;
		property EventMaintenanceRequiredFlag: WordBool dispid 6;
		property EventCustomerLanguage: WideString dispid 7;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoTransactionStatus
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {18C58418-DF2D-4CF4-B394-7C055526C73A}
	// *********************************************************************//
	INexoTransactionStatus = interface(IDispatch)
		['{18C58418-DF2D-4CF4-B394-7C055526C73A}']
		function Get_RequestData: ITransactionStatusRequestType; safecall;
		function Get_ReplyData: ITransactionStatusResponseType; safecall;
		function Get_RequestMessageReference: IMessageReferenceType; safecall;
		procedure _Set_RequestMessageReference(const pRetVal: IMessageReferenceType); safecall;
		function Get_RequestReceiptReprintFlag: WordBool; safecall;
		procedure Set_RequestReceiptReprintFlag(pRetVal: WordBool); safecall;
		function Get_ReplyMessageReference: IMessageReferenceType; safecall;
		procedure _Set_ReplyMessageReference(const pRetVal: IMessageReferenceType); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: ITransactionStatusRequestType read Get_RequestData;
		property ReplyData: ITransactionStatusResponseType read Get_ReplyData;
		property RequestMessageReference: IMessageReferenceType read Get_RequestMessageReference write _Set_RequestMessageReference;
		property RequestReceiptReprintFlag: WordBool read Get_RequestReceiptReprintFlag write Set_RequestReceiptReprintFlag;
		property ReplyMessageReference: IMessageReferenceType read Get_ReplyMessageReference write _Set_ReplyMessageReference;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoTransactionStatusDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {18C58418-DF2D-4CF4-B394-7C055526C73A}
	// *********************************************************************//
	INexoTransactionStatusDisp = dispinterface
		['{18C58418-DF2D-4CF4-B394-7C055526C73A}']
		property RequestData: ITransactionStatusRequestType readonly dispid 1;
		property ReplyData: ITransactionStatusResponseType readonly dispid 2;
		property RequestMessageReference: IMessageReferenceType dispid 3;
		property RequestReceiptReprintFlag: WordBool dispid 4;
		property ReplyMessageReference: IMessageReferenceType dispid 5;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoResponseType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {5987CC8F-70A4-4FB9-BCEA-71A706CA27C9}
	// *********************************************************************//
	INexoResponseType = interface(IDispatch)
		['{5987CC8F-70A4-4FB9-BCEA-71A706CA27C9}']
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Response: IResponseType; safecall;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
	end;

	// *********************************************************************//
	// DispIntf :    INexoResponseTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {5987CC8F-70A4-4FB9-BCEA-71A706CA27C9}
	// *********************************************************************//
	INexoResponseTypeDisp = dispinterface
		['{5987CC8F-70A4-4FB9-BCEA-71A706CA27C9}']
		property Result: ResultEnumeration dispid 1;
		property ErrorCondition: ErrorConditionEnumeration dispid 2;
		property AdditionalResponse: WideString dispid 3;
		function Response: IResponseType; dispid 100;
	end;

	// *********************************************************************//
	// Interface :   INexoDeviceInput
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2CD13AE4-4DF6-47EC-8487-0BBB017D37ED}
	// *********************************************************************//
	INexoDeviceInput = interface(IDispatch)
		['{2CD13AE4-4DF6-47EC-8487-0BBB017D37ED}']
		function Get_RequestData: IInputRequestType; safecall;
		function Get_ReplyData: IInputResponseType; safecall;
		function Get_RequestDevice: DeviceEnumeration; safecall;
		procedure Set_RequestDevice(pRetVal: DeviceEnumeration); safecall;
		function Get_RequestInfoQualify: InfoQualifyEnumeration; safecall;
		procedure Set_RequestInfoQualify(pRetVal: InfoQualifyEnumeration); safecall;
		function Get_RequestInputCommand: InputCommandEnumeration; safecall;
		procedure Set_RequestInputCommand(pRetVal: InputCommandEnumeration); safecall;
		function Get_RequestMaxInputTime: Integer; safecall;
		procedure Set_RequestMaxInputTime(pRetVal: Integer); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IInputRequestType read Get_RequestData;
		property ReplyData: IInputResponseType read Get_ReplyData;
		property RequestDevice: DeviceEnumeration read Get_RequestDevice write Set_RequestDevice;
		property RequestInfoQualify: InfoQualifyEnumeration read Get_RequestInfoQualify write Set_RequestInfoQualify;
		property RequestInputCommand: InputCommandEnumeration read Get_RequestInputCommand write Set_RequestInputCommand;
		property RequestMaxInputTime: Integer read Get_RequestMaxInputTime write Set_RequestMaxInputTime;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoDeviceInputDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {2CD13AE4-4DF6-47EC-8487-0BBB017D37ED}
	// *********************************************************************//
	INexoDeviceInputDisp = dispinterface
		['{2CD13AE4-4DF6-47EC-8487-0BBB017D37ED}']
		property RequestData: IInputRequestType readonly dispid 1;
		property ReplyData: IInputResponseType readonly dispid 2;
		property RequestDevice: DeviceEnumeration dispid 3;
		property RequestInfoQualify: InfoQualifyEnumeration dispid 4;
		property RequestInputCommand: InputCommandEnumeration dispid 5;
		property RequestMaxInputTime: Integer dispid 6;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoDevicePrint
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F9BC46A7-AA77-4B4B-81CC-1348E2E4FABC}
	// *********************************************************************//
	INexoDevicePrint = interface(IDispatch)
		['{F9BC46A7-AA77-4B4B-81CC-1348E2E4FABC}']
		function Get_RequestData: IPrintRequestType; safecall;
		function Get_ReplyData: IPrintResponseType; safecall;
		function Get_RequestDocumentQualifier: DocumentQualifierEnumeration; safecall;
		procedure Set_RequestDocumentQualifier(pRetVal: DocumentQualifierEnumeration); safecall;
		function Get_RequestResponseMode: ResponseModeEnumeration; safecall;
		procedure Set_RequestResponseMode(pRetVal: ResponseModeEnumeration); safecall;
		function Get_RequestOutputFormat: OutputFormatEnumeration; safecall;
		procedure Set_RequestOutputFormat(pRetVal: OutputFormatEnumeration); safecall;
		function Get_ReplyDocumentQualifier: DocumentQualifierEnumeration; safecall;
		procedure Set_ReplyDocumentQualifier(pRetVal: DocumentQualifierEnumeration); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IPrintRequestType read Get_RequestData;
		property ReplyData: IPrintResponseType read Get_ReplyData;
		property RequestDocumentQualifier: DocumentQualifierEnumeration read Get_RequestDocumentQualifier write Set_RequestDocumentQualifier;
		property RequestResponseMode: ResponseModeEnumeration read Get_RequestResponseMode write Set_RequestResponseMode;
		property RequestOutputFormat: OutputFormatEnumeration read Get_RequestOutputFormat write Set_RequestOutputFormat;
		property ReplyDocumentQualifier: DocumentQualifierEnumeration read Get_ReplyDocumentQualifier write Set_ReplyDocumentQualifier;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoDevicePrintDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F9BC46A7-AA77-4B4B-81CC-1348E2E4FABC}
	// *********************************************************************//
	INexoDevicePrintDisp = dispinterface
		['{F9BC46A7-AA77-4B4B-81CC-1348E2E4FABC}']
		property RequestData: IPrintRequestType readonly dispid 1;
		property ReplyData: IPrintResponseType readonly dispid 2;
		property RequestDocumentQualifier: DocumentQualifierEnumeration dispid 3;
		property RequestResponseMode: ResponseModeEnumeration dispid 4;
		property RequestOutputFormat: OutputFormatEnumeration dispid 5;
		property ReplyDocumentQualifier: DocumentQualifierEnumeration dispid 50;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoLogin
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4B77D218-D00F-4C13-9652-F0E9E11F3BF3}
	// *********************************************************************//
	INexoLogin = interface(IDispatch)
		['{4B77D218-D00F-4C13-9652-F0E9E11F3BF3}']
		function Get_RequestData: ILoginRequestType; safecall;
		function Get_ReplyData: ILoginResponseType; safecall;
		function Get_RequestManufacturerID: WideString; safecall;
		procedure Set_RequestManufacturerID(const pRetVal: WideString); safecall;
		function Get_RequestApplicationName: WideString; safecall;
		procedure Set_RequestApplicationName(const pRetVal: WideString); safecall;
		function Get_RequestSoftwareVersion: WideString; safecall;
		procedure Set_RequestSoftwareVersion(const pRetVal: WideString); safecall;
		function Get_RequestCertificationCode: WideString; safecall;
		procedure Set_RequestCertificationCode(const pRetVal: WideString); safecall;
		function Get_RequestTerminalEnvironment: WideString; safecall;
		procedure Set_RequestTerminalEnvironment(const pRetVal: WideString); safecall;
		function Get_RequestSaleCapabilities: WideString; safecall;
		procedure Set_RequestSaleCapabilities(const pRetVal: WideString); safecall;
		function Get_RequestOperatorID: WideString; safecall;
		procedure Set_RequestOperatorID(const pRetVal: WideString); safecall;
		function Get_RequestOperatorLanguage: WideString; safecall;
		procedure Set_RequestOperatorLanguage(const pRetVal: WideString); safecall;
		function Get_RequestDateTime: WideString; safecall;
		procedure Set_RequestDateTime(const pRetVal: WideString); safecall;
		function Get_ProtocolVersion: WideString; safecall;
		function Get_ReplyDateTime: WideString; safecall;
		procedure Set_ReplyDateTime(const pRetVal: WideString); safecall;
		function Get_ReplyApplicationName: WideString; safecall;
		procedure Set_ReplyApplicationName(const pRetVal: WideString); safecall;
		function Get_ReplySoftwareVersion: WideString; safecall;
		procedure Set_ReplySoftwareVersion(const pRetVal: WideString); safecall;
		function Get_ReplyCertificationCode: WideString; safecall;
		procedure Set_ReplyCertificationCode(const pRetVal: WideString); safecall;
		function Get_ReplyTerminalEnvironment: WideString; safecall;
		function Get_ReplyPOICapabilities: WideString; safecall;
		procedure Set_ReplyPOICapabilities(const pRetVal: WideString); safecall;
		function Get_ReplyPOISerialNumber: WideString; safecall;
		procedure Set_ReplyPOISerialNumber(const pRetVal: WideString); safecall;
		function Get_ReplyGlobalStatus: GlobalStatusEnumeration; safecall;
		procedure Set_ReplyGlobalStatus(pRetVal: GlobalStatusEnumeration); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: ILoginRequestType read Get_RequestData;
		property ReplyData: ILoginResponseType read Get_ReplyData;
		property RequestManufacturerID: WideString read Get_RequestManufacturerID write Set_RequestManufacturerID;
		property RequestApplicationName: WideString read Get_RequestApplicationName write Set_RequestApplicationName;
		property RequestSoftwareVersion: WideString read Get_RequestSoftwareVersion write Set_RequestSoftwareVersion;
		property RequestCertificationCode: WideString read Get_RequestCertificationCode write Set_RequestCertificationCode;
		property RequestTerminalEnvironment: WideString read Get_RequestTerminalEnvironment write Set_RequestTerminalEnvironment;
		property RequestSaleCapabilities: WideString read Get_RequestSaleCapabilities write Set_RequestSaleCapabilities;
		property RequestOperatorID: WideString read Get_RequestOperatorID write Set_RequestOperatorID;
		property RequestOperatorLanguage: WideString read Get_RequestOperatorLanguage write Set_RequestOperatorLanguage;
		property RequestDateTime: WideString read Get_RequestDateTime write Set_RequestDateTime;
		property ProtocolVersion: WideString read Get_ProtocolVersion;
		property ReplyDateTime: WideString read Get_ReplyDateTime write Set_ReplyDateTime;
		property ReplyApplicationName: WideString read Get_ReplyApplicationName write Set_ReplyApplicationName;
		property ReplySoftwareVersion: WideString read Get_ReplySoftwareVersion write Set_ReplySoftwareVersion;
		property ReplyCertificationCode: WideString read Get_ReplyCertificationCode write Set_ReplyCertificationCode;
		property ReplyTerminalEnvironment: WideString read Get_ReplyTerminalEnvironment;
		property ReplyPOICapabilities: WideString read Get_ReplyPOICapabilities write Set_ReplyPOICapabilities;
		property ReplyPOISerialNumber: WideString read Get_ReplyPOISerialNumber write Set_ReplyPOISerialNumber;
		property ReplyGlobalStatus: GlobalStatusEnumeration read Get_ReplyGlobalStatus write Set_ReplyGlobalStatus;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoLoginDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4B77D218-D00F-4C13-9652-F0E9E11F3BF3}
	// *********************************************************************//
	INexoLoginDisp = dispinterface
		['{4B77D218-D00F-4C13-9652-F0E9E11F3BF3}']
		property RequestData: ILoginRequestType readonly dispid 1;
		property ReplyData: ILoginResponseType readonly dispid 2;
		property RequestManufacturerID: WideString dispid 4;
		property RequestApplicationName: WideString dispid 5;
		property RequestSoftwareVersion: WideString dispid 6;
		property RequestCertificationCode: WideString dispid 7;
		property RequestTerminalEnvironment: WideString dispid 8;
		property RequestSaleCapabilities: WideString dispid 9;
		property RequestOperatorID: WideString dispid 10;
		property RequestOperatorLanguage: WideString dispid 11;
		property RequestDateTime: WideString dispid 12;
		property ProtocolVersion: WideString readonly dispid 13;
		property ReplyDateTime: WideString dispid 50;
		property ReplyApplicationName: WideString dispid 51;
		property ReplySoftwareVersion: WideString dispid 52;
		property ReplyCertificationCode: WideString dispid 53;
		property ReplyTerminalEnvironment: WideString readonly dispid 54;
		property ReplyPOICapabilities: WideString dispid 55;
		property ReplyPOISerialNumber: WideString dispid 56;
		property ReplyGlobalStatus: GlobalStatusEnumeration dispid 57;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoLogout
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {37A4DF49-8D4A-43E6-BAAB-FDFD7C550AB9}
	// *********************************************************************//
	INexoLogout = interface(IDispatch)
		['{37A4DF49-8D4A-43E6-BAAB-FDFD7C550AB9}']
		function Get_RequestData: ILogoutRequestType; safecall;
		function Get_ReplyData: ILogoutResponseType; safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: ILogoutRequestType read Get_RequestData;
		property ReplyData: ILogoutResponseType read Get_ReplyData;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoLogoutDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {37A4DF49-8D4A-43E6-BAAB-FDFD7C550AB9}
	// *********************************************************************//
	INexoLogoutDisp = dispinterface
		['{37A4DF49-8D4A-43E6-BAAB-FDFD7C550AB9}']
		property RequestData: ILogoutRequestType readonly dispid 1;
		property ReplyData: ILogoutResponseType readonly dispid 2;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoReversal
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {DBC11F2F-A231-47BB-9CD1-0B36872B6BB4}
	// *********************************************************************//
	INexoReversal = interface(IDispatch)
		['{DBC11F2F-A231-47BB-9CD1-0B36872B6BB4}']
		function Get_RequestData: IReversalRequestType; safecall;
		function Get_ReplyData: IReversalResponseType; safecall;
		function Get_RequestOriginalPOITransactionID: WideString; safecall;
		procedure Set_RequestOriginalPOITransactionID(const pRetVal: WideString); safecall;
		function Get_RequestOriginalPOITransactionTimestamp: WideString; safecall;
		procedure Set_RequestOriginalPOITransactionTimestamp(const pRetVal: WideString); safecall;
		function Get_RequestSaleReferenceID: WideString; safecall;
		procedure Set_RequestSaleReferenceID(const pRetVal: WideString); safecall;
		function Get_RequestReversedAmount: Double; safecall;
		procedure Set_RequestReversedAmount(pRetVal: Double); safecall;
		function Get_RequestReversalReason: ReversalReasonEnumeration; safecall;
		procedure Set_RequestReversalReason(pRetVal: ReversalReasonEnumeration); safecall;
		function Get_ReplyPOITransactionID: WideString; safecall;
		procedure Set_ReplyPOITransactionID(const pRetVal: WideString); safecall;
		function Get_ReplyPOITimestamp: WideString; safecall;
		procedure Set_ReplyPOITimestamp(const pRetVal: WideString); safecall;
		function Get_ReplyReversedAmount: Double; safecall;
		procedure Set_ReplyReversedAmount(pRetVal: Double); safecall;
		function Get_Request: ISaleToPOIRequest; safecall;
		function Get_Reply: ISaleToPOIResponse; safecall;
		function Get_SerializedRequest: WideString; safecall;
		function Get_SerializedReply: WideString; safecall;
		function Get_Response: IResponseType; safecall;
		procedure _Set_Response(const pRetVal: IResponseType); safecall;
		function Get_MessageCategory: MessageCategoryEnumeration; safecall;
		function Get_MessageClass: MessageClassEnumeration; safecall;
		function Get_IsService: WordBool; safecall;
		function Get_IsDevice: WordBool; safecall;
		function Get_IsEvent: WordBool; safecall;
		function Get_SaleID: WideString; safecall;
		procedure Set_SaleID(const pRetVal: WideString); safecall;
		function Get_POIID: WideString; safecall;
		procedure Set_POIID(const pRetVal: WideString); safecall;
		function Get_ServiceID: WideString; safecall;
		procedure Set_ServiceID(const pRetVal: WideString); safecall;
		function Get_DeviceID: WideString; safecall;
		procedure Set_DeviceID(const pRetVal: WideString); safecall;
		function Get_Success: WordBool; safecall;
		function Get_Failure: WordBool; safecall;
		function Get_Partial: WordBool; safecall;
		function Get_Unknown: WordBool; safecall;
		function Get_Aborted: WordBool; safecall;
		function Get_Busy: WordBool; safecall;
		function Get_Cancel: WordBool; safecall;
		function Get_DeviceOut: WordBool; safecall;
		function Get_InsertedCard: WordBool; safecall;
		function Get_InProgress: WordBool; safecall;
		function Get_LoggedOut: WordBool; safecall;
		function Get_MessageFormat: WordBool; safecall;
		function Get_NotAllowed: WordBool; safecall;
		function Get_NotFound: WordBool; safecall;
		function Get_PaymentRestriction: WordBool; safecall;
		function Get_Refusal: WordBool; safecall;
		function Get_UnavailableDevice: WordBool; safecall;
		function Get_UnavailableService: WordBool; safecall;
		function Get_InvalidCard: WordBool; safecall;
		function Get_UnreachableHost: WordBool; safecall;
		function Get_WrongPIN: WordBool; safecall;
		function Get_UnknownError: WordBool; safecall;
		function Get_Result: ResultEnumeration; safecall;
		procedure Set_Result(pRetVal: ResultEnumeration); safecall;
		function Get_ErrorCondition: ErrorConditionEnumeration; safecall;
		procedure Set_ErrorCondition(pRetVal: ErrorConditionEnumeration); safecall;
		function Get_AdditionalResponse: WideString; safecall;
		procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
		function Get_ResultAsString: WideString; safecall;
		function Get_ErrorConditionAsString: WideString; safecall;
		function Get_AddMilliseconds: WordBool; safecall;
		procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function AutoID: WideString; safecall;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString; safecall;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; safecall;
		function FromItem(const Item: INexoItem): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property RequestData: IReversalRequestType read Get_RequestData;
		property ReplyData: IReversalResponseType read Get_ReplyData;
		property RequestOriginalPOITransactionID: WideString read Get_RequestOriginalPOITransactionID write Set_RequestOriginalPOITransactionID;
		property RequestOriginalPOITransactionTimestamp: WideString read Get_RequestOriginalPOITransactionTimestamp
			write Set_RequestOriginalPOITransactionTimestamp;
		property RequestSaleReferenceID: WideString read Get_RequestSaleReferenceID write Set_RequestSaleReferenceID;
		property RequestReversedAmount: Double read Get_RequestReversedAmount write Set_RequestReversedAmount;
		property RequestReversalReason: ReversalReasonEnumeration read Get_RequestReversalReason write Set_RequestReversalReason;
		property ReplyPOITransactionID: WideString read Get_ReplyPOITransactionID write Set_ReplyPOITransactionID;
		property ReplyPOITimestamp: WideString read Get_ReplyPOITimestamp write Set_ReplyPOITimestamp;
		property ReplyReversedAmount: Double read Get_ReplyReversedAmount write Set_ReplyReversedAmount;
		property Request: ISaleToPOIRequest read Get_Request;
		property Reply: ISaleToPOIResponse read Get_Reply;
		property SerializedRequest: WideString read Get_SerializedRequest;
		property SerializedReply: WideString read Get_SerializedReply;
		property Response: IResponseType read Get_Response write _Set_Response;
		property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
		property MessageClass: MessageClassEnumeration read Get_MessageClass;
		property IsService: WordBool read Get_IsService;
		property IsDevice: WordBool read Get_IsDevice;
		property IsEvent: WordBool read Get_IsEvent;
		property SaleID: WideString read Get_SaleID write Set_SaleID;
		property POIID: WideString read Get_POIID write Set_POIID;
		property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
		property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
		property Success: WordBool read Get_Success;
		property Failure: WordBool read Get_Failure;
		property Partial: WordBool read Get_Partial;
		property Unknown: WordBool read Get_Unknown;
		property Aborted: WordBool read Get_Aborted;
		property Busy: WordBool read Get_Busy;
		property Cancel: WordBool read Get_Cancel;
		property DeviceOut: WordBool read Get_DeviceOut;
		property InsertedCard: WordBool read Get_InsertedCard;
		property InProgress: WordBool read Get_InProgress;
		property LoggedOut: WordBool read Get_LoggedOut;
		property MessageFormat: WordBool read Get_MessageFormat;
		property NotAllowed: WordBool read Get_NotAllowed;
		property NotFound: WordBool read Get_NotFound;
		property PaymentRestriction: WordBool read Get_PaymentRestriction;
		property Refusal: WordBool read Get_Refusal;
		property UnavailableDevice: WordBool read Get_UnavailableDevice;
		property UnavailableService: WordBool read Get_UnavailableService;
		property InvalidCard: WordBool read Get_InvalidCard;
		property UnreachableHost: WordBool read Get_UnreachableHost;
		property WrongPIN: WordBool read Get_WrongPIN;
		property UnknownError: WordBool read Get_UnknownError;
		property Result: ResultEnumeration read Get_Result write Set_Result;
		property ErrorCondition: ErrorConditionEnumeration read Get_ErrorCondition write Set_ErrorCondition;
		property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
		property ResultAsString: WideString read Get_ResultAsString;
		property ErrorConditionAsString: WideString read Get_ErrorConditionAsString;
		property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
	end;

	// *********************************************************************//
	// DispIntf :    INexoReversalDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {DBC11F2F-A231-47BB-9CD1-0B36872B6BB4}
	// *********************************************************************//
	INexoReversalDisp = dispinterface
		['{DBC11F2F-A231-47BB-9CD1-0B36872B6BB4}']
		property RequestData: IReversalRequestType readonly dispid 1;
		property ReplyData: IReversalResponseType readonly dispid 2;
		property RequestOriginalPOITransactionID: WideString dispid 3;
		property RequestOriginalPOITransactionTimestamp: WideString dispid 4;
		property RequestSaleReferenceID: WideString dispid 5;
		property RequestReversedAmount: Double dispid 6;
		property RequestReversalReason: ReversalReasonEnumeration dispid 7;
		property ReplyPOITransactionID: WideString dispid 8;
		property ReplyPOITimestamp: WideString dispid 9;
		property ReplyReversedAmount: Double dispid 10;
		property Request: ISaleToPOIRequest readonly dispid 10000;
		property Reply: ISaleToPOIResponse readonly dispid 10001;
		property SerializedRequest: WideString readonly dispid 10010;
		property SerializedReply: WideString readonly dispid 10011;
		property Response: IResponseType dispid 10020;
		property MessageCategory: MessageCategoryEnumeration readonly dispid 10030;
		property MessageClass: MessageClassEnumeration readonly dispid 10031;
		property IsService: WordBool readonly dispid 10032;
		property IsDevice: WordBool readonly dispid 10033;
		property IsEvent: WordBool readonly dispid 10034;
		property SaleID: WideString dispid 10036;
		property POIID: WideString dispid 10037;
		property ServiceID: WideString dispid 10038;
		property DeviceID: WideString dispid 10039;
		property Success: WordBool readonly dispid 10050;
		property Failure: WordBool readonly dispid 10051;
		property Partial: WordBool readonly dispid 10052;
		property Unknown: WordBool readonly dispid 10053;
		property Aborted: WordBool readonly dispid 10054;
		property Busy: WordBool readonly dispid 10055;
		property Cancel: WordBool readonly dispid 10056;
		property DeviceOut: WordBool readonly dispid 10057;
		property InsertedCard: WordBool readonly dispid 10058;
		property InProgress: WordBool readonly dispid 10059;
		property LoggedOut: WordBool readonly dispid 10060;
		property MessageFormat: WordBool readonly dispid 10061;
		property NotAllowed: WordBool readonly dispid 10062;
		property NotFound: WordBool readonly dispid 10063;
		property PaymentRestriction: WordBool readonly dispid 10064;
		property Refusal: WordBool readonly dispid 10065;
		property UnavailableDevice: WordBool readonly dispid 10066;
		property UnavailableService: WordBool readonly dispid 10067;
		property InvalidCard: WordBool readonly dispid 10068;
		property UnreachableHost: WordBool readonly dispid 10069;
		property WrongPIN: WordBool readonly dispid 10070;
		property UnknownError: WordBool readonly dispid 10071;
		property Result: ResultEnumeration dispid 10072;
		property ErrorCondition: ErrorConditionEnumeration dispid 10073;
		property AdditionalResponse: WideString dispid 10074;
		property ResultAsString: WideString readonly dispid 10075;
		property ErrorConditionAsString: WideString readonly dispid 10076;
		property AddMilliseconds: WordBool dispid 10090;
		property Utc: WordBool dispid 10091;
		property ToString: WideString readonly dispid 11000;
		function AutoID: WideString; dispid 11001;
		function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
		function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; const typeDefaultValue: WideString): WideString;
			dispid 11003;
		function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11004;
		function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11005;
		function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11006;
		function SetDefaultCurrency(const Currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
		function SetDefaultLanguage(const Language: INexoISOData; const defaultValue: WideString): INexoISOData; dispid 11008;
		function FromItem(const Item: INexoItem): WordBool; dispid 11009;
		property SendWithErrors: WordBool dispid 15000;
		property SendWithWarnings: WordBool dispid 15001;
		property NbErrors: Integer readonly dispid 15002;
		property ContainsErrors: WordBool readonly dispid 15003;
		property NbWarnings: Integer readonly dispid 15004;
		property ContainsWarnings: WordBool readonly dispid 15005;
		property ContainsEvents: WordBool readonly dispid 15006;
		property BOM: WordBool dispid 15008;
		function ErrorsList: WideString; dispid 15502;
		function WarningsList: WideString; dispid 15503;
		function EventsList: WideString; dispid 15504;
		function IsUsingJson: WordBool; dispid 15505;
		procedure SetUsingJson(f: WordBool); dispid 15506;
	end;

	// *********************************************************************//
	// Interface :   INexoObjectToProcess
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4DA003CE-49BF-4831-83EB-3DAEA2072370}
	// *********************************************************************//
	INexoObjectToProcess = interface(IDispatch)
		['{4DA003CE-49BF-4831-83EB-3DAEA2072370}']
		function Get_CurrentObject: INexoObject; safecall;
		function Get_NextObject: INexoObject; safecall;
		procedure _Set_NextObject(const pRetVal: INexoObject); safecall;
		function Get_NextTimer: Integer; safecall;
		procedure Set_NextTimer(pRetVal: Integer); safecall;
		function Get_Item: INexoItem; safecall;
		function Get_type_: MessageTypeEnumeration; safecall;
		function Get_Category: MessageCategoryEnumeration; safecall;
		function Get_SuggestedAction: NexoNextAction; safecall;
		function Get_CanModifyAction: WordBool; safecall;
		function Get_Action: NexoNextAction; safecall;
		procedure Set_Action(pRetVal: NexoNextAction); safecall;
		property CurrentObject: INexoObject read Get_CurrentObject;
		property NextObject: INexoObject read Get_NextObject write _Set_NextObject;
		property NextTimer: Integer read Get_NextTimer write Set_NextTimer;
		property Item: INexoItem read Get_Item;
		property type_: MessageTypeEnumeration read Get_type_;
		property Category: MessageCategoryEnumeration read Get_Category;
		property SuggestedAction: NexoNextAction read Get_SuggestedAction;
		property CanModifyAction: WordBool read Get_CanModifyAction;
		property Action: NexoNextAction read Get_Action write Set_Action;
	end;

	// *********************************************************************//
	// DispIntf :    INexoObjectToProcessDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4DA003CE-49BF-4831-83EB-3DAEA2072370}
	// *********************************************************************//
	INexoObjectToProcessDisp = dispinterface
		['{4DA003CE-49BF-4831-83EB-3DAEA2072370}']
		property CurrentObject: INexoObject readonly dispid 1;
		property NextObject: INexoObject dispid 2;
		property NextTimer: Integer dispid 3;
		property Item: INexoItem readonly dispid 4;
		property type_: MessageTypeEnumeration readonly dispid 5;
		property Category: MessageCategoryEnumeration readonly dispid 6;
		property SuggestedAction: NexoNextAction readonly dispid 7;
		property CanModifyAction: WordBool readonly dispid 8;
		property Action: NexoNextAction dispid 9;
	end;

	// *********************************************************************//
	// Interface :   INexoTextString
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {81DBF2A7-F56C-4316-A7DA-84A69DD10193}
	// *********************************************************************//
	INexoTextString = interface(IDispatch)
		['{81DBF2A7-F56C-4316-A7DA-84A69DD10193}']
		function Get_Name: WideString; safecall;
		procedure Set_Name(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		function Get_defaultValue: WideString; safecall;
		function Get_RegularExpression: WideString; safecall;
		procedure Set_RegularExpression(const pRetVal: WideString); safecall;
		function Get_TrimInput: WordBool; safecall;
		procedure Set_TrimInput(pRetVal: WordBool); safecall;
		function Get_CaseInsensitive: WordBool; safecall;
		procedure Set_CaseInsensitive(pRetVal: WordBool); safecall;
		function Get_PreserveCase: WordBool; safecall;
		procedure Set_PreserveCase(pRetVal: WordBool); safecall;
		function Get_SetToUpperCase: WordBool; safecall;
		procedure Set_SetToUpperCase(pRetVal: WordBool); safecall;
		function Get_IsEmpty: WordBool; safecall;
		function Get_IsUnset: WordBool; safecall;
		function Get_ToString: WideString; safecall;
		function TestValue(var value: WideString): WordBool; safecall;
		property Name: WideString read Get_Name write Set_Name;
		property value: WideString read Get_value write Set_value;
		property defaultValue: WideString read Get_defaultValue;
		property RegularExpression: WideString read Get_RegularExpression write Set_RegularExpression;
		property TrimInput: WordBool read Get_TrimInput write Set_TrimInput;
		property CaseInsensitive: WordBool read Get_CaseInsensitive write Set_CaseInsensitive;
		property PreserveCase: WordBool read Get_PreserveCase write Set_PreserveCase;
		property SetToUpperCase: WordBool read Get_SetToUpperCase write Set_SetToUpperCase;
		property IsEmpty: WordBool read Get_IsEmpty;
		property IsUnset: WordBool read Get_IsUnset;
		property ToString: WideString read Get_ToString;
	end;

	// *********************************************************************//
	// DispIntf :    INexoTextStringDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {81DBF2A7-F56C-4316-A7DA-84A69DD10193}
	// *********************************************************************//
	INexoTextStringDisp = dispinterface
		['{81DBF2A7-F56C-4316-A7DA-84A69DD10193}']
		property Name: WideString dispid 1;
		property value: WideString dispid 2;
		property defaultValue: WideString readonly dispid 3;
		property RegularExpression: WideString dispid 4;
		property TrimInput: WordBool dispid 5;
		property CaseInsensitive: WordBool dispid 6;
		property PreserveCase: WordBool dispid 7;
		property SetToUpperCase: WordBool dispid 8;
		property IsEmpty: WordBool readonly dispid 9;
		property IsUnset: WordBool readonly dispid 10;
		property ToString: WideString readonly dispid 100;
		function TestValue(var value: WideString): WordBool; dispid 200;
	end;

	// *********************************************************************//
	// Interface :   INexoBooleanType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {54927BBD-044C-4FF6-90B9-9EF4C97DF13E}
	// *********************************************************************//
	INexoBooleanType = interface(IDispatch)
		['{54927BBD-044C-4FF6-90B9-9EF4C97DF13E}']
		function Get_Name: WideString; safecall;
		procedure Set_Name(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		function Get_IsEmpty: WordBool; safecall;
		function Get_IsUnset: WordBool; safecall;
		function Get_ToString: WideString; safecall;
		function TestValue(var value: WideString): WordBool; safecall;
		function Get_AsBoolean: WordBool; safecall;
		procedure Set_AsBoolean(pRetVal: WordBool); safecall;
		property Name: WideString read Get_Name write Set_Name;
		property value: WideString read Get_value write Set_value;
		property IsEmpty: WordBool read Get_IsEmpty;
		property IsUnset: WordBool read Get_IsUnset;
		property ToString: WideString read Get_ToString;
		property AsBoolean: WordBool read Get_AsBoolean write Set_AsBoolean;
	end;

	// *********************************************************************//
	// DispIntf :    INexoBooleanTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {54927BBD-044C-4FF6-90B9-9EF4C97DF13E}
	// *********************************************************************//
	INexoBooleanTypeDisp = dispinterface
		['{54927BBD-044C-4FF6-90B9-9EF4C97DF13E}']
		property Name: WideString dispid 1;
		property value: WideString dispid 2;
		property IsEmpty: WordBool readonly dispid 9;
		property IsUnset: WordBool readonly dispid 10;
		property ToString: WideString readonly dispid 100;
		function TestValue(var value: WideString): WordBool; dispid 200;
		property AsBoolean: WordBool dispid 50;
	end;

	// *********************************************************************//
	// Interface :   INexoInteger
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D54E0EEC-3021-430A-958A-0CE8CBAF28CF}
	// *********************************************************************//
	INexoInteger = interface(IDispatch)
		['{D54E0EEC-3021-430A-958A-0CE8CBAF28CF}']
		function Get_Name: WideString; safecall;
		procedure Set_Name(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		function Get_IsEmpty: WordBool; safecall;
		function Get_IsUnset: WordBool; safecall;
		function Get_ToString: WideString; safecall;
		function TestValue(var value: WideString): WordBool; safecall;
		function Get_AsInteger: Integer; safecall;
		procedure Set_AsInteger(pRetVal: Integer); safecall;
		property Name: WideString read Get_Name write Set_Name;
		property value: WideString read Get_value write Set_value;
		property IsEmpty: WordBool read Get_IsEmpty;
		property IsUnset: WordBool read Get_IsUnset;
		property ToString: WideString read Get_ToString;
		property AsInteger: Integer read Get_AsInteger write Set_AsInteger;
	end;

	// *********************************************************************//
	// DispIntf :    INexoIntegerDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D54E0EEC-3021-430A-958A-0CE8CBAF28CF}
	// *********************************************************************//
	INexoIntegerDisp = dispinterface
		['{D54E0EEC-3021-430A-958A-0CE8CBAF28CF}']
		property Name: WideString dispid 1;
		property value: WideString dispid 2;
		property IsEmpty: WordBool readonly dispid 9;
		property IsUnset: WordBool readonly dispid 10;
		property ToString: WideString readonly dispid 100;
		function TestValue(var value: WideString): WordBool; dispid 200;
		property AsInteger: Integer dispid 50;
	end;

	// *********************************************************************//
	// Interface :   INexoDecimal
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D6A6402E-7675-4B58-A192-1E5831A63308}
	// *********************************************************************//
	INexoDecimal = interface(IDispatch)
		['{D6A6402E-7675-4B58-A192-1E5831A63308}']
		function Get_Name: WideString; safecall;
		procedure Set_Name(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		function Get_IsEmpty: WordBool; safecall;
		function Get_IsUnset: WordBool; safecall;
		function Get_ToString: WideString; safecall;
		function TestValue(var value: WideString): WordBool; safecall;
		function Get_AsDecimal: Double; safecall;
		procedure Set_AsDecimal(pRetVal: Double); safecall;
		function Get_DecimalPlaces: LongWord; safecall;
		procedure Set_DecimalPlaces(pRetVal: LongWord); safecall;
		function Get_Mantis: LongWord; safecall;
		procedure Set_Mantis(pRetVal: LongWord); safecall;
		function Get_DecimalSeparator: WideString; safecall;
		property Name: WideString read Get_Name write Set_Name;
		property value: WideString read Get_value write Set_value;
		property IsEmpty: WordBool read Get_IsEmpty;
		property IsUnset: WordBool read Get_IsUnset;
		property ToString: WideString read Get_ToString;
		property AsDecimal: Double read Get_AsDecimal write Set_AsDecimal;
		property DecimalPlaces: LongWord read Get_DecimalPlaces write Set_DecimalPlaces;
		property Mantis: LongWord read Get_Mantis write Set_Mantis;
		property DecimalSeparator: WideString read Get_DecimalSeparator;
	end;

	// *********************************************************************//
	// DispIntf :    INexoDecimalDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {D6A6402E-7675-4B58-A192-1E5831A63308}
	// *********************************************************************//
	INexoDecimalDisp = dispinterface
		['{D6A6402E-7675-4B58-A192-1E5831A63308}']
		property Name: WideString dispid 1;
		property value: WideString dispid 2;
		property IsEmpty: WordBool readonly dispid 9;
		property IsUnset: WordBool readonly dispid 10;
		property ToString: WideString readonly dispid 100;
		function TestValue(var value: WideString): WordBool; dispid 200;
		property AsDecimal: Double dispid 50;
		property DecimalPlaces: LongWord dispid 51;
		property Mantis: LongWord dispid 52;
		property DecimalSeparator: WideString readonly dispid 53;
	end;

	// *********************************************************************//
	// Interface :   INexoLabel
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B1212D60-971B-4FB3-BE41-EC87DD743EFB}
	// *********************************************************************//
	INexoLabel = interface(IDispatch)
		['{B1212D60-971B-4FB3-BE41-EC87DD743EFB}']
		function Get_Label_: WideString; safecall;
		procedure Set_Label_(const pRetVal: WideString); safecall;
		function Get_ToString: WideString; safecall;
		property Label_: WideString read Get_Label_ write Set_Label_;
		property ToString: WideString read Get_ToString;
	end;

	// *********************************************************************//
	// DispIntf :    INexoLabelDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B1212D60-971B-4FB3-BE41-EC87DD743EFB}
	// *********************************************************************//
	INexoLabelDisp = dispinterface
		['{B1212D60-971B-4FB3-BE41-EC87DD743EFB}']
		property Label_: WideString dispid 1;
		property ToString: WideString readonly dispid 100;
	end;

	// *********************************************************************//
	// Interface :   INexoEnumeration
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {44DD3DF5-C824-4E2D-8727-9F1856EB8019}
	// *********************************************************************//
	INexoEnumeration = interface(IDispatch)
		['{44DD3DF5-C824-4E2D-8727-9F1856EB8019}']
		function Get_Name: WideString; safecall;
		procedure Set_Name(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		function Get_LabelsCount: Integer; safecall;
		function IsLabel(const value: WideString): WordBool; safecall;
		function GetLabel(const value: WideString): WideString; safecall;
		function AddLabel(const value: WideString): WordBool; safecall;
		function RemoveLabel(const value: WideString): WordBool; safecall;
		property Name: WideString read Get_Name write Set_Name;
		property value: WideString read Get_value write Set_value;
		property LabelsCount: Integer read Get_LabelsCount;
	end;

	// *********************************************************************//
	// DispIntf :    INexoEnumerationDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {44DD3DF5-C824-4E2D-8727-9F1856EB8019}
	// *********************************************************************//
	INexoEnumerationDisp = dispinterface
		['{44DD3DF5-C824-4E2D-8727-9F1856EB8019}']
		property Name: WideString dispid 1;
		property value: WideString dispid 2;
		property LabelsCount: Integer readonly dispid 50;
		function IsLabel(const value: WideString): WordBool; dispid 51;
		function GetLabel(const value: WideString): WideString; dispid 52;
		function AddLabel(const value: WideString): WordBool; dispid 53;
		function RemoveLabel(const value: WideString): WordBool; dispid 54;
	end;

	// *********************************************************************//
	// Interface :   INexoCluster
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {CF6E62CA-537D-4545-A336-673D288B6D58}
	// *********************************************************************//
	INexoCluster = interface(IDispatch)
		['{CF6E62CA-537D-4545-A336-673D288B6D58}']
		function Get_Name: WideString; safecall;
		procedure Set_Name(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		function Get_LabelsCount: Integer; safecall;
		function Get_ValuesCount: Integer; safecall;
		function IsLabel(const value: WideString): WordBool; safecall;
		function AddLabel(const value: WideString): WordBool; safecall;
		function RemoveLabel(const value: WideString): WordBool; safecall;
		function IsLabelSet(const value: WideString): WordBool; safecall;
		function SetLabel(const Label_: WideString): WideString; safecall;
		function UnsetLabel(const Label_: WideString): WideString; safecall;
		function SetAllLabels: WideString; safecall;
		function UnsetAllLabels: WideString; safecall;
		property Name: WideString read Get_Name write Set_Name;
		property value: WideString read Get_value write Set_value;
		property LabelsCount: Integer read Get_LabelsCount;
		property ValuesCount: Integer read Get_ValuesCount;
	end;

	// *********************************************************************//
	// DispIntf :    INexoClusterDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {CF6E62CA-537D-4545-A336-673D288B6D58}
	// *********************************************************************//
	INexoClusterDisp = dispinterface
		['{CF6E62CA-537D-4545-A336-673D288B6D58}']
		property Name: WideString dispid 1;
		property value: WideString dispid 2;
		property LabelsCount: Integer readonly dispid 50;
		property ValuesCount: Integer readonly dispid 51;
		function IsLabel(const value: WideString): WordBool; dispid 52;
		function AddLabel(const value: WideString): WordBool; dispid 53;
		function RemoveLabel(const value: WideString): WordBool; dispid 54;
		function IsLabelSet(const value: WideString): WordBool; dispid 55;
		function SetLabel(const Label_: WideString): WideString; dispid 56;
		function UnsetLabel(const Label_: WideString): WideString; dispid 57;
		function SetAllLabels: WideString; dispid 58;
		function UnsetAllLabels: WideString; dispid 59;
	end;

	// *********************************************************************//
	// Interface :   INexoLengthDrivenTextString
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {380807B4-5276-443B-A8E8-0D88A51199E8}
	// *********************************************************************//
	INexoLengthDrivenTextString = interface(IDispatch)
		['{380807B4-5276-443B-A8E8-0D88A51199E8}']
		function Get_Name: WideString; safecall;
		procedure Set_Name(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		function Get_defaultValue: WideString; safecall;
		function Get_RegularExpression: WideString; safecall;
		procedure Set_RegularExpression(const pRetVal: WideString); safecall;
		function Get_TrimInput: WordBool; safecall;
		procedure Set_TrimInput(pRetVal: WordBool); safecall;
		function Get_CaseInsensitive: WordBool; safecall;
		procedure Set_CaseInsensitive(pRetVal: WordBool); safecall;
		function Get_PreserveCase: WordBool; safecall;
		procedure Set_PreserveCase(pRetVal: WordBool); safecall;
		function Get_SetToUpperCase: WordBool; safecall;
		procedure Set_SetToUpperCase(pRetVal: WordBool); safecall;
		function Get_IsEmpty: WordBool; safecall;
		function Get_IsUnset: WordBool; safecall;
		function Get_ToString: WideString; safecall;
		function TestValue(var value: WideString): WordBool; safecall;
		function Get_Min: Integer; safecall;
		procedure Set_Min(pRetVal: Integer); safecall;
		function Get_Max: Integer; safecall;
		procedure Set_Max(pRetVal: Integer); safecall;
		function Get_CharacterSet: WideString; safecall;
		procedure Set_CharacterSet(const pRetVal: WideString); safecall;
		property Name: WideString read Get_Name write Set_Name;
		property value: WideString read Get_value write Set_value;
		property defaultValue: WideString read Get_defaultValue;
		property RegularExpression: WideString read Get_RegularExpression write Set_RegularExpression;
		property TrimInput: WordBool read Get_TrimInput write Set_TrimInput;
		property CaseInsensitive: WordBool read Get_CaseInsensitive write Set_CaseInsensitive;
		property PreserveCase: WordBool read Get_PreserveCase write Set_PreserveCase;
		property SetToUpperCase: WordBool read Get_SetToUpperCase write Set_SetToUpperCase;
		property IsEmpty: WordBool read Get_IsEmpty;
		property IsUnset: WordBool read Get_IsUnset;
		property ToString: WideString read Get_ToString;
		property Min: Integer read Get_Min write Set_Min;
		property Max: Integer read Get_Max write Set_Max;
		property CharacterSet: WideString read Get_CharacterSet write Set_CharacterSet;
	end;

	// *********************************************************************//
	// DispIntf :    INexoLengthDrivenTextStringDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {380807B4-5276-443B-A8E8-0D88A51199E8}
	// *********************************************************************//
	INexoLengthDrivenTextStringDisp = dispinterface
		['{380807B4-5276-443B-A8E8-0D88A51199E8}']
		property Name: WideString dispid 1;
		property value: WideString dispid 2;
		property defaultValue: WideString readonly dispid 3;
		property RegularExpression: WideString dispid 4;
		property TrimInput: WordBool dispid 5;
		property CaseInsensitive: WordBool dispid 6;
		property PreserveCase: WordBool dispid 7;
		property SetToUpperCase: WordBool dispid 8;
		property IsEmpty: WordBool readonly dispid 9;
		property IsUnset: WordBool readonly dispid 10;
		property ToString: WideString readonly dispid 100;
		function TestValue(var value: WideString): WordBool; dispid 200;
		property Min: Integer dispid 50;
		property Max: Integer dispid 51;
		property CharacterSet: WideString dispid 52;
	end;

	// *********************************************************************//
	// Interface :   INexoDigitString
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4DEDF6AC-8EF9-41EC-92CD-51A2E7E5FC6F}
	// *********************************************************************//
	INexoDigitString = interface(IDispatch)
		['{4DEDF6AC-8EF9-41EC-92CD-51A2E7E5FC6F}']
		function Get_Name: WideString; safecall;
		procedure Set_Name(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		function Get_IsEmpty: WordBool; safecall;
		function Get_IsUnset: WordBool; safecall;
		function Get_ToString: WideString; safecall;
		function TestValue(var value: WideString): WordBool; safecall;
		function Get_Min: Integer; safecall;
		procedure Set_Min(pRetVal: Integer); safecall;
		function Get_Max: Integer; safecall;
		procedure Set_Max(pRetVal: Integer); safecall;
		function Get_CharacterSet: WideString; safecall;
		property Name: WideString read Get_Name write Set_Name;
		property value: WideString read Get_value write Set_value;
		property IsEmpty: WordBool read Get_IsEmpty;
		property IsUnset: WordBool read Get_IsUnset;
		property ToString: WideString read Get_ToString;
		property Min: Integer read Get_Min write Set_Min;
		property Max: Integer read Get_Max write Set_Max;
		property CharacterSet: WideString read Get_CharacterSet;
	end;

	// *********************************************************************//
	// DispIntf :    INexoDigitStringDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {4DEDF6AC-8EF9-41EC-92CD-51A2E7E5FC6F}
	// *********************************************************************//
	INexoDigitStringDisp = dispinterface
		['{4DEDF6AC-8EF9-41EC-92CD-51A2E7E5FC6F}']
		property Name: WideString dispid 1;
		property value: WideString dispid 2;
		property IsEmpty: WordBool readonly dispid 9;
		property IsUnset: WordBool readonly dispid 10;
		property ToString: WideString readonly dispid 100;
		function TestValue(var value: WideString): WordBool; dispid 200;
		property Min: Integer dispid 50;
		property Max: Integer dispid 51;
		property CharacterSet: WideString readonly dispid 52;
	end;

	// *********************************************************************//
	// Interface :   INexoISOData
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {342FE081-D5F0-475B-AEC6-6374979BBDC7}
	// *********************************************************************//
	INexoISOData = interface(IDispatch)
		['{342FE081-D5F0-475B-AEC6-6374979BBDC7}']
		function Get_Name: WideString; safecall;
		procedure Set_Name(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		function Get_ToString: WideString; safecall;
		function TestValue(var value: WideString): WordBool; safecall;
		property Name: WideString read Get_Name write Set_Name;
		property value: WideString read Get_value write Set_value;
		property ToString: WideString read Get_ToString;
	end;

	// *********************************************************************//
	// DispIntf :    INexoISODataDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {342FE081-D5F0-475B-AEC6-6374979BBDC7}
	// *********************************************************************//
	INexoISODataDisp = dispinterface
		['{342FE081-D5F0-475B-AEC6-6374979BBDC7}']
		property Name: WideString dispid 1;
		property value: WideString dispid 2;
		property ToString: WideString readonly dispid 100;
		function TestValue(var value: WideString): WordBool; dispid 200;
	end;

	// *********************************************************************//
	// Interface :   INexoISODateTime
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {6EA56916-0B9F-48D1-B726-1F26C1897724}
	// *********************************************************************//
	INexoISODateTime = interface(IDispatch)
		['{6EA56916-0B9F-48D1-B726-1F26C1897724}']
		function Get_Name: WideString; safecall;
		procedure Set_Name(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		function Get_Utc: WordBool; safecall;
		procedure Set_Utc(pRetVal: WordBool); safecall;
		function Get_Milliseconds: WordBool; safecall;
		procedure Set_Milliseconds(pRetVal: WordBool); safecall;
		function Get_ToString: WideString; safecall;
		function TestValue(var value: WideString): WordBool; safecall;
		procedure Reset; safecall;
		function ToDateTime: TDateTime; safecall;
		function FromDateTime(dt: TDateTime): WideString; safecall;
		property Name: WideString read Get_Name write Set_Name;
		property value: WideString read Get_value write Set_value;
		property Utc: WordBool read Get_Utc write Set_Utc;
		property Milliseconds: WordBool read Get_Milliseconds write Set_Milliseconds;
		property ToString: WideString read Get_ToString;
	end;

	// *********************************************************************//
	// DispIntf :    INexoISODateTimeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {6EA56916-0B9F-48D1-B726-1F26C1897724}
	// *********************************************************************//
	INexoISODateTimeDisp = dispinterface
		['{6EA56916-0B9F-48D1-B726-1F26C1897724}']
		property Name: WideString dispid 1;
		property value: WideString dispid 2;
		property Utc: WordBool dispid 3;
		property Milliseconds: WordBool dispid 4;
		property ToString: WideString readonly dispid 100;
		function TestValue(var value: WideString): WordBool; dispid 200;
		procedure Reset; dispid 300;
		function ToDateTime: TDateTime; dispid 301;
		function FromDateTime(dt: TDateTime): WideString; dispid 302;
	end;

	// *********************************************************************//
	// Interface :   INexoISODate
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {880DF188-0670-419D-8E0D-2170D0D537C9}
	// *********************************************************************//
	INexoISODate = interface(IDispatch)
		['{880DF188-0670-419D-8E0D-2170D0D537C9}']
		function Get_Name: WideString; safecall;
		procedure Set_Name(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		function Get_ToString: WideString; safecall;
		function TestValue(var value: WideString): WordBool; safecall;
		procedure Reset; safecall;
		function ToDateTime: TDateTime; safecall;
		function FromDateTime(dt: TDateTime): WideString; safecall;
		property Name: WideString read Get_Name write Set_Name;
		property value: WideString read Get_value write Set_value;
		property ToString: WideString read Get_ToString;
	end;

	// *********************************************************************//
	// DispIntf :    INexoISODateDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {880DF188-0670-419D-8E0D-2170D0D537C9}
	// *********************************************************************//
	INexoISODateDisp = dispinterface
		['{880DF188-0670-419D-8E0D-2170D0D537C9}']
		property Name: WideString dispid 1;
		property value: WideString dispid 2;
		property ToString: WideString readonly dispid 100;
		function TestValue(var value: WideString): WordBool; dispid 200;
		procedure Reset; dispid 300;
		function ToDateTime: TDateTime; dispid 301;
		function FromDateTime(dt: TDateTime): WideString; dispid 302;
	end;

	// *********************************************************************//
	// Interface :   INexoNonStringType
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {C7CAA85A-2A0D-49A7-925A-48A122D76C30}
	// *********************************************************************//
	INexoNonStringType = interface(IDispatch)
		['{C7CAA85A-2A0D-49A7-925A-48A122D76C30}']
		function Get_Name: WideString; safecall;
		procedure Set_Name(const pRetVal: WideString); safecall;
		function Get_value: PSafeArray; safecall;
		procedure Set_value(pRetVal: PSafeArray); safecall;
		function Get_Size: Integer; safecall;
		procedure Set_Size(pRetVal: Integer); safecall;
		function Get_ToString: WideString; safecall;
		property Name: WideString read Get_Name write Set_Name;
		property value: PSafeArray read Get_value write Set_value;
		property Size: Integer read Get_Size write Set_Size;
		property ToString: WideString read Get_ToString;
	end;

	// *********************************************************************//
	// DispIntf :    INexoNonStringTypeDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {C7CAA85A-2A0D-49A7-925A-48A122D76C30}
	// *********************************************************************//
	INexoNonStringTypeDisp = dispinterface
		['{C7CAA85A-2A0D-49A7-925A-48A122D76C30}']
		property Name: WideString dispid 1;
		property value: { NOT_OLEAUTO(PSafeArray) } OleVariant dispid 2;
		property Size: Integer dispid 3;
		property ToString: WideString readonly dispid 100;
	end;

	// *********************************************************************//
	// Interface :   INexoCurrency
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {5F12D07E-EA73-4E87-98C6-DDD3A38888C8}
	// *********************************************************************//
	INexoCurrency = interface(IDispatch)
		['{5F12D07E-EA73-4E87-98C6-DDD3A38888C8}']
		function Get_Name: WideString; safecall;
		procedure Set_Name(const pRetVal: WideString); safecall;
		function Get_value: WideString; safecall;
		procedure Set_value(const pRetVal: WideString); safecall;
		function Get_DecimalPlaces: LongWord; safecall;
		procedure Set_DecimalPlaces(pRetVal: LongWord); safecall;
		function Get_ToString: WideString; safecall;
		function TestValue(var value: WideString): WordBool; safecall;
		property Name: WideString read Get_Name write Set_Name;
		property value: WideString read Get_value write Set_value;
		property DecimalPlaces: LongWord read Get_DecimalPlaces write Set_DecimalPlaces;
		property ToString: WideString read Get_ToString;
	end;

	// *********************************************************************//
	// DispIntf :    INexoCurrencyDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {5F12D07E-EA73-4E87-98C6-DDD3A38888C8}
	// *********************************************************************//
	INexoCurrencyDisp = dispinterface
		['{5F12D07E-EA73-4E87-98C6-DDD3A38888C8}']
		property Name: WideString dispid 1;
		property value: WideString dispid 2;
		property DecimalPlaces: LongWord dispid 3;
		property ToString: WideString readonly dispid 100;
		function TestValue(var value: WideString): WordBool; dispid 200;
	end;

	// *********************************************************************//
	// Interface :   _NexoMessageType
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {9B63F343-CE34-348E-ADBB-ADF5FDC28172}
	// *********************************************************************//
	_NexoMessageType = interface(IDispatch)
		['{9B63F343-CE34-348E-ADBB-ADF5FDC28172}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoMessageTypeDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {9B63F343-CE34-348E-ADBB-ADF5FDC28172}
	// *********************************************************************//
	_NexoMessageTypeDisp = dispinterface
		['{9B63F343-CE34-348E-ADBB-ADF5FDC28172}']
	end;

	// *********************************************************************//
	// Interface :   _NexoMessageClass
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {5014AC46-3B6B-35D6-9EAB-308C612BE1BD}
	// *********************************************************************//
	_NexoMessageClass = interface(IDispatch)
		['{5014AC46-3B6B-35D6-9EAB-308C612BE1BD}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoMessageClassDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {5014AC46-3B6B-35D6-9EAB-308C612BE1BD}
	// *********************************************************************//
	_NexoMessageClassDisp = dispinterface
		['{5014AC46-3B6B-35D6-9EAB-308C612BE1BD}']
	end;

	// *********************************************************************//
	// Interface :   _NexoMessageCategory
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {56E803F5-FC60-381C-B78C-129D973A9A94}
	// *********************************************************************//
	_NexoMessageCategory = interface(IDispatch)
		['{56E803F5-FC60-381C-B78C-129D973A9A94}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoMessageCategoryDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {56E803F5-FC60-381C-B78C-129D973A9A94}
	// *********************************************************************//
	_NexoMessageCategoryDisp = dispinterface
		['{56E803F5-FC60-381C-B78C-129D973A9A94}']
	end;

	// *********************************************************************//
	// Interface :   _NexoTerminalEnvironment
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {22389591-8FAC-3D5C-8696-7F02CE9D1A28}
	// *********************************************************************//
	_NexoTerminalEnvironment = interface(IDispatch)
		['{22389591-8FAC-3D5C-8696-7F02CE9D1A28}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoTerminalEnvironmentDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {22389591-8FAC-3D5C-8696-7F02CE9D1A28}
	// *********************************************************************//
	_NexoTerminalEnvironmentDisp = dispinterface
		['{22389591-8FAC-3D5C-8696-7F02CE9D1A28}']
	end;

	// *********************************************************************//
	// Interface :   _NexoSaleCapabilities
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {27EE1457-9C5B-364B-A5B0-6F8DEA5DFD90}
	// *********************************************************************//
	_NexoSaleCapabilities = interface(IDispatch)
		['{27EE1457-9C5B-364B-A5B0-6F8DEA5DFD90}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoSaleCapabilitiesDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {27EE1457-9C5B-364B-A5B0-6F8DEA5DFD90}
	// *********************************************************************//
	_NexoSaleCapabilitiesDisp = dispinterface
		['{27EE1457-9C5B-364B-A5B0-6F8DEA5DFD90}']
	end;

	// *********************************************************************//
	// Interface :   _NexoProtocolVersion
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {80FE31BB-AA27-3228-9E9F-ACCBC7BEC91E}
	// *********************************************************************//
	_NexoProtocolVersion = interface(IDispatch)
		['{80FE31BB-AA27-3228-9E9F-ACCBC7BEC91E}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoProtocolVersionDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {80FE31BB-AA27-3228-9E9F-ACCBC7BEC91E}
	// *********************************************************************//
	_NexoProtocolVersionDisp = dispinterface
		['{80FE31BB-AA27-3228-9E9F-ACCBC7BEC91E}']
	end;

	// *********************************************************************//
	// Interface :   _NexoID
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {18471494-0F7D-3761-AA8A-4234DEEE46E0}
	// *********************************************************************//
	_NexoID = interface(IDispatch)
		['{18471494-0F7D-3761-AA8A-4234DEEE46E0}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoIDDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {18471494-0F7D-3761-AA8A-4234DEEE46E0}
	// *********************************************************************//
	_NexoIDDisp = dispinterface
		['{18471494-0F7D-3761-AA8A-4234DEEE46E0}']
	end;

	// *********************************************************************//
	// Interface :   _NexoServiceID
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {59B3973C-67DE-3226-950C-3F1AF7CA8CD9}
	// *********************************************************************//
	_NexoServiceID = interface(IDispatch)
		['{59B3973C-67DE-3226-950C-3F1AF7CA8CD9}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoServiceIDDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {59B3973C-67DE-3226-950C-3F1AF7CA8CD9}
	// *********************************************************************//
	_NexoServiceIDDisp = dispinterface
		['{59B3973C-67DE-3226-950C-3F1AF7CA8CD9}']
	end;

	// *********************************************************************//
	// Interface :   _NexoDeviceID
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {71E7118B-B956-330C-8CF3-985FF48C8383}
	// *********************************************************************//
	_NexoDeviceID = interface(IDispatch)
		['{71E7118B-B956-330C-8CF3-985FF48C8383}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoDeviceIDDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {71E7118B-B956-330C-8CF3-985FF48C8383}
	// *********************************************************************//
	_NexoDeviceIDDisp = dispinterface
		['{71E7118B-B956-330C-8CF3-985FF48C8383}']
	end;

	// *********************************************************************//
	// Interface :   _NexoPOIID
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {054197A2-96CE-3280-A396-9A9647E69093}
	// *********************************************************************//
	_NexoPOIID = interface(IDispatch)
		['{054197A2-96CE-3280-A396-9A9647E69093}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoPOIIDDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {054197A2-96CE-3280-A396-9A9647E69093}
	// *********************************************************************//
	_NexoPOIIDDisp = dispinterface
		['{054197A2-96CE-3280-A396-9A9647E69093}']
	end;

	// *********************************************************************//
	// Interface :   _NexoSaleID
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {42F36241-B65E-3279-8AB5-B0FDF51E2007}
	// *********************************************************************//
	_NexoSaleID = interface(IDispatch)
		['{42F36241-B65E-3279-8AB5-B0FDF51E2007}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoSaleIDDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {42F36241-B65E-3279-8AB5-B0FDF51E2007}
	// *********************************************************************//
	_NexoSaleIDDisp = dispinterface
		['{42F36241-B65E-3279-8AB5-B0FDF51E2007}']
	end;

	// *********************************************************************//
	// Interface :   _NexoOperatorLanguage
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {E71BBF4C-00C1-3A08-8FA7-D6AC9B58C165}
	// *********************************************************************//
	_NexoOperatorLanguage = interface(IDispatch)
		['{E71BBF4C-00C1-3A08-8FA7-D6AC9B58C165}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoOperatorLanguageDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {E71BBF4C-00C1-3A08-8FA7-D6AC9B58C165}
	// *********************************************************************//
	_NexoOperatorLanguageDisp = dispinterface
		['{E71BBF4C-00C1-3A08-8FA7-D6AC9B58C165}']
	end;

	// *********************************************************************//
	// Interface :   _NexoResult
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {4D8B2E36-3BE3-3AAE-820E-2AF11CA82E64}
	// *********************************************************************//
	_NexoResult = interface(IDispatch)
		['{4D8B2E36-3BE3-3AAE-820E-2AF11CA82E64}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoResultDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {4D8B2E36-3BE3-3AAE-820E-2AF11CA82E64}
	// *********************************************************************//
	_NexoResultDisp = dispinterface
		['{4D8B2E36-3BE3-3AAE-820E-2AF11CA82E64}']
	end;

	// *********************************************************************//
	// Interface :   _NexoErrorCondition
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {3A6C71B5-A08C-315D-B127-D96E2E2EAC09}
	// *********************************************************************//
	_NexoErrorCondition = interface(IDispatch)
		['{3A6C71B5-A08C-315D-B127-D96E2E2EAC09}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoErrorConditionDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {3A6C71B5-A08C-315D-B127-D96E2E2EAC09}
	// *********************************************************************//
	_NexoErrorConditionDisp = dispinterface
		['{3A6C71B5-A08C-315D-B127-D96E2E2EAC09}']
	end;

	// *********************************************************************//
	// Interface :   _NexoAdditionalResponse
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {B44411B6-3F45-333F-B166-1A295EED6A6C}
	// *********************************************************************//
	_NexoAdditionalResponse = interface(IDispatch)
		['{B44411B6-3F45-333F-B166-1A295EED6A6C}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoAdditionalResponseDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {B44411B6-3F45-333F-B166-1A295EED6A6C}
	// *********************************************************************//
	_NexoAdditionalResponseDisp = dispinterface
		['{B44411B6-3F45-333F-B166-1A295EED6A6C}']
	end;

	// *********************************************************************//
	// Interface :   _NexoGlobalStatus
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {3AC0D87E-F614-3958-AF82-0EDD3E6D9179}
	// *********************************************************************//
	_NexoGlobalStatus = interface(IDispatch)
		['{3AC0D87E-F614-3958-AF82-0EDD3E6D9179}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoGlobalStatusDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {3AC0D87E-F614-3958-AF82-0EDD3E6D9179}
	// *********************************************************************//
	_NexoGlobalStatusDisp = dispinterface
		['{3AC0D87E-F614-3958-AF82-0EDD3E6D9179}']
	end;

	// *********************************************************************//
	// Interface :   _NexoCertificationCode
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {02DB9CB2-8343-3689-AB49-DC0FB8415C72}
	// *********************************************************************//
	_NexoCertificationCode = interface(IDispatch)
		['{02DB9CB2-8343-3689-AB49-DC0FB8415C72}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoCertificationCodeDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {02DB9CB2-8343-3689-AB49-DC0FB8415C72}
	// *********************************************************************//
	_NexoCertificationCodeDisp = dispinterface
		['{02DB9CB2-8343-3689-AB49-DC0FB8415C72}']
	end;

	// *********************************************************************//
	// Interface :   _NexoSoftwareVersion
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {451A06B3-89A7-3712-9763-C753FC8885C3}
	// *********************************************************************//
	_NexoSoftwareVersion = interface(IDispatch)
		['{451A06B3-89A7-3712-9763-C753FC8885C3}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoSoftwareVersionDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {451A06B3-89A7-3712-9763-C753FC8885C3}
	// *********************************************************************//
	_NexoSoftwareVersionDisp = dispinterface
		['{451A06B3-89A7-3712-9763-C753FC8885C3}']
	end;

	// *********************************************************************//
	// Interface :   _NexoApplicationName
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {9C672E07-5151-38F4-A42C-CEB77A05332B}
	// *********************************************************************//
	_NexoApplicationName = interface(IDispatch)
		['{9C672E07-5151-38F4-A42C-CEB77A05332B}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoApplicationNameDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {9C672E07-5151-38F4-A42C-CEB77A05332B}
	// *********************************************************************//
	_NexoApplicationNameDisp = dispinterface
		['{9C672E07-5151-38F4-A42C-CEB77A05332B}']
	end;

	// *********************************************************************//
	// Interface :   _NexoManufacturerID
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {E49650FA-D915-3C41-8313-9A5A13A64420}
	// *********************************************************************//
	_NexoManufacturerID = interface(IDispatch)
		['{E49650FA-D915-3C41-8313-9A5A13A64420}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoManufacturerIDDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {E49650FA-D915-3C41-8313-9A5A13A64420}
	// *********************************************************************//
	_NexoManufacturerIDDisp = dispinterface
		['{E49650FA-D915-3C41-8313-9A5A13A64420}']
	end;

	// *********************************************************************//
	// Interface :   _NexoPOISerialNumber
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {6681A893-77AF-3107-A6DA-DF729D6DB446}
	// *********************************************************************//
	_NexoPOISerialNumber = interface(IDispatch)
		['{6681A893-77AF-3107-A6DA-DF729D6DB446}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoPOISerialNumberDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {6681A893-77AF-3107-A6DA-DF729D6DB446}
	// *********************************************************************//
	_NexoPOISerialNumberDisp = dispinterface
		['{6681A893-77AF-3107-A6DA-DF729D6DB446}']
	end;

	// *********************************************************************//
	// Interface :   _NexoOperatorID
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {CD18F863-D50B-352D-B4A0-5E980F36021D}
	// *********************************************************************//
	_NexoOperatorID = interface(IDispatch)
		['{CD18F863-D50B-352D-B4A0-5E980F36021D}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoOperatorIDDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {CD18F863-D50B-352D-B4A0-5E980F36021D}
	// *********************************************************************//
	_NexoOperatorIDDisp = dispinterface
		['{CD18F863-D50B-352D-B4A0-5E980F36021D}']
	end;

	// *********************************************************************//
	// Interface :   _NexoDateTime
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {8DF83577-AE20-31AB-B9C0-1F46E4CF327C}
	// *********************************************************************//
	_NexoDateTime = interface(IDispatch)
		['{8DF83577-AE20-31AB-B9C0-1F46E4CF327C}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoDateTimeDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {8DF83577-AE20-31AB-B9C0-1F46E4CF327C}
	// *********************************************************************//
	_NexoDateTimeDisp = dispinterface
		['{8DF83577-AE20-31AB-B9C0-1F46E4CF327C}']
	end;

	// *********************************************************************//
	// Interface :   _NexoInputCommand
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {4E7620D8-37EE-3EF1-8219-5905E4C30D28}
	// *********************************************************************//
	_NexoInputCommand = interface(IDispatch)
		['{4E7620D8-37EE-3EF1-8219-5905E4C30D28}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoInputCommandDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {4E7620D8-37EE-3EF1-8219-5905E4C30D28}
	// *********************************************************************//
	_NexoInputCommandDisp = dispinterface
		['{4E7620D8-37EE-3EF1-8219-5905E4C30D28}']
	end;

	// *********************************************************************//
	// Interface :   _NexoEventToNotify
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {F32A9C29-CEFF-3D25-9C49-F4350CA77ABB}
	// *********************************************************************//
	_NexoEventToNotify = interface(IDispatch)
		['{F32A9C29-CEFF-3D25-9C49-F4350CA77ABB}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoEventToNotifyDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {F32A9C29-CEFF-3D25-9C49-F4350CA77ABB}
	// *********************************************************************//
	_NexoEventToNotifyDisp = dispinterface
		['{F32A9C29-CEFF-3D25-9C49-F4350CA77ABB}']
	end;

	// *********************************************************************//
	// Interface :   _NexoPaymentIntrumentType
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {A7085E0D-4C4E-3492-9CD8-E5EEA1139AB4}
	// *********************************************************************//
	_NexoPaymentIntrumentType = interface(IDispatch)
		['{A7085E0D-4C4E-3492-9CD8-E5EEA1139AB4}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoPaymentIntrumentTypeDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {A7085E0D-4C4E-3492-9CD8-E5EEA1139AB4}
	// *********************************************************************//
	_NexoPaymentIntrumentTypeDisp = dispinterface
		['{A7085E0D-4C4E-3492-9CD8-E5EEA1139AB4}']
	end;

	// *********************************************************************//
	// Interface :   _NexoVersion
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {765A7BDB-C986-34A3-A1F6-07606723E48D}
	// *********************************************************************//
	_NexoVersion = interface(IDispatch)
		['{765A7BDB-C986-34A3-A1F6-07606723E48D}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoVersionDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {765A7BDB-C986-34A3-A1F6-07606723E48D}
	// *********************************************************************//
	_NexoVersionDisp = dispinterface
		['{765A7BDB-C986-34A3-A1F6-07606723E48D}']
	end;

	// *********************************************************************//
	// Interface :   _NexoCurrentVersion
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {912B7F67-674E-35E3-9F46-CCB8B8FA08A0}
	// *********************************************************************//
	_NexoCurrentVersion = interface(IDispatch)
		['{912B7F67-674E-35E3-9F46-CCB8B8FA08A0}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoCurrentVersionDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {912B7F67-674E-35E3-9F46-CCB8B8FA08A0}
	// *********************************************************************//
	_NexoCurrentVersionDisp = dispinterface
		['{912B7F67-674E-35E3-9F46-CCB8B8FA08A0}']
	end;

	// *********************************************************************//
	// Interface :   INexoRetailerServerActivity
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F71D22CA-428A-4B19-9412-05F8552EB8F2}
	// *********************************************************************//
	INexoRetailerServerActivity = interface(IDispatch)
		['{F71D22CA-428A-4B19-9412-05F8552EB8F2}']
	end;

	// *********************************************************************//
	// DispIntf :    INexoRetailerServerActivityDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {F71D22CA-428A-4B19-9412-05F8552EB8F2}
	// *********************************************************************//
	INexoRetailerServerActivityDisp = dispinterface
		['{F71D22CA-428A-4B19-9412-05F8552EB8F2}']
	end;

	// *********************************************************************//
	// Interface :   _NexoRetailerServerDatabaseConnection
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {79C911BC-C8E4-341F-941F-73005D7CFC92}
	// *********************************************************************//
	_NexoRetailerServerDatabaseConnection = interface(IDispatch)
		['{79C911BC-C8E4-341F-941F-73005D7CFC92}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoRetailerServerDatabaseConnectionDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {79C911BC-C8E4-341F-941F-73005D7CFC92}
	// *********************************************************************//
	_NexoRetailerServerDatabaseConnectionDisp = dispinterface
		['{79C911BC-C8E4-341F-941F-73005D7CFC92}']
	end;

	// *********************************************************************//
	// Interface :   _NexoRetailerServerDatabaseEndPoint
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {34DA5861-39D5-35BB-B676-8F96880BB3EB}
	// *********************************************************************//
	_NexoRetailerServerDatabaseEndPoint = interface(IDispatch)
		['{34DA5861-39D5-35BB-B676-8F96880BB3EB}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoRetailerServerDatabaseEndPointDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {34DA5861-39D5-35BB-B676-8F96880BB3EB}
	// *********************************************************************//
	_NexoRetailerServerDatabaseEndPointDisp = dispinterface
		['{34DA5861-39D5-35BB-B676-8F96880BB3EB}']
	end;

	// *********************************************************************//
	// Interface :   _NexoRetailerServerDatabaseSale
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {93971474-DEA7-3D4D-A112-61B672EE7B52}
	// *********************************************************************//
	_NexoRetailerServerDatabaseSale = interface(IDispatch)
		['{93971474-DEA7-3D4D-A112-61B672EE7B52}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoRetailerServerDatabaseSaleDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {93971474-DEA7-3D4D-A112-61B672EE7B52}
	// *********************************************************************//
	_NexoRetailerServerDatabaseSaleDisp = dispinterface
		['{93971474-DEA7-3D4D-A112-61B672EE7B52}']
	end;

	// *********************************************************************//
	// Interface :   _NexoRetailerServerDatabaseMessage
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {144CF118-C521-3B94-89DA-D4739A0C91D2}
	// *********************************************************************//
	_NexoRetailerServerDatabaseMessage = interface(IDispatch)
		['{144CF118-C521-3B94-89DA-D4739A0C91D2}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoRetailerServerDatabaseMessageDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {144CF118-C521-3B94-89DA-D4739A0C91D2}
	// *********************************************************************//
	_NexoRetailerServerDatabaseMessageDisp = dispinterface
		['{144CF118-C521-3B94-89DA-D4739A0C91D2}']
	end;

	// *********************************************************************//
	// Interface :   INexoRetailerServerDatabaseSettings
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B46DBE4F-C3E3-41F8-BFE8-E10DBEF1988B}
	// *********************************************************************//
	INexoRetailerServerDatabaseSettings = interface(IDispatch)
		['{B46DBE4F-C3E3-41F8-BFE8-E10DBEF1988B}']
		function Get_ConnectionString: WideString; safecall;
		procedure Set_ConnectionString(const pRetVal: WideString); safecall;
		function Get_ConnectionsTableName: WideString; safecall;
		procedure Set_ConnectionsTableName(const pRetVal: WideString); safecall;
		function Get_MessagesTableName: WideString; safecall;
		procedure Set_MessagesTableName(const pRetVal: WideString); safecall;
		function Get_EndPointsTableName: WideString; safecall;
		procedure Set_EndPointsTableName(const pRetVal: WideString); safecall;
		function Get_SalesTableName: WideString; safecall;
		procedure Set_SalesTableName(const pRetVal: WideString); safecall;
		function Get_DeclineByDefault: WordBool; safecall;
		procedure Set_DeclineByDefault(pRetVal: WordBool); safecall;
		function Get_Secured: WordBool; safecall;
		procedure Set_Secured(pRetVal: WordBool); safecall;
		function Get_DelayBeforeAutoLogout: LongWord; safecall;
		procedure Set_DelayBeforeAutoLogout(pRetVal: LongWord); safecall;
		function IsValid: WordBool; safecall;
		property ConnectionString: WideString read Get_ConnectionString write Set_ConnectionString;
		property ConnectionsTableName: WideString read Get_ConnectionsTableName write Set_ConnectionsTableName;
		property MessagesTableName: WideString read Get_MessagesTableName write Set_MessagesTableName;
		property EndPointsTableName: WideString read Get_EndPointsTableName write Set_EndPointsTableName;
		property SalesTableName: WideString read Get_SalesTableName write Set_SalesTableName;
		property DeclineByDefault: WordBool read Get_DeclineByDefault write Set_DeclineByDefault;
		property Secured: WordBool read Get_Secured write Set_Secured;
		property DelayBeforeAutoLogout: LongWord read Get_DelayBeforeAutoLogout write Set_DelayBeforeAutoLogout;
	end;

	// *********************************************************************//
	// DispIntf :    INexoRetailerServerDatabaseSettingsDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {B46DBE4F-C3E3-41F8-BFE8-E10DBEF1988B}
	// *********************************************************************//
	INexoRetailerServerDatabaseSettingsDisp = dispinterface
		['{B46DBE4F-C3E3-41F8-BFE8-E10DBEF1988B}']
		property ConnectionString: WideString dispid 1;
		property ConnectionsTableName: WideString dispid 2;
		property MessagesTableName: WideString dispid 3;
		property EndPointsTableName: WideString dispid 4;
		property SalesTableName: WideString dispid 5;
		property DeclineByDefault: WordBool dispid 6;
		property Secured: WordBool dispid 7;
		property DelayBeforeAutoLogout: LongWord dispid 8;
		function IsValid: WordBool; dispid 100;
	end;

	// *********************************************************************//
	// Interface :   _NexoRetailerServerDatabase
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {23975521-A1F1-3C63-9519-BE95ECC5C8E2}
	// *********************************************************************//
	_NexoRetailerServerDatabase = interface(IDispatch)
		['{23975521-A1F1-3C63-9519-BE95ECC5C8E2}']
	end;

	// *********************************************************************//
	// DispIntf :    _NexoRetailerServerDatabaseDisp
	// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
	// GUID :        {23975521-A1F1-3C63-9519-BE95ECC5C8E2}
	// *********************************************************************//
	_NexoRetailerServerDatabaseDisp = dispinterface
		['{23975521-A1F1-3C63-9519-BE95ECC5C8E2}']
	end;

	// *********************************************************************//
	// Interface :   INexoRetailerServerSettings
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {0D584C15-C13E-4123-B6A6-57D27C7937D1}
	// *********************************************************************//
	INexoRetailerServerSettings = interface(IDispatch)
		['{0D584C15-C13E-4123-B6A6-57D27C7937D1}']
		function Get_IsValid: WordBool; safecall;
		function Get_Parameters: OleVariant; safecall;
		procedure _Set_Parameters(pRetVal: OleVariant); safecall;
		function Get_ThreadData: IThreadData; safecall;
		procedure _Set_ThreadData(const pRetVal: IThreadData); safecall;
		function Get_StreamServerSettings: IStreamServerSettings; safecall;
		procedure _Set_StreamServerSettings(const pRetVal: IStreamServerSettings); safecall;
		function Get_OnStart: IUnknown; safecall;
		procedure _Set_OnStart(const pRetVal: IUnknown); safecall;
		function Get_OnReceivedRequest: IUnknown; safecall;
		procedure _Set_OnReceivedRequest(const pRetVal: IUnknown); safecall;
		function Get_OnReceivedReply: IUnknown; safecall;
		procedure _Set_OnReceivedReply(const pRetVal: IUnknown); safecall;
		function Get_OnReceivedNotification: IUnknown; safecall;
		procedure _Set_OnReceivedNotification(const pRetVal: IUnknown); safecall;
		function Get_OnSend: IUnknown; safecall;
		procedure _Set_OnSend(const pRetVal: IUnknown); safecall;
		function Get_OnStop: IUnknown; safecall;
		procedure _Set_OnStop(const pRetVal: IUnknown); safecall;
		function Get_DatabaseSettings: INexoRetailerServerDatabaseSettings; safecall;
		procedure _Set_DatabaseSettings(const pRetVal: INexoRetailerServerDatabaseSettings); safecall;
		property IsValid: WordBool read Get_IsValid;
		property Parameters: OleVariant read Get_Parameters write _Set_Parameters;
		property ThreadData: IThreadData read Get_ThreadData write _Set_ThreadData;
		property StreamServerSettings: IStreamServerSettings read Get_StreamServerSettings write _Set_StreamServerSettings;
		property OnStart: IUnknown read Get_OnStart write _Set_OnStart;
		property OnReceivedRequest: IUnknown read Get_OnReceivedRequest write _Set_OnReceivedRequest;
		property OnReceivedReply: IUnknown read Get_OnReceivedReply write _Set_OnReceivedReply;
		property OnReceivedNotification: IUnknown read Get_OnReceivedNotification write _Set_OnReceivedNotification;
		property OnSend: IUnknown read Get_OnSend write _Set_OnSend;
		property OnStop: IUnknown read Get_OnStop write _Set_OnStop;
		property DatabaseSettings: INexoRetailerServerDatabaseSettings read Get_DatabaseSettings write _Set_DatabaseSettings;
	end;

	// *********************************************************************//
	// DispIntf :    INexoRetailerServerSettingsDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {0D584C15-C13E-4123-B6A6-57D27C7937D1}
	// *********************************************************************//
	INexoRetailerServerSettingsDisp = dispinterface
		['{0D584C15-C13E-4123-B6A6-57D27C7937D1}']
		property IsValid: WordBool readonly dispid 1;
		property Parameters: OleVariant dispid 2;
		property ThreadData: IThreadData dispid 3;
		property StreamServerSettings: IStreamServerSettings dispid 4;
		property OnStart: IUnknown dispid 10;
		property OnReceivedRequest: IUnknown dispid 11;
		property OnReceivedReply: IUnknown dispid 12;
		property OnReceivedNotification: IUnknown dispid 13;
		property OnSend: IUnknown dispid 14;
		property OnStop: IUnknown dispid 15;
		property DatabaseSettings: INexoRetailerServerDatabaseSettings dispid 16;
	end;

	// *********************************************************************//
	// Interface :   INexoRetailerClientHandle
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {006465F7-6122-44C2-BBF1-166B483315E4}
	// *********************************************************************//
	INexoRetailerClientHandle = interface(IDispatch)
		['{006465F7-6122-44C2-BBF1-166B483315E4}']
		function Get_XML: WideString; safecall;
		property XML: WideString read Get_XML;
	end;

	// *********************************************************************//
	// DispIntf :    INexoRetailerClientHandleDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {006465F7-6122-44C2-BBF1-166B483315E4}
	// *********************************************************************//
	INexoRetailerClientHandleDisp = dispinterface
		['{006465F7-6122-44C2-BBF1-166B483315E4}']
		property XML: WideString readonly dispid 1;
	end;

	// *********************************************************************//
	// Interface :   INexoRetailerClient
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {8B1988DB-F6AC-4B87-B874-62C58ED8E95F}
	// *********************************************************************//
	INexoRetailerClient = interface(IDispatch)
		['{8B1988DB-F6AC-4B87-B874-62C58ED8E95F}']
		function Get_Settings: INexoRetailerClientSettings; safecall;
		function Get_Key: WideString; safecall;
		function Get_KeyClient: WideString; safecall;
		function Get_KeyServer: WideString; safecall;
		function Get_ID: Integer; safecall;
		function Get_Name: WideString; safecall;
		procedure Set_Name(const pRetVal: WideString); safecall;
		function Get_Description: WideString; safecall;
		function Get_SaleID: WideString; safecall;
		function Get_POIID: WideString; safecall;
		function Get_Connected: WordBool; safecall;
		function Get_Activity: INexoRetailerClientActivity; safecall;
		function Get_ToString: WideString; safecall;
		function Connect(const Settings: INexoRetailerClientSettings): WordBool; safecall;
		procedure Disconnect; safecall;
		function SendRequest(const msg: INexoObject; timer: Integer; const Settings: INexoRetailerClientSettings; autoComplete: WordBool)
			: INexoRetailerClientHandle; safecall;
		function SendRequest_2(const msg: ISaleToPOIRequest; timer: Integer; const Settings: INexoRetailerClientSettings; autoComplete: WordBool)
			: INexoRetailerClientHandle; safecall;
		function SendRequestSync(const msg: INexoObject; timer: Integer; autoComplete: WordBool): WordBool; safecall;
		function SendRequestSync_2(const msg: ISaleToPOIRequest; timer: Integer; autoComplete: WordBool): WordBool; safecall;
		function SendReply(const msg: INexoObject; const thread: IThread; autoComplete: WordBool): WordBool; safecall;
		function SendReply_2(const msg: ISaleToPOIResponse; const thread: IThread; autoComplete: WordBool): WordBool; safecall;
		function SendRawRequest(const XML: WideString; timer: Integer; autoComplete: WordBool): INexoRetailerClientHandle; safecall;
		function SendRawRequestSync(const XML: WideString; timer: Integer; autoComplete: WordBool): WordBool; safecall;
		function Get_SendWithErrors: WordBool; safecall;
		procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
		function Get_SendWithWarnings: WordBool; safecall;
		procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
		function Get_NbErrors: Integer; safecall;
		function Get_ContainsErrors: WordBool; safecall;
		function Get_NbWarnings: Integer; safecall;
		function Get_ContainsWarnings: WordBool; safecall;
		function Get_ContainsEvents: WordBool; safecall;
		function Get_BOM: WordBool; safecall;
		procedure Set_BOM(pRetVal: WordBool); safecall;
		function Get_LogSerialisationEvents: WordBool; safecall;
		procedure Set_LogSerialisationEvents(pRetVal: WordBool); safecall;
		function ErrorsList: WideString; safecall;
		function WarningsList: WideString; safecall;
		function EventsList: WideString; safecall;
		function IsUsingJson: WordBool; safecall;
		procedure SetUsingJson(f: WordBool); safecall;
		property Settings: INexoRetailerClientSettings read Get_Settings;
		property Key: WideString read Get_Key;
		property KeyClient: WideString read Get_KeyClient;
		property KeyServer: WideString read Get_KeyServer;
		property ID: Integer read Get_ID;
		property Name: WideString read Get_Name write Set_Name;
		property Description: WideString read Get_Description;
		property SaleID: WideString read Get_SaleID;
		property POIID: WideString read Get_POIID;
		property Connected: WordBool read Get_Connected;
		property Activity: INexoRetailerClientActivity read Get_Activity;
		property ToString: WideString read Get_ToString;
		property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
		property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
		property NbErrors: Integer read Get_NbErrors;
		property ContainsErrors: WordBool read Get_ContainsErrors;
		property NbWarnings: Integer read Get_NbWarnings;
		property ContainsWarnings: WordBool read Get_ContainsWarnings;
		property ContainsEvents: WordBool read Get_ContainsEvents;
		property BOM: WordBool read Get_BOM write Set_BOM;
		property LogSerialisationEvents: WordBool read Get_LogSerialisationEvents write Set_LogSerialisationEvents;
	end;

	// *********************************************************************//
	// DispIntf :    INexoRetailerClientDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {8B1988DB-F6AC-4B87-B874-62C58ED8E95F}
	// *********************************************************************//
	INexoRetailerClientDisp = dispinterface
		['{8B1988DB-F6AC-4B87-B874-62C58ED8E95F}']
		property Settings: INexoRetailerClientSettings readonly dispid 1;
		property Key: WideString readonly dispid 2;
		property KeyClient: WideString readonly dispid 3;
		property KeyServer: WideString readonly dispid 4;
		property ID: Integer readonly dispid 5;
		property Name: WideString dispid 6;
		property Description: WideString readonly dispid 7;
		property SaleID: WideString readonly dispid 8;
		property POIID: WideString readonly dispid 9;
		property Connected: WordBool readonly dispid 10;
		property Activity: INexoRetailerClientActivity readonly dispid 11;
		property ToString: WideString readonly dispid 100;
		function Connect(const Settings: INexoRetailerClientSettings): WordBool; dispid 101;
		procedure Disconnect; dispid 102;
		function SendRequest(const msg: INexoObject; timer: Integer; const Settings: INexoRetailerClientSettings; autoComplete: WordBool)
			: INexoRetailerClientHandle; dispid 110;
		function SendRequest_2(const msg: ISaleToPOIRequest; timer: Integer; const Settings: INexoRetailerClientSettings; autoComplete: WordBool)
			: INexoRetailerClientHandle; dispid 111;
		function SendRequestSync(const msg: INexoObject; timer: Integer; autoComplete: WordBool): WordBool; dispid 120;
		function SendRequestSync_2(const msg: ISaleToPOIRequest; timer: Integer; autoComplete: WordBool): WordBool; dispid 121;
		function SendReply(const msg: INexoObject; const thread: IThread; autoComplete: WordBool): WordBool; dispid 200;
		function SendReply_2(const msg: ISaleToPOIResponse; const thread: IThread; autoComplete: WordBool): WordBool; dispid 201;
		function SendRawRequest(const XML: WideString; timer: Integer; autoComplete: WordBool): INexoRetailerClientHandle; dispid 300;
		function SendRawRequestSync(const XML: WideString; timer: Integer; autoComplete: WordBool): WordBool; dispid 301;
		property SendWithErrors: WordBool dispid 1000;
		property SendWithWarnings: WordBool dispid 1001;
		property NbErrors: Integer readonly dispid 1002;
		property ContainsErrors: WordBool readonly dispid 1003;
		property NbWarnings: Integer readonly dispid 1004;
		property ContainsWarnings: WordBool readonly dispid 1005;
		property ContainsEvents: WordBool readonly dispid 1006;
		property BOM: WordBool dispid 1007;
		property LogSerialisationEvents: WordBool dispid 1008;
		function ErrorsList: WideString; dispid 1100;
		function WarningsList: WideString; dispid 1102;
		function EventsList: WideString; dispid 1103;
		function IsUsingJson: WordBool; dispid 1104;
		procedure SetUsingJson(f: WordBool); dispid 1105;
	end;

	// *********************************************************************//
	// Interface :   INexoRetailerClientSettings
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {96259F3B-053E-45AF-B616-079CBC11690A}
	// *********************************************************************//
	INexoRetailerClientSettings = interface(IDispatch)
		['{96259F3B-053E-45AF-B616-079CBC11690A}']
		function Get_IsValid: WordBool; safecall;
		function Get_StreamClientSettings: IStreamClientSettings; safecall;
		procedure _Set_StreamClientSettings(const pRetVal: IStreamClientSettings); safecall;
		function Get_ThreadData: IThreadData; safecall;
		procedure _Set_ThreadData(const pRetVal: IThreadData); safecall;
		function Get_OnSentRequestStatusChanged: IUnknown; safecall;
		procedure _Set_OnSentRequestStatusChanged(const pRetVal: IUnknown); safecall;
		function Get_OnReceivedRequest: IUnknown; safecall;
		procedure _Set_OnReceivedRequest(const pRetVal: IUnknown); safecall;
		function Get_OnReceivedReply: IUnknown; safecall;
		procedure _Set_OnReceivedReply(const pRetVal: IUnknown); safecall;
		function Get_OnReceivedNotification: IUnknown; safecall;
		procedure _Set_OnReceivedNotification(const pRetVal: IUnknown); safecall;
		function Get_OnSend: IUnknown; safecall;
		procedure _Set_OnSend(const pRetVal: IUnknown); safecall;
		function Get_WMNexoMessage: LongWord; safecall;
		procedure Set_WMNexoMessage(pRetVal: LongWord); safecall;
		function Get_Parameters: OleVariant; safecall;
		procedure _Set_Parameters(pRetVal: OleVariant); safecall;
		function Get_ConnectionSettings: INexoRetailerClientConnectionSettings; safecall;
		procedure _Set_ConnectionSettings(const pRetVal: INexoRetailerClientConnectionSettings); safecall;
		property IsValid: WordBool read Get_IsValid;
		property StreamClientSettings: IStreamClientSettings read Get_StreamClientSettings write _Set_StreamClientSettings;
		property ThreadData: IThreadData read Get_ThreadData write _Set_ThreadData;
		property OnSentRequestStatusChanged: IUnknown read Get_OnSentRequestStatusChanged write _Set_OnSentRequestStatusChanged;
		property OnReceivedRequest: IUnknown read Get_OnReceivedRequest write _Set_OnReceivedRequest;
		property OnReceivedReply: IUnknown read Get_OnReceivedReply write _Set_OnReceivedReply;
		property OnReceivedNotification: IUnknown read Get_OnReceivedNotification write _Set_OnReceivedNotification;
		property OnSend: IUnknown read Get_OnSend write _Set_OnSend;
		property WMNexoMessage: LongWord read Get_WMNexoMessage write Set_WMNexoMessage;
		property Parameters: OleVariant read Get_Parameters write _Set_Parameters;
		property ConnectionSettings: INexoRetailerClientConnectionSettings read Get_ConnectionSettings write _Set_ConnectionSettings;
	end;

	// *********************************************************************//
	// DispIntf :    INexoRetailerClientSettingsDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {96259F3B-053E-45AF-B616-079CBC11690A}
	// *********************************************************************//
	INexoRetailerClientSettingsDisp = dispinterface
		['{96259F3B-053E-45AF-B616-079CBC11690A}']
		property IsValid: WordBool readonly dispid 1;
		property StreamClientSettings: IStreamClientSettings dispid 2;
		property ThreadData: IThreadData dispid 3;
		property OnSentRequestStatusChanged: IUnknown dispid 4;
		property OnReceivedRequest: IUnknown dispid 5;
		property OnReceivedReply: IUnknown dispid 6;
		property OnReceivedNotification: IUnknown dispid 7;
		property OnSend: IUnknown dispid 8;
		property WMNexoMessage: LongWord dispid 9;
		property Parameters: OleVariant dispid 10;
		property ConnectionSettings: INexoRetailerClientConnectionSettings dispid 11;
	end;

	// *********************************************************************//
	// Interface :   INexoRetailerClientConnectionSettings
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {BFEFE83C-FA94-48DB-B7B9-9E1887CB6884}
	// *********************************************************************//
	INexoRetailerClientConnectionSettings = interface(IDispatch)
		['{BFEFE83C-FA94-48DB-B7B9-9E1887CB6884}']
		function Get_OnConnectionRequest: IUnknown; safecall;
		procedure _Set_OnConnectionRequest(const pRetVal: IUnknown); safecall;
		function Get_OnConnectionReply: IUnknown; safecall;
		procedure _Set_OnConnectionReply(const pRetVal: IUnknown); safecall;
		function Get_ConnectionTimer: Integer; safecall;
		procedure Set_ConnectionTimer(pRetVal: Integer); safecall;
		property OnConnectionRequest: IUnknown read Get_OnConnectionRequest write _Set_OnConnectionRequest;
		property OnConnectionReply: IUnknown read Get_OnConnectionReply write _Set_OnConnectionReply;
		property ConnectionTimer: Integer read Get_ConnectionTimer write Set_ConnectionTimer;
	end;

	// *********************************************************************//
	// DispIntf :    INexoRetailerClientConnectionSettingsDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {BFEFE83C-FA94-48DB-B7B9-9E1887CB6884}
	// *********************************************************************//
	INexoRetailerClientConnectionSettingsDisp = dispinterface
		['{BFEFE83C-FA94-48DB-B7B9-9E1887CB6884}']
		property OnConnectionRequest: IUnknown dispid 1;
		property OnConnectionReply: IUnknown dispid 2;
		property ConnectionTimer: Integer dispid 3;
	end;

	// *********************************************************************//
	// Interface :   INexoRetailerClientActivity
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {BC3BD01B-95AA-4D4A-B2A1-3AB16231142D}
	// *********************************************************************//
	INexoRetailerClientActivity = interface(IDispatch)
		['{BC3BD01B-95AA-4D4A-B2A1-3AB16231142D}']
	end;

	// *********************************************************************//
	// DispIntf :    INexoRetailerClientActivityDisp
	// Indicateurs : (4416) Dual OleAutomation Dispatchable
	// GUID :        {BC3BD01B-95AA-4D4A-B2A1-3AB16231142D}
	// *********************************************************************//
	INexoRetailerClientActivityDisp = dispinterface
		['{BC3BD01B-95AA-4D4A-B2A1-3AB16231142D}']
	end;

	// *********************************************************************//
	// La classe CoAbortRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IAbortRequestType exposée
	// par la CoClasse AbortRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoAbortRequestType = class
		class function Create: IAbortRequestType;
		class function CreateRemote(const MachineName: string): IAbortRequestType;
	end;

	// *********************************************************************//
	// La classe CoMessageReferenceType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IMessageReferenceType exposée
	// par la CoClasse MessageReferenceType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoMessageReferenceType = class
		class function Create: IMessageReferenceType;
		class function CreateRemote(const MachineName: string): IMessageReferenceType;
	end;

	// *********************************************************************//
	// La classe CoDisplayResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IDisplayResponseType exposée
	// par la CoClasse DisplayResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoDisplayResponseType = class
		class function Create: IDisplayResponseType;
		class function CreateRemote(const MachineName: string): IDisplayResponseType;
	end;

	// *********************************************************************//
	// La classe CoOutputResultType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IOutputResultType exposée
	// par la CoClasse OutputResultType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoOutputResultType = class
		class function Create: IOutputResultType;
		class function CreateRemote(const MachineName: string): IOutputResultType;
	end;

	// *********************************************************************//
	// La classe CoResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IResponseType exposée
	// par la CoClasse ResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoResponseType = class
		class function Create: IResponseType;
		class function CreateRemote(const MachineName: string): IResponseType;
	end;

	// *********************************************************************//
	// La classe CoDisplayRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IDisplayRequestType exposée
	// par la CoClasse DisplayRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoDisplayRequestType = class
		class function Create: IDisplayRequestType;
		class function CreateRemote(const MachineName: string): IDisplayRequestType;
	end;

	// *********************************************************************//
	// La classe CoDisplayOutputType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IDisplayOutputType exposée
	// par la CoClasse DisplayOutputType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoDisplayOutputType = class
		class function Create: IDisplayOutputType;
		class function CreateRemote(const MachineName: string): IDisplayOutputType;
	end;

	// *********************************************************************//
	// La classe CoOutputContentType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IOutputContentType exposée
	// par la CoClasse OutputContentType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoOutputContentType = class
		class function Create: IOutputContentType;
		class function CreateRemote(const MachineName: string): IOutputContentType;
	end;

	// *********************************************************************//
	// La classe CoPredefinedContentType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPredefinedContentType exposée
	// par la CoClasse PredefinedContentType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPredefinedContentType = class
		class function Create: IPredefinedContentType;
		class function CreateRemote(const MachineName: string): IPredefinedContentType;
	end;

	// *********************************************************************//
	// La classe CoOutputTextType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IOutputTextType exposée
	// par la CoClasse OutputTextType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoOutputTextType = class
		class function Create: IOutputTextType;
		class function CreateRemote(const MachineName: string): IOutputTextType;
	end;

	// *********************************************************************//
	// La classe CoOutputBarcodeType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IOutputBarcodeType exposée
	// par la CoClasse OutputBarcodeType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoOutputBarcodeType = class
		class function Create: IOutputBarcodeType;
		class function CreateRemote(const MachineName: string): IOutputBarcodeType;
	end;

	// *********************************************************************//
	// La classe CoMenuEntryType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IMenuEntryType exposée
	// par la CoClasse MenuEntryType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoMenuEntryType = class
		class function Create: IMenuEntryType;
		class function CreateRemote(const MachineName: string): IMenuEntryType;
	end;

	// *********************************************************************//
	// La classe CoAdminRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IAdminRequestType exposée
	// par la CoClasse AdminRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoAdminRequestType = class
		class function Create: IAdminRequestType;
		class function CreateRemote(const MachineName: string): IAdminRequestType;
	end;

	// *********************************************************************//
	// La classe CoAdminResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IAdminResponseType exposée
	// par la CoClasse AdminResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoAdminResponseType = class
		class function Create: IAdminResponseType;
		class function CreateRemote(const MachineName: string): IAdminResponseType;
	end;

	// *********************************************************************//
	// La classe CoAllowedProductType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IAllowedProductType exposée
	// par la CoClasse AllowedProductType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoAllowedProductType = class
		class function Create: IAllowedProductType;
		class function CreateRemote(const MachineName: string): IAllowedProductType;
	end;

	// *********************************************************************//
	// La classe CoAmountsReqType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IAmountsReqType exposée
	// par la CoClasse AmountsReqType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoAmountsReqType = class
		class function Create: IAmountsReqType;
		class function CreateRemote(const MachineName: string): IAmountsReqType;
	end;

	// *********************************************************************//
	// La classe CoAmountsRespType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IAmountsRespType exposée
	// par la CoClasse AmountsRespType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoAmountsRespType = class
		class function Create: IAmountsRespType;
		class function CreateRemote(const MachineName: string): IAmountsRespType;
	end;

	// *********************************************************************//
	// La classe CoAreaSizeType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IAreaSizeType exposée
	// par la CoClasse AreaSizeType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoAreaSizeType = class
		class function Create: IAreaSizeType;
		class function CreateRemote(const MachineName: string): IAreaSizeType;
	end;

	// *********************************************************************//
	// La classe CoBalanceInquiryRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IBalanceInquiryRequestType exposée
	// par la CoClasse BalanceInquiryRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoBalanceInquiryRequestType = class
		class function Create: IBalanceInquiryRequestType;
		class function CreateRemote(const MachineName: string): IBalanceInquiryRequestType;
	end;

	// *********************************************************************//
	// La classe CoPaymentAccountReqType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPaymentAccountReqType exposée
	// par la CoClasse PaymentAccountReqType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPaymentAccountReqType = class
		class function Create: IPaymentAccountReqType;
		class function CreateRemote(const MachineName: string): IPaymentAccountReqType;
	end;

	// *********************************************************************//
	// La classe CoTransactionIdentificationType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ITransactionIdentificationType exposée
	// par la CoClasse TransactionIdentificationType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoTransactionIdentificationType = class
		class function Create: ITransactionIdentificationType;
		class function CreateRemote(const MachineName: string): ITransactionIdentificationType;
	end;

	// *********************************************************************//
	// La classe CoPaymentInstrumentDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPaymentInstrumentDataType exposée
	// par la CoClasse PaymentInstrumentDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPaymentInstrumentDataType = class
		class function Create: IPaymentInstrumentDataType;
		class function CreateRemote(const MachineName: string): IPaymentInstrumentDataType;
	end;

	// *********************************************************************//
	// La classe CoCardDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICardDataType exposée
	// par la CoClasse CardDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCardDataType = class
		class function Create: ICardDataType;
		class function CreateRemote(const MachineName: string): ICardDataType;
	end;

	// *********************************************************************//
	// La classe CoContentInformationType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IContentInformationType exposée
	// par la CoClasse ContentInformationType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoContentInformationType = class
		class function Create: IContentInformationType;
		class function CreateRemote(const MachineName: string): IContentInformationType;
	end;

	// *********************************************************************//
	// La classe CoAuthenticatedDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IAuthenticatedDataType exposée
	// par la CoClasse AuthenticatedDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoAuthenticatedDataType = class
		class function Create: IAuthenticatedDataType;
		class function CreateRemote(const MachineName: string): IAuthenticatedDataType;
	end;

	// *********************************************************************//
	// La classe CoKEKType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IKEKType exposée
	// par la CoClasse KEKType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoKEKType = class
		class function Create: IKEKType;
		class function CreateRemote(const MachineName: string): IKEKType;
	end;

	// *********************************************************************//
	// La classe CoKEKIdentifierType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IKEKIdentifierType exposée
	// par la CoClasse KEKIdentifierType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoKEKIdentifierType = class
		class function Create: IKEKIdentifierType;
		class function CreateRemote(const MachineName: string): IKEKIdentifierType;
	end;

	// *********************************************************************//
	// La classe CoAlgorithmIdentifier fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IAlgorithmIdentifier exposée
	// par la CoClasse AlgorithmIdentifier. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoAlgorithmIdentifier = class
		class function Create: IAlgorithmIdentifier;
		class function CreateRemote(const MachineName: string): IAlgorithmIdentifier;
	end;

	// *********************************************************************//
	// La classe CoParameterType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IParameterType exposée
	// par la CoClasse ParameterType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoParameterType = class
		class function Create: IParameterType;
		class function CreateRemote(const MachineName: string): IParameterType;
	end;

	// *********************************************************************//
	// La classe CoKeyTransportType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IKeyTransportType exposée
	// par la CoClasse KeyTransportType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoKeyTransportType = class
		class function Create: IKeyTransportType;
		class function CreateRemote(const MachineName: string): IKeyTransportType;
	end;

	// *********************************************************************//
	// La classe CoRecipientIdentifierType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IRecipientIdentifierType exposée
	// par la CoClasse RecipientIdentifierType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoRecipientIdentifierType = class
		class function Create: IRecipientIdentifierType;
		class function CreateRemote(const MachineName: string): IRecipientIdentifierType;
	end;

	// *********************************************************************//
	// La classe CoIssuerAndSerialNumberType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IIssuerAndSerialNumberType exposée
	// par la CoClasse IssuerAndSerialNumberType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoIssuerAndSerialNumberType = class
		class function Create: IIssuerAndSerialNumberType;
		class function CreateRemote(const MachineName: string): IIssuerAndSerialNumberType;
	end;

	// *********************************************************************//
	// La classe CoRelativeDistinguishedNameType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IRelativeDistinguishedNameType exposée
	// par la CoClasse RelativeDistinguishedNameType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoRelativeDistinguishedNameType = class
		class function Create: IRelativeDistinguishedNameType;
		class function CreateRemote(const MachineName: string): IRelativeDistinguishedNameType;
	end;

	// *********************************************************************//
	// La classe CoEncapsulatedContentType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEncapsulatedContentType exposée
	// par la CoClasse EncapsulatedContentType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoEncapsulatedContentType = class
		class function Create: IEncapsulatedContentType;
		class function CreateRemote(const MachineName: string): IEncapsulatedContentType;
	end;

	// *********************************************************************//
	// La classe CoDigestedDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IDigestedDataType exposée
	// par la CoClasse DigestedDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoDigestedDataType = class
		class function Create: IDigestedDataType;
		class function CreateRemote(const MachineName: string): IDigestedDataType;
	end;

	// *********************************************************************//
	// La classe CoEnvelopedDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEnvelopedDataType exposée
	// par la CoClasse EnvelopedDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoEnvelopedDataType = class
		class function Create: IEnvelopedDataType;
		class function CreateRemote(const MachineName: string): IEnvelopedDataType;
	end;

	// *********************************************************************//
	// La classe CoEncryptedContentType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEncryptedContentType exposée
	// par la CoClasse EncryptedContentType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoEncryptedContentType = class
		class function Create: IEncryptedContentType;
		class function CreateRemote(const MachineName: string): IEncryptedContentType;
	end;

	// *********************************************************************//
	// La classe CoNamedKeyEncryptedDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INamedKeyEncryptedDataType exposée
	// par la CoClasse NamedKeyEncryptedDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNamedKeyEncryptedDataType = class
		class function Create: INamedKeyEncryptedDataType;
		class function CreateRemote(const MachineName: string): INamedKeyEncryptedDataType;
	end;

	// *********************************************************************//
	// La classe CoSignedDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISignedDataType exposée
	// par la CoClasse SignedDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSignedDataType = class
		class function Create: ISignedDataType;
		class function CreateRemote(const MachineName: string): ISignedDataType;
	end;

	// *********************************************************************//
	// La classe CoSignerType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISignerType exposée
	// par la CoClasse SignerType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSignerType = class
		class function Create: ISignerType;
		class function CreateRemote(const MachineName: string): ISignerType;
	end;

	// *********************************************************************//
	// La classe CoSignerIdentifierType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISignerIdentifierType exposée
	// par la CoClasse SignerIdentifierType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSignerIdentifierType = class
		class function Create: ISignerIdentifierType;
		class function CreateRemote(const MachineName: string): ISignerIdentifierType;
	end;

	// *********************************************************************//
	// La classe CoSensitiveCardDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISensitiveCardDataType exposée
	// par la CoClasse SensitiveCardDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSensitiveCardDataType = class
		class function Create: ISensitiveCardDataType;
		class function CreateRemote(const MachineName: string): ISensitiveCardDataType;
	end;

	// *********************************************************************//
	// La classe CoTrackDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ITrackDataType exposée
	// par la CoClasse TrackDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoTrackDataType = class
		class function Create: ITrackDataType;
		class function CreateRemote(const MachineName: string): ITrackDataType;
	end;

	// *********************************************************************//
	// La classe CoPaymentTokenType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPaymentTokenType exposée
	// par la CoClasse PaymentTokenType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPaymentTokenType = class
		class function Create: IPaymentTokenType;
		class function CreateRemote(const MachineName: string): IPaymentTokenType;
	end;

	// *********************************************************************//
	// La classe CoCustomerOrderType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICustomerOrderType exposée
	// par la CoClasse CustomerOrderType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCustomerOrderType = class
		class function Create: ICustomerOrderType;
		class function CreateRemote(const MachineName: string): ICustomerOrderType;
	end;

	// *********************************************************************//
	// La classe CoCheckDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICheckDataType exposée
	// par la CoClasse CheckDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCheckDataType = class
		class function Create: ICheckDataType;
		class function CreateRemote(const MachineName: string): ICheckDataType;
	end;

	// *********************************************************************//
	// La classe CoMobileDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IMobileDataType exposée
	// par la CoClasse MobileDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoMobileDataType = class
		class function Create: IMobileDataType;
		class function CreateRemote(const MachineName: string): IMobileDataType;
	end;

	// *********************************************************************//
	// La classe CoGeolocationType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IGeolocationType exposée
	// par la CoClasse GeolocationType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoGeolocationType = class
		class function Create: IGeolocationType;
		class function CreateRemote(const MachineName: string): IGeolocationType;
	end;

	// *********************************************************************//
	// La classe CoGeographicCoordinatesType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IGeographicCoordinatesType exposée
	// par la CoClasse GeographicCoordinatesType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoGeographicCoordinatesType = class
		class function Create: IGeographicCoordinatesType;
		class function CreateRemote(const MachineName: string): IGeographicCoordinatesType;
	end;

	// *********************************************************************//
	// La classe CoUTMCoordinatesType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IUTMCoordinatesType exposée
	// par la CoClasse UTMCoordinatesType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoUTMCoordinatesType = class
		class function Create: IUTMCoordinatesType;
		class function CreateRemote(const MachineName: string): IUTMCoordinatesType;
	end;

	// *********************************************************************//
	// La classe CoSensitiveMobileDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISensitiveMobileDataType exposée
	// par la CoClasse SensitiveMobileDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSensitiveMobileDataType = class
		class function Create: ISensitiveMobileDataType;
		class function CreateRemote(const MachineName: string): ISensitiveMobileDataType;
	end;

	// *********************************************************************//
	// La classe CoLoyaltyAccountReqType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILoyaltyAccountReqType exposée
	// par la CoClasse LoyaltyAccountReqType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLoyaltyAccountReqType = class
		class function Create: ILoyaltyAccountReqType;
		class function CreateRemote(const MachineName: string): ILoyaltyAccountReqType;
	end;

	// *********************************************************************//
	// La classe CoLoyaltyAccountIDType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILoyaltyAccountIDType exposée
	// par la CoClasse LoyaltyAccountIDType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLoyaltyAccountIDType = class
		class function Create: ILoyaltyAccountIDType;
		class function CreateRemote(const MachineName: string): ILoyaltyAccountIDType;
	end;

	// *********************************************************************//
	// La classe CoBalanceInquiryResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IBalanceInquiryResponseType exposée
	// par la CoClasse BalanceInquiryResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoBalanceInquiryResponseType = class
		class function Create: IBalanceInquiryResponseType;
		class function CreateRemote(const MachineName: string): IBalanceInquiryResponseType;
	end;

	// *********************************************************************//
	// La classe CoPaymentAccountStatusType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPaymentAccountStatusType exposée
	// par la CoClasse PaymentAccountStatusType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPaymentAccountStatusType = class
		class function Create: IPaymentAccountStatusType;
		class function CreateRemote(const MachineName: string): IPaymentAccountStatusType;
	end;

	// *********************************************************************//
	// La classe CoPaymentAcquirerDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPaymentAcquirerDataType exposée
	// par la CoClasse PaymentAcquirerDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPaymentAcquirerDataType = class
		class function Create: IPaymentAcquirerDataType;
		class function CreateRemote(const MachineName: string): IPaymentAcquirerDataType;
	end;

	// *********************************************************************//
	// La classe CoLoyaltyAccountStatusType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILoyaltyAccountStatusType exposée
	// par la CoClasse LoyaltyAccountStatusType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLoyaltyAccountStatusType = class
		class function Create: ILoyaltyAccountStatusType;
		class function CreateRemote(const MachineName: string): ILoyaltyAccountStatusType;
	end;

	// *********************************************************************//
	// La classe CoLoyaltyAccountType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILoyaltyAccountType exposée
	// par la CoClasse LoyaltyAccountType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLoyaltyAccountType = class
		class function Create: ILoyaltyAccountType;
		class function CreateRemote(const MachineName: string): ILoyaltyAccountType;
	end;

	// *********************************************************************//
	// La classe CoBatchRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IBatchRequestType exposée
	// par la CoClasse BatchRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoBatchRequestType = class
		class function Create: IBatchRequestType;
		class function CreateRemote(const MachineName: string): IBatchRequestType;
	end;

	// *********************************************************************//
	// La classe CoTransactionToPerformType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ITransactionToPerformType exposée
	// par la CoClasse TransactionToPerformType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoTransactionToPerformType = class
		class function Create: ITransactionToPerformType;
		class function CreateRemote(const MachineName: string): ITransactionToPerformType;
	end;

	// *********************************************************************//
	// La classe CoLoyaltyRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILoyaltyRequestType exposée
	// par la CoClasse LoyaltyRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLoyaltyRequestType = class
		class function Create: ILoyaltyRequestType;
		class function CreateRemote(const MachineName: string): ILoyaltyRequestType;
	end;

	// *********************************************************************//
	// La classe CoSaleDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISaleDataType exposée
	// par la CoClasse SaleDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSaleDataType = class
		class function Create: ISaleDataType;
		class function CreateRemote(const MachineName: string): ISaleDataType;
	end;

	// *********************************************************************//
	// La classe CoSaleTerminalDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISaleTerminalDataType exposée
	// par la CoClasse SaleTerminalDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSaleTerminalDataType = class
		class function Create: ISaleTerminalDataType;
		class function CreateRemote(const MachineName: string): ISaleTerminalDataType;
	end;

	// *********************************************************************//
	// La classe CoSaleProfileType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISaleProfileType exposée
	// par la CoClasse SaleProfileType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSaleProfileType = class
		class function Create: ISaleProfileType;
		class function CreateRemote(const MachineName: string): ISaleProfileType;
	end;

	// *********************************************************************//
	// La classe CoSponsoredMerchantType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISponsoredMerchantType exposée
	// par la CoClasse SponsoredMerchantType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSponsoredMerchantType = class
		class function Create: ISponsoredMerchantType;
		class function CreateRemote(const MachineName: string): ISponsoredMerchantType;
	end;

	// *********************************************************************//
	// La classe CoSaleToIssuerDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISaleToIssuerDataType exposée
	// par la CoClasse SaleToIssuerDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSaleToIssuerDataType = class
		class function Create: ISaleToIssuerDataType;
		class function CreateRemote(const MachineName: string): ISaleToIssuerDataType;
	end;

	// *********************************************************************//
	// La classe CoLoyaltyTransactionType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILoyaltyTransactionType exposée
	// par la CoClasse LoyaltyTransactionType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLoyaltyTransactionType = class
		class function Create: ILoyaltyTransactionType;
		class function CreateRemote(const MachineName: string): ILoyaltyTransactionType;
	end;

	// *********************************************************************//
	// La classe CoOriginalPOITransactionType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IOriginalPOITransactionType exposée
	// par la CoClasse OriginalPOITransactionType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoOriginalPOITransactionType = class
		class function Create: IOriginalPOITransactionType;
		class function CreateRemote(const MachineName: string): IOriginalPOITransactionType;
	end;

	// *********************************************************************//
	// La classe CoTransactionConditionsType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ITransactionConditionsType exposée
	// par la CoClasse TransactionConditionsType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoTransactionConditionsType = class
		class function Create: ITransactionConditionsType;
		class function CreateRemote(const MachineName: string): ITransactionConditionsType;
	end;

	// *********************************************************************//
	// La classe CoSaleItemType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISaleItemType exposée
	// par la CoClasse SaleItemType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSaleItemType = class
		class function Create: ISaleItemType;
		class function CreateRemote(const MachineName: string): ISaleItemType;
	end;

	// *********************************************************************//
	// La classe CoLoyaltyDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILoyaltyDataType exposée
	// par la CoClasse LoyaltyDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLoyaltyDataType = class
		class function Create: ILoyaltyDataType;
		class function CreateRemote(const MachineName: string): ILoyaltyDataType;
	end;

	// *********************************************************************//
	// La classe CoLoyaltyAmountType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILoyaltyAmountType exposée
	// par la CoClasse LoyaltyAmountType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLoyaltyAmountType = class
		class function Create: ILoyaltyAmountType;
		class function CreateRemote(const MachineName: string): ILoyaltyAmountType;
	end;

	// *********************************************************************//
	// La classe CoPaymentRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPaymentRequestType exposée
	// par la CoClasse PaymentRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPaymentRequestType = class
		class function Create: IPaymentRequestType;
		class function CreateRemote(const MachineName: string): IPaymentRequestType;
	end;

	// *********************************************************************//
	// La classe CoPaymentTransactionType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPaymentTransactionType exposée
	// par la CoClasse PaymentTransactionType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPaymentTransactionType = class
		class function Create: IPaymentTransactionType;
		class function CreateRemote(const MachineName: string): IPaymentTransactionType;
	end;

	// *********************************************************************//
	// La classe CoPaymentDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPaymentDataType exposée
	// par la CoClasse PaymentDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPaymentDataType = class
		class function Create: IPaymentDataType;
		class function CreateRemote(const MachineName: string): IPaymentDataType;
	end;

	// *********************************************************************//
	// La classe CoInstalmentType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IInstalmentType exposée
	// par la CoClasse InstalmentType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoInstalmentType = class
		class function Create: IInstalmentType;
		class function CreateRemote(const MachineName: string): IInstalmentType;
	end;

	// *********************************************************************//
	// La classe CoReversalRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IReversalRequestType exposée
	// par la CoClasse ReversalRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoReversalRequestType = class
		class function Create: IReversalRequestType;
		class function CreateRemote(const MachineName: string): IReversalRequestType;
	end;

	// *********************************************************************//
	// La classe CoBatchResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IBatchResponseType exposée
	// par la CoClasse BatchResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoBatchResponseType = class
		class function Create: IBatchResponseType;
		class function CreateRemote(const MachineName: string): IBatchResponseType;
	end;

	// *********************************************************************//
	// La classe CoPerformedTransactionType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPerformedTransactionType exposée
	// par la CoClasse PerformedTransactionType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPerformedTransactionType = class
		class function Create: IPerformedTransactionType;
		class function CreateRemote(const MachineName: string): IPerformedTransactionType;
	end;

	// *********************************************************************//
	// La classe CoPOIDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPOIDataType exposée
	// par la CoClasse POIDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPOIDataType = class
		class function Create: IPOIDataType;
		class function CreateRemote(const MachineName: string): IPOIDataType;
	end;

	// *********************************************************************//
	// La classe CoPaymentResultType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPaymentResultType exposée
	// par la CoClasse PaymentResultType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPaymentResultType = class
		class function Create: IPaymentResultType;
		class function CreateRemote(const MachineName: string): IPaymentResultType;
	end;

	// *********************************************************************//
	// La classe CoCurrencyConversionType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICurrencyConversionType exposée
	// par la CoClasse CurrencyConversionType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCurrencyConversionType = class
		class function Create: ICurrencyConversionType;
		class function CreateRemote(const MachineName: string): ICurrencyConversionType;
	end;

	// *********************************************************************//
	// La classe CoAmountType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IAmountType exposée
	// par la CoClasse AmountType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoAmountType = class
		class function Create: IAmountType;
		class function CreateRemote(const MachineName: string): IAmountType;
	end;

	// *********************************************************************//
	// La classe CoCapturedSignatureType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICapturedSignatureType exposée
	// par la CoClasse CapturedSignatureType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCapturedSignatureType = class
		class function Create: ICapturedSignatureType;
		class function CreateRemote(const MachineName: string): ICapturedSignatureType;
	end;

	// *********************************************************************//
	// La classe CoSignaturePointType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISignaturePointType exposée
	// par la CoClasse SignaturePointType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSignaturePointType = class
		class function Create: ISignaturePointType;
		class function CreateRemote(const MachineName: string): ISignaturePointType;
	end;

	// *********************************************************************//
	// La classe CoLoyaltyResultType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILoyaltyResultType exposée
	// par la CoClasse LoyaltyResultType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLoyaltyResultType = class
		class function Create: ILoyaltyResultType;
		class function CreateRemote(const MachineName: string): ILoyaltyResultType;
	end;

	// *********************************************************************//
	// La classe CoLoyaltyAcquirerDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILoyaltyAcquirerDataType exposée
	// par la CoClasse LoyaltyAcquirerDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLoyaltyAcquirerDataType = class
		class function Create: ILoyaltyAcquirerDataType;
		class function CreateRemote(const MachineName: string): ILoyaltyAcquirerDataType;
	end;

	// *********************************************************************//
	// La classe CoRebatesType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IRebatesType exposée
	// par la CoClasse RebatesType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoRebatesType = class
		class function Create: IRebatesType;
		class function CreateRemote(const MachineName: string): IRebatesType;
	end;

	// *********************************************************************//
	// La classe CoSaleItemRebateType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISaleItemRebateType exposée
	// par la CoClasse SaleItemRebateType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSaleItemRebateType = class
		class function Create: ISaleItemRebateType;
		class function CreateRemote(const MachineName: string): ISaleItemRebateType;
	end;

	// *********************************************************************//
	// La classe CoCardAcquisitionRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICardAcquisitionRequestType exposée
	// par la CoClasse CardAcquisitionRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCardAcquisitionRequestType = class
		class function Create: ICardAcquisitionRequestType;
		class function CreateRemote(const MachineName: string): ICardAcquisitionRequestType;
	end;

	// *********************************************************************//
	// La classe CoCardAcquisitionTransactionType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICardAcquisitionTransactionType exposée
	// par la CoClasse CardAcquisitionTransactionType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCardAcquisitionTransactionType = class
		class function Create: ICardAcquisitionTransactionType;
		class function CreateRemote(const MachineName: string): ICardAcquisitionTransactionType;
	end;

	// *********************************************************************//
	// La classe CoCardAcquisitionResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICardAcquisitionResponseType exposée
	// par la CoClasse CardAcquisitionResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCardAcquisitionResponseType = class
		class function Create: ICardAcquisitionResponseType;
		class function CreateRemote(const MachineName: string): ICardAcquisitionResponseType;
	end;

	// *********************************************************************//
	// La classe CoCardholderPINType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICardholderPINType exposée
	// par la CoClasse CardholderPINType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCardholderPINType = class
		class function Create: ICardholderPINType;
		class function CreateRemote(const MachineName: string): ICardholderPINType;
	end;

	// *********************************************************************//
	// La classe CoCardReaderAPDURequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICardReaderAPDURequestType exposée
	// par la CoClasse CardReaderAPDURequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCardReaderAPDURequestType = class
		class function Create: ICardReaderAPDURequestType;
		class function CreateRemote(const MachineName: string): ICardReaderAPDURequestType;
	end;

	// *********************************************************************//
	// La classe CoCardReaderAPDUResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICardReaderAPDUResponseType exposée
	// par la CoClasse CardReaderAPDUResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCardReaderAPDUResponseType = class
		class function Create: ICardReaderAPDUResponseType;
		class function CreateRemote(const MachineName: string): ICardReaderAPDUResponseType;
	end;

	// *********************************************************************//
	// La classe CoCardReaderInitRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICardReaderInitRequestType exposée
	// par la CoClasse CardReaderInitRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCardReaderInitRequestType = class
		class function Create: ICardReaderInitRequestType;
		class function CreateRemote(const MachineName: string): ICardReaderInitRequestType;
	end;

	// *********************************************************************//
	// La classe CoCardReaderInitResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICardReaderInitResponseType exposée
	// par la CoClasse CardReaderInitResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCardReaderInitResponseType = class
		class function Create: ICardReaderInitResponseType;
		class function CreateRemote(const MachineName: string): ICardReaderInitResponseType;
	end;

	// *********************************************************************//
	// La classe CoICCResetDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IICCResetDataType exposée
	// par la CoClasse ICCResetDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoICCResetDataType = class
		class function Create: IICCResetDataType;
		class function CreateRemote(const MachineName: string): IICCResetDataType;
	end;

	// *********************************************************************//
	// La classe CoCardReaderPowerOffRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICardReaderPowerOffRequestType exposée
	// par la CoClasse CardReaderPowerOffRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCardReaderPowerOffRequestType = class
		class function Create: ICardReaderPowerOffRequestType;
		class function CreateRemote(const MachineName: string): ICardReaderPowerOffRequestType;
	end;

	// *********************************************************************//
	// La classe CoCardReaderPowerOffResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICardReaderPowerOffResponseType exposée
	// par la CoClasse CardReaderPowerOffResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCardReaderPowerOffResponseType = class
		class function Create: ICardReaderPowerOffResponseType;
		class function CreateRemote(const MachineName: string): ICardReaderPowerOffResponseType;
	end;

	// *********************************************************************//
	// La classe CoCashHandlingDeviceType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICashHandlingDeviceType exposée
	// par la CoClasse CashHandlingDeviceType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCashHandlingDeviceType = class
		class function Create: ICashHandlingDeviceType;
		class function CreateRemote(const MachineName: string): ICashHandlingDeviceType;
	end;

	// *********************************************************************//
	// La classe CoCoinsOrBillsType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ICoinsOrBillsType exposée
	// par la CoClasse CoinsOrBillsType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoCoinsOrBillsType = class
		class function Create: ICoinsOrBillsType;
		class function CreateRemote(const MachineName: string): ICoinsOrBillsType;
	end;

	// *********************************************************************//
	// La classe CoDiagnosisRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IDiagnosisRequestType exposée
	// par la CoClasse DiagnosisRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoDiagnosisRequestType = class
		class function Create: IDiagnosisRequestType;
		class function CreateRemote(const MachineName: string): IDiagnosisRequestType;
	end;

	// *********************************************************************//
	// La classe CoDiagnosisResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IDiagnosisResponseType exposée
	// par la CoClasse DiagnosisResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoDiagnosisResponseType = class
		class function Create: IDiagnosisResponseType;
		class function CreateRemote(const MachineName: string): IDiagnosisResponseType;
	end;

	// *********************************************************************//
	// La classe CoPOIStatusType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPOIStatusType exposée
	// par la CoClasse POIStatusType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPOIStatusType = class
		class function Create: IPOIStatusType;
		class function CreateRemote(const MachineName: string): IPOIStatusType;
	end;

	// *********************************************************************//
	// La classe CoHostStatusType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IHostStatusType exposée
	// par la CoClasse HostStatusType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoHostStatusType = class
		class function Create: IHostStatusType;
		class function CreateRemote(const MachineName: string): IHostStatusType;
	end;

	// *********************************************************************//
	// La classe CoEnableServiceRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEnableServiceRequestType exposée
	// par la CoClasse EnableServiceRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoEnableServiceRequestType = class
		class function Create: IEnableServiceRequestType;
		class function CreateRemote(const MachineName: string): IEnableServiceRequestType;
	end;

	// *********************************************************************//
	// La classe CoEnableServiceResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEnableServiceResponseType exposée
	// par la CoClasse EnableServiceResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoEnableServiceResponseType = class
		class function Create: IEnableServiceResponseType;
		class function CreateRemote(const MachineName: string): IEnableServiceResponseType;
	end;

	// *********************************************************************//
	// La classe CoEventNotificationType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEventNotificationType exposée
	// par la CoClasse EventNotificationType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoEventNotificationType = class
		class function Create: IEventNotificationType;
		class function CreateRemote(const MachineName: string): IEventNotificationType;
	end;

	// *********************************************************************//
	// La classe CoGetTotalsRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IGetTotalsRequestType exposée
	// par la CoClasse GetTotalsRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoGetTotalsRequestType = class
		class function Create: IGetTotalsRequestType;
		class function CreateRemote(const MachineName: string): IGetTotalsRequestType;
	end;

	// *********************************************************************//
	// La classe CoTotalFilterType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ITotalFilterType exposée
	// par la CoClasse TotalFilterType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoTotalFilterType = class
		class function Create: ITotalFilterType;
		class function CreateRemote(const MachineName: string): ITotalFilterType;
	end;

	// *********************************************************************//
	// La classe CoGetTotalsResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IGetTotalsResponseType exposée
	// par la CoClasse GetTotalsResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoGetTotalsResponseType = class
		class function Create: IGetTotalsResponseType;
		class function CreateRemote(const MachineName: string): IGetTotalsResponseType;
	end;

	// *********************************************************************//
	// La classe CoTransactionTotalsType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ITransactionTotalsType exposée
	// par la CoClasse TransactionTotalsType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoTransactionTotalsType = class
		class function Create: ITransactionTotalsType;
		class function CreateRemote(const MachineName: string): ITransactionTotalsType;
	end;

	// *********************************************************************//
	// La classe CoPaymentTotalsType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPaymentTotalsType exposée
	// par la CoClasse PaymentTotalsType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPaymentTotalsType = class
		class function Create: IPaymentTotalsType;
		class function CreateRemote(const MachineName: string): IPaymentTotalsType;
	end;

	// *********************************************************************//
	// La classe CoLoyaltyTotalsType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILoyaltyTotalsType exposée
	// par la CoClasse LoyaltyTotalsType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLoyaltyTotalsType = class
		class function Create: ILoyaltyTotalsType;
		class function CreateRemote(const MachineName: string): ILoyaltyTotalsType;
	end;

	// *********************************************************************//
	// La classe CoInputType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IInputType exposée
	// par la CoClasse InputType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoInputType = class
		class function Create: IInputType;
		class function CreateRemote(const MachineName: string): IInputType;
	end;

	// *********************************************************************//
	// La classe CoInputDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IInputDataType exposée
	// par la CoClasse InputDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoInputDataType = class
		class function Create: IInputDataType;
		class function CreateRemote(const MachineName: string): IInputDataType;
	end;

	// *********************************************************************//
	// La classe CoInputRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IInputRequestType exposée
	// par la CoClasse InputRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoInputRequestType = class
		class function Create: IInputRequestType;
		class function CreateRemote(const MachineName: string): IInputRequestType;
	end;

	// *********************************************************************//
	// La classe CoInputResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IInputResponseType exposée
	// par la CoClasse InputResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoInputResponseType = class
		class function Create: IInputResponseType;
		class function CreateRemote(const MachineName: string): IInputResponseType;
	end;

	// *********************************************************************//
	// La classe CoInputResultType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IInputResultType exposée
	// par la CoClasse InputResultType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoInputResultType = class
		class function Create: IInputResultType;
		class function CreateRemote(const MachineName: string): IInputResultType;
	end;

	// *********************************************************************//
	// La classe CoInputUpdateType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IInputUpdateType exposée
	// par la CoClasse InputUpdateType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoInputUpdateType = class
		class function Create: IInputUpdateType;
		class function CreateRemote(const MachineName: string): IInputUpdateType;
	end;

	// *********************************************************************//
	// La classe CoLoginRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILoginRequestType exposée
	// par la CoClasse LoginRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLoginRequestType = class
		class function Create: ILoginRequestType;
		class function CreateRemote(const MachineName: string): ILoginRequestType;
	end;

	// *********************************************************************//
	// La classe CoSaleSoftwareType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISaleSoftwareType exposée
	// par la CoClasse SaleSoftwareType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSaleSoftwareType = class
		class function Create: ISaleSoftwareType;
		class function CreateRemote(const MachineName: string): ISaleSoftwareType;
	end;

	// *********************************************************************//
	// La classe CoLoginResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILoginResponseType exposée
	// par la CoClasse LoginResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLoginResponseType = class
		class function Create: ILoginResponseType;
		class function CreateRemote(const MachineName: string): ILoginResponseType;
	end;

	// *********************************************************************//
	// La classe CoPOISystemDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPOISystemDataType exposée
	// par la CoClasse POISystemDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPOISystemDataType = class
		class function Create: IPOISystemDataType;
		class function CreateRemote(const MachineName: string): IPOISystemDataType;
	end;

	// *********************************************************************//
	// La classe CoPOISoftwareType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPOISoftwareType exposée
	// par la CoClasse POISoftwareType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPOISoftwareType = class
		class function Create: IPOISoftwareType;
		class function CreateRemote(const MachineName: string): IPOISoftwareType;
	end;

	// *********************************************************************//
	// La classe CoPOITerminalDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPOITerminalDataType exposée
	// par la CoClasse POITerminalDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPOITerminalDataType = class
		class function Create: IPOITerminalDataType;
		class function CreateRemote(const MachineName: string): IPOITerminalDataType;
	end;

	// *********************************************************************//
	// La classe CoPOIProfileType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPOIProfileType exposée
	// par la CoClasse POIProfileType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPOIProfileType = class
		class function Create: IPOIProfileType;
		class function CreateRemote(const MachineName: string): IPOIProfileType;
	end;

	// *********************************************************************//
	// La classe CoLogoutRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILogoutRequestType exposée
	// par la CoClasse LogoutRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLogoutRequestType = class
		class function Create: ILogoutRequestType;
		class function CreateRemote(const MachineName: string): ILogoutRequestType;
	end;

	// *********************************************************************//
	// La classe CoLogoutResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILogoutResponseType exposée
	// par la CoClasse LogoutResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLogoutResponseType = class
		class function Create: ILogoutResponseType;
		class function CreateRemote(const MachineName: string): ILogoutResponseType;
	end;

	// *********************************************************************//
	// La classe CoLoyaltyResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ILoyaltyResponseType exposée
	// par la CoClasse LoyaltyResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoLoyaltyResponseType = class
		class function Create: ILoyaltyResponseType;
		class function CreateRemote(const MachineName: string): ILoyaltyResponseType;
	end;

	// *********************************************************************//
	// La classe CoPaymentReceiptType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPaymentReceiptType exposée
	// par la CoClasse PaymentReceiptType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPaymentReceiptType = class
		class function Create: IPaymentReceiptType;
		class function CreateRemote(const MachineName: string): IPaymentReceiptType;
	end;

	// *********************************************************************//
	// La classe CoMessageHeaderType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IMessageHeaderType exposée
	// par la CoClasse MessageHeaderType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoMessageHeaderType = class
		class function Create: IMessageHeaderType;
		class function CreateRemote(const MachineName: string): IMessageHeaderType;
	end;

	// *********************************************************************//
	// La classe CoPaymentResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPaymentResponseType exposée
	// par la CoClasse PaymentResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPaymentResponseType = class
		class function Create: IPaymentResponseType;
		class function CreateRemote(const MachineName: string): IPaymentResponseType;
	end;

	// *********************************************************************//
	// La classe CoPINRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPINRequestType exposée
	// par la CoClasse PINRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPINRequestType = class
		class function Create: IPINRequestType;
		class function CreateRemote(const MachineName: string): IPINRequestType;
	end;

	// *********************************************************************//
	// La classe CoPINResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPINResponseType exposée
	// par la CoClasse PINResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPINResponseType = class
		class function Create: IPINResponseType;
		class function CreateRemote(const MachineName: string): IPINResponseType;
	end;

	// *********************************************************************//
	// La classe CoPrintOutputType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPrintOutputType exposée
	// par la CoClasse PrintOutputType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPrintOutputType = class
		class function Create: IPrintOutputType;
		class function CreateRemote(const MachineName: string): IPrintOutputType;
	end;

	// *********************************************************************//
	// La classe CoPrintRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPrintRequestType exposée
	// par la CoClasse PrintRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPrintRequestType = class
		class function Create: IPrintRequestType;
		class function CreateRemote(const MachineName: string): IPrintRequestType;
	end;

	// *********************************************************************//
	// La classe CoPrintResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IPrintResponseType exposée
	// par la CoClasse PrintResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoPrintResponseType = class
		class function Create: IPrintResponseType;
		class function CreateRemote(const MachineName: string): IPrintResponseType;
	end;

	// *********************************************************************//
	// La classe CoReconciliationRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IReconciliationRequestType exposée
	// par la CoClasse ReconciliationRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoReconciliationRequestType = class
		class function Create: IReconciliationRequestType;
		class function CreateRemote(const MachineName: string): IReconciliationRequestType;
	end;

	// *********************************************************************//
	// La classe CoReconciliationResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IReconciliationResponseType exposée
	// par la CoClasse ReconciliationResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoReconciliationResponseType = class
		class function Create: IReconciliationResponseType;
		class function CreateRemote(const MachineName: string): IReconciliationResponseType;
	end;

	// *********************************************************************//
	// La classe CoRepeatedMessageResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IRepeatedMessageResponseType exposée
	// par la CoClasse RepeatedMessageResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoRepeatedMessageResponseType = class
		class function Create: IRepeatedMessageResponseType;
		class function CreateRemote(const MachineName: string): IRepeatedMessageResponseType;
	end;

	// *********************************************************************//
	// La classe CoReversalResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IReversalResponseType exposée
	// par la CoClasse ReversalResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoReversalResponseType = class
		class function Create: IReversalResponseType;
		class function CreateRemote(const MachineName: string): IReversalResponseType;
	end;

	// *********************************************************************//
	// La classe CoStoredValueResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IStoredValueResponseType exposée
	// par la CoClasse StoredValueResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoStoredValueResponseType = class
		class function Create: IStoredValueResponseType;
		class function CreateRemote(const MachineName: string): IStoredValueResponseType;
	end;

	// *********************************************************************//
	// La classe CoStoredValueResultType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IStoredValueResultType exposée
	// par la CoClasse StoredValueResultType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoStoredValueResultType = class
		class function Create: IStoredValueResultType;
		class function CreateRemote(const MachineName: string): IStoredValueResultType;
	end;

	// *********************************************************************//
	// La classe CoStoredValueAccountStatusType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IStoredValueAccountStatusType exposée
	// par la CoClasse StoredValueAccountStatusType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoStoredValueAccountStatusType = class
		class function Create: IStoredValueAccountStatusType;
		class function CreateRemote(const MachineName: string): IStoredValueAccountStatusType;
	end;

	// *********************************************************************//
	// La classe CoStoredValueAccountIDType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IStoredValueAccountIDType exposée
	// par la CoClasse StoredValueAccountIDType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoStoredValueAccountIDType = class
		class function Create: IStoredValueAccountIDType;
		class function CreateRemote(const MachineName: string): IStoredValueAccountIDType;
	end;

	// *********************************************************************//
	// La classe CoSoundContentType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISoundContentType exposée
	// par la CoClasse SoundContentType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSoundContentType = class
		class function Create: ISoundContentType;
		class function CreateRemote(const MachineName: string): ISoundContentType;
	end;

	// *********************************************************************//
	// La classe CoSoundRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISoundRequestType exposée
	// par la CoClasse SoundRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSoundRequestType = class
		class function Create: ISoundRequestType;
		class function CreateRemote(const MachineName: string): ISoundRequestType;
	end;

	// *********************************************************************//
	// La classe CoSoundResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISoundResponseType exposée
	// par la CoClasse SoundResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSoundResponseType = class
		class function Create: ISoundResponseType;
		class function CreateRemote(const MachineName: string): ISoundResponseType;
	end;

	// *********************************************************************//
	// La classe CoStoredValueDataType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IStoredValueDataType exposée
	// par la CoClasse StoredValueDataType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoStoredValueDataType = class
		class function Create: IStoredValueDataType;
		class function CreateRemote(const MachineName: string): IStoredValueDataType;
	end;

	// *********************************************************************//
	// La classe CoStoredValueRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IStoredValueRequestType exposée
	// par la CoClasse StoredValueRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoStoredValueRequestType = class
		class function Create: IStoredValueRequestType;
		class function CreateRemote(const MachineName: string): IStoredValueRequestType;
	end;

	// *********************************************************************//
	// La classe CoTransmitRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ITransmitRequestType exposée
	// par la CoClasse TransmitRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoTransmitRequestType = class
		class function Create: ITransmitRequestType;
		class function CreateRemote(const MachineName: string): ITransmitRequestType;
	end;

	// *********************************************************************//
	// La classe CoTransmitResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ITransmitResponseType exposée
	// par la CoClasse TransmitResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoTransmitResponseType = class
		class function Create: ITransmitResponseType;
		class function CreateRemote(const MachineName: string): ITransmitResponseType;
	end;

	// *********************************************************************//
	// La classe CoTransactionStatusRequestType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ITransactionStatusRequestType exposée
	// par la CoClasse TransactionStatusRequestType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoTransactionStatusRequestType = class
		class function Create: ITransactionStatusRequestType;
		class function CreateRemote(const MachineName: string): ITransactionStatusRequestType;
	end;

	// *********************************************************************//
	// La classe CoTransactionStatusResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ITransactionStatusResponseType exposée
	// par la CoClasse TransactionStatusResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoTransactionStatusResponseType = class
		class function Create: ITransactionStatusResponseType;
		class function CreateRemote(const MachineName: string): ITransactionStatusResponseType;
	end;

	// *********************************************************************//
	// La classe CoSaleToPOIRequest fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISaleToPOIRequest exposée
	// par la CoClasse SaleToPOIRequest. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSaleToPOIRequest = class
		class function Create: ISaleToPOIRequest;
		class function CreateRemote(const MachineName: string): ISaleToPOIRequest;
	end;

	// *********************************************************************//
	// La classe CoSaleToPOIResponse fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut ISaleToPOIResponse exposée
	// par la CoClasse SaleToPOIResponse. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoSaleToPOIResponse = class
		class function Create: ISaleToPOIResponse;
		class function CreateRemote(const MachineName: string): ISaleToPOIResponse;
	end;

	// *********************************************************************//
	// La classe CoIssuerType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IIssuerType exposée
	// par la CoClasse IssuerType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoIssuerType = class
		class function Create: IIssuerType;
		class function CreateRemote(const MachineName: string): IIssuerType;
	end;

	// *********************************************************************//
	// La classe CoNexoActivity fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoActivity exposée
	// par la CoClasse NexoActivity. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoActivity = class
		class function Create: INexoActivity;
		class function CreateRemote(const MachineName: string): INexoActivity;
	end;

	// *********************************************************************//
	// La classe CoNexoDictionaryOfMessages fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEnumerable exposée
	// par la CoClasse NexoDictionaryOfMessages. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDictionaryOfMessages = class
		class function Create: IEnumerable;
		class function CreateRemote(const MachineName: string): IEnumerable;
	end;

	// *********************************************************************//
	// La classe CoNexoListOfEndPoints fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEnumerable exposée
	// par la CoClasse NexoListOfEndPoints. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoListOfEndPoints = class
		class function Create: IEnumerable;
		class function CreateRemote(const MachineName: string): IEnumerable;
	end;

	// *********************************************************************//
	// La classe CoNexoDictionaryOfEndPoints fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEnumerable exposée
	// par la CoClasse NexoDictionaryOfEndPoints. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDictionaryOfEndPoints = class
		class function Create: IEnumerable;
		class function CreateRemote(const MachineName: string): IEnumerable;
	end;

	// *********************************************************************//
	// La classe CoNexoListOfSessions fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEnumerable exposée
	// par la CoClasse NexoListOfSessions. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoListOfSessions = class
		class function Create: IEnumerable;
		class function CreateRemote(const MachineName: string): IEnumerable;
	end;

	// *********************************************************************//
	// La classe CoNexoDictionaryOfSessions fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEnumerable exposée
	// par la CoClasse NexoDictionaryOfSessions. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDictionaryOfSessions = class
		class function Create: IEnumerable;
		class function CreateRemote(const MachineName: string): IEnumerable;
	end;

	// *********************************************************************//
	// La classe CoNexoListOfNexoKeys fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEnumerable exposée
	// par la CoClasse NexoListOfNexoKeys. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoListOfNexoKeys = class
		class function Create: IEnumerable;
		class function CreateRemote(const MachineName: string): IEnumerable;
	end;

	// *********************************************************************//
	// La classe CoNexoDictionaryOfNexoKeys fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEnumerable exposée
	// par la CoClasse NexoDictionaryOfNexoKeys. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDictionaryOfNexoKeys = class
		class function Create: IEnumerable;
		class function CreateRemote(const MachineName: string): IEnumerable;
	end;

	// *********************************************************************//
	// La classe CoNexoListOfAnyMessages fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEnumerable exposée
	// par la CoClasse NexoListOfAnyMessages. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoListOfAnyMessages = class
		class function Create: IEnumerable;
		class function CreateRemote(const MachineName: string): IEnumerable;
	end;

	// *********************************************************************//
	// La classe CoNexoDictionaryOfAnyMessages fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEnumerable exposée
	// par la CoClasse NexoDictionaryOfAnyMessages. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDictionaryOfAnyMessages = class
		class function Create: IEnumerable;
		class function CreateRemote(const MachineName: string): IEnumerable;
	end;

	// *********************************************************************//
	// La classe CoNexoAcceptedCommands fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEnumerable exposée
	// par la CoClasse NexoAcceptedCommands. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoAcceptedCommands = class
		class function Create: IEnumerable;
		class function CreateRemote(const MachineName: string): IEnumerable;
	end;

	// *********************************************************************//
	// La classe CoNexoItem fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoItem exposée
	// par la CoClasse NexoItem. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoItem = class
		class function Create: INexoItem;
		class function CreateRemote(const MachineName: string): INexoItem;
	end;

	// *********************************************************************//
	// La classe CoNexoBalanceInquiry fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoBalanceInquiry exposée
	// par la CoClasse NexoBalanceInquiry. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoBalanceInquiry = class
		class function Create: INexoBalanceInquiry;
		class function CreateRemote(const MachineName: string): INexoBalanceInquiry;
	end;

	// *********************************************************************//
	// La classe CoNexoBatch fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoBatch exposée
	// par la CoClasse NexoBatch. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoBatch = class
		class function Create: INexoBatch;
		class function CreateRemote(const MachineName: string): INexoBatch;
	end;

	// *********************************************************************//
	// La classe CoNexoCardAcquisition fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoCardAcquisition exposée
	// par la CoClasse NexoCardAcquisition. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoCardAcquisition = class
		class function Create: INexoCardAcquisition;
		class function CreateRemote(const MachineName: string): INexoCardAcquisition;
	end;

	// *********************************************************************//
	// La classe CoNexoCardReaderInit fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoCardReaderInit exposée
	// par la CoClasse NexoCardReaderInit. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoCardReaderInit = class
		class function Create: INexoCardReaderInit;
		class function CreateRemote(const MachineName: string): INexoCardReaderInit;
	end;

	// *********************************************************************//
	// La classe CoNexoCardReaderAPDU fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoCardReaderAPDU exposée
	// par la CoClasse NexoCardReaderAPDU. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoCardReaderAPDU = class
		class function Create: INexoCardReaderAPDU;
		class function CreateRemote(const MachineName: string): INexoCardReaderAPDU;
	end;

	// *********************************************************************//
	// La classe CoNexoCardReaderPowerOFF fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoCardReaderPowerOFF exposée
	// par la CoClasse NexoCardReaderPowerOFF. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoCardReaderPowerOFF = class
		class function Create: INexoCardReaderPowerOFF;
		class function CreateRemote(const MachineName: string): INexoCardReaderPowerOFF;
	end;

	// *********************************************************************//
	// La classe CoNexoDeviceDisplay fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoDeviceDisplay exposée
	// par la CoClasse NexoDeviceDisplay. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDeviceDisplay = class
		class function Create: INexoDeviceDisplay;
		class function CreateRemote(const MachineName: string): INexoDeviceDisplay;
	end;

	// *********************************************************************//
	// La classe CoNexoDeviceInputUpdate fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoDeviceInputUpdate exposée
	// par la CoClasse NexoDeviceInputUpdate. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDeviceInputUpdate = class
		class function Create: INexoDeviceInputUpdate;
		class function CreateRemote(const MachineName: string): INexoDeviceInputUpdate;
	end;

	// *********************************************************************//
	// La classe CoNexoDeviceSound fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoDeviceSound exposée
	// par la CoClasse NexoDeviceSound. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDeviceSound = class
		class function Create: INexoDeviceSound;
		class function CreateRemote(const MachineName: string): INexoDeviceSound;
	end;

	// *********************************************************************//
	// La classe CoNexoEnableService fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoEnableService exposée
	// par la CoClasse NexoEnableService. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoEnableService = class
		class function Create: INexoEnableService;
		class function CreateRemote(const MachineName: string): INexoEnableService;
	end;

	// *********************************************************************//
	// La classe CoNexoGetTotals fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoGetTotals exposée
	// par la CoClasse NexoGetTotals. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoGetTotals = class
		class function Create: INexoGetTotals;
		class function CreateRemote(const MachineName: string): INexoGetTotals;
	end;

	// *********************************************************************//
	// La classe CoNexoLoyalty fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoLoyalty exposée
	// par la CoClasse NexoLoyalty. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoLoyalty = class
		class function Create: INexoLoyalty;
		class function CreateRemote(const MachineName: string): INexoLoyalty;
	end;

	// *********************************************************************//
	// La classe CoNexoPayment fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoPayment exposée
	// par la CoClasse NexoPayment. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoPayment = class
		class function Create: INexoPayment;
		class function CreateRemote(const MachineName: string): INexoPayment;
	end;

	// *********************************************************************//
	// La classe CoNexoPIN fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoPIN exposée
	// par la CoClasse NexoPIN. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoPIN = class
		class function Create: INexoPIN;
		class function CreateRemote(const MachineName: string): INexoPIN;
	end;

	// *********************************************************************//
	// La classe CoNexoReconciliation fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoReconciliation exposée
	// par la CoClasse NexoReconciliation. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoReconciliation = class
		class function Create: INexoReconciliation;
		class function CreateRemote(const MachineName: string): INexoReconciliation;
	end;

	// *********************************************************************//
	// La classe CoNexoStoredValue fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoStoredValue exposée
	// par la CoClasse NexoStoredValue. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoStoredValue = class
		class function Create: INexoStoredValue;
		class function CreateRemote(const MachineName: string): INexoStoredValue;
	end;

	// *********************************************************************//
	// La classe CoNexoTransmit fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoTransmit exposée
	// par la CoClasse NexoTransmit. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoTransmit = class
		class function Create: INexoTransmit;
		class function CreateRemote(const MachineName: string): INexoTransmit;
	end;

	// *********************************************************************//
	// La classe CoNexoAbort fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoAbort exposée
	// par la CoClasse NexoAbort. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoAbort = class
		class function Create: INexoAbort;
		class function CreateRemote(const MachineName: string): INexoAbort;
	end;

	// *********************************************************************//
	// La classe CoNexoDiagnosis fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoDiagnosis exposée
	// par la CoClasse NexoDiagnosis. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDiagnosis = class
		class function Create: INexoDiagnosis;
		class function CreateRemote(const MachineName: string): INexoDiagnosis;
	end;

	// *********************************************************************//
	// La classe CoNexoEvent fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoEvent exposée
	// par la CoClasse NexoEvent. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoEvent = class
		class function Create: INexoEvent;
		class function CreateRemote(const MachineName: string): INexoEvent;
	end;

	// *********************************************************************//
	// La classe CoNexoTransactionStatus fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoTransactionStatus exposée
	// par la CoClasse NexoTransactionStatus. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoTransactionStatus = class
		class function Create: INexoTransactionStatus;
		class function CreateRemote(const MachineName: string): INexoTransactionStatus;
	end;

	// *********************************************************************//
	// La classe CoNexoResponseType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoResponseType exposée
	// par la CoClasse NexoResponseType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoResponseType = class
		class function Create: INexoResponseType;
		class function CreateRemote(const MachineName: string): INexoResponseType;
	end;

	// *********************************************************************//
	// La classe CoNexoDeviceInput fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoDeviceInput exposée
	// par la CoClasse NexoDeviceInput. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDeviceInput = class
		class function Create: INexoDeviceInput;
		class function CreateRemote(const MachineName: string): INexoDeviceInput;
	end;

	// *********************************************************************//
	// La classe CoNexoDevicePrint fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoDevicePrint exposée
	// par la CoClasse NexoDevicePrint. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDevicePrint = class
		class function Create: INexoDevicePrint;
		class function CreateRemote(const MachineName: string): INexoDevicePrint;
	end;

	// *********************************************************************//
	// La classe CoNexoLogin fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoLogin exposée
	// par la CoClasse NexoLogin. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoLogin = class
		class function Create: INexoLogin;
		class function CreateRemote(const MachineName: string): INexoLogin;
	end;

	// *********************************************************************//
	// La classe CoNexoLogout fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoLogout exposée
	// par la CoClasse NexoLogout. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoLogout = class
		class function Create: INexoLogout;
		class function CreateRemote(const MachineName: string): INexoLogout;
	end;

	// *********************************************************************//
	// La classe CoNexoAdmin fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoAdmin exposée
	// par la CoClasse NexoAdmin. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoAdmin = class
		class function Create: INexoAdmin;
		class function CreateRemote(const MachineName: string): INexoAdmin;
	end;

	// *********************************************************************//
	// La classe CoNexoObject fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoObject exposée
	// par la CoClasse NexoObject. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoObject = class
		class function Create: INexoObject;
		class function CreateRemote(const MachineName: string): INexoObject;
	end;

	// *********************************************************************//
	// La classe CoNexoReversal fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoReversal exposée
	// par la CoClasse NexoReversal. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoReversal = class
		class function Create: INexoReversal;
		class function CreateRemote(const MachineName: string): INexoReversal;
	end;

	// *********************************************************************//
	// La classe CoNexoObjectToProcess fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoObjectToProcess exposée
	// par la CoClasse NexoObjectToProcess. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoObjectToProcess = class
		class function Create: INexoObjectToProcess;
		class function CreateRemote(const MachineName: string): INexoObjectToProcess;
	end;

	// *********************************************************************//
	// La classe CoNexoTextString fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoTextString exposée
	// par la CoClasse NexoTextString. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoTextString = class
		class function Create: INexoTextString;
		class function CreateRemote(const MachineName: string): INexoTextString;
	end;

	// *********************************************************************//
	// La classe CoNexoBoolean fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoBooleanType exposée
	// par la CoClasse NexoBoolean. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoBoolean = class
		class function Create: INexoBooleanType;
		class function CreateRemote(const MachineName: string): INexoBooleanType;
	end;

	// *********************************************************************//
	// La classe CoNexoInteger fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoInteger exposée
	// par la CoClasse NexoInteger. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoInteger = class
		class function Create: INexoInteger;
		class function CreateRemote(const MachineName: string): INexoInteger;
	end;

	// *********************************************************************//
	// La classe CoNexoDecimal fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoDecimal exposée
	// par la CoClasse NexoDecimal. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDecimal = class
		class function Create: INexoDecimal;
		class function CreateRemote(const MachineName: string): INexoDecimal;
	end;

	// *********************************************************************//
	// La classe CoNexoSimpleAmount fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoDecimal exposée
	// par la CoClasse NexoSimpleAmount. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoSimpleAmount = class
		class function Create: INexoDecimal;
		class function CreateRemote(const MachineName: string): INexoDecimal;
	end;

	// *********************************************************************//
	// La classe CoNexoLabel fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoLabel exposée
	// par la CoClasse NexoLabel. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoLabel = class
		class function Create: INexoLabel;
		class function CreateRemote(const MachineName: string): INexoLabel;
	end;

	// *********************************************************************//
	// La classe CoNexoEnumeration fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoEnumeration exposée
	// par la CoClasse NexoEnumeration. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoEnumeration = class
		class function Create: INexoEnumeration;
		class function CreateRemote(const MachineName: string): INexoEnumeration;
	end;

	// *********************************************************************//
	// La classe CoNexoCluster fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoCluster exposée
	// par la CoClasse NexoCluster. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoCluster = class
		class function Create: INexoCluster;
		class function CreateRemote(const MachineName: string): INexoCluster;
	end;

	// *********************************************************************//
	// La classe CoNexoLengthDrivenTextString fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoLengthDrivenTextString exposée
	// par la CoClasse NexoLengthDrivenTextString. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoLengthDrivenTextString = class
		class function Create: INexoLengthDrivenTextString;
		class function CreateRemote(const MachineName: string): INexoLengthDrivenTextString;
	end;

	// *********************************************************************//
	// La classe CoNexoDigitString fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoDigitString exposée
	// par la CoClasse NexoDigitString. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDigitString = class
		class function Create: INexoDigitString;
		class function CreateRemote(const MachineName: string): INexoDigitString;
	end;

	// *********************************************************************//
	// La classe CoNexoISOCurrency3A fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoISOData exposée
	// par la CoClasse NexoISOCurrency3A. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoISOCurrency3A = class
		class function Create: INexoISOData;
		class function CreateRemote(const MachineName: string): INexoISOData;
	end;

	// *********************************************************************//
	// La classe CoNexoISOCountry3A fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoISOData exposée
	// par la CoClasse NexoISOCountry3A. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoISOCountry3A = class
		class function Create: INexoISOData;
		class function CreateRemote(const MachineName: string): INexoISOData;
	end;

	// *********************************************************************//
	// La classe CoNexoISOLanguage2A fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoISOData exposée
	// par la CoClasse NexoISOLanguage2A. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoISOLanguage2A = class
		class function Create: INexoISOData;
		class function CreateRemote(const MachineName: string): INexoISOData;
	end;

	// *********************************************************************//
	// La classe CoNexoISODateTime fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoISODateTime exposée
	// par la CoClasse NexoISODateTime. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoISODateTime = class
		class function Create: INexoISODateTime;
		class function CreateRemote(const MachineName: string): INexoISODateTime;
	end;

	// *********************************************************************//
	// La classe CoNexoISODate fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoISODate exposée
	// par la CoClasse NexoISODate. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoISODate = class
		class function Create: INexoISODate;
		class function CreateRemote(const MachineName: string): INexoISODate;
	end;

	// *********************************************************************//
	// La classe CoNexoByteSequence fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoNonStringType exposée
	// par la CoClasse NexoByteSequence. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoByteSequence = class
		class function Create: INexoNonStringType;
		class function CreateRemote(const MachineName: string): INexoNonStringType;
	end;

	// *********************************************************************//
	// La classe CoNexoCurrency fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoCurrency exposée
	// par la CoClasse NexoCurrency. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoCurrency = class
		class function Create: INexoCurrency;
		class function CreateRemote(const MachineName: string): INexoCurrency;
	end;

	// *********************************************************************//
	// La classe CoNexoCurrencyEUR fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoCurrency exposée
	// par la CoClasse NexoCurrencyEUR. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoCurrencyEUR = class
		class function Create: INexoCurrency;
		class function CreateRemote(const MachineName: string): INexoCurrency;
	end;

	// *********************************************************************//
	// La classe CoNexoCurrencyUSD fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoCurrency exposée
	// par la CoClasse NexoCurrencyUSD. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoCurrencyUSD = class
		class function Create: INexoCurrency;
		class function CreateRemote(const MachineName: string): INexoCurrency;
	end;

	// *********************************************************************//
	// La classe CoNexoCurrencyGBP fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoCurrency exposée
	// par la CoClasse NexoCurrencyGBP. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoCurrencyGBP = class
		class function Create: INexoCurrency;
		class function CreateRemote(const MachineName: string): INexoCurrency;
	end;

	// *********************************************************************//
	// La classe CoNexoCurrencyCHF fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoCurrency exposée
	// par la CoClasse NexoCurrencyCHF. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoCurrencyCHF = class
		class function Create: INexoCurrency;
		class function CreateRemote(const MachineName: string): INexoCurrency;
	end;

	// *********************************************************************//
	// La classe CoNexoSupportedProtocolVersions fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut IEnumerable exposée
	// par la CoClasse NexoSupportedProtocolVersions. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoSupportedProtocolVersions = class
		class function Create: IEnumerable;
		class function CreateRemote(const MachineName: string): IEnumerable;
	end;

	// *********************************************************************//
	// La classe CoNexoRetailerServerActivity fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoRetailerServerActivity exposée
	// par la CoClasse NexoRetailerServerActivity. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoRetailerServerActivity = class
		class function Create: INexoRetailerServerActivity;
		class function CreateRemote(const MachineName: string): INexoRetailerServerActivity;
	end;

	// *********************************************************************//
	// La classe CoNexoRetailerServerDatabaseSettings fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoRetailerServerDatabaseSettings exposée
	// par la CoClasse NexoRetailerServerDatabaseSettings. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoRetailerServerDatabaseSettings = class
		class function Create: INexoRetailerServerDatabaseSettings;
		class function CreateRemote(const MachineName: string): INexoRetailerServerDatabaseSettings;
	end;

	// *********************************************************************//
	// La classe CoNexoRetailerServerSettings fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoRetailerServerSettings exposée
	// par la CoClasse NexoRetailerServerSettings. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoRetailerServerSettings = class
		class function Create: INexoRetailerServerSettings;
		class function CreateRemote(const MachineName: string): INexoRetailerServerSettings;
	end;

	// *********************************************************************//
	// La classe CoNexoRetailerClientHandle fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoRetailerClientHandle exposée
	// par la CoClasse NexoRetailerClientHandle. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoRetailerClientHandle = class
		class function Create: INexoRetailerClientHandle;
		class function CreateRemote(const MachineName: string): INexoRetailerClientHandle;
	end;

	// *********************************************************************//
	// La classe CoNexoRetailerClient fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoRetailerClient exposée
	// par la CoClasse NexoRetailerClient. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoRetailerClient = class
		class function Create: INexoRetailerClient;
		class function CreateRemote(const MachineName: string): INexoRetailerClient;
	end;

	// *********************************************************************//
	// La classe CoNexoRetailerClientSettings fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoRetailerClientSettings exposée
	// par la CoClasse NexoRetailerClientSettings. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoRetailerClientSettings = class
		class function Create: INexoRetailerClientSettings;
		class function CreateRemote(const MachineName: string): INexoRetailerClientSettings;
	end;

	// *********************************************************************//
	// La classe CoNexoRetailerClientConnectionSettings fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoRetailerClientConnectionSettings exposée
	// par la CoClasse NexoRetailerClientConnectionSettings. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoRetailerClientConnectionSettings = class
		class function Create: INexoRetailerClientConnectionSettings;
		class function CreateRemote(const MachineName: string): INexoRetailerClientConnectionSettings;
	end;

	// *********************************************************************//
	// La classe CoNexoRetailerClientActivity fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut INexoRetailerClientActivity exposée
	// par la CoClasse NexoRetailerClientActivity. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoRetailerClientActivity = class
		class function Create: INexoRetailerClientActivity;
		class function CreateRemote(const MachineName: string): INexoRetailerClientActivity;
	end;

	// *********************************************************************//
	// La classe CoNexoMessage fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoMessage exposée
	// par la CoClasse NexoMessage. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoMessage = class
		class function Create: _NexoMessage;
		class function CreateRemote(const MachineName: string): _NexoMessage;
	end;

	// *********************************************************************//
	// La classe CoNexoPartner fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoPartner exposée
	// par la CoClasse NexoPartner. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoPartner = class
		class function Create: _NexoPartner;
		class function CreateRemote(const MachineName: string): _NexoPartner;
	end;

	// *********************************************************************//
	// La classe CoNexoEndPoint fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoEndPoint exposée
	// par la CoClasse NexoEndPoint. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoEndPoint = class
		class function Create: _NexoEndPoint;
		class function CreateRemote(const MachineName: string): _NexoEndPoint;
	end;

	// *********************************************************************//
	// La classe CoNexoSession fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoSession exposée
	// par la CoClasse NexoSession. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoSession = class
		class function Create: _NexoSession;
		class function CreateRemote(const MachineName: string): _NexoSession;
	end;

	// *********************************************************************//
	// La classe CoNexoDelegates fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoDelegates exposée
	// par la CoClasse NexoDelegates. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDelegates = class
		class function Create: _NexoDelegates;
		class function CreateRemote(const MachineName: string): _NexoDelegates;
	end;

	// *********************************************************************//
	// La classe CoNexoKey fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoKey exposée
	// par la CoClasse NexoKey. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoKey = class
		class function Create: _NexoKey;
		class function CreateRemote(const MachineName: string): _NexoKey;
	end;

	// *********************************************************************//
	// La classe CoNexoMessageType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoMessageType exposée
	// par la CoClasse NexoMessageType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoMessageType = class
		class function Create: _NexoMessageType;
		class function CreateRemote(const MachineName: string): _NexoMessageType;
	end;

	// *********************************************************************//
	// La classe CoNexoMessageClass fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoMessageClass exposée
	// par la CoClasse NexoMessageClass. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoMessageClass = class
		class function Create: _NexoMessageClass;
		class function CreateRemote(const MachineName: string): _NexoMessageClass;
	end;

	// *********************************************************************//
	// La classe CoNexoMessageCategory fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoMessageCategory exposée
	// par la CoClasse NexoMessageCategory. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoMessageCategory = class
		class function Create: _NexoMessageCategory;
		class function CreateRemote(const MachineName: string): _NexoMessageCategory;
	end;

	// *********************************************************************//
	// La classe CoNexoTerminalEnvironment fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoTerminalEnvironment exposée
	// par la CoClasse NexoTerminalEnvironment. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoTerminalEnvironment = class
		class function Create: _NexoTerminalEnvironment;
		class function CreateRemote(const MachineName: string): _NexoTerminalEnvironment;
	end;

	// *********************************************************************//
	// La classe CoNexoSaleCapabilities fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoSaleCapabilities exposée
	// par la CoClasse NexoSaleCapabilities. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoSaleCapabilities = class
		class function Create: _NexoSaleCapabilities;
		class function CreateRemote(const MachineName: string): _NexoSaleCapabilities;
	end;

	// *********************************************************************//
	// La classe CoNexoProtocolVersion fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoProtocolVersion exposée
	// par la CoClasse NexoProtocolVersion. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoProtocolVersion = class
		class function Create: _NexoProtocolVersion;
		class function CreateRemote(const MachineName: string): _NexoProtocolVersion;
	end;

	// *********************************************************************//
	// La classe CoNexoID fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoID exposée
	// par la CoClasse NexoID. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoID = class
		class function Create: _NexoID;
		class function CreateRemote(const MachineName: string): _NexoID;
	end;

	// *********************************************************************//
	// La classe CoNexoServiceID fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoServiceID exposée
	// par la CoClasse NexoServiceID. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoServiceID = class
		class function Create: _NexoServiceID;
		class function CreateRemote(const MachineName: string): _NexoServiceID;
	end;

	// *********************************************************************//
	// La classe CoNexoDeviceID fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoDeviceID exposée
	// par la CoClasse NexoDeviceID. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDeviceID = class
		class function Create: _NexoDeviceID;
		class function CreateRemote(const MachineName: string): _NexoDeviceID;
	end;

	// *********************************************************************//
	// La classe CoNexoPOIID fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoPOIID exposée
	// par la CoClasse NexoPOIID. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoPOIID = class
		class function Create: _NexoPOIID;
		class function CreateRemote(const MachineName: string): _NexoPOIID;
	end;

	// *********************************************************************//
	// La classe CoNexoSaleID fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoSaleID exposée
	// par la CoClasse NexoSaleID. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoSaleID = class
		class function Create: _NexoSaleID;
		class function CreateRemote(const MachineName: string): _NexoSaleID;
	end;

	// *********************************************************************//
	// La classe CoNexoOperatorLanguage fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoOperatorLanguage exposée
	// par la CoClasse NexoOperatorLanguage. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoOperatorLanguage = class
		class function Create: _NexoOperatorLanguage;
		class function CreateRemote(const MachineName: string): _NexoOperatorLanguage;
	end;

	// *********************************************************************//
	// La classe CoNexoResult fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoResult exposée
	// par la CoClasse NexoResult. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoResult = class
		class function Create: _NexoResult;
		class function CreateRemote(const MachineName: string): _NexoResult;
	end;

	// *********************************************************************//
	// La classe CoNexoErrorCondition fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoErrorCondition exposée
	// par la CoClasse NexoErrorCondition. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoErrorCondition = class
		class function Create: _NexoErrorCondition;
		class function CreateRemote(const MachineName: string): _NexoErrorCondition;
	end;

	// *********************************************************************//
	// La classe CoNexoAdditionalResponse fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoAdditionalResponse exposée
	// par la CoClasse NexoAdditionalResponse. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoAdditionalResponse = class
		class function Create: _NexoAdditionalResponse;
		class function CreateRemote(const MachineName: string): _NexoAdditionalResponse;
	end;

	// *********************************************************************//
	// La classe CoNexoGlobalStatus fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoGlobalStatus exposée
	// par la CoClasse NexoGlobalStatus. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoGlobalStatus = class
		class function Create: _NexoGlobalStatus;
		class function CreateRemote(const MachineName: string): _NexoGlobalStatus;
	end;

	// *********************************************************************//
	// La classe CoNexoCertificationCode fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoCertificationCode exposée
	// par la CoClasse NexoCertificationCode. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoCertificationCode = class
		class function Create: _NexoCertificationCode;
		class function CreateRemote(const MachineName: string): _NexoCertificationCode;
	end;

	// *********************************************************************//
	// La classe CoNexoSoftwareVersion fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoSoftwareVersion exposée
	// par la CoClasse NexoSoftwareVersion. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoSoftwareVersion = class
		class function Create: _NexoSoftwareVersion;
		class function CreateRemote(const MachineName: string): _NexoSoftwareVersion;
	end;

	// *********************************************************************//
	// La classe CoNexoApplicationName fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoApplicationName exposée
	// par la CoClasse NexoApplicationName. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoApplicationName = class
		class function Create: _NexoApplicationName;
		class function CreateRemote(const MachineName: string): _NexoApplicationName;
	end;

	// *********************************************************************//
	// La classe CoNexoManufacturerID fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoManufacturerID exposée
	// par la CoClasse NexoManufacturerID. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoManufacturerID = class
		class function Create: _NexoManufacturerID;
		class function CreateRemote(const MachineName: string): _NexoManufacturerID;
	end;

	// *********************************************************************//
	// La classe CoNexoPOISerialNumber fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoPOISerialNumber exposée
	// par la CoClasse NexoPOISerialNumber. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoPOISerialNumber = class
		class function Create: _NexoPOISerialNumber;
		class function CreateRemote(const MachineName: string): _NexoPOISerialNumber;
	end;

	// *********************************************************************//
	// La classe CoNexoOperatorID fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoOperatorID exposée
	// par la CoClasse NexoOperatorID. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoOperatorID = class
		class function Create: _NexoOperatorID;
		class function CreateRemote(const MachineName: string): _NexoOperatorID;
	end;

	// *********************************************************************//
	// La classe CoNexoDateTime fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoDateTime exposée
	// par la CoClasse NexoDateTime. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoDateTime = class
		class function Create: _NexoDateTime;
		class function CreateRemote(const MachineName: string): _NexoDateTime;
	end;

	// *********************************************************************//
	// La classe CoNexoInputCommand fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoInputCommand exposée
	// par la CoClasse NexoInputCommand. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoInputCommand = class
		class function Create: _NexoInputCommand;
		class function CreateRemote(const MachineName: string): _NexoInputCommand;
	end;

	// *********************************************************************//
	// La classe CoNexoEventToNotify fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoEventToNotify exposée
	// par la CoClasse NexoEventToNotify. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoEventToNotify = class
		class function Create: _NexoEventToNotify;
		class function CreateRemote(const MachineName: string): _NexoEventToNotify;
	end;

	// *********************************************************************//
	// La classe CoNexoPaymentIntrumentType fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoPaymentIntrumentType exposée
	// par la CoClasse NexoPaymentIntrumentType. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoPaymentIntrumentType = class
		class function Create: _NexoPaymentIntrumentType;
		class function CreateRemote(const MachineName: string): _NexoPaymentIntrumentType;
	end;

	// *********************************************************************//
	// La classe CoNexoVersion fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoVersion exposée
	// par la CoClasse NexoVersion. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoVersion = class
		class function Create: _NexoVersion;
		class function CreateRemote(const MachineName: string): _NexoVersion;
	end;

	// *********************************************************************//
	// La classe CoNexoCurrentVersion fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoCurrentVersion exposée
	// par la CoClasse NexoCurrentVersion. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoCurrentVersion = class
		class function Create: _NexoCurrentVersion;
		class function CreateRemote(const MachineName: string): _NexoCurrentVersion;
	end;

	// *********************************************************************//
	// La classe CoNexoRetailerServerDatabaseConnection fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoRetailerServerDatabaseConnection exposée
	// par la CoClasse NexoRetailerServerDatabaseConnection. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoRetailerServerDatabaseConnection = class
		class function Create: _NexoRetailerServerDatabaseConnection;
		class function CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseConnection;
	end;

	// *********************************************************************//
	// La classe CoNexoRetailerServerDatabaseEndPoint fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoRetailerServerDatabaseEndPoint exposée
	// par la CoClasse NexoRetailerServerDatabaseEndPoint. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoRetailerServerDatabaseEndPoint = class
		class function Create: _NexoRetailerServerDatabaseEndPoint;
		class function CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseEndPoint;
	end;

	// *********************************************************************//
	// La classe CoNexoRetailerServerDatabaseSale fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoRetailerServerDatabaseSale exposée
	// par la CoClasse NexoRetailerServerDatabaseSale. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoRetailerServerDatabaseSale = class
		class function Create: _NexoRetailerServerDatabaseSale;
		class function CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseSale;
	end;

	// *********************************************************************//
	// La classe CoNexoRetailerServerDatabaseMessage fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoRetailerServerDatabaseMessage exposée
	// par la CoClasse NexoRetailerServerDatabaseMessage. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoRetailerServerDatabaseMessage = class
		class function Create: _NexoRetailerServerDatabaseMessage;
		class function CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseMessage;
	end;

	// *********************************************************************//
	// La classe CoNexoRetailerServerDatabase fournit une méthode Create et CreateRemote pour
	// créer des instances de l'interface par défaut _NexoRetailerServerDatabase exposée
	// par la CoClasse NexoRetailerServerDatabase. Les fonctions sont destinées à être utilisées par
	// les clients désirant automatiser les objets CoClasse exposés par
	// le serveur de cette bibliothèque de types.
	// *********************************************************************//
	CoNexoRetailerServerDatabase = class
		class function Create: _NexoRetailerServerDatabase;
		class function CreateRemote(const MachineName: string): _NexoRetailerServerDatabase;
	end;

implementation

uses System.Win.ComObj;

class function CoAbortRequestType.Create: IAbortRequestType;
begin
	Result := CreateComObject(CLASS_AbortRequestType) as IAbortRequestType;
end;

class function CoAbortRequestType.CreateRemote(const MachineName: string): IAbortRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_AbortRequestType) as IAbortRequestType;
end;

class function CoMessageReferenceType.Create: IMessageReferenceType;
begin
	Result := CreateComObject(CLASS_MessageReferenceType) as IMessageReferenceType;
end;

class function CoMessageReferenceType.CreateRemote(const MachineName: string): IMessageReferenceType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_MessageReferenceType) as IMessageReferenceType;
end;

class function CoDisplayResponseType.Create: IDisplayResponseType;
begin
	Result := CreateComObject(CLASS_DisplayResponseType) as IDisplayResponseType;
end;

class function CoDisplayResponseType.CreateRemote(const MachineName: string): IDisplayResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_DisplayResponseType) as IDisplayResponseType;
end;

class function CoOutputResultType.Create: IOutputResultType;
begin
	Result := CreateComObject(CLASS_OutputResultType) as IOutputResultType;
end;

class function CoOutputResultType.CreateRemote(const MachineName: string): IOutputResultType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_OutputResultType) as IOutputResultType;
end;

class function CoResponseType.Create: IResponseType;
begin
	Result := CreateComObject(CLASS_ResponseType) as IResponseType;
end;

class function CoResponseType.CreateRemote(const MachineName: string): IResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_ResponseType) as IResponseType;
end;

class function CoDisplayRequestType.Create: IDisplayRequestType;
begin
	Result := CreateComObject(CLASS_DisplayRequestType) as IDisplayRequestType;
end;

class function CoDisplayRequestType.CreateRemote(const MachineName: string): IDisplayRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_DisplayRequestType) as IDisplayRequestType;
end;

class function CoDisplayOutputType.Create: IDisplayOutputType;
begin
	Result := CreateComObject(CLASS_DisplayOutputType) as IDisplayOutputType;
end;

class function CoDisplayOutputType.CreateRemote(const MachineName: string): IDisplayOutputType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_DisplayOutputType) as IDisplayOutputType;
end;

class function CoOutputContentType.Create: IOutputContentType;
begin
	Result := CreateComObject(CLASS_OutputContentType) as IOutputContentType;
end;

class function CoOutputContentType.CreateRemote(const MachineName: string): IOutputContentType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_OutputContentType) as IOutputContentType;
end;

class function CoPredefinedContentType.Create: IPredefinedContentType;
begin
	Result := CreateComObject(CLASS_PredefinedContentType) as IPredefinedContentType;
end;

class function CoPredefinedContentType.CreateRemote(const MachineName: string): IPredefinedContentType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PredefinedContentType) as IPredefinedContentType;
end;

class function CoOutputTextType.Create: IOutputTextType;
begin
	Result := CreateComObject(CLASS_OutputTextType) as IOutputTextType;
end;

class function CoOutputTextType.CreateRemote(const MachineName: string): IOutputTextType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_OutputTextType) as IOutputTextType;
end;

class function CoOutputBarcodeType.Create: IOutputBarcodeType;
begin
	Result := CreateComObject(CLASS_OutputBarcodeType) as IOutputBarcodeType;
end;

class function CoOutputBarcodeType.CreateRemote(const MachineName: string): IOutputBarcodeType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_OutputBarcodeType) as IOutputBarcodeType;
end;

class function CoMenuEntryType.Create: IMenuEntryType;
begin
	Result := CreateComObject(CLASS_MenuEntryType) as IMenuEntryType;
end;

class function CoMenuEntryType.CreateRemote(const MachineName: string): IMenuEntryType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_MenuEntryType) as IMenuEntryType;
end;

class function CoAdminRequestType.Create: IAdminRequestType;
begin
	Result := CreateComObject(CLASS_AdminRequestType) as IAdminRequestType;
end;

class function CoAdminRequestType.CreateRemote(const MachineName: string): IAdminRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_AdminRequestType) as IAdminRequestType;
end;

class function CoAdminResponseType.Create: IAdminResponseType;
begin
	Result := CreateComObject(CLASS_AdminResponseType) as IAdminResponseType;
end;

class function CoAdminResponseType.CreateRemote(const MachineName: string): IAdminResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_AdminResponseType) as IAdminResponseType;
end;

class function CoAllowedProductType.Create: IAllowedProductType;
begin
	Result := CreateComObject(CLASS_AllowedProductType) as IAllowedProductType;
end;

class function CoAllowedProductType.CreateRemote(const MachineName: string): IAllowedProductType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_AllowedProductType) as IAllowedProductType;
end;

class function CoAmountsReqType.Create: IAmountsReqType;
begin
	Result := CreateComObject(CLASS_AmountsReqType) as IAmountsReqType;
end;

class function CoAmountsReqType.CreateRemote(const MachineName: string): IAmountsReqType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_AmountsReqType) as IAmountsReqType;
end;

class function CoAmountsRespType.Create: IAmountsRespType;
begin
	Result := CreateComObject(CLASS_AmountsRespType) as IAmountsRespType;
end;

class function CoAmountsRespType.CreateRemote(const MachineName: string): IAmountsRespType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_AmountsRespType) as IAmountsRespType;
end;

class function CoAreaSizeType.Create: IAreaSizeType;
begin
	Result := CreateComObject(CLASS_AreaSizeType) as IAreaSizeType;
end;

class function CoAreaSizeType.CreateRemote(const MachineName: string): IAreaSizeType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_AreaSizeType) as IAreaSizeType;
end;

class function CoBalanceInquiryRequestType.Create: IBalanceInquiryRequestType;
begin
	Result := CreateComObject(CLASS_BalanceInquiryRequestType) as IBalanceInquiryRequestType;
end;

class function CoBalanceInquiryRequestType.CreateRemote(const MachineName: string): IBalanceInquiryRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_BalanceInquiryRequestType) as IBalanceInquiryRequestType;
end;

class function CoPaymentAccountReqType.Create: IPaymentAccountReqType;
begin
	Result := CreateComObject(CLASS_PaymentAccountReqType) as IPaymentAccountReqType;
end;

class function CoPaymentAccountReqType.CreateRemote(const MachineName: string): IPaymentAccountReqType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PaymentAccountReqType) as IPaymentAccountReqType;
end;

class function CoTransactionIdentificationType.Create: ITransactionIdentificationType;
begin
	Result := CreateComObject(CLASS_TransactionIdentificationType) as ITransactionIdentificationType;
end;

class function CoTransactionIdentificationType.CreateRemote(const MachineName: string): ITransactionIdentificationType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_TransactionIdentificationType) as ITransactionIdentificationType;
end;

class function CoPaymentInstrumentDataType.Create: IPaymentInstrumentDataType;
begin
	Result := CreateComObject(CLASS_PaymentInstrumentDataType) as IPaymentInstrumentDataType;
end;

class function CoPaymentInstrumentDataType.CreateRemote(const MachineName: string): IPaymentInstrumentDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PaymentInstrumentDataType) as IPaymentInstrumentDataType;
end;

class function CoCardDataType.Create: ICardDataType;
begin
	Result := CreateComObject(CLASS_CardDataType) as ICardDataType;
end;

class function CoCardDataType.CreateRemote(const MachineName: string): ICardDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CardDataType) as ICardDataType;
end;

class function CoContentInformationType.Create: IContentInformationType;
begin
	Result := CreateComObject(CLASS_ContentInformationType) as IContentInformationType;
end;

class function CoContentInformationType.CreateRemote(const MachineName: string): IContentInformationType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_ContentInformationType) as IContentInformationType;
end;

class function CoAuthenticatedDataType.Create: IAuthenticatedDataType;
begin
	Result := CreateComObject(CLASS_AuthenticatedDataType) as IAuthenticatedDataType;
end;

class function CoAuthenticatedDataType.CreateRemote(const MachineName: string): IAuthenticatedDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_AuthenticatedDataType) as IAuthenticatedDataType;
end;

class function CoKEKType.Create: IKEKType;
begin
	Result := CreateComObject(CLASS_KEKType) as IKEKType;
end;

class function CoKEKType.CreateRemote(const MachineName: string): IKEKType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_KEKType) as IKEKType;
end;

class function CoKEKIdentifierType.Create: IKEKIdentifierType;
begin
	Result := CreateComObject(CLASS_KEKIdentifierType) as IKEKIdentifierType;
end;

class function CoKEKIdentifierType.CreateRemote(const MachineName: string): IKEKIdentifierType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_KEKIdentifierType) as IKEKIdentifierType;
end;

class function CoAlgorithmIdentifier.Create: IAlgorithmIdentifier;
begin
	Result := CreateComObject(CLASS_AlgorithmIdentifier) as IAlgorithmIdentifier;
end;

class function CoAlgorithmIdentifier.CreateRemote(const MachineName: string): IAlgorithmIdentifier;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_AlgorithmIdentifier) as IAlgorithmIdentifier;
end;

class function CoParameterType.Create: IParameterType;
begin
	Result := CreateComObject(CLASS_ParameterType) as IParameterType;
end;

class function CoParameterType.CreateRemote(const MachineName: string): IParameterType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_ParameterType) as IParameterType;
end;

class function CoKeyTransportType.Create: IKeyTransportType;
begin
	Result := CreateComObject(CLASS_KeyTransportType) as IKeyTransportType;
end;

class function CoKeyTransportType.CreateRemote(const MachineName: string): IKeyTransportType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_KeyTransportType) as IKeyTransportType;
end;

class function CoRecipientIdentifierType.Create: IRecipientIdentifierType;
begin
	Result := CreateComObject(CLASS_RecipientIdentifierType) as IRecipientIdentifierType;
end;

class function CoRecipientIdentifierType.CreateRemote(const MachineName: string): IRecipientIdentifierType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_RecipientIdentifierType) as IRecipientIdentifierType;
end;

class function CoIssuerAndSerialNumberType.Create: IIssuerAndSerialNumberType;
begin
	Result := CreateComObject(CLASS_IssuerAndSerialNumberType) as IIssuerAndSerialNumberType;
end;

class function CoIssuerAndSerialNumberType.CreateRemote(const MachineName: string): IIssuerAndSerialNumberType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_IssuerAndSerialNumberType) as IIssuerAndSerialNumberType;
end;

class function CoRelativeDistinguishedNameType.Create: IRelativeDistinguishedNameType;
begin
	Result := CreateComObject(CLASS_RelativeDistinguishedNameType) as IRelativeDistinguishedNameType;
end;

class function CoRelativeDistinguishedNameType.CreateRemote(const MachineName: string): IRelativeDistinguishedNameType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_RelativeDistinguishedNameType) as IRelativeDistinguishedNameType;
end;

class function CoEncapsulatedContentType.Create: IEncapsulatedContentType;
begin
	Result := CreateComObject(CLASS_EncapsulatedContentType) as IEncapsulatedContentType;
end;

class function CoEncapsulatedContentType.CreateRemote(const MachineName: string): IEncapsulatedContentType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_EncapsulatedContentType) as IEncapsulatedContentType;
end;

class function CoDigestedDataType.Create: IDigestedDataType;
begin
	Result := CreateComObject(CLASS_DigestedDataType) as IDigestedDataType;
end;

class function CoDigestedDataType.CreateRemote(const MachineName: string): IDigestedDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_DigestedDataType) as IDigestedDataType;
end;

class function CoEnvelopedDataType.Create: IEnvelopedDataType;
begin
	Result := CreateComObject(CLASS_EnvelopedDataType) as IEnvelopedDataType;
end;

class function CoEnvelopedDataType.CreateRemote(const MachineName: string): IEnvelopedDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_EnvelopedDataType) as IEnvelopedDataType;
end;

class function CoEncryptedContentType.Create: IEncryptedContentType;
begin
	Result := CreateComObject(CLASS_EncryptedContentType) as IEncryptedContentType;
end;

class function CoEncryptedContentType.CreateRemote(const MachineName: string): IEncryptedContentType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_EncryptedContentType) as IEncryptedContentType;
end;

class function CoNamedKeyEncryptedDataType.Create: INamedKeyEncryptedDataType;
begin
	Result := CreateComObject(CLASS_NamedKeyEncryptedDataType) as INamedKeyEncryptedDataType;
end;

class function CoNamedKeyEncryptedDataType.CreateRemote(const MachineName: string): INamedKeyEncryptedDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NamedKeyEncryptedDataType) as INamedKeyEncryptedDataType;
end;

class function CoSignedDataType.Create: ISignedDataType;
begin
	Result := CreateComObject(CLASS_SignedDataType) as ISignedDataType;
end;

class function CoSignedDataType.CreateRemote(const MachineName: string): ISignedDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SignedDataType) as ISignedDataType;
end;

class function CoSignerType.Create: ISignerType;
begin
	Result := CreateComObject(CLASS_SignerType) as ISignerType;
end;

class function CoSignerType.CreateRemote(const MachineName: string): ISignerType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SignerType) as ISignerType;
end;

class function CoSignerIdentifierType.Create: ISignerIdentifierType;
begin
	Result := CreateComObject(CLASS_SignerIdentifierType) as ISignerIdentifierType;
end;

class function CoSignerIdentifierType.CreateRemote(const MachineName: string): ISignerIdentifierType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SignerIdentifierType) as ISignerIdentifierType;
end;

class function CoSensitiveCardDataType.Create: ISensitiveCardDataType;
begin
	Result := CreateComObject(CLASS_SensitiveCardDataType) as ISensitiveCardDataType;
end;

class function CoSensitiveCardDataType.CreateRemote(const MachineName: string): ISensitiveCardDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SensitiveCardDataType) as ISensitiveCardDataType;
end;

class function CoTrackDataType.Create: ITrackDataType;
begin
	Result := CreateComObject(CLASS_TrackDataType) as ITrackDataType;
end;

class function CoTrackDataType.CreateRemote(const MachineName: string): ITrackDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_TrackDataType) as ITrackDataType;
end;

class function CoPaymentTokenType.Create: IPaymentTokenType;
begin
	Result := CreateComObject(CLASS_PaymentTokenType) as IPaymentTokenType;
end;

class function CoPaymentTokenType.CreateRemote(const MachineName: string): IPaymentTokenType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PaymentTokenType) as IPaymentTokenType;
end;

class function CoCustomerOrderType.Create: ICustomerOrderType;
begin
	Result := CreateComObject(CLASS_CustomerOrderType) as ICustomerOrderType;
end;

class function CoCustomerOrderType.CreateRemote(const MachineName: string): ICustomerOrderType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CustomerOrderType) as ICustomerOrderType;
end;

class function CoCheckDataType.Create: ICheckDataType;
begin
	Result := CreateComObject(CLASS_CheckDataType) as ICheckDataType;
end;

class function CoCheckDataType.CreateRemote(const MachineName: string): ICheckDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CheckDataType) as ICheckDataType;
end;

class function CoMobileDataType.Create: IMobileDataType;
begin
	Result := CreateComObject(CLASS_MobileDataType) as IMobileDataType;
end;

class function CoMobileDataType.CreateRemote(const MachineName: string): IMobileDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_MobileDataType) as IMobileDataType;
end;

class function CoGeolocationType.Create: IGeolocationType;
begin
	Result := CreateComObject(CLASS_GeolocationType) as IGeolocationType;
end;

class function CoGeolocationType.CreateRemote(const MachineName: string): IGeolocationType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_GeolocationType) as IGeolocationType;
end;

class function CoGeographicCoordinatesType.Create: IGeographicCoordinatesType;
begin
	Result := CreateComObject(CLASS_GeographicCoordinatesType) as IGeographicCoordinatesType;
end;

class function CoGeographicCoordinatesType.CreateRemote(const MachineName: string): IGeographicCoordinatesType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_GeographicCoordinatesType) as IGeographicCoordinatesType;
end;

class function CoUTMCoordinatesType.Create: IUTMCoordinatesType;
begin
	Result := CreateComObject(CLASS_UTMCoordinatesType) as IUTMCoordinatesType;
end;

class function CoUTMCoordinatesType.CreateRemote(const MachineName: string): IUTMCoordinatesType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_UTMCoordinatesType) as IUTMCoordinatesType;
end;

class function CoSensitiveMobileDataType.Create: ISensitiveMobileDataType;
begin
	Result := CreateComObject(CLASS_SensitiveMobileDataType) as ISensitiveMobileDataType;
end;

class function CoSensitiveMobileDataType.CreateRemote(const MachineName: string): ISensitiveMobileDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SensitiveMobileDataType) as ISensitiveMobileDataType;
end;

class function CoLoyaltyAccountReqType.Create: ILoyaltyAccountReqType;
begin
	Result := CreateComObject(CLASS_LoyaltyAccountReqType) as ILoyaltyAccountReqType;
end;

class function CoLoyaltyAccountReqType.CreateRemote(const MachineName: string): ILoyaltyAccountReqType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAccountReqType) as ILoyaltyAccountReqType;
end;

class function CoLoyaltyAccountIDType.Create: ILoyaltyAccountIDType;
begin
	Result := CreateComObject(CLASS_LoyaltyAccountIDType) as ILoyaltyAccountIDType;
end;

class function CoLoyaltyAccountIDType.CreateRemote(const MachineName: string): ILoyaltyAccountIDType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAccountIDType) as ILoyaltyAccountIDType;
end;

class function CoBalanceInquiryResponseType.Create: IBalanceInquiryResponseType;
begin
	Result := CreateComObject(CLASS_BalanceInquiryResponseType) as IBalanceInquiryResponseType;
end;

class function CoBalanceInquiryResponseType.CreateRemote(const MachineName: string): IBalanceInquiryResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_BalanceInquiryResponseType) as IBalanceInquiryResponseType;
end;

class function CoPaymentAccountStatusType.Create: IPaymentAccountStatusType;
begin
	Result := CreateComObject(CLASS_PaymentAccountStatusType) as IPaymentAccountStatusType;
end;

class function CoPaymentAccountStatusType.CreateRemote(const MachineName: string): IPaymentAccountStatusType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PaymentAccountStatusType) as IPaymentAccountStatusType;
end;

class function CoPaymentAcquirerDataType.Create: IPaymentAcquirerDataType;
begin
	Result := CreateComObject(CLASS_PaymentAcquirerDataType) as IPaymentAcquirerDataType;
end;

class function CoPaymentAcquirerDataType.CreateRemote(const MachineName: string): IPaymentAcquirerDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PaymentAcquirerDataType) as IPaymentAcquirerDataType;
end;

class function CoLoyaltyAccountStatusType.Create: ILoyaltyAccountStatusType;
begin
	Result := CreateComObject(CLASS_LoyaltyAccountStatusType) as ILoyaltyAccountStatusType;
end;

class function CoLoyaltyAccountStatusType.CreateRemote(const MachineName: string): ILoyaltyAccountStatusType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAccountStatusType) as ILoyaltyAccountStatusType;
end;

class function CoLoyaltyAccountType.Create: ILoyaltyAccountType;
begin
	Result := CreateComObject(CLASS_LoyaltyAccountType) as ILoyaltyAccountType;
end;

class function CoLoyaltyAccountType.CreateRemote(const MachineName: string): ILoyaltyAccountType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAccountType) as ILoyaltyAccountType;
end;

class function CoBatchRequestType.Create: IBatchRequestType;
begin
	Result := CreateComObject(CLASS_BatchRequestType) as IBatchRequestType;
end;

class function CoBatchRequestType.CreateRemote(const MachineName: string): IBatchRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_BatchRequestType) as IBatchRequestType;
end;

class function CoTransactionToPerformType.Create: ITransactionToPerformType;
begin
	Result := CreateComObject(CLASS_TransactionToPerformType) as ITransactionToPerformType;
end;

class function CoTransactionToPerformType.CreateRemote(const MachineName: string): ITransactionToPerformType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_TransactionToPerformType) as ITransactionToPerformType;
end;

class function CoLoyaltyRequestType.Create: ILoyaltyRequestType;
begin
	Result := CreateComObject(CLASS_LoyaltyRequestType) as ILoyaltyRequestType;
end;

class function CoLoyaltyRequestType.CreateRemote(const MachineName: string): ILoyaltyRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyRequestType) as ILoyaltyRequestType;
end;

class function CoSaleDataType.Create: ISaleDataType;
begin
	Result := CreateComObject(CLASS_SaleDataType) as ISaleDataType;
end;

class function CoSaleDataType.CreateRemote(const MachineName: string): ISaleDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SaleDataType) as ISaleDataType;
end;

class function CoSaleTerminalDataType.Create: ISaleTerminalDataType;
begin
	Result := CreateComObject(CLASS_SaleTerminalDataType) as ISaleTerminalDataType;
end;

class function CoSaleTerminalDataType.CreateRemote(const MachineName: string): ISaleTerminalDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SaleTerminalDataType) as ISaleTerminalDataType;
end;

class function CoSaleProfileType.Create: ISaleProfileType;
begin
	Result := CreateComObject(CLASS_SaleProfileType) as ISaleProfileType;
end;

class function CoSaleProfileType.CreateRemote(const MachineName: string): ISaleProfileType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SaleProfileType) as ISaleProfileType;
end;

class function CoSponsoredMerchantType.Create: ISponsoredMerchantType;
begin
	Result := CreateComObject(CLASS_SponsoredMerchantType) as ISponsoredMerchantType;
end;

class function CoSponsoredMerchantType.CreateRemote(const MachineName: string): ISponsoredMerchantType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SponsoredMerchantType) as ISponsoredMerchantType;
end;

class function CoSaleToIssuerDataType.Create: ISaleToIssuerDataType;
begin
	Result := CreateComObject(CLASS_SaleToIssuerDataType) as ISaleToIssuerDataType;
end;

class function CoSaleToIssuerDataType.CreateRemote(const MachineName: string): ISaleToIssuerDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SaleToIssuerDataType) as ISaleToIssuerDataType;
end;

class function CoLoyaltyTransactionType.Create: ILoyaltyTransactionType;
begin
	Result := CreateComObject(CLASS_LoyaltyTransactionType) as ILoyaltyTransactionType;
end;

class function CoLoyaltyTransactionType.CreateRemote(const MachineName: string): ILoyaltyTransactionType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyTransactionType) as ILoyaltyTransactionType;
end;

class function CoOriginalPOITransactionType.Create: IOriginalPOITransactionType;
begin
	Result := CreateComObject(CLASS_OriginalPOITransactionType) as IOriginalPOITransactionType;
end;

class function CoOriginalPOITransactionType.CreateRemote(const MachineName: string): IOriginalPOITransactionType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_OriginalPOITransactionType) as IOriginalPOITransactionType;
end;

class function CoTransactionConditionsType.Create: ITransactionConditionsType;
begin
	Result := CreateComObject(CLASS_TransactionConditionsType) as ITransactionConditionsType;
end;

class function CoTransactionConditionsType.CreateRemote(const MachineName: string): ITransactionConditionsType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_TransactionConditionsType) as ITransactionConditionsType;
end;

class function CoSaleItemType.Create: ISaleItemType;
begin
	Result := CreateComObject(CLASS_SaleItemType) as ISaleItemType;
end;

class function CoSaleItemType.CreateRemote(const MachineName: string): ISaleItemType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SaleItemType) as ISaleItemType;
end;

class function CoLoyaltyDataType.Create: ILoyaltyDataType;
begin
	Result := CreateComObject(CLASS_LoyaltyDataType) as ILoyaltyDataType;
end;

class function CoLoyaltyDataType.CreateRemote(const MachineName: string): ILoyaltyDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyDataType) as ILoyaltyDataType;
end;

class function CoLoyaltyAmountType.Create: ILoyaltyAmountType;
begin
	Result := CreateComObject(CLASS_LoyaltyAmountType) as ILoyaltyAmountType;
end;

class function CoLoyaltyAmountType.CreateRemote(const MachineName: string): ILoyaltyAmountType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAmountType) as ILoyaltyAmountType;
end;

class function CoPaymentRequestType.Create: IPaymentRequestType;
begin
	Result := CreateComObject(CLASS_PaymentRequestType) as IPaymentRequestType;
end;

class function CoPaymentRequestType.CreateRemote(const MachineName: string): IPaymentRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PaymentRequestType) as IPaymentRequestType;
end;

class function CoPaymentTransactionType.Create: IPaymentTransactionType;
begin
	Result := CreateComObject(CLASS_PaymentTransactionType) as IPaymentTransactionType;
end;

class function CoPaymentTransactionType.CreateRemote(const MachineName: string): IPaymentTransactionType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PaymentTransactionType) as IPaymentTransactionType;
end;

class function CoPaymentDataType.Create: IPaymentDataType;
begin
	Result := CreateComObject(CLASS_PaymentDataType) as IPaymentDataType;
end;

class function CoPaymentDataType.CreateRemote(const MachineName: string): IPaymentDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PaymentDataType) as IPaymentDataType;
end;

class function CoInstalmentType.Create: IInstalmentType;
begin
	Result := CreateComObject(CLASS_InstalmentType) as IInstalmentType;
end;

class function CoInstalmentType.CreateRemote(const MachineName: string): IInstalmentType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_InstalmentType) as IInstalmentType;
end;

class function CoReversalRequestType.Create: IReversalRequestType;
begin
	Result := CreateComObject(CLASS_ReversalRequestType) as IReversalRequestType;
end;

class function CoReversalRequestType.CreateRemote(const MachineName: string): IReversalRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_ReversalRequestType) as IReversalRequestType;
end;

class function CoBatchResponseType.Create: IBatchResponseType;
begin
	Result := CreateComObject(CLASS_BatchResponseType) as IBatchResponseType;
end;

class function CoBatchResponseType.CreateRemote(const MachineName: string): IBatchResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_BatchResponseType) as IBatchResponseType;
end;

class function CoPerformedTransactionType.Create: IPerformedTransactionType;
begin
	Result := CreateComObject(CLASS_PerformedTransactionType) as IPerformedTransactionType;
end;

class function CoPerformedTransactionType.CreateRemote(const MachineName: string): IPerformedTransactionType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PerformedTransactionType) as IPerformedTransactionType;
end;

class function CoPOIDataType.Create: IPOIDataType;
begin
	Result := CreateComObject(CLASS_POIDataType) as IPOIDataType;
end;

class function CoPOIDataType.CreateRemote(const MachineName: string): IPOIDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_POIDataType) as IPOIDataType;
end;

class function CoPaymentResultType.Create: IPaymentResultType;
begin
	Result := CreateComObject(CLASS_PaymentResultType) as IPaymentResultType;
end;

class function CoPaymentResultType.CreateRemote(const MachineName: string): IPaymentResultType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PaymentResultType) as IPaymentResultType;
end;

class function CoCurrencyConversionType.Create: ICurrencyConversionType;
begin
	Result := CreateComObject(CLASS_CurrencyConversionType) as ICurrencyConversionType;
end;

class function CoCurrencyConversionType.CreateRemote(const MachineName: string): ICurrencyConversionType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CurrencyConversionType) as ICurrencyConversionType;
end;

class function CoAmountType.Create: IAmountType;
begin
	Result := CreateComObject(CLASS_AmountType) as IAmountType;
end;

class function CoAmountType.CreateRemote(const MachineName: string): IAmountType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_AmountType) as IAmountType;
end;

class function CoCapturedSignatureType.Create: ICapturedSignatureType;
begin
	Result := CreateComObject(CLASS_CapturedSignatureType) as ICapturedSignatureType;
end;

class function CoCapturedSignatureType.CreateRemote(const MachineName: string): ICapturedSignatureType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CapturedSignatureType) as ICapturedSignatureType;
end;

class function CoSignaturePointType.Create: ISignaturePointType;
begin
	Result := CreateComObject(CLASS_SignaturePointType) as ISignaturePointType;
end;

class function CoSignaturePointType.CreateRemote(const MachineName: string): ISignaturePointType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SignaturePointType) as ISignaturePointType;
end;

class function CoLoyaltyResultType.Create: ILoyaltyResultType;
begin
	Result := CreateComObject(CLASS_LoyaltyResultType) as ILoyaltyResultType;
end;

class function CoLoyaltyResultType.CreateRemote(const MachineName: string): ILoyaltyResultType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyResultType) as ILoyaltyResultType;
end;

class function CoLoyaltyAcquirerDataType.Create: ILoyaltyAcquirerDataType;
begin
	Result := CreateComObject(CLASS_LoyaltyAcquirerDataType) as ILoyaltyAcquirerDataType;
end;

class function CoLoyaltyAcquirerDataType.CreateRemote(const MachineName: string): ILoyaltyAcquirerDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAcquirerDataType) as ILoyaltyAcquirerDataType;
end;

class function CoRebatesType.Create: IRebatesType;
begin
	Result := CreateComObject(CLASS_RebatesType) as IRebatesType;
end;

class function CoRebatesType.CreateRemote(const MachineName: string): IRebatesType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_RebatesType) as IRebatesType;
end;

class function CoSaleItemRebateType.Create: ISaleItemRebateType;
begin
	Result := CreateComObject(CLASS_SaleItemRebateType) as ISaleItemRebateType;
end;

class function CoSaleItemRebateType.CreateRemote(const MachineName: string): ISaleItemRebateType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SaleItemRebateType) as ISaleItemRebateType;
end;

class function CoCardAcquisitionRequestType.Create: ICardAcquisitionRequestType;
begin
	Result := CreateComObject(CLASS_CardAcquisitionRequestType) as ICardAcquisitionRequestType;
end;

class function CoCardAcquisitionRequestType.CreateRemote(const MachineName: string): ICardAcquisitionRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CardAcquisitionRequestType) as ICardAcquisitionRequestType;
end;

class function CoCardAcquisitionTransactionType.Create: ICardAcquisitionTransactionType;
begin
	Result := CreateComObject(CLASS_CardAcquisitionTransactionType) as ICardAcquisitionTransactionType;
end;

class function CoCardAcquisitionTransactionType.CreateRemote(const MachineName: string): ICardAcquisitionTransactionType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CardAcquisitionTransactionType) as ICardAcquisitionTransactionType;
end;

class function CoCardAcquisitionResponseType.Create: ICardAcquisitionResponseType;
begin
	Result := CreateComObject(CLASS_CardAcquisitionResponseType) as ICardAcquisitionResponseType;
end;

class function CoCardAcquisitionResponseType.CreateRemote(const MachineName: string): ICardAcquisitionResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CardAcquisitionResponseType) as ICardAcquisitionResponseType;
end;

class function CoCardholderPINType.Create: ICardholderPINType;
begin
	Result := CreateComObject(CLASS_CardholderPINType) as ICardholderPINType;
end;

class function CoCardholderPINType.CreateRemote(const MachineName: string): ICardholderPINType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CardholderPINType) as ICardholderPINType;
end;

class function CoCardReaderAPDURequestType.Create: ICardReaderAPDURequestType;
begin
	Result := CreateComObject(CLASS_CardReaderAPDURequestType) as ICardReaderAPDURequestType;
end;

class function CoCardReaderAPDURequestType.CreateRemote(const MachineName: string): ICardReaderAPDURequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CardReaderAPDURequestType) as ICardReaderAPDURequestType;
end;

class function CoCardReaderAPDUResponseType.Create: ICardReaderAPDUResponseType;
begin
	Result := CreateComObject(CLASS_CardReaderAPDUResponseType) as ICardReaderAPDUResponseType;
end;

class function CoCardReaderAPDUResponseType.CreateRemote(const MachineName: string): ICardReaderAPDUResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CardReaderAPDUResponseType) as ICardReaderAPDUResponseType;
end;

class function CoCardReaderInitRequestType.Create: ICardReaderInitRequestType;
begin
	Result := CreateComObject(CLASS_CardReaderInitRequestType) as ICardReaderInitRequestType;
end;

class function CoCardReaderInitRequestType.CreateRemote(const MachineName: string): ICardReaderInitRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CardReaderInitRequestType) as ICardReaderInitRequestType;
end;

class function CoCardReaderInitResponseType.Create: ICardReaderInitResponseType;
begin
	Result := CreateComObject(CLASS_CardReaderInitResponseType) as ICardReaderInitResponseType;
end;

class function CoCardReaderInitResponseType.CreateRemote(const MachineName: string): ICardReaderInitResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CardReaderInitResponseType) as ICardReaderInitResponseType;
end;

class function CoICCResetDataType.Create: IICCResetDataType;
begin
	Result := CreateComObject(CLASS_ICCResetDataType) as IICCResetDataType;
end;

class function CoICCResetDataType.CreateRemote(const MachineName: string): IICCResetDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_ICCResetDataType) as IICCResetDataType;
end;

class function CoCardReaderPowerOffRequestType.Create: ICardReaderPowerOffRequestType;
begin
	Result := CreateComObject(CLASS_CardReaderPowerOffRequestType) as ICardReaderPowerOffRequestType;
end;

class function CoCardReaderPowerOffRequestType.CreateRemote(const MachineName: string): ICardReaderPowerOffRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CardReaderPowerOffRequestType) as ICardReaderPowerOffRequestType;
end;

class function CoCardReaderPowerOffResponseType.Create: ICardReaderPowerOffResponseType;
begin
	Result := CreateComObject(CLASS_CardReaderPowerOffResponseType) as ICardReaderPowerOffResponseType;
end;

class function CoCardReaderPowerOffResponseType.CreateRemote(const MachineName: string): ICardReaderPowerOffResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CardReaderPowerOffResponseType) as ICardReaderPowerOffResponseType;
end;

class function CoCashHandlingDeviceType.Create: ICashHandlingDeviceType;
begin
	Result := CreateComObject(CLASS_CashHandlingDeviceType) as ICashHandlingDeviceType;
end;

class function CoCashHandlingDeviceType.CreateRemote(const MachineName: string): ICashHandlingDeviceType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CashHandlingDeviceType) as ICashHandlingDeviceType;
end;

class function CoCoinsOrBillsType.Create: ICoinsOrBillsType;
begin
	Result := CreateComObject(CLASS_CoinsOrBillsType) as ICoinsOrBillsType;
end;

class function CoCoinsOrBillsType.CreateRemote(const MachineName: string): ICoinsOrBillsType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_CoinsOrBillsType) as ICoinsOrBillsType;
end;

class function CoDiagnosisRequestType.Create: IDiagnosisRequestType;
begin
	Result := CreateComObject(CLASS_DiagnosisRequestType) as IDiagnosisRequestType;
end;

class function CoDiagnosisRequestType.CreateRemote(const MachineName: string): IDiagnosisRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_DiagnosisRequestType) as IDiagnosisRequestType;
end;

class function CoDiagnosisResponseType.Create: IDiagnosisResponseType;
begin
	Result := CreateComObject(CLASS_DiagnosisResponseType) as IDiagnosisResponseType;
end;

class function CoDiagnosisResponseType.CreateRemote(const MachineName: string): IDiagnosisResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_DiagnosisResponseType) as IDiagnosisResponseType;
end;

class function CoPOIStatusType.Create: IPOIStatusType;
begin
	Result := CreateComObject(CLASS_POIStatusType) as IPOIStatusType;
end;

class function CoPOIStatusType.CreateRemote(const MachineName: string): IPOIStatusType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_POIStatusType) as IPOIStatusType;
end;

class function CoHostStatusType.Create: IHostStatusType;
begin
	Result := CreateComObject(CLASS_HostStatusType) as IHostStatusType;
end;

class function CoHostStatusType.CreateRemote(const MachineName: string): IHostStatusType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_HostStatusType) as IHostStatusType;
end;

class function CoEnableServiceRequestType.Create: IEnableServiceRequestType;
begin
	Result := CreateComObject(CLASS_EnableServiceRequestType) as IEnableServiceRequestType;
end;

class function CoEnableServiceRequestType.CreateRemote(const MachineName: string): IEnableServiceRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_EnableServiceRequestType) as IEnableServiceRequestType;
end;

class function CoEnableServiceResponseType.Create: IEnableServiceResponseType;
begin
	Result := CreateComObject(CLASS_EnableServiceResponseType) as IEnableServiceResponseType;
end;

class function CoEnableServiceResponseType.CreateRemote(const MachineName: string): IEnableServiceResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_EnableServiceResponseType) as IEnableServiceResponseType;
end;

class function CoEventNotificationType.Create: IEventNotificationType;
begin
	Result := CreateComObject(CLASS_EventNotificationType) as IEventNotificationType;
end;

class function CoEventNotificationType.CreateRemote(const MachineName: string): IEventNotificationType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_EventNotificationType) as IEventNotificationType;
end;

class function CoGetTotalsRequestType.Create: IGetTotalsRequestType;
begin
	Result := CreateComObject(CLASS_GetTotalsRequestType) as IGetTotalsRequestType;
end;

class function CoGetTotalsRequestType.CreateRemote(const MachineName: string): IGetTotalsRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_GetTotalsRequestType) as IGetTotalsRequestType;
end;

class function CoTotalFilterType.Create: ITotalFilterType;
begin
	Result := CreateComObject(CLASS_TotalFilterType) as ITotalFilterType;
end;

class function CoTotalFilterType.CreateRemote(const MachineName: string): ITotalFilterType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_TotalFilterType) as ITotalFilterType;
end;

class function CoGetTotalsResponseType.Create: IGetTotalsResponseType;
begin
	Result := CreateComObject(CLASS_GetTotalsResponseType) as IGetTotalsResponseType;
end;

class function CoGetTotalsResponseType.CreateRemote(const MachineName: string): IGetTotalsResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_GetTotalsResponseType) as IGetTotalsResponseType;
end;

class function CoTransactionTotalsType.Create: ITransactionTotalsType;
begin
	Result := CreateComObject(CLASS_TransactionTotalsType) as ITransactionTotalsType;
end;

class function CoTransactionTotalsType.CreateRemote(const MachineName: string): ITransactionTotalsType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_TransactionTotalsType) as ITransactionTotalsType;
end;

class function CoPaymentTotalsType.Create: IPaymentTotalsType;
begin
	Result := CreateComObject(CLASS_PaymentTotalsType) as IPaymentTotalsType;
end;

class function CoPaymentTotalsType.CreateRemote(const MachineName: string): IPaymentTotalsType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PaymentTotalsType) as IPaymentTotalsType;
end;

class function CoLoyaltyTotalsType.Create: ILoyaltyTotalsType;
begin
	Result := CreateComObject(CLASS_LoyaltyTotalsType) as ILoyaltyTotalsType;
end;

class function CoLoyaltyTotalsType.CreateRemote(const MachineName: string): ILoyaltyTotalsType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyTotalsType) as ILoyaltyTotalsType;
end;

class function CoInputType.Create: IInputType;
begin
	Result := CreateComObject(CLASS_InputType) as IInputType;
end;

class function CoInputType.CreateRemote(const MachineName: string): IInputType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_InputType) as IInputType;
end;

class function CoInputDataType.Create: IInputDataType;
begin
	Result := CreateComObject(CLASS_InputDataType) as IInputDataType;
end;

class function CoInputDataType.CreateRemote(const MachineName: string): IInputDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_InputDataType) as IInputDataType;
end;

class function CoInputRequestType.Create: IInputRequestType;
begin
	Result := CreateComObject(CLASS_InputRequestType) as IInputRequestType;
end;

class function CoInputRequestType.CreateRemote(const MachineName: string): IInputRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_InputRequestType) as IInputRequestType;
end;

class function CoInputResponseType.Create: IInputResponseType;
begin
	Result := CreateComObject(CLASS_InputResponseType) as IInputResponseType;
end;

class function CoInputResponseType.CreateRemote(const MachineName: string): IInputResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_InputResponseType) as IInputResponseType;
end;

class function CoInputResultType.Create: IInputResultType;
begin
	Result := CreateComObject(CLASS_InputResultType) as IInputResultType;
end;

class function CoInputResultType.CreateRemote(const MachineName: string): IInputResultType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_InputResultType) as IInputResultType;
end;

class function CoInputUpdateType.Create: IInputUpdateType;
begin
	Result := CreateComObject(CLASS_InputUpdateType) as IInputUpdateType;
end;

class function CoInputUpdateType.CreateRemote(const MachineName: string): IInputUpdateType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_InputUpdateType) as IInputUpdateType;
end;

class function CoLoginRequestType.Create: ILoginRequestType;
begin
	Result := CreateComObject(CLASS_LoginRequestType) as ILoginRequestType;
end;

class function CoLoginRequestType.CreateRemote(const MachineName: string): ILoginRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LoginRequestType) as ILoginRequestType;
end;

class function CoSaleSoftwareType.Create: ISaleSoftwareType;
begin
	Result := CreateComObject(CLASS_SaleSoftwareType) as ISaleSoftwareType;
end;

class function CoSaleSoftwareType.CreateRemote(const MachineName: string): ISaleSoftwareType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SaleSoftwareType) as ISaleSoftwareType;
end;

class function CoLoginResponseType.Create: ILoginResponseType;
begin
	Result := CreateComObject(CLASS_LoginResponseType) as ILoginResponseType;
end;

class function CoLoginResponseType.CreateRemote(const MachineName: string): ILoginResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LoginResponseType) as ILoginResponseType;
end;

class function CoPOISystemDataType.Create: IPOISystemDataType;
begin
	Result := CreateComObject(CLASS_POISystemDataType) as IPOISystemDataType;
end;

class function CoPOISystemDataType.CreateRemote(const MachineName: string): IPOISystemDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_POISystemDataType) as IPOISystemDataType;
end;

class function CoPOISoftwareType.Create: IPOISoftwareType;
begin
	Result := CreateComObject(CLASS_POISoftwareType) as IPOISoftwareType;
end;

class function CoPOISoftwareType.CreateRemote(const MachineName: string): IPOISoftwareType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_POISoftwareType) as IPOISoftwareType;
end;

class function CoPOITerminalDataType.Create: IPOITerminalDataType;
begin
	Result := CreateComObject(CLASS_POITerminalDataType) as IPOITerminalDataType;
end;

class function CoPOITerminalDataType.CreateRemote(const MachineName: string): IPOITerminalDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_POITerminalDataType) as IPOITerminalDataType;
end;

class function CoPOIProfileType.Create: IPOIProfileType;
begin
	Result := CreateComObject(CLASS_POIProfileType) as IPOIProfileType;
end;

class function CoPOIProfileType.CreateRemote(const MachineName: string): IPOIProfileType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_POIProfileType) as IPOIProfileType;
end;

class function CoLogoutRequestType.Create: ILogoutRequestType;
begin
	Result := CreateComObject(CLASS_LogoutRequestType) as ILogoutRequestType;
end;

class function CoLogoutRequestType.CreateRemote(const MachineName: string): ILogoutRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LogoutRequestType) as ILogoutRequestType;
end;

class function CoLogoutResponseType.Create: ILogoutResponseType;
begin
	Result := CreateComObject(CLASS_LogoutResponseType) as ILogoutResponseType;
end;

class function CoLogoutResponseType.CreateRemote(const MachineName: string): ILogoutResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LogoutResponseType) as ILogoutResponseType;
end;

class function CoLoyaltyResponseType.Create: ILoyaltyResponseType;
begin
	Result := CreateComObject(CLASS_LoyaltyResponseType) as ILoyaltyResponseType;
end;

class function CoLoyaltyResponseType.CreateRemote(const MachineName: string): ILoyaltyResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyResponseType) as ILoyaltyResponseType;
end;

class function CoPaymentReceiptType.Create: IPaymentReceiptType;
begin
	Result := CreateComObject(CLASS_PaymentReceiptType) as IPaymentReceiptType;
end;

class function CoPaymentReceiptType.CreateRemote(const MachineName: string): IPaymentReceiptType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PaymentReceiptType) as IPaymentReceiptType;
end;

class function CoMessageHeaderType.Create: IMessageHeaderType;
begin
	Result := CreateComObject(CLASS_MessageHeaderType) as IMessageHeaderType;
end;

class function CoMessageHeaderType.CreateRemote(const MachineName: string): IMessageHeaderType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_MessageHeaderType) as IMessageHeaderType;
end;

class function CoPaymentResponseType.Create: IPaymentResponseType;
begin
	Result := CreateComObject(CLASS_PaymentResponseType) as IPaymentResponseType;
end;

class function CoPaymentResponseType.CreateRemote(const MachineName: string): IPaymentResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PaymentResponseType) as IPaymentResponseType;
end;

class function CoPINRequestType.Create: IPINRequestType;
begin
	Result := CreateComObject(CLASS_PINRequestType) as IPINRequestType;
end;

class function CoPINRequestType.CreateRemote(const MachineName: string): IPINRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PINRequestType) as IPINRequestType;
end;

class function CoPINResponseType.Create: IPINResponseType;
begin
	Result := CreateComObject(CLASS_PINResponseType) as IPINResponseType;
end;

class function CoPINResponseType.CreateRemote(const MachineName: string): IPINResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PINResponseType) as IPINResponseType;
end;

class function CoPrintOutputType.Create: IPrintOutputType;
begin
	Result := CreateComObject(CLASS_PrintOutputType) as IPrintOutputType;
end;

class function CoPrintOutputType.CreateRemote(const MachineName: string): IPrintOutputType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PrintOutputType) as IPrintOutputType;
end;

class function CoPrintRequestType.Create: IPrintRequestType;
begin
	Result := CreateComObject(CLASS_PrintRequestType) as IPrintRequestType;
end;

class function CoPrintRequestType.CreateRemote(const MachineName: string): IPrintRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PrintRequestType) as IPrintRequestType;
end;

class function CoPrintResponseType.Create: IPrintResponseType;
begin
	Result := CreateComObject(CLASS_PrintResponseType) as IPrintResponseType;
end;

class function CoPrintResponseType.CreateRemote(const MachineName: string): IPrintResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_PrintResponseType) as IPrintResponseType;
end;

class function CoReconciliationRequestType.Create: IReconciliationRequestType;
begin
	Result := CreateComObject(CLASS_ReconciliationRequestType) as IReconciliationRequestType;
end;

class function CoReconciliationRequestType.CreateRemote(const MachineName: string): IReconciliationRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_ReconciliationRequestType) as IReconciliationRequestType;
end;

class function CoReconciliationResponseType.Create: IReconciliationResponseType;
begin
	Result := CreateComObject(CLASS_ReconciliationResponseType) as IReconciliationResponseType;
end;

class function CoReconciliationResponseType.CreateRemote(const MachineName: string): IReconciliationResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_ReconciliationResponseType) as IReconciliationResponseType;
end;

class function CoRepeatedMessageResponseType.Create: IRepeatedMessageResponseType;
begin
	Result := CreateComObject(CLASS_RepeatedMessageResponseType) as IRepeatedMessageResponseType;
end;

class function CoRepeatedMessageResponseType.CreateRemote(const MachineName: string): IRepeatedMessageResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_RepeatedMessageResponseType) as IRepeatedMessageResponseType;
end;

class function CoReversalResponseType.Create: IReversalResponseType;
begin
	Result := CreateComObject(CLASS_ReversalResponseType) as IReversalResponseType;
end;

class function CoReversalResponseType.CreateRemote(const MachineName: string): IReversalResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_ReversalResponseType) as IReversalResponseType;
end;

class function CoStoredValueResponseType.Create: IStoredValueResponseType;
begin
	Result := CreateComObject(CLASS_StoredValueResponseType) as IStoredValueResponseType;
end;

class function CoStoredValueResponseType.CreateRemote(const MachineName: string): IStoredValueResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_StoredValueResponseType) as IStoredValueResponseType;
end;

class function CoStoredValueResultType.Create: IStoredValueResultType;
begin
	Result := CreateComObject(CLASS_StoredValueResultType) as IStoredValueResultType;
end;

class function CoStoredValueResultType.CreateRemote(const MachineName: string): IStoredValueResultType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_StoredValueResultType) as IStoredValueResultType;
end;

class function CoStoredValueAccountStatusType.Create: IStoredValueAccountStatusType;
begin
	Result := CreateComObject(CLASS_StoredValueAccountStatusType) as IStoredValueAccountStatusType;
end;

class function CoStoredValueAccountStatusType.CreateRemote(const MachineName: string): IStoredValueAccountStatusType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_StoredValueAccountStatusType) as IStoredValueAccountStatusType;
end;

class function CoStoredValueAccountIDType.Create: IStoredValueAccountIDType;
begin
	Result := CreateComObject(CLASS_StoredValueAccountIDType) as IStoredValueAccountIDType;
end;

class function CoStoredValueAccountIDType.CreateRemote(const MachineName: string): IStoredValueAccountIDType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_StoredValueAccountIDType) as IStoredValueAccountIDType;
end;

class function CoSoundContentType.Create: ISoundContentType;
begin
	Result := CreateComObject(CLASS_SoundContentType) as ISoundContentType;
end;

class function CoSoundContentType.CreateRemote(const MachineName: string): ISoundContentType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SoundContentType) as ISoundContentType;
end;

class function CoSoundRequestType.Create: ISoundRequestType;
begin
	Result := CreateComObject(CLASS_SoundRequestType) as ISoundRequestType;
end;

class function CoSoundRequestType.CreateRemote(const MachineName: string): ISoundRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SoundRequestType) as ISoundRequestType;
end;

class function CoSoundResponseType.Create: ISoundResponseType;
begin
	Result := CreateComObject(CLASS_SoundResponseType) as ISoundResponseType;
end;

class function CoSoundResponseType.CreateRemote(const MachineName: string): ISoundResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SoundResponseType) as ISoundResponseType;
end;

class function CoStoredValueDataType.Create: IStoredValueDataType;
begin
	Result := CreateComObject(CLASS_StoredValueDataType) as IStoredValueDataType;
end;

class function CoStoredValueDataType.CreateRemote(const MachineName: string): IStoredValueDataType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_StoredValueDataType) as IStoredValueDataType;
end;

class function CoStoredValueRequestType.Create: IStoredValueRequestType;
begin
	Result := CreateComObject(CLASS_StoredValueRequestType) as IStoredValueRequestType;
end;

class function CoStoredValueRequestType.CreateRemote(const MachineName: string): IStoredValueRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_StoredValueRequestType) as IStoredValueRequestType;
end;

class function CoTransmitRequestType.Create: ITransmitRequestType;
begin
	Result := CreateComObject(CLASS_TransmitRequestType) as ITransmitRequestType;
end;

class function CoTransmitRequestType.CreateRemote(const MachineName: string): ITransmitRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_TransmitRequestType) as ITransmitRequestType;
end;

class function CoTransmitResponseType.Create: ITransmitResponseType;
begin
	Result := CreateComObject(CLASS_TransmitResponseType) as ITransmitResponseType;
end;

class function CoTransmitResponseType.CreateRemote(const MachineName: string): ITransmitResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_TransmitResponseType) as ITransmitResponseType;
end;

class function CoTransactionStatusRequestType.Create: ITransactionStatusRequestType;
begin
	Result := CreateComObject(CLASS_TransactionStatusRequestType) as ITransactionStatusRequestType;
end;

class function CoTransactionStatusRequestType.CreateRemote(const MachineName: string): ITransactionStatusRequestType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_TransactionStatusRequestType) as ITransactionStatusRequestType;
end;

class function CoTransactionStatusResponseType.Create: ITransactionStatusResponseType;
begin
	Result := CreateComObject(CLASS_TransactionStatusResponseType) as ITransactionStatusResponseType;
end;

class function CoTransactionStatusResponseType.CreateRemote(const MachineName: string): ITransactionStatusResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_TransactionStatusResponseType) as ITransactionStatusResponseType;
end;

class function CoSaleToPOIRequest.Create: ISaleToPOIRequest;
begin
	Result := CreateComObject(CLASS_SaleToPOIRequest) as ISaleToPOIRequest;
end;

class function CoSaleToPOIRequest.CreateRemote(const MachineName: string): ISaleToPOIRequest;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SaleToPOIRequest) as ISaleToPOIRequest;
end;

class function CoSaleToPOIResponse.Create: ISaleToPOIResponse;
begin
	Result := CreateComObject(CLASS_SaleToPOIResponse) as ISaleToPOIResponse;
end;

class function CoSaleToPOIResponse.CreateRemote(const MachineName: string): ISaleToPOIResponse;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_SaleToPOIResponse) as ISaleToPOIResponse;
end;

class function CoIssuerType.Create: IIssuerType;
begin
	Result := CreateComObject(CLASS_IssuerType) as IIssuerType;
end;

class function CoIssuerType.CreateRemote(const MachineName: string): IIssuerType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_IssuerType) as IIssuerType;
end;

class function CoNexoActivity.Create: INexoActivity;
begin
	Result := CreateComObject(CLASS_NexoActivity) as INexoActivity;
end;

class function CoNexoActivity.CreateRemote(const MachineName: string): INexoActivity;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoActivity) as INexoActivity;
end;

class function CoNexoDictionaryOfMessages.Create: IEnumerable;
begin
	Result := CreateComObject(CLASS_NexoDictionaryOfMessages) as IEnumerable;
end;

class function CoNexoDictionaryOfMessages.CreateRemote(const MachineName: string): IEnumerable;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDictionaryOfMessages) as IEnumerable;
end;

class function CoNexoListOfEndPoints.Create: IEnumerable;
begin
	Result := CreateComObject(CLASS_NexoListOfEndPoints) as IEnumerable;
end;

class function CoNexoListOfEndPoints.CreateRemote(const MachineName: string): IEnumerable;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoListOfEndPoints) as IEnumerable;
end;

class function CoNexoDictionaryOfEndPoints.Create: IEnumerable;
begin
	Result := CreateComObject(CLASS_NexoDictionaryOfEndPoints) as IEnumerable;
end;

class function CoNexoDictionaryOfEndPoints.CreateRemote(const MachineName: string): IEnumerable;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDictionaryOfEndPoints) as IEnumerable;
end;

class function CoNexoListOfSessions.Create: IEnumerable;
begin
	Result := CreateComObject(CLASS_NexoListOfSessions) as IEnumerable;
end;

class function CoNexoListOfSessions.CreateRemote(const MachineName: string): IEnumerable;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoListOfSessions) as IEnumerable;
end;

class function CoNexoDictionaryOfSessions.Create: IEnumerable;
begin
	Result := CreateComObject(CLASS_NexoDictionaryOfSessions) as IEnumerable;
end;

class function CoNexoDictionaryOfSessions.CreateRemote(const MachineName: string): IEnumerable;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDictionaryOfSessions) as IEnumerable;
end;

class function CoNexoListOfNexoKeys.Create: IEnumerable;
begin
	Result := CreateComObject(CLASS_NexoListOfNexoKeys) as IEnumerable;
end;

class function CoNexoListOfNexoKeys.CreateRemote(const MachineName: string): IEnumerable;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoListOfNexoKeys) as IEnumerable;
end;

class function CoNexoDictionaryOfNexoKeys.Create: IEnumerable;
begin
	Result := CreateComObject(CLASS_NexoDictionaryOfNexoKeys) as IEnumerable;
end;

class function CoNexoDictionaryOfNexoKeys.CreateRemote(const MachineName: string): IEnumerable;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDictionaryOfNexoKeys) as IEnumerable;
end;

class function CoNexoListOfAnyMessages.Create: IEnumerable;
begin
	Result := CreateComObject(CLASS_NexoListOfAnyMessages) as IEnumerable;
end;

class function CoNexoListOfAnyMessages.CreateRemote(const MachineName: string): IEnumerable;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoListOfAnyMessages) as IEnumerable;
end;

class function CoNexoDictionaryOfAnyMessages.Create: IEnumerable;
begin
	Result := CreateComObject(CLASS_NexoDictionaryOfAnyMessages) as IEnumerable;
end;

class function CoNexoDictionaryOfAnyMessages.CreateRemote(const MachineName: string): IEnumerable;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDictionaryOfAnyMessages) as IEnumerable;
end;

class function CoNexoAcceptedCommands.Create: IEnumerable;
begin
	Result := CreateComObject(CLASS_NexoAcceptedCommands) as IEnumerable;
end;

class function CoNexoAcceptedCommands.CreateRemote(const MachineName: string): IEnumerable;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoAcceptedCommands) as IEnumerable;
end;

class function CoNexoItem.Create: INexoItem;
begin
	Result := CreateComObject(CLASS_NexoItem) as INexoItem;
end;

class function CoNexoItem.CreateRemote(const MachineName: string): INexoItem;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoItem) as INexoItem;
end;

class function CoNexoBalanceInquiry.Create: INexoBalanceInquiry;
begin
	Result := CreateComObject(CLASS_NexoBalanceInquiry) as INexoBalanceInquiry;
end;

class function CoNexoBalanceInquiry.CreateRemote(const MachineName: string): INexoBalanceInquiry;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoBalanceInquiry) as INexoBalanceInquiry;
end;

class function CoNexoBatch.Create: INexoBatch;
begin
	Result := CreateComObject(CLASS_NexoBatch) as INexoBatch;
end;

class function CoNexoBatch.CreateRemote(const MachineName: string): INexoBatch;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoBatch) as INexoBatch;
end;

class function CoNexoCardAcquisition.Create: INexoCardAcquisition;
begin
	Result := CreateComObject(CLASS_NexoCardAcquisition) as INexoCardAcquisition;
end;

class function CoNexoCardAcquisition.CreateRemote(const MachineName: string): INexoCardAcquisition;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoCardAcquisition) as INexoCardAcquisition;
end;

class function CoNexoCardReaderInit.Create: INexoCardReaderInit;
begin
	Result := CreateComObject(CLASS_NexoCardReaderInit) as INexoCardReaderInit;
end;

class function CoNexoCardReaderInit.CreateRemote(const MachineName: string): INexoCardReaderInit;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoCardReaderInit) as INexoCardReaderInit;
end;

class function CoNexoCardReaderAPDU.Create: INexoCardReaderAPDU;
begin
	Result := CreateComObject(CLASS_NexoCardReaderAPDU) as INexoCardReaderAPDU;
end;

class function CoNexoCardReaderAPDU.CreateRemote(const MachineName: string): INexoCardReaderAPDU;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoCardReaderAPDU) as INexoCardReaderAPDU;
end;

class function CoNexoCardReaderPowerOFF.Create: INexoCardReaderPowerOFF;
begin
	Result := CreateComObject(CLASS_NexoCardReaderPowerOFF) as INexoCardReaderPowerOFF;
end;

class function CoNexoCardReaderPowerOFF.CreateRemote(const MachineName: string): INexoCardReaderPowerOFF;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoCardReaderPowerOFF) as INexoCardReaderPowerOFF;
end;

class function CoNexoDeviceDisplay.Create: INexoDeviceDisplay;
begin
	Result := CreateComObject(CLASS_NexoDeviceDisplay) as INexoDeviceDisplay;
end;

class function CoNexoDeviceDisplay.CreateRemote(const MachineName: string): INexoDeviceDisplay;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDeviceDisplay) as INexoDeviceDisplay;
end;

class function CoNexoDeviceInputUpdate.Create: INexoDeviceInputUpdate;
begin
	Result := CreateComObject(CLASS_NexoDeviceInputUpdate) as INexoDeviceInputUpdate;
end;

class function CoNexoDeviceInputUpdate.CreateRemote(const MachineName: string): INexoDeviceInputUpdate;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDeviceInputUpdate) as INexoDeviceInputUpdate;
end;

class function CoNexoDeviceSound.Create: INexoDeviceSound;
begin
	Result := CreateComObject(CLASS_NexoDeviceSound) as INexoDeviceSound;
end;

class function CoNexoDeviceSound.CreateRemote(const MachineName: string): INexoDeviceSound;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDeviceSound) as INexoDeviceSound;
end;

class function CoNexoEnableService.Create: INexoEnableService;
begin
	Result := CreateComObject(CLASS_NexoEnableService) as INexoEnableService;
end;

class function CoNexoEnableService.CreateRemote(const MachineName: string): INexoEnableService;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoEnableService) as INexoEnableService;
end;

class function CoNexoGetTotals.Create: INexoGetTotals;
begin
	Result := CreateComObject(CLASS_NexoGetTotals) as INexoGetTotals;
end;

class function CoNexoGetTotals.CreateRemote(const MachineName: string): INexoGetTotals;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoGetTotals) as INexoGetTotals;
end;

class function CoNexoLoyalty.Create: INexoLoyalty;
begin
	Result := CreateComObject(CLASS_NexoLoyalty) as INexoLoyalty;
end;

class function CoNexoLoyalty.CreateRemote(const MachineName: string): INexoLoyalty;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoLoyalty) as INexoLoyalty;
end;

class function CoNexoPayment.Create: INexoPayment;
begin
	Result := CreateComObject(CLASS_NexoPayment) as INexoPayment;
end;

class function CoNexoPayment.CreateRemote(const MachineName: string): INexoPayment;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoPayment) as INexoPayment;
end;

class function CoNexoPIN.Create: INexoPIN;
begin
	Result := CreateComObject(CLASS_NexoPIN) as INexoPIN;
end;

class function CoNexoPIN.CreateRemote(const MachineName: string): INexoPIN;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoPIN) as INexoPIN;
end;

class function CoNexoReconciliation.Create: INexoReconciliation;
begin
	Result := CreateComObject(CLASS_NexoReconciliation) as INexoReconciliation;
end;

class function CoNexoReconciliation.CreateRemote(const MachineName: string): INexoReconciliation;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoReconciliation) as INexoReconciliation;
end;

class function CoNexoStoredValue.Create: INexoStoredValue;
begin
	Result := CreateComObject(CLASS_NexoStoredValue) as INexoStoredValue;
end;

class function CoNexoStoredValue.CreateRemote(const MachineName: string): INexoStoredValue;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoStoredValue) as INexoStoredValue;
end;

class function CoNexoTransmit.Create: INexoTransmit;
begin
	Result := CreateComObject(CLASS_NexoTransmit) as INexoTransmit;
end;

class function CoNexoTransmit.CreateRemote(const MachineName: string): INexoTransmit;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoTransmit) as INexoTransmit;
end;

class function CoNexoAbort.Create: INexoAbort;
begin
	Result := CreateComObject(CLASS_NexoAbort) as INexoAbort;
end;

class function CoNexoAbort.CreateRemote(const MachineName: string): INexoAbort;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoAbort) as INexoAbort;
end;

class function CoNexoDiagnosis.Create: INexoDiagnosis;
begin
	Result := CreateComObject(CLASS_NexoDiagnosis) as INexoDiagnosis;
end;

class function CoNexoDiagnosis.CreateRemote(const MachineName: string): INexoDiagnosis;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDiagnosis) as INexoDiagnosis;
end;

class function CoNexoEvent.Create: INexoEvent;
begin
	Result := CreateComObject(CLASS_NexoEvent) as INexoEvent;
end;

class function CoNexoEvent.CreateRemote(const MachineName: string): INexoEvent;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoEvent) as INexoEvent;
end;

class function CoNexoTransactionStatus.Create: INexoTransactionStatus;
begin
	Result := CreateComObject(CLASS_NexoTransactionStatus) as INexoTransactionStatus;
end;

class function CoNexoTransactionStatus.CreateRemote(const MachineName: string): INexoTransactionStatus;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoTransactionStatus) as INexoTransactionStatus;
end;

class function CoNexoResponseType.Create: INexoResponseType;
begin
	Result := CreateComObject(CLASS_NexoResponseType) as INexoResponseType;
end;

class function CoNexoResponseType.CreateRemote(const MachineName: string): INexoResponseType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoResponseType) as INexoResponseType;
end;

class function CoNexoDeviceInput.Create: INexoDeviceInput;
begin
	Result := CreateComObject(CLASS_NexoDeviceInput) as INexoDeviceInput;
end;

class function CoNexoDeviceInput.CreateRemote(const MachineName: string): INexoDeviceInput;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDeviceInput) as INexoDeviceInput;
end;

class function CoNexoDevicePrint.Create: INexoDevicePrint;
begin
	Result := CreateComObject(CLASS_NexoDevicePrint) as INexoDevicePrint;
end;

class function CoNexoDevicePrint.CreateRemote(const MachineName: string): INexoDevicePrint;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDevicePrint) as INexoDevicePrint;
end;

class function CoNexoLogin.Create: INexoLogin;
begin
	Result := CreateComObject(CLASS_NexoLogin) as INexoLogin;
end;

class function CoNexoLogin.CreateRemote(const MachineName: string): INexoLogin;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoLogin) as INexoLogin;
end;

class function CoNexoLogout.Create: INexoLogout;
begin
	Result := CreateComObject(CLASS_NexoLogout) as INexoLogout;
end;

class function CoNexoLogout.CreateRemote(const MachineName: string): INexoLogout;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoLogout) as INexoLogout;
end;

class function CoNexoAdmin.Create: INexoAdmin;
begin
	Result := CreateComObject(CLASS_NexoAdmin) as INexoAdmin;
end;

class function CoNexoAdmin.CreateRemote(const MachineName: string): INexoAdmin;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoAdmin) as INexoAdmin;
end;

class function CoNexoObject.Create: INexoObject;
begin
	Result := CreateComObject(CLASS_NexoObject) as INexoObject;
end;

class function CoNexoObject.CreateRemote(const MachineName: string): INexoObject;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoObject) as INexoObject;
end;

class function CoNexoReversal.Create: INexoReversal;
begin
	Result := CreateComObject(CLASS_NexoReversal) as INexoReversal;
end;

class function CoNexoReversal.CreateRemote(const MachineName: string): INexoReversal;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoReversal) as INexoReversal;
end;

class function CoNexoObjectToProcess.Create: INexoObjectToProcess;
begin
	Result := CreateComObject(CLASS_NexoObjectToProcess) as INexoObjectToProcess;
end;

class function CoNexoObjectToProcess.CreateRemote(const MachineName: string): INexoObjectToProcess;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoObjectToProcess) as INexoObjectToProcess;
end;

class function CoNexoTextString.Create: INexoTextString;
begin
	Result := CreateComObject(CLASS_NexoTextString) as INexoTextString;
end;

class function CoNexoTextString.CreateRemote(const MachineName: string): INexoTextString;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoTextString) as INexoTextString;
end;

class function CoNexoBoolean.Create: INexoBooleanType;
begin
	Result := CreateComObject(CLASS_NexoBoolean) as INexoBooleanType;
end;

class function CoNexoBoolean.CreateRemote(const MachineName: string): INexoBooleanType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoBoolean) as INexoBooleanType;
end;

class function CoNexoInteger.Create: INexoInteger;
begin
	Result := CreateComObject(CLASS_NexoInteger) as INexoInteger;
end;

class function CoNexoInteger.CreateRemote(const MachineName: string): INexoInteger;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoInteger) as INexoInteger;
end;

class function CoNexoDecimal.Create: INexoDecimal;
begin
	Result := CreateComObject(CLASS_NexoDecimal) as INexoDecimal;
end;

class function CoNexoDecimal.CreateRemote(const MachineName: string): INexoDecimal;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDecimal) as INexoDecimal;
end;

class function CoNexoSimpleAmount.Create: INexoDecimal;
begin
	Result := CreateComObject(CLASS_NexoSimpleAmount) as INexoDecimal;
end;

class function CoNexoSimpleAmount.CreateRemote(const MachineName: string): INexoDecimal;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoSimpleAmount) as INexoDecimal;
end;

class function CoNexoLabel.Create: INexoLabel;
begin
	Result := CreateComObject(CLASS_NexoLabel) as INexoLabel;
end;

class function CoNexoLabel.CreateRemote(const MachineName: string): INexoLabel;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoLabel) as INexoLabel;
end;

class function CoNexoEnumeration.Create: INexoEnumeration;
begin
	Result := CreateComObject(CLASS_NexoEnumeration) as INexoEnumeration;
end;

class function CoNexoEnumeration.CreateRemote(const MachineName: string): INexoEnumeration;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoEnumeration) as INexoEnumeration;
end;

class function CoNexoCluster.Create: INexoCluster;
begin
	Result := CreateComObject(CLASS_NexoCluster) as INexoCluster;
end;

class function CoNexoCluster.CreateRemote(const MachineName: string): INexoCluster;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoCluster) as INexoCluster;
end;

class function CoNexoLengthDrivenTextString.Create: INexoLengthDrivenTextString;
begin
	Result := CreateComObject(CLASS_NexoLengthDrivenTextString) as INexoLengthDrivenTextString;
end;

class function CoNexoLengthDrivenTextString.CreateRemote(const MachineName: string): INexoLengthDrivenTextString;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoLengthDrivenTextString) as INexoLengthDrivenTextString;
end;

class function CoNexoDigitString.Create: INexoDigitString;
begin
	Result := CreateComObject(CLASS_NexoDigitString) as INexoDigitString;
end;

class function CoNexoDigitString.CreateRemote(const MachineName: string): INexoDigitString;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDigitString) as INexoDigitString;
end;

class function CoNexoISOCurrency3A.Create: INexoISOData;
begin
	Result := CreateComObject(CLASS_NexoISOCurrency3A) as INexoISOData;
end;

class function CoNexoISOCurrency3A.CreateRemote(const MachineName: string): INexoISOData;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoISOCurrency3A) as INexoISOData;
end;

class function CoNexoISOCountry3A.Create: INexoISOData;
begin
	Result := CreateComObject(CLASS_NexoISOCountry3A) as INexoISOData;
end;

class function CoNexoISOCountry3A.CreateRemote(const MachineName: string): INexoISOData;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoISOCountry3A) as INexoISOData;
end;

class function CoNexoISOLanguage2A.Create: INexoISOData;
begin
	Result := CreateComObject(CLASS_NexoISOLanguage2A) as INexoISOData;
end;

class function CoNexoISOLanguage2A.CreateRemote(const MachineName: string): INexoISOData;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoISOLanguage2A) as INexoISOData;
end;

class function CoNexoISODateTime.Create: INexoISODateTime;
begin
	Result := CreateComObject(CLASS_NexoISODateTime) as INexoISODateTime;
end;

class function CoNexoISODateTime.CreateRemote(const MachineName: string): INexoISODateTime;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoISODateTime) as INexoISODateTime;
end;

class function CoNexoISODate.Create: INexoISODate;
begin
	Result := CreateComObject(CLASS_NexoISODate) as INexoISODate;
end;

class function CoNexoISODate.CreateRemote(const MachineName: string): INexoISODate;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoISODate) as INexoISODate;
end;

class function CoNexoByteSequence.Create: INexoNonStringType;
begin
	Result := CreateComObject(CLASS_NexoByteSequence) as INexoNonStringType;
end;

class function CoNexoByteSequence.CreateRemote(const MachineName: string): INexoNonStringType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoByteSequence) as INexoNonStringType;
end;

class function CoNexoCurrency.Create: INexoCurrency;
begin
	Result := CreateComObject(CLASS_NexoCurrency) as INexoCurrency;
end;

class function CoNexoCurrency.CreateRemote(const MachineName: string): INexoCurrency;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrency) as INexoCurrency;
end;

class function CoNexoCurrencyEUR.Create: INexoCurrency;
begin
	Result := CreateComObject(CLASS_NexoCurrencyEUR) as INexoCurrency;
end;

class function CoNexoCurrencyEUR.CreateRemote(const MachineName: string): INexoCurrency;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrencyEUR) as INexoCurrency;
end;

class function CoNexoCurrencyUSD.Create: INexoCurrency;
begin
	Result := CreateComObject(CLASS_NexoCurrencyUSD) as INexoCurrency;
end;

class function CoNexoCurrencyUSD.CreateRemote(const MachineName: string): INexoCurrency;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrencyUSD) as INexoCurrency;
end;

class function CoNexoCurrencyGBP.Create: INexoCurrency;
begin
	Result := CreateComObject(CLASS_NexoCurrencyGBP) as INexoCurrency;
end;

class function CoNexoCurrencyGBP.CreateRemote(const MachineName: string): INexoCurrency;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrencyGBP) as INexoCurrency;
end;

class function CoNexoCurrencyCHF.Create: INexoCurrency;
begin
	Result := CreateComObject(CLASS_NexoCurrencyCHF) as INexoCurrency;
end;

class function CoNexoCurrencyCHF.CreateRemote(const MachineName: string): INexoCurrency;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrencyCHF) as INexoCurrency;
end;

class function CoNexoSupportedProtocolVersions.Create: IEnumerable;
begin
	Result := CreateComObject(CLASS_NexoSupportedProtocolVersions) as IEnumerable;
end;

class function CoNexoSupportedProtocolVersions.CreateRemote(const MachineName: string): IEnumerable;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoSupportedProtocolVersions) as IEnumerable;
end;

class function CoNexoRetailerServerActivity.Create: INexoRetailerServerActivity;
begin
	Result := CreateComObject(CLASS_NexoRetailerServerActivity) as INexoRetailerServerActivity;
end;

class function CoNexoRetailerServerActivity.CreateRemote(const MachineName: string): INexoRetailerServerActivity;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerActivity) as INexoRetailerServerActivity;
end;

class function CoNexoRetailerServerDatabaseSettings.Create: INexoRetailerServerDatabaseSettings;
begin
	Result := CreateComObject(CLASS_NexoRetailerServerDatabaseSettings) as INexoRetailerServerDatabaseSettings;
end;

class function CoNexoRetailerServerDatabaseSettings.CreateRemote(const MachineName: string): INexoRetailerServerDatabaseSettings;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerDatabaseSettings) as INexoRetailerServerDatabaseSettings;
end;

class function CoNexoRetailerServerSettings.Create: INexoRetailerServerSettings;
begin
	Result := CreateComObject(CLASS_NexoRetailerServerSettings) as INexoRetailerServerSettings;
end;

class function CoNexoRetailerServerSettings.CreateRemote(const MachineName: string): INexoRetailerServerSettings;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerSettings) as INexoRetailerServerSettings;
end;

class function CoNexoRetailerClientHandle.Create: INexoRetailerClientHandle;
begin
	Result := CreateComObject(CLASS_NexoRetailerClientHandle) as INexoRetailerClientHandle;
end;

class function CoNexoRetailerClientHandle.CreateRemote(const MachineName: string): INexoRetailerClientHandle;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerClientHandle) as INexoRetailerClientHandle;
end;

class function CoNexoRetailerClient.Create: INexoRetailerClient;
begin
	Result := CreateComObject(CLASS_NexoRetailerClient) as INexoRetailerClient;
end;

class function CoNexoRetailerClient.CreateRemote(const MachineName: string): INexoRetailerClient;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerClient) as INexoRetailerClient;
end;

class function CoNexoRetailerClientSettings.Create: INexoRetailerClientSettings;
begin
	Result := CreateComObject(CLASS_NexoRetailerClientSettings) as INexoRetailerClientSettings;
end;

class function CoNexoRetailerClientSettings.CreateRemote(const MachineName: string): INexoRetailerClientSettings;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerClientSettings) as INexoRetailerClientSettings;
end;

class function CoNexoRetailerClientConnectionSettings.Create: INexoRetailerClientConnectionSettings;
begin
	Result := CreateComObject(CLASS_NexoRetailerClientConnectionSettings) as INexoRetailerClientConnectionSettings;
end;

class function CoNexoRetailerClientConnectionSettings.CreateRemote(const MachineName: string): INexoRetailerClientConnectionSettings;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerClientConnectionSettings) as INexoRetailerClientConnectionSettings;
end;

class function CoNexoRetailerClientActivity.Create: INexoRetailerClientActivity;
begin
	Result := CreateComObject(CLASS_NexoRetailerClientActivity) as INexoRetailerClientActivity;
end;

class function CoNexoRetailerClientActivity.CreateRemote(const MachineName: string): INexoRetailerClientActivity;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerClientActivity) as INexoRetailerClientActivity;
end;

class function CoNexoMessage.Create: _NexoMessage;
begin
	Result := CreateComObject(CLASS_NexoMessage) as _NexoMessage;
end;

class function CoNexoMessage.CreateRemote(const MachineName: string): _NexoMessage;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoMessage) as _NexoMessage;
end;

class function CoNexoPartner.Create: _NexoPartner;
begin
	Result := CreateComObject(CLASS_NexoPartner) as _NexoPartner;
end;

class function CoNexoPartner.CreateRemote(const MachineName: string): _NexoPartner;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoPartner) as _NexoPartner;
end;

class function CoNexoEndPoint.Create: _NexoEndPoint;
begin
	Result := CreateComObject(CLASS_NexoEndPoint) as _NexoEndPoint;
end;

class function CoNexoEndPoint.CreateRemote(const MachineName: string): _NexoEndPoint;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoEndPoint) as _NexoEndPoint;
end;

class function CoNexoSession.Create: _NexoSession;
begin
	Result := CreateComObject(CLASS_NexoSession) as _NexoSession;
end;

class function CoNexoSession.CreateRemote(const MachineName: string): _NexoSession;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoSession) as _NexoSession;
end;

class function CoNexoDelegates.Create: _NexoDelegates;
begin
	Result := CreateComObject(CLASS_NexoDelegates) as _NexoDelegates;
end;

class function CoNexoDelegates.CreateRemote(const MachineName: string): _NexoDelegates;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDelegates) as _NexoDelegates;
end;

class function CoNexoKey.Create: _NexoKey;
begin
	Result := CreateComObject(CLASS_NexoKey) as _NexoKey;
end;

class function CoNexoKey.CreateRemote(const MachineName: string): _NexoKey;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoKey) as _NexoKey;
end;

class function CoNexoMessageType.Create: _NexoMessageType;
begin
	Result := CreateComObject(CLASS_NexoMessageType) as _NexoMessageType;
end;

class function CoNexoMessageType.CreateRemote(const MachineName: string): _NexoMessageType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoMessageType) as _NexoMessageType;
end;

class function CoNexoMessageClass.Create: _NexoMessageClass;
begin
	Result := CreateComObject(CLASS_NexoMessageClass) as _NexoMessageClass;
end;

class function CoNexoMessageClass.CreateRemote(const MachineName: string): _NexoMessageClass;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoMessageClass) as _NexoMessageClass;
end;

class function CoNexoMessageCategory.Create: _NexoMessageCategory;
begin
	Result := CreateComObject(CLASS_NexoMessageCategory) as _NexoMessageCategory;
end;

class function CoNexoMessageCategory.CreateRemote(const MachineName: string): _NexoMessageCategory;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoMessageCategory) as _NexoMessageCategory;
end;

class function CoNexoTerminalEnvironment.Create: _NexoTerminalEnvironment;
begin
	Result := CreateComObject(CLASS_NexoTerminalEnvironment) as _NexoTerminalEnvironment;
end;

class function CoNexoTerminalEnvironment.CreateRemote(const MachineName: string): _NexoTerminalEnvironment;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoTerminalEnvironment) as _NexoTerminalEnvironment;
end;

class function CoNexoSaleCapabilities.Create: _NexoSaleCapabilities;
begin
	Result := CreateComObject(CLASS_NexoSaleCapabilities) as _NexoSaleCapabilities;
end;

class function CoNexoSaleCapabilities.CreateRemote(const MachineName: string): _NexoSaleCapabilities;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoSaleCapabilities) as _NexoSaleCapabilities;
end;

class function CoNexoProtocolVersion.Create: _NexoProtocolVersion;
begin
	Result := CreateComObject(CLASS_NexoProtocolVersion) as _NexoProtocolVersion;
end;

class function CoNexoProtocolVersion.CreateRemote(const MachineName: string): _NexoProtocolVersion;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoProtocolVersion) as _NexoProtocolVersion;
end;

class function CoNexoID.Create: _NexoID;
begin
	Result := CreateComObject(CLASS_NexoID) as _NexoID;
end;

class function CoNexoID.CreateRemote(const MachineName: string): _NexoID;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoID) as _NexoID;
end;

class function CoNexoServiceID.Create: _NexoServiceID;
begin
	Result := CreateComObject(CLASS_NexoServiceID) as _NexoServiceID;
end;

class function CoNexoServiceID.CreateRemote(const MachineName: string): _NexoServiceID;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoServiceID) as _NexoServiceID;
end;

class function CoNexoDeviceID.Create: _NexoDeviceID;
begin
	Result := CreateComObject(CLASS_NexoDeviceID) as _NexoDeviceID;
end;

class function CoNexoDeviceID.CreateRemote(const MachineName: string): _NexoDeviceID;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDeviceID) as _NexoDeviceID;
end;

class function CoNexoPOIID.Create: _NexoPOIID;
begin
	Result := CreateComObject(CLASS_NexoPOIID) as _NexoPOIID;
end;

class function CoNexoPOIID.CreateRemote(const MachineName: string): _NexoPOIID;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoPOIID) as _NexoPOIID;
end;

class function CoNexoSaleID.Create: _NexoSaleID;
begin
	Result := CreateComObject(CLASS_NexoSaleID) as _NexoSaleID;
end;

class function CoNexoSaleID.CreateRemote(const MachineName: string): _NexoSaleID;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoSaleID) as _NexoSaleID;
end;

class function CoNexoOperatorLanguage.Create: _NexoOperatorLanguage;
begin
	Result := CreateComObject(CLASS_NexoOperatorLanguage) as _NexoOperatorLanguage;
end;

class function CoNexoOperatorLanguage.CreateRemote(const MachineName: string): _NexoOperatorLanguage;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoOperatorLanguage) as _NexoOperatorLanguage;
end;

class function CoNexoResult.Create: _NexoResult;
begin
	Result := CreateComObject(CLASS_NexoResult) as _NexoResult;
end;

class function CoNexoResult.CreateRemote(const MachineName: string): _NexoResult;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoResult) as _NexoResult;
end;

class function CoNexoErrorCondition.Create: _NexoErrorCondition;
begin
	Result := CreateComObject(CLASS_NexoErrorCondition) as _NexoErrorCondition;
end;

class function CoNexoErrorCondition.CreateRemote(const MachineName: string): _NexoErrorCondition;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoErrorCondition) as _NexoErrorCondition;
end;

class function CoNexoAdditionalResponse.Create: _NexoAdditionalResponse;
begin
	Result := CreateComObject(CLASS_NexoAdditionalResponse) as _NexoAdditionalResponse;
end;

class function CoNexoAdditionalResponse.CreateRemote(const MachineName: string): _NexoAdditionalResponse;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoAdditionalResponse) as _NexoAdditionalResponse;
end;

class function CoNexoGlobalStatus.Create: _NexoGlobalStatus;
begin
	Result := CreateComObject(CLASS_NexoGlobalStatus) as _NexoGlobalStatus;
end;

class function CoNexoGlobalStatus.CreateRemote(const MachineName: string): _NexoGlobalStatus;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoGlobalStatus) as _NexoGlobalStatus;
end;

class function CoNexoCertificationCode.Create: _NexoCertificationCode;
begin
	Result := CreateComObject(CLASS_NexoCertificationCode) as _NexoCertificationCode;
end;

class function CoNexoCertificationCode.CreateRemote(const MachineName: string): _NexoCertificationCode;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoCertificationCode) as _NexoCertificationCode;
end;

class function CoNexoSoftwareVersion.Create: _NexoSoftwareVersion;
begin
	Result := CreateComObject(CLASS_NexoSoftwareVersion) as _NexoSoftwareVersion;
end;

class function CoNexoSoftwareVersion.CreateRemote(const MachineName: string): _NexoSoftwareVersion;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoSoftwareVersion) as _NexoSoftwareVersion;
end;

class function CoNexoApplicationName.Create: _NexoApplicationName;
begin
	Result := CreateComObject(CLASS_NexoApplicationName) as _NexoApplicationName;
end;

class function CoNexoApplicationName.CreateRemote(const MachineName: string): _NexoApplicationName;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoApplicationName) as _NexoApplicationName;
end;

class function CoNexoManufacturerID.Create: _NexoManufacturerID;
begin
	Result := CreateComObject(CLASS_NexoManufacturerID) as _NexoManufacturerID;
end;

class function CoNexoManufacturerID.CreateRemote(const MachineName: string): _NexoManufacturerID;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoManufacturerID) as _NexoManufacturerID;
end;

class function CoNexoPOISerialNumber.Create: _NexoPOISerialNumber;
begin
	Result := CreateComObject(CLASS_NexoPOISerialNumber) as _NexoPOISerialNumber;
end;

class function CoNexoPOISerialNumber.CreateRemote(const MachineName: string): _NexoPOISerialNumber;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoPOISerialNumber) as _NexoPOISerialNumber;
end;

class function CoNexoOperatorID.Create: _NexoOperatorID;
begin
	Result := CreateComObject(CLASS_NexoOperatorID) as _NexoOperatorID;
end;

class function CoNexoOperatorID.CreateRemote(const MachineName: string): _NexoOperatorID;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoOperatorID) as _NexoOperatorID;
end;

class function CoNexoDateTime.Create: _NexoDateTime;
begin
	Result := CreateComObject(CLASS_NexoDateTime) as _NexoDateTime;
end;

class function CoNexoDateTime.CreateRemote(const MachineName: string): _NexoDateTime;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoDateTime) as _NexoDateTime;
end;

class function CoNexoInputCommand.Create: _NexoInputCommand;
begin
	Result := CreateComObject(CLASS_NexoInputCommand) as _NexoInputCommand;
end;

class function CoNexoInputCommand.CreateRemote(const MachineName: string): _NexoInputCommand;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoInputCommand) as _NexoInputCommand;
end;

class function CoNexoEventToNotify.Create: _NexoEventToNotify;
begin
	Result := CreateComObject(CLASS_NexoEventToNotify) as _NexoEventToNotify;
end;

class function CoNexoEventToNotify.CreateRemote(const MachineName: string): _NexoEventToNotify;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoEventToNotify) as _NexoEventToNotify;
end;

class function CoNexoPaymentIntrumentType.Create: _NexoPaymentIntrumentType;
begin
	Result := CreateComObject(CLASS_NexoPaymentIntrumentType) as _NexoPaymentIntrumentType;
end;

class function CoNexoPaymentIntrumentType.CreateRemote(const MachineName: string): _NexoPaymentIntrumentType;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoPaymentIntrumentType) as _NexoPaymentIntrumentType;
end;

class function CoNexoVersion.Create: _NexoVersion;
begin
	Result := CreateComObject(CLASS_NexoVersion) as _NexoVersion;
end;

class function CoNexoVersion.CreateRemote(const MachineName: string): _NexoVersion;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoVersion) as _NexoVersion;
end;

class function CoNexoCurrentVersion.Create: _NexoCurrentVersion;
begin
	Result := CreateComObject(CLASS_NexoCurrentVersion) as _NexoCurrentVersion;
end;

class function CoNexoCurrentVersion.CreateRemote(const MachineName: string): _NexoCurrentVersion;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrentVersion) as _NexoCurrentVersion;
end;

class function CoNexoRetailerServerDatabaseConnection.Create: _NexoRetailerServerDatabaseConnection;
begin
	Result := CreateComObject(CLASS_NexoRetailerServerDatabaseConnection) as _NexoRetailerServerDatabaseConnection;
end;

class function CoNexoRetailerServerDatabaseConnection.CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseConnection;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerDatabaseConnection) as _NexoRetailerServerDatabaseConnection;
end;

class function CoNexoRetailerServerDatabaseEndPoint.Create: _NexoRetailerServerDatabaseEndPoint;
begin
	Result := CreateComObject(CLASS_NexoRetailerServerDatabaseEndPoint) as _NexoRetailerServerDatabaseEndPoint;
end;

class function CoNexoRetailerServerDatabaseEndPoint.CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseEndPoint;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerDatabaseEndPoint) as _NexoRetailerServerDatabaseEndPoint;
end;

class function CoNexoRetailerServerDatabaseSale.Create: _NexoRetailerServerDatabaseSale;
begin
	Result := CreateComObject(CLASS_NexoRetailerServerDatabaseSale) as _NexoRetailerServerDatabaseSale;
end;

class function CoNexoRetailerServerDatabaseSale.CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseSale;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerDatabaseSale) as _NexoRetailerServerDatabaseSale;
end;

class function CoNexoRetailerServerDatabaseMessage.Create: _NexoRetailerServerDatabaseMessage;
begin
	Result := CreateComObject(CLASS_NexoRetailerServerDatabaseMessage) as _NexoRetailerServerDatabaseMessage;
end;

class function CoNexoRetailerServerDatabaseMessage.CreateRemote(const MachineName: string): _NexoRetailerServerDatabaseMessage;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerDatabaseMessage) as _NexoRetailerServerDatabaseMessage;
end;

class function CoNexoRetailerServerDatabase.Create: _NexoRetailerServerDatabase;
begin
	Result := CreateComObject(CLASS_NexoRetailerServerDatabase) as _NexoRetailerServerDatabase;
end;

class function CoNexoRetailerServerDatabase.CreateRemote(const MachineName: string): _NexoRetailerServerDatabase;
begin
	Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerDatabase) as _NexoRetailerServerDatabase;
end;

end.
