unit PMS_NEXO_TLB;

// ************************************************************************ //
// AVERTISSEMENT
// -------
// Les types déclarés dans ce fichier ont été générés à partir de données lues
// depuis la bibliothèque de types. Si cette dernière (via une autre bibliothèque de types
// s'y référant) est explicitement ou indirectement ré-importée, ou la commande "Actualiser"
// de l'éditeur de bibliothèque de types est activée lors de la modification de la bibliothèque
// de types, le contenu de ce fichier sera régénéré et toutes les modifications
// manuellement apportées seront perdues.
// ************************************************************************ //

// $Rev: 52393 $
// Fichier généré le 21/10/2020 13:56:54 depuis la bibliothèque de types ci-dessous.

// ************************************************************************  //
// Biblio. types : C:\Users\philippe\Documents\Dev\NEXO\Release\PMS.NEXO.tlb (1)
// LIBID : {BA4AE91F-C039-44CB-AB66-CE57ECA46EB6}
// LCID : 0
// Fichier d'aide : 
// Chaîne d'aide : NEXO Retailer v3.0
// DepndLst : 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
//   (2) v2.4 mscorlib, (C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.tlb)
//   (3) v2.0 PMS_COMMON, (C:\Users\philippe\Documents\Dev\COMMON\Release\PMS.COMMON.tlb)
// Bibliothèque de types parent :
//   (0) v1.0 PMS_NEXOSALE, (C:\Users\philippe\Documents\Dev\NEXOSale\Debug\PMS.NEXOSALE.tlb)
// SYS_KIND: SYS_WIN32
// Errors:
//   Remarque : le symbole 'Type' a été renommé en 'type_'
//   Remarque : membre 'Class' de 'INexoItem' changé en 'Class_'
//   Remarque : membre 'Label' de 'INexoLabel' changé en 'Label_'
//   Remarque : paramètre 'Label' dans INexoCluster.SetLabel changé en 'Label_'
//   Remarque : paramètre 'Label' dans INexoCluster.UnsetLabel changé en 'Label_'
// ************************************************************************ //
{$TYPEDADDRESS OFF} // L'unité doit être compilée sans pointeur à type contrôlé.  
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}

interface

uses Winapi.Windows, mscorlib_TLB, PMS_COMMON_TLB, System.Classes, System.Variants, System.Win.StdVCL, Vcl.Graphics, Vcl.OleServer, 
Winapi.ActiveX;
  
// *********************************************************************//
// GUIDS déclarés dans la bibliothèque de types. Préfixes utilisés:        
//   Bibliothèques de types : LIBID_xxxx                                      
//   CoClasses              : CLASS_xxxx                                      
//   Interfaces DISP        : DIID_xxxx                                       
//   Interfaces Non-DISP    : IID_xxxx                                        
// *********************************************************************//
const
  // Versions mineure et majeure de la bibliothèque de types
  PMS_NEXOMajorVersion = 2;
  PMS_NEXOMinorVersion = 0;

  LIBID_PMS_NEXO: TGUID = '{BA4AE91F-C039-44CB-AB66-CE57ECA46EB6}';

  IID_INexoActivity: TGUID = '{1ADB3E04-8743-492B-94C5-4F973C27B951}';
  CLASS_NexoActivity: TGUID = '{0010366D-C2CC-4685-A52A-9716D59740F3}';
  IID__NexoMessage: TGUID = '{7DA4FB59-22EF-399D-B3B4-1E0397E4CCF5}';
  CLASS_NexoDictionaryOfMessages: TGUID = '{AB24B470-F7B4-3720-955E-126FD5721382}';
  IID__NexoPartner: TGUID = '{59BB3895-65B2-3942-940E-6DD04810656E}';
  IID__NexoEndPoint: TGUID = '{5339D5FB-D6F3-3710-B640-21CEF51B9F46}';
  CLASS_NexoListOfEndPoints: TGUID = '{5BD544E9-B489-3675-85C4-50153D94D84A}';
  CLASS_NexoDictionaryOfEndPoints: TGUID = '{2766E5F1-7F34-3418-A197-EFA10AAD16CC}';
  IID__NexoSession: TGUID = '{22FDEE0C-B93F-3CF0-A2A2-BA85F2288CED}';
  CLASS_NexoListOfSessions: TGUID = '{6220F75D-632A-3A65-814F-C0307F9FEBA0}';
  CLASS_NexoDictionaryOfSessions: TGUID = '{D549E8D3-2084-3C69-BC35-148A98485C1B}';
  CLASS_NexoListOfNexoKeys: TGUID = '{7B279F4A-5FBC-3921-8D16-E166DFE0C4F5}';
  CLASS_NexoDictionaryOfNexoKeys: TGUID = '{DB371C46-C106-357C-B4AE-5A988A3DE568}';
  IID_INexoAnyMessage: TGUID = '{91849B50-192A-4811-8BFA-A506BD74E778}';
  CLASS_NexoListOfAnyMessages: TGUID = '{D1C330D2-6416-3CDA-86E4-9A25B1ECD9D0}';
  CLASS_NexoDictionaryOfAnyMessages: TGUID = '{8D1F13ED-F2D5-327C-AEFD-36C96BD50939}';
  IID__NexoDelegates: TGUID = '{9D53AE2A-5E06-352F-A630-F76256357105}';
  CLASS_NexoAcceptedCommands: TGUID = '{4349BA60-824D-371E-AE7B-3F7090982556}';
  IID_INexoItem: TGUID = '{B7773C1A-8091-4B2A-A54E-74E686E5F91E}';
  CLASS_NexoItem: TGUID = '{390237C2-5337-4EBE-8B1E-E395611FEC82}';
  IID__NexoKey: TGUID = '{89CFED27-307C-3ADA-BBD6-40800D474F0F}';
  IID_INexoAdmin: TGUID = '{9A3C60DD-2D50-4515-9762-4632AA45BBC5}';
  IID_INexoObject: TGUID = '{70469D2A-4EFD-4023-82BB-7F6D382A5D83}';
  IID_INexoBalanceInquiry: TGUID = '{CDC42997-48E2-4D4A-9DD4-4CEBCA16652B}';
  CLASS_NexoBalanceInquiry: TGUID = '{1696448C-1139-4D01-9BFA-65BAD9952ED9}';
  IID_INexoBatch: TGUID = '{0AB85F76-922F-46EF-8DCB-A050E7030921}';
  CLASS_NexoBatch: TGUID = '{EBBB6BA9-552F-40AC-92E2-7CB239988CF8}';
  IID_INexoCardAcquisition: TGUID = '{85FADEEB-5156-405B-87EE-54D9AE22E316}';
  CLASS_NexoCardAcquisition: TGUID = '{041378C7-7530-40FF-865C-5B2F92661375}';
  IID_INexoCardReaderInit: TGUID = '{424AC59E-6B02-46F1-97AD-F4DAF1BEBDCE}';
  CLASS_NexoCardReaderInit: TGUID = '{0A1903C6-2989-4D33-AE3E-82ABDACD894F}';
  IID_INexoCardReaderAPDU: TGUID = '{CB4E4768-D56A-4105-B780-004E97929361}';
  CLASS_NexoCardReaderAPDU: TGUID = '{18285838-CA0F-41E9-A69A-CF217A99A3E3}';
  IID_INexoCardReaderPowerOFF: TGUID = '{70C8C7A9-62C2-4729-929C-8163614D09DA}';
  CLASS_NexoCardReaderPowerOFF: TGUID = '{A1BE7839-E928-45FA-8CD5-60B90C5F306B}';
  IID_INexoDeviceDisplay: TGUID = '{F6DC1D06-11C7-4814-9326-E68C4A9EBF4E}';
  CLASS_NexoDeviceDisplay: TGUID = '{B96EFC99-00D2-4AFD-9622-05C2983AB9AD}';
  IID_INexoDeviceInputUpdate: TGUID = '{529FFD3D-658C-49C5-85A3-66799AAA5E34}';
  CLASS_NexoDeviceInputUpdate: TGUID = '{64462157-3AE0-441D-B7E9-71B2B8892A66}';
  IID_INexoDeviceSound: TGUID = '{A3534554-E05D-4A11-BB41-88DEC0B20EE4}';
  CLASS_NexoDeviceSound: TGUID = '{8A01F960-7FC2-49C6-B512-37C246A4512C}';
  IID_INexoEnableService: TGUID = '{459D4296-691D-48D6-84E5-F9069D5B85D6}';
  CLASS_NexoEnableService: TGUID = '{BD5687D5-EF40-47B1-B599-EEFB31BBF532}';
  IID_INexoGetTotals: TGUID = '{ED6FDAD1-7D79-4DA6-8F4F-35BCAFADF772}';
  CLASS_NexoGetTotals: TGUID = '{6AC33EB7-F9DC-4BA9-968D-536CC95470AA}';
  IID_INexoLoyalty: TGUID = '{C69EE5BC-630A-4D1F-990B-0D0984E07F08}';
  CLASS_NexoLoyalty: TGUID = '{B1DB0498-3008-4E26-B04D-1833C36147A4}';
  IID_INexoPIN: TGUID = '{877BE257-F158-4A4F-9646-6080B193749B}';
  CLASS_NexoPIN: TGUID = '{E86AFFEC-3811-41BD-87D5-EBF9B85A4FD0}';
  IID_INexoReconciliation: TGUID = '{7ADA4C0C-EEAD-4B53-8089-A8B7491D1FB6}';
  CLASS_NexoReconciliation: TGUID = '{C09916A4-9B04-4331-BB35-C845E17E6FD0}';
  IID_INexoStoredValue: TGUID = '{2F3C26FD-174D-45BC-86A4-981B953C6611}';
  CLASS_NexoStoredValue: TGUID = '{44CCE01A-FB6C-4C1F-912B-D46DED85B1BE}';
  IID_INexoTransmit: TGUID = '{8314ADA0-DD56-497D-9FFA-02A86CB305CA}';
  CLASS_NexoTransmit: TGUID = '{EF2554E1-71FD-45F0-9B44-40FBD13BA213}';
  IID_INexoAbort: TGUID = '{D71CE22F-0AA1-4792-9857-864A5E29A2BE}';
  CLASS_NexoAbort: TGUID = '{01101E72-06B5-47BA-B305-611BEEAF3AE4}';
  IID_INexoDiagnosis: TGUID = '{E8C62FFB-C292-4592-A538-8283E5807DA1}';
  CLASS_NexoDiagnosis: TGUID = '{5223C33A-11DD-4FE4-BA89-22A83A6390B7}';
  IID_INexoEvent: TGUID = '{389CD3D9-3950-4A61-B90E-BC9EB85E0008}';
  CLASS_NexoEvent: TGUID = '{C30F6D21-9370-494D-B7D8-8BE6A945AA07}';
  IID_INexoTransactionStatus: TGUID = '{18C58418-DF2D-4CF4-B394-7C055526C73A}';
  CLASS_NexoTransactionStatus: TGUID = '{A788EBE5-CF20-48BB-9E1E-2D9FF23BCE8A}';
  IID_INexoDeviceInput: TGUID = '{2CD13AE4-4DF6-47EC-8487-0BBB017D37ED}';
  CLASS_NexoDeviceInput: TGUID = '{AD272143-7CBD-4C8B-A766-EEF8B28197C8}';
  IID_INexoDevicePrint: TGUID = '{F9BC46A7-AA77-4B4B-81CC-1348E2E4FABC}';
  CLASS_NexoDevicePrint: TGUID = '{C07B9790-C8C5-47C2-813C-C218F5545EF0}';
  IID_INexoLogin: TGUID = '{4B77D218-D00F-4C13-9652-F0E9E11F3BF3}';
  CLASS_NexoLogin: TGUID = '{FC9002AC-12F5-4611-8DBF-8ADAFFA39236}';
  IID_INexoLogout: TGUID = '{37A4DF49-8D4A-43E6-BAAB-FDFD7C550AB9}';
  CLASS_NexoLogout: TGUID = '{A1FC1414-000B-4684-94A3-8EE45CD223B1}';
  IID_INexoFinancial: TGUID = '{D649B63E-68DC-41F0-8531-09C6A98DAC6E}';
  CLASS_NexoPayment: TGUID = '{7EA430E6-824D-4DAC-B512-FA6D76D36FFD}';
  CLASS_NexoRefund: TGUID = '{5C61E8A0-651D-4F96-94BB-942BF557FD10}';
  CLASS_NexoAdmin: TGUID = '{E663E917-6B46-4C38-9DDB-30AF8E955CF2}';
  CLASS_NexoObject: TGUID = '{667D198F-874E-457B-9641-C43933F336DB}';
  IID_INexoObjectToProcess: TGUID = '{4DA003CE-49BF-4831-83EB-3DAEA2072370}';
  CLASS_NexoObjectToProcess: TGUID = '{195F55CA-64B2-4E61-A1DB-9964557DE450}';
  CLASS_QueueOfNexoObjectToProcess: TGUID = '{97941C37-D305-3B68-BBA6-4D02A28FBD0B}';
  CLASS_StackOfNexoObjectToProcess: TGUID = '{A3364617-A219-3803-B019-5A95679ADEFD}';
  IID_INexoReversal: TGUID = '{DBC11F2F-A231-47BB-9CD1-0B36872B6BB4}';
  CLASS_NexoReversal: TGUID = '{9DF21BBA-CF43-497C-B0AD-54647E3D8918}';
  IID__NexoMessageHeader: TGUID = '{172593CA-5D51-363E-9B9A-E1CBC849051E}';
  IID_INexoTextString: TGUID = '{81DBF2A7-F56C-4316-A7DA-84A69DD10193}';
  CLASS_NexoTextString: TGUID = '{8F565B94-FC31-4938-BB9B-3628D74AA348}';
  IID_INexoBooleanType: TGUID = '{54927BBD-044C-4FF6-90B9-9EF4C97DF13E}';
  CLASS_NexoBoolean: TGUID = '{C9E4530A-BCB7-437D-B814-D3BF11026D07}';
  IID_INexoInteger: TGUID = '{D54E0EEC-3021-430A-958A-0CE8CBAF28CF}';
  CLASS_NexoInteger: TGUID = '{95B80346-5CA9-4F43-98E1-58B4A7C02736}';
  IID_INexoDecimal: TGUID = '{D6A6402E-7675-4B58-A192-1E5831A63308}';
  CLASS_NexoDecimal: TGUID = '{6B3992EA-EA2A-40CE-8D32-759442C3733F}';
  CLASS_NexoSimpleAmount: TGUID = '{7140D640-7DEF-48A8-8C51-F348849BB383}';
  IID_INexoLabel: TGUID = '{B1212D60-971B-4FB3-BE41-EC87DD743EFB}';
  CLASS_NexoLabel: TGUID = '{313ED1FA-F6E9-402D-803C-F6C2A97AEAB2}';
  IID_INexoEnumeration: TGUID = '{44DD3DF5-C824-4E2D-8727-9F1856EB8019}';
  CLASS_NexoEnumeration: TGUID = '{DCE824A5-EF4D-4DDF-9F28-ECC997E912B8}';
  IID_INexoCluster: TGUID = '{CF6E62CA-537D-4545-A336-673D288B6D58}';
  CLASS_NexoCluster: TGUID = '{8E5E348A-9E41-44B6-AA24-366B1E0BFAEF}';
  IID_INexoLengthDrivenTextString: TGUID = '{380807B4-5276-443B-A8E8-0D88A51199E8}';
  CLASS_NexoLengthDrivenTextString: TGUID = '{D9CF8D0F-FEBB-4FE8-A775-91C0BB6DBF3D}';
  IID_INexoDigitString: TGUID = '{4DEDF6AC-8EF9-41EC-92CD-51A2E7E5FC6F}';
  CLASS_NexoDigitString: TGUID = '{09364674-1CA8-4448-8099-35C44F32305E}';
  IID_INexoISOData: TGUID = '{342FE081-D5F0-475B-AEC6-6374979BBDC7}';
  CLASS_NexoISOCurrency3A: TGUID = '{D778424B-0BE8-4907-9998-FFBEE38A9D9D}';
  CLASS_NexoISOCountry3A: TGUID = '{969B3F3F-C827-4244-83AE-0CA5A56CB4DA}';
  CLASS_NexoISOLanguage2A: TGUID = '{6D548B98-DCA5-42B3-8D67-E2796A47AB40}';
  IID_INexoISODateTime: TGUID = '{6EA56916-0B9F-48D1-B726-1F26C1897724}';
  CLASS_NexoISODateTime: TGUID = '{91C85C90-6D2B-4762-88BE-B96A9C275DE9}';
  IID_INexoISODate: TGUID = '{880DF188-0670-419D-8E0D-2170D0D537C9}';
  CLASS_NexoISODate: TGUID = '{29E0D16F-F912-4176-BAFB-41A5444F4B10}';
  IID_INexoNonStringType: TGUID = '{C7CAA85A-2A0D-49A7-925A-48A122D76C30}';
  CLASS_NexoByteSequence: TGUID = '{5E5B89AB-BC0A-405D-8DDC-F35C4E92D9A6}';
  IID_INexoCurrency: TGUID = '{5F12D07E-EA73-4E87-98C6-DDD3A38888C8}';
  CLASS_NexoCurrency: TGUID = '{DE4FC2B3-900F-4128-8330-8881A0C36275}';
  CLASS_NexoCurrencyEUR: TGUID = '{64799C07-C801-4276-BF3A-E6AB89A691B3}';
  CLASS_NexoCurrencyUSD: TGUID = '{29167784-C41B-47FF-B1EF-DD855D277C35}';
  CLASS_NexoCurrencyGBP: TGUID = '{03861903-A788-40EF-82A1-27B39C2D57E8}';
  CLASS_NexoCurrencyCHF: TGUID = '{DE5411DE-BB56-478C-94CD-32E7CD95EC97}';
  IID__NexoDefaultCurrency: TGUID = '{273F1D91-1066-310D-BED8-2C4988475461}';
  IID_INexoAmount: TGUID = '{5A214D20-F45B-4EB0-ACD4-1046EA315EF4}';
  CLASS_NexoCurrencyAmount: TGUID = '{D63D6791-C70C-4271-8348-774BC4FEA26D}';
  IID__NexoMessageType: TGUID = '{9B63F343-CE34-348E-ADBB-ADF5FDC28172}';
  IID__NexoMessageClass: TGUID = '{5014AC46-3B6B-35D6-9EAB-308C612BE1BD}';
  IID__NexoMessageCategory: TGUID = '{56E803F5-FC60-381C-B78C-129D973A9A94}';
  IID__NexoTerminalEnvironment: TGUID = '{22389591-8FAC-3D5C-8696-7F02CE9D1A28}';
  IID__NexoSaleCapabilities: TGUID = '{27EE1457-9C5B-364B-A5B0-6F8DEA5DFD90}';
  IID__NexoProtocolVersion: TGUID = '{80FE31BB-AA27-3228-9E9F-ACCBC7BEC91E}';
  CLASS_NexoSupportedProtocolVersions: TGUID = '{54EE3393-AC8E-33FF-89C8-6559C61B916E}';
  IID__NexoID: TGUID = '{18471494-0F7D-3761-AA8A-4234DEEE46E0}';
  IID__NexoServiceID: TGUID = '{59B3973C-67DE-3226-950C-3F1AF7CA8CD9}';
  IID__NexoDeviceID: TGUID = '{71E7118B-B956-330C-8CF3-985FF48C8383}';
  IID__NexoPOIID: TGUID = '{054197A2-96CE-3280-A396-9A9647E69093}';
  IID__NexoSaleID: TGUID = '{42F36241-B65E-3279-8AB5-B0FDF51E2007}';
  IID__NexoOperatorLanguage: TGUID = '{E71BBF4C-00C1-3A08-8FA7-D6AC9B58C165}';
  IID__NexoResult: TGUID = '{4D8B2E36-3BE3-3AAE-820E-2AF11CA82E64}';
  IID__NexoErrorCondition: TGUID = '{3A6C71B5-A08C-315D-B127-D96E2E2EAC09}';
  IID__NexoAdditionalResponse: TGUID = '{B44411B6-3F45-333F-B166-1A295EED6A6C}';
  IID__NexoGlobalStatus: TGUID = '{3AC0D87E-F614-3958-AF82-0EDD3E6D9179}';
  IID__NexoCertificationCode: TGUID = '{02DB9CB2-8343-3689-AB49-DC0FB8415C72}';
  IID__NexoSoftwareVersion: TGUID = '{451A06B3-89A7-3712-9763-C753FC8885C3}';
  IID__NexoApplicationName: TGUID = '{9C672E07-5151-38F4-A42C-CEB77A05332B}';
  IID__NexoManufacturerID: TGUID = '{E49650FA-D915-3C41-8313-9A5A13A64420}';
  IID__NexoPOISerialNumber: TGUID = '{6681A893-77AF-3107-A6DA-DF729D6DB446}';
  IID__NexoOperatorID: TGUID = '{CD18F863-D50B-352D-B4A0-5E980F36021D}';
  IID__NexoDateTime: TGUID = '{8DF83577-AE20-31AB-B9C0-1F46E4CF327C}';
  IID__NexoInputCommand: TGUID = '{4E7620D8-37EE-3EF1-8219-5905E4C30D28}';
  IID__NexoEventToNotify: TGUID = '{F32A9C29-CEFF-3D25-9C49-F4350CA77ABB}';
  IID__NexoPaymentIntrumentType: TGUID = '{A7085E0D-4C4E-3492-9CD8-E5EEA1139AB4}';
  IID_IAbortRequestType: TGUID = '{5164B342-574E-4BF3-BE80-736D77C0CED3}';
  IID_IMessageReferenceType: TGUID = '{3A84AA7A-9AE5-430C-B1AE-F0CEE4E3D7E0}';
  IID_IDisplayResponseType: TGUID = '{1172E6C0-7B5B-4A6B-95F3-2C516D391256}';
  IID_IOutputResultType: TGUID = '{182805AD-90B6-4BB5-9296-9AA3DB2EFC64}';
  IID_IResponseType: TGUID = '{F710DB1A-1867-48F3-B078-3233A46A44C8}';
  IID_IDisplayRequestType: TGUID = '{52E8DBB9-1777-411F-96CA-1C39BAA9112E}';
  IID_IDisplayOutputType: TGUID = '{4D8A806D-1E0A-4E84-A840-CF7D4A8DAC80}';
  IID_IOutputContentType: TGUID = '{18E3DF04-9D3E-4488-9644-02F46A00808E}';
  IID_IPredefinedContentType: TGUID = '{50EA9E0C-AD32-4881-9EC8-412F45F1E4CA}';
  IID_IOutputTextType: TGUID = '{55A3955B-9057-4AF9-9D23-FE2FA7B0ACFF}';
  IID_IOutputBarcodeType: TGUID = '{13A4F0E2-8CC8-4EE6-B72A-85F36BA1D21E}';
  IID_IMenuEntryType: TGUID = '{09A3B6F8-0D9E-456A-B15C-EC009B7A8CD7}';
  IID_IAdminRequestType: TGUID = '{FFA37AEA-66CD-4F2F-B0D7-7320C918AEC8}';
  IID_IAdminResponseType: TGUID = '{B954A868-9DC7-4616-86ED-417FAF9D9AE9}';
  IID_IAllowedProductType: TGUID = '{34312584-386D-4AA1-ADCA-688472AEF400}';
  IID_IAmountsReqType: TGUID = '{0E808B35-1732-4D9A-BB32-C3817606309F}';
  IID_IAmountsRespType: TGUID = '{CD7F9693-3E83-45D9-84FF-30E4C3C60C87}';
  IID_IAreaSizeType: TGUID = '{31F77C9F-7B6C-4FF9-AB82-B5FA585B2CD9}';
  IID_IBalanceInquiryRequestType: TGUID = '{D487A8E1-FFDD-4FDD-8120-87EADB267EBA}';
  IID_IPaymentAccountReqType: TGUID = '{EDE17C01-81F9-44F7-AF01-E6CAB375634A}';
  IID_ITransactionIdentificationType: TGUID = '{29B4F24C-7F9B-42A9-99AE-21527B05675C}';
  IID_IPaymentInstrumentDataType: TGUID = '{70D0AB55-144D-4768-AD09-7FBA57253821}';
  IID_ICardDataType: TGUID = '{B0C7F944-3BDB-4645-BA90-7F47191E84E9}';
  IID_IContentInformationType: TGUID = '{496C06D8-9D26-4C8C-9C26-402A7034394C}';
  IID_IAuthenticatedDataType: TGUID = '{F30D7BD3-0DFD-4ED7-AB64-9D8CE4D969D3}';
  IID_IKEKType: TGUID = '{4E272660-B3E8-4835-B9BE-F51027F7ED66}';
  IID_IKEKIdentifierType: TGUID = '{2D809DC5-9852-4B1C-A0A9-DCF5F6BF9D4F}';
  IID_IAlgorithmIdentifier: TGUID = '{ED60A7C1-9957-4F5A-9073-68236A422D32}';
  IID_IParameterType: TGUID = '{AEA8B01F-DCA4-46C1-9769-E77140B72D0D}';
  IID_IKeyTransportType: TGUID = '{A66313F5-E913-4A5F-9750-CC5BCCED136A}';
  IID_IRecipientIdentifierType: TGUID = '{198F539D-2C07-4D91-B8BE-1531F033F6FF}';
  IID_IIssuerAndSerialNumberType: TGUID = '{C46779EE-586D-4F72-AD48-E86FD51A1871}';
  IID_IRelativeDistinguishedNameType: TGUID = '{4C93726A-6BB7-45AC-AF24-AFE53C35D20C}';
  IID_IEncapsulatedContentType: TGUID = '{C9B7E57E-6567-4B19-AB0B-FD4DC727C8A8}';
  IID_IDigestedDataType: TGUID = '{2F30C6A7-E730-4331-9943-FB4E4AF161A0}';
  IID_IEnvelopedDataType: TGUID = '{E39FEB83-EF7D-4039-A06A-EBE8C53D79A0}';
  IID_IEncryptedContentType: TGUID = '{0E704104-C20E-493E-BD6D-9609D4F842F9}';
  IID_INamedKeyEncryptedDataType: TGUID = '{61399485-CB3F-4976-9008-35BF682B8CED}';
  IID_ISignedDataType: TGUID = '{E85A8492-A33B-4092-902B-04D78683A70A}';
  IID_ISignerType: TGUID = '{4F518D77-9AFD-44E8-BEDE-1D9261C6F0AE}';
  IID_ISignerIdentifierType: TGUID = '{10A100BF-BAE5-409A-A95F-FC4263CEE4A5}';
  IID_ISensitiveCardDataType: TGUID = '{1426F57D-637D-4F6A-A15B-18C6EEB5B00D}';
  IID_ITrackDataType: TGUID = '{9F5C8443-2B7F-4D2C-9965-1B3E059B1CE1}';
  IID_IPaymentTokenType: TGUID = '{40848B50-31D6-49D6-B5DC-52B235CB12E0}';
  IID_ICustomerOrderType: TGUID = '{BD57DA3D-0B6F-47EA-8A46-79B692F331C1}';
  IID_ICheckDataType: TGUID = '{5F6EEC56-6E27-4A74-B051-306E11C65989}';
  IID_IMobileDataType: TGUID = '{4F491078-5DFE-417A-8AEF-E09151D17938}';
  IID_IGeolocationType: TGUID = '{B5615848-F0C3-4DF0-8A0E-4CA968FC8462}';
  IID_IGeographicCoordinatesType: TGUID = '{8D4B1EB8-931E-42B0-950E-ECB372854909}';
  IID_IUTMCoordinatesType: TGUID = '{2EE351A0-2FF9-4654-8BA7-D584B73DB460}';
  IID_ISensitiveMobileDataType: TGUID = '{E1754B51-5C8D-47E0-B502-35FC40ACBFA6}';
  IID_ILoyaltyAccountReqType: TGUID = '{05C3AFF8-5599-473C-9338-7D28938E1B05}';
  IID_ILoyaltyAccountIDType: TGUID = '{A56DECA1-0DD8-428A-BA74-0201067C50D6}';
  IID_IBalanceInquiryResponseType: TGUID = '{51960756-B608-400F-AE06-F74C94DABEE5}';
  IID_IPaymentAccountStatusType: TGUID = '{A37E52AB-5DF7-4D75-B529-AAF2BF9E33A5}';
  IID_IPaymentAcquirerDataType: TGUID = '{49ECACF1-62B8-4A1B-94F4-2D1609107919}';
  IID_ILoyaltyAccountStatusType: TGUID = '{D37010F7-4309-4C79-80A2-159D322A9506}';
  IID_ILoyaltyAccountType: TGUID = '{705D598C-5FB0-40BF-AA6F-C334E6C6006F}';
  IID_IBatchRequestType: TGUID = '{961AD3ED-4823-456E-AC65-E8DA00A6BB27}';
  IID_ITransactionToPerformType: TGUID = '{AA613B2D-3109-48EF-A84E-80BB525B9C8B}';
  IID_ILoyaltyRequestType: TGUID = '{8330E532-398D-4068-8016-A0B6F328459D}';
  IID_ISaleDataType: TGUID = '{3F0907BF-64CF-4C46-874A-5287CBA3FE8B}';
  IID_ISaleTerminalDataType: TGUID = '{4E1180D5-D34E-4B42-9CAD-A170B0379413}';
  IID_ISaleProfileType: TGUID = '{C0B3086B-4608-42A4-8BBA-5418A5BAF26C}';
  IID_ISponsoredMerchantType: TGUID = '{D6EEDF8F-DB3C-46CA-9045-35200F4AC146}';
  IID_ISaleToIssuerDataType: TGUID = '{C160F560-EBB7-4BB6-9F61-AEB041F90308}';
  IID_ILoyaltyTransactionType: TGUID = '{4E8F99DA-8AEA-4416-A68B-1607A0F5AF27}';
  IID_IOriginalPOITransactionType: TGUID = '{F9CF0339-6625-498C-A49C-1C9C03D5C560}';
  IID_ITransactionConditionsType: TGUID = '{487A58B9-E70B-4479-9B77-6B87BD28B5BD}';
  IID_ISaleItemType: TGUID = '{B71142E5-0AB9-4144-945E-5AF10DDBD9B5}';
  IID_ILoyaltyDataType: TGUID = '{26F4B618-EE5D-49C5-965A-076FD6918F4B}';
  IID_ILoyaltyAmountType: TGUID = '{1F83E6E9-E1BF-4C8D-B1D7-FE3E01E3196B}';
  IID_IPaymentRequestType: TGUID = '{0A2EA7B4-D671-461A-B68D-9496C8A9ABA2}';
  IID_IPaymentTransactionType: TGUID = '{91DF001E-B87B-4148-8741-2D04436640DA}';
  IID_IPaymentDataType: TGUID = '{101AB398-936F-4463-90AC-65F12939A335}';
  IID_IInstalmentType: TGUID = '{1B2C52FC-AE54-49B7-A5C6-03AF48167FEC}';
  IID_IReversalRequestType: TGUID = '{855DA19B-FCFF-412F-826F-4F297051AB0D}';
  IID_IBatchResponseType: TGUID = '{114F1C3D-AE53-4336-86F0-2EF0FE392509}';
  IID_IPerformedTransactionType: TGUID = '{770F162A-50AA-4766-974E-55AC9511DCAF}';
  IID_IPOIDataType: TGUID = '{9ED102D7-70AF-4EF6-A67D-1894928D6F7A}';
  IID_IPaymentResultType: TGUID = '{87179765-5D04-427B-86AE-DAB53C2A43EE}';
  IID_ICurrencyConversionType: TGUID = '{71047486-F789-4684-90DE-23E9D96F5F6F}';
  IID_IAmountType: TGUID = '{EAF54C07-401E-43C4-BA84-7C7C4782B3AC}';
  IID_ICapturedSignatureType: TGUID = '{156A54CB-3483-481E-9232-1C70CFA556EF}';
  IID_ISignaturePointType: TGUID = '{0054AE7A-6389-4BBC-A73C-3D39841571E6}';
  IID_ILoyaltyResultType: TGUID = '{28CCBE6A-62A3-4734-A2FE-C5002E5092BA}';
  IID_ILoyaltyAcquirerDataType: TGUID = '{7A1A9B2C-CC30-49FB-9E0F-8C47695564D1}';
  IID_IRebatesType: TGUID = '{5AE11FBF-C9A4-473A-93E8-C9352942F09F}';
  IID_ISaleItemRebateType: TGUID = '{3F273CE2-BEC2-4502-8C63-4D946002DBB8}';
  IID_ICardAcquisitionRequestType: TGUID = '{95964348-71BA-45AC-9868-BB1743A986D7}';
  IID_ICardAcquisitionTransactionType: TGUID = '{0F160141-9BBC-406B-8A6C-8C49771640EB}';
  IID_ICardAcquisitionResponseType: TGUID = '{F3293EBB-746B-4A50-BCF4-872C24051702}';
  IID_ICardholderPINType: TGUID = '{17DAD50B-417B-4CD2-B432-B6C3F00FBC62}';
  IID_ICardReaderAPDURequestType: TGUID = '{17E1E2CD-85F6-41BE-A79C-07E5404B6776}';
  IID_ICardReaderAPDUResponseType: TGUID = '{80682103-DFB9-4654-941D-F4B6DA7B4EF1}';
  IID_ICardReaderInitRequestType: TGUID = '{7E28398E-92DA-4362-9C5A-D9DB716F1F36}';
  IID_ICardReaderInitResponseType: TGUID = '{DCA1232D-0BFC-4AAD-BF94-5B9DB2F2004C}';
  IID_IICCResetDataType: TGUID = '{0E15BBC0-804B-4C5D-983D-5DCE68ADF8E0}';
  IID_ICardReaderPowerOffRequestType: TGUID = '{E02EFE42-1C6C-4190-B1C3-A7C8DC88B111}';
  IID_ICardReaderPowerOffResponseType: TGUID = '{DAC55A55-261D-44BF-9E00-D99F678C2921}';
  IID_ICashHandlingDeviceType: TGUID = '{DE966E96-A9D3-4C7C-9FCC-C79421729631}';
  IID_ICoinsOrBillsType: TGUID = '{ABD91E0D-E60C-4FD6-858E-0946D509B677}';
  IID_IDiagnosisRequestType: TGUID = '{2E511EE0-D62B-42B5-97FD-9DD80CCAFF27}';
  IID_IDiagnosisResponseType: TGUID = '{6889C5A3-88F9-4509-8F58-C34EF6566797}';
  IID_IPOIStatusType: TGUID = '{E3A9F35E-7863-4B50-899A-89A2AAE36BB9}';
  IID_IHostStatusType: TGUID = '{43B8F13D-2B92-4272-A82D-F646EB9796D3}';
  IID_IEnableServiceRequestType: TGUID = '{2F52478E-7E05-4F9D-AC89-BE00511B9285}';
  IID_IEnableServiceResponseType: TGUID = '{505B7C8B-3A60-46EF-A8D8-3D39F6AC44D4}';
  IID_IEventNotificationType: TGUID = '{3605AE73-C9C1-41F3-A108-1CBDBC820F6E}';
  IID_IGetTotalsRequestType: TGUID = '{1EE364EC-C860-481C-9861-46BBDAB95FA5}';
  IID_ITotalFilterType: TGUID = '{FDBEA206-A8C9-4E38-91C3-2AE36FDDA7A5}';
  IID_IGetTotalsResponseType: TGUID = '{ACE7ADB5-265A-4976-A8F6-806D5CBF2761}';
  IID_ITransactionTotalsType: TGUID = '{8D67E0C6-31C9-45BB-8C12-EB3E3685298B}';
  IID_IPaymentTotalsType: TGUID = '{F00FDBDE-6D9D-4035-BA62-5434C8DCB1C7}';
  IID_ILoyaltyTotalsType: TGUID = '{CF534DB6-4357-4925-AF2A-07FAD27C81B9}';
  IID_IInputType: TGUID = '{51063411-D99C-4737-8FEC-B272151EC027}';
  IID_IInputDataType: TGUID = '{873E73D2-7DFD-4699-B55E-12CBB192DEE9}';
  IID_IInputRequestType: TGUID = '{7DA5ADD5-8A6D-4037-9BE7-ACF723B08593}';
  IID_IInputResponseType: TGUID = '{2E1B9FF4-E6C9-48CD-8684-32BB47D2000F}';
  IID_IInputResultType: TGUID = '{FF4C9285-57AB-40EE-8FA3-86B0A416401B}';
  IID_IInputUpdateType: TGUID = '{3FE11797-D866-4041-87F7-6A669A7C6A60}';
  IID_ILoginRequestType: TGUID = '{27170823-F199-492D-B033-EEBBE9A4A3AA}';
  IID_ISaleSoftwareType: TGUID = '{D652B10A-044D-4CEB-A85F-0A2B1440D800}';
  IID_ILoginResponseType: TGUID = '{4A612C00-B5B1-4D50-B9D9-30115E469945}';
  IID_IPOISystemDataType: TGUID = '{81EB8A7B-AF1A-4D02-9743-FADA008FD65E}';
  IID_IPOISoftwareType: TGUID = '{806651D2-BDAF-414A-96F7-FCEA88C9CE9E}';
  IID_IPOITerminalDataType: TGUID = '{02B5C159-590B-46A3-8A89-2E5069D0D48B}';
  IID_IPOIProfileType: TGUID = '{E066BCF9-4311-4A54-A0E3-D78D3C858738}';
  IID_ILogoutRequestType: TGUID = '{2C14937E-5284-4E0A-8087-2DF0F89018CE}';
  IID_ILogoutResponseType: TGUID = '{8521A31F-FBD7-430B-B162-D34C6ABE911E}';
  IID_ILoyaltyResponseType: TGUID = '{99FE1ABA-45D7-4DD3-BB95-3A5010921427}';
  IID_IPaymentReceiptType: TGUID = '{724B169E-CEEA-4EEA-8643-0D03BDB4A1B2}';
  IID_IMessageHeaderType: TGUID = '{BCA2B06B-DC30-4E93-843B-3D0EA9FA335C}';
  IID_IPaymentResponseType: TGUID = '{7E85E231-B401-4DF8-AAA8-396A83014F48}';
  IID_IPINRequestType: TGUID = '{AEDF269C-CC5A-434E-B8A5-91D6C3DC517D}';
  IID_IPINResponseType: TGUID = '{3654AF9D-7402-4E44-84E8-4216F32EE6F0}';
  IID_IPrintOutputType: TGUID = '{9802AA7C-D56A-4A10-B4F0-2E25D92394CB}';
  IID_IPrintRequestType: TGUID = '{511148A0-1939-418D-B78B-470D072CA940}';
  IID_IPrintResponseType: TGUID = '{95D0CCA6-3A81-4004-B84B-99E222771031}';
  IID_IReconciliationRequestType: TGUID = '{7F104E13-0B7E-4A78-8821-0F13A42B1C71}';
  IID_IReconciliationResponseType: TGUID = '{B6F261D4-F01E-4F31-814F-DCB84F0A3CAA}';
  IID_IRepeatedMessageResponseType: TGUID = '{446303F8-704B-4771-8334-0A63B2F56B94}';
  IID_IReversalResponseType: TGUID = '{104CF36C-75DC-457C-9541-32419A4CAEA9}';
  IID_IStoredValueResponseType: TGUID = '{4E8220CD-095E-4276-AC7A-88C4E9A2FA07}';
  IID_IStoredValueResultType: TGUID = '{D3089B25-BF71-4F3E-B4C8-2F7A28092F28}';
  IID_IStoredValueAccountStatusType: TGUID = '{2BE8655A-337D-428A-AC2A-CB5A5853543A}';
  IID_IStoredValueAccountIDType: TGUID = '{6FE37195-E139-442C-B500-7BDD917B45EC}';
  IID_ISoundContentType: TGUID = '{197454E4-5C08-4168-B82E-0895CCE1CCCC}';
  IID_ISoundRequestType: TGUID = '{A53937DC-FD06-42F8-8B6B-F242F9F7999B}';
  IID_ISoundResponseType: TGUID = '{B73EF86A-66D4-4E70-B519-49697A607BAF}';
  IID_IStoredValueDataType: TGUID = '{49531C51-060E-4AFE-9FE8-278DBC2F5418}';
  IID_IStoredValueRequestType: TGUID = '{B3D0EC44-6825-4C64-9584-8DDA8D573407}';
  IID_ITransmitRequestType: TGUID = '{5FC4EAC2-2E48-4827-B65A-AACF76E1EA9C}';
  IID_ITransmitResponseType: TGUID = '{6D8E17BA-78C1-4EB1-8238-E8125B2CE926}';
  IID_ITransactionStatusRequestType: TGUID = '{EE426979-76AA-4491-BD87-59A386ACF42F}';
  IID_ITransactionStatusResponseType: TGUID = '{3AD1D958-B350-4B7E-A29B-B434B7D39163}';
  IID_ISaleToPOIRequest: TGUID = '{793BCC70-3EB8-4EED-B734-C69E2CD65A6E}';
  IID_ISaleToPOIResponse: TGUID = '{CB565D6A-8B96-498A-9D72-37F2C8800D54}';
  IID_IIssuerType: TGUID = '{993CC70B-284B-4BB7-9CF0-3D9E0F395CD1}';
  CLASS_AbortRequestType: TGUID = '{1E71265D-5E9B-4640-977E-D4C6629AF662}';
  CLASS_MessageReferenceType: TGUID = '{EE682DDB-73B6-46EC-92F5-E4E5F1330778}';
  CLASS_DisplayResponseType: TGUID = '{76AFC855-FEDF-440D-8392-7A9690D5D2ED}';
  CLASS_OutputResultType: TGUID = '{6D113019-9AB3-4573-9819-075EAC379D81}';
  CLASS_ResponseType: TGUID = '{195EDA99-5466-4CB4-B25B-70107D70C303}';
  CLASS_DisplayRequestType: TGUID = '{8D8584A8-52E9-482E-A72F-AFB655562238}';
  CLASS_DisplayOutputType: TGUID = '{9F138E47-3B09-48EE-AC04-075B2E63045E}';
  CLASS_OutputContentType: TGUID = '{F1FB972E-ED3E-4737-8ED0-5B07009F23D1}';
  CLASS_PredefinedContentType: TGUID = '{994A0A9F-C799-4357-97C6-B1634AC90C04}';
  CLASS_OutputTextType: TGUID = '{EF2A2812-41B4-4282-9D9C-090D1A7720E7}';
  CLASS_OutputBarcodeType: TGUID = '{B48FBBE4-69A5-4AE6-A27C-DF1743AA4FBE}';
  CLASS_MenuEntryType: TGUID = '{72806E7B-EA00-4299-9A8D-6B937C12730A}';
  CLASS_AdminRequestType: TGUID = '{0F427B8A-8B5D-475D-B802-7C1A176DD082}';
  CLASS_AdminResponseType: TGUID = '{53F2C513-00C8-4F10-8EB7-96F952B37720}';
  CLASS_AllowedProductType: TGUID = '{966CEA7B-384E-4FEA-960B-FE6C527FA8AA}';
  CLASS_AmountsReqType: TGUID = '{8A5FDFB0-A8E5-4904-82E5-BE43F3F1C273}';
  CLASS_AmountsRespType: TGUID = '{ED73B537-9078-4034-B317-2B6101DCF563}';
  CLASS_AreaSizeType: TGUID = '{663DD0CF-E57C-48D2-9EE2-80C0DDD050CD}';
  CLASS_BalanceInquiryRequestType: TGUID = '{F816F9BB-9785-4806-87FF-645C8969FE75}';
  CLASS_PaymentAccountReqType: TGUID = '{7E3E96BF-3217-46BA-B519-1BC94DF1F3DA}';
  CLASS_TransactionIdentificationType: TGUID = '{F8721F9B-3FB9-47DE-BA56-2F89AA2E7B02}';
  CLASS_PaymentInstrumentDataType: TGUID = '{ED21F4D3-585B-4EDC-89FC-8C6895DBE7CD}';
  CLASS_CardDataType: TGUID = '{02967A6C-0782-4A97-BE54-2553CE67711C}';
  CLASS_ContentInformationType: TGUID = '{F5BD0427-BA89-4669-855E-E5C75FE80275}';
  CLASS_AuthenticatedDataType: TGUID = '{E239BEFE-F456-4CBC-9E14-AB11533CE152}';
  CLASS_KEKType: TGUID = '{0C267A24-8CD3-43B5-B328-F570E794BC06}';
  CLASS_KEKIdentifierType: TGUID = '{D0A0B45B-8AE5-4D94-8168-DF8DB422432F}';
  CLASS_AlgorithmIdentifier: TGUID = '{D3DDA563-D2F4-41F5-8EDD-EBF0F8CC5AAE}';
  CLASS_ParameterType: TGUID = '{EEE3E8C3-F045-4EF9-8668-E3702086FD4B}';
  CLASS_KeyTransportType: TGUID = '{5069148A-0B75-415A-9D8E-2599E3D95E6C}';
  CLASS_RecipientIdentifierType: TGUID = '{085DCA27-79BE-4CCA-B7E4-55E3BA126174}';
  CLASS_IssuerAndSerialNumberType: TGUID = '{6151D39C-6607-4CE1-9FED-BD55CEE9E741}';
  CLASS_RelativeDistinguishedNameType: TGUID = '{4B2C1E3C-1B2A-4790-AE09-AF66B8C88B9D}';
  CLASS_EncapsulatedContentType: TGUID = '{571D46D7-A99E-4D9F-9B3D-1BA063D0E3C1}';
  CLASS_DigestedDataType: TGUID = '{FF8BAF4A-381B-4666-9DD9-7B459EA1D0E4}';
  CLASS_EnvelopedDataType: TGUID = '{B24C4EE0-AED0-4780-9986-45A8FD09C98C}';
  CLASS_EncryptedContentType: TGUID = '{9CFA596E-DA1F-4CF2-B69E-75DEF43F6482}';
  CLASS_NamedKeyEncryptedDataType: TGUID = '{A5AFC3F1-1B89-44FB-B557-DDF298ABDA7F}';
  CLASS_SignedDataType: TGUID = '{582D7461-2F80-45AE-93EB-89BE4D36C28C}';
  CLASS_SignerType: TGUID = '{BF05ACB9-DED6-4D68-B45B-71B2A4005D3D}';
  CLASS_SignerIdentifierType: TGUID = '{02975D97-3587-45D2-9953-20EDBB2B94FE}';
  CLASS_SensitiveCardDataType: TGUID = '{897E9960-5C86-4A30-92BC-050BDA7D0F68}';
  CLASS_TrackDataType: TGUID = '{DF1D3B34-2041-4549-AA70-CAB433DBF4E7}';
  CLASS_PaymentTokenType: TGUID = '{E5D6B853-56F5-47DA-8FD0-D9E91AD23C23}';
  CLASS_CustomerOrderType: TGUID = '{A48AE63A-121A-47DB-B454-A889E558A602}';
  CLASS_CheckDataType: TGUID = '{1A4F6EFC-ADF6-4D14-8D81-0B30609790A8}';
  CLASS_MobileDataType: TGUID = '{2B864E2F-6A67-4FE9-AC39-A19DC7DA71C0}';
  CLASS_GeolocationType: TGUID = '{0508C4BD-BDF4-4BD9-8C36-AA1246D4A6D6}';
  CLASS_GeographicCoordinatesType: TGUID = '{6FB4C2CB-4A13-4241-A024-D8C86A196E61}';
  CLASS_UTMCoordinatesType: TGUID = '{2CD429B1-30DF-4C81-868B-F97F2DECC660}';
  CLASS_SensitiveMobileDataType: TGUID = '{CA4A6B9C-C5A3-45BF-A347-E3532A84E26C}';
  CLASS_LoyaltyAccountReqType: TGUID = '{09DCBAB6-2C66-4DB5-BCA3-3EE655D9348E}';
  CLASS_LoyaltyAccountIDType: TGUID = '{A97E363B-95C6-414F-85F1-60E26C023169}';
  CLASS_BalanceInquiryResponseType: TGUID = '{CB7D2D5E-B70C-45F8-8317-109666A25A49}';
  CLASS_PaymentAccountStatusType: TGUID = '{2ECC3CC1-92CD-4F34-BADD-F8573DB49812}';
  CLASS_PaymentAcquirerDataType: TGUID = '{CE1EB5C6-6BD6-4A91-BBC6-AC1C5D11BB7B}';
  CLASS_LoyaltyAccountStatusType: TGUID = '{0B1917CF-149D-434C-A926-549D7BCF4786}';
  CLASS_LoyaltyAccountType: TGUID = '{4A025459-BC00-476A-A529-87FF4BD14F1E}';
  CLASS_BatchRequestType: TGUID = '{28820836-270D-4DF6-9185-FE1E6CDE8DE8}';
  CLASS_TransactionToPerformType: TGUID = '{76D9D867-6D3C-4FB7-97EE-8E669CAB7EDC}';
  CLASS_LoyaltyRequestType: TGUID = '{5CCAA4A8-35D2-4E62-A0E4-41362A59ADCE}';
  CLASS_SaleDataType: TGUID = '{F1381F13-1574-49AC-B653-A121FDBB1004}';
  CLASS_SaleTerminalDataType: TGUID = '{A04DFDA5-8261-4E4E-B527-7ACB093675C7}';
  CLASS_SaleProfileType: TGUID = '{F006B146-52E0-45C4-A768-CAAADA29AB1A}';
  CLASS_SponsoredMerchantType: TGUID = '{6BC447EB-0410-46DF-A7C9-BFEAFF9ADA47}';
  CLASS_SaleToIssuerDataType: TGUID = '{54485EC2-B031-405A-A6E7-0D034CD45110}';
  CLASS_LoyaltyTransactionType: TGUID = '{4135DB47-5525-4359-9E76-5420D631E54F}';
  CLASS_OriginalPOITransactionType: TGUID = '{16E6475F-95AE-4F5B-AAEA-670404A2CA06}';
  CLASS_TransactionConditionsType: TGUID = '{C1943C6B-EE5B-4E5D-8EBB-D0F9A08B7847}';
  CLASS_SaleItemType: TGUID = '{5DE1970B-F750-4C33-A91D-4C73E28C0EBA}';
  CLASS_LoyaltyDataType: TGUID = '{432EAB29-2005-4147-9BF6-BFB137FCECB4}';
  CLASS_LoyaltyAmountType: TGUID = '{9D851E49-30BC-49A7-8246-FD73BC3E3BA2}';
  CLASS_PaymentRequestType: TGUID = '{166ADB94-E5FF-4230-9EC3-35233E276C42}';
  CLASS_PaymentTransactionType: TGUID = '{3EC21514-F54A-4E9C-A865-A4E79FB151F4}';
  CLASS_PaymentDataType: TGUID = '{BB3D92E9-1575-42C2-9096-3EC420825ADC}';
  CLASS_InstalmentType: TGUID = '{CF095A53-6490-4A67-BCD7-F7F425D94799}';
  CLASS_ReversalRequestType: TGUID = '{3B38531F-BCA0-4BD1-9516-C9EB9822D798}';
  CLASS_BatchResponseType: TGUID = '{222AF7C4-9C7D-486C-B9DA-9E53DC24C577}';
  CLASS_PerformedTransactionType: TGUID = '{61DA827C-ED80-4409-96A7-23F8283391BB}';
  CLASS_POIDataType: TGUID = '{2BD53D9C-3BDA-4A83-8D35-D8D33C616865}';
  CLASS_PaymentResultType: TGUID = '{5008D0E4-6810-475F-9FA2-59A9C83EFD21}';
  CLASS_CurrencyConversionType: TGUID = '{BFC15180-376C-4DC0-AFCE-4EF6E42AF365}';
  CLASS_AmountType: TGUID = '{CEE3ABC5-D1A6-4B12-BFE4-B9F4AE71F66D}';
  CLASS_CapturedSignatureType: TGUID = '{1E1F06D5-53F8-475B-8D9A-D5B545798D61}';
  CLASS_SignaturePointType: TGUID = '{6B9218F3-1912-4A67-9058-5AEADA458A07}';
  CLASS_LoyaltyResultType: TGUID = '{AAB09D81-C1EE-4F4C-83F1-48FB4498D4E1}';
  CLASS_LoyaltyAcquirerDataType: TGUID = '{DEA43618-64AB-4B54-A2CB-F9D0C4A2BD85}';
  CLASS_RebatesType: TGUID = '{12EAEFCC-7DC6-4878-96CE-03B1EE071AF9}';
  CLASS_SaleItemRebateType: TGUID = '{7F079B88-B5F5-44DF-8A7A-58A39E5505A0}';
  CLASS_CardAcquisitionRequestType: TGUID = '{3E54698A-EDE2-4F32-B10D-7465E0A46E5D}';
  CLASS_CardAcquisitionTransactionType: TGUID = '{7DD23827-C3FC-4CD4-9CE8-35D3BC27B4D8}';
  CLASS_CardAcquisitionResponseType: TGUID = '{24446CFD-9C35-482A-947C-F6FE90051115}';
  CLASS_CardholderPINType: TGUID = '{1587DD54-0310-4F99-BAE5-428669F58D41}';
  CLASS_CardReaderAPDURequestType: TGUID = '{675A5E0B-61CE-4C1D-A477-BEA808E2DAB1}';
  CLASS_CardReaderAPDUResponseType: TGUID = '{BF1A68A4-96E1-4A34-87DB-A52686C81170}';
  CLASS_CardReaderInitRequestType: TGUID = '{635700BC-2D31-4D57-BF4A-BF7BFEC04A84}';
  CLASS_CardReaderInitResponseType: TGUID = '{34566589-18C6-4C86-A108-8583D7C5BC0E}';
  CLASS_ICCResetDataType: TGUID = '{85574226-0F0A-4E4E-874E-D4C84C7785AE}';
  CLASS_CardReaderPowerOffRequestType: TGUID = '{64E896DA-0500-44CE-81F9-51042DC19D20}';
  CLASS_CardReaderPowerOffResponseType: TGUID = '{58E4A371-F141-4CC5-B580-C7C498BE8AFA}';
  CLASS_CashHandlingDeviceType: TGUID = '{EAC21BAB-FF4D-4018-8B3E-99FB04BB9EFE}';
  CLASS_CoinsOrBillsType: TGUID = '{43C168DC-AEAD-4934-8CB0-016DDCE03A89}';
  CLASS_DiagnosisRequestType: TGUID = '{241A3446-E7F0-4206-B86A-70E775A8A43B}';
  CLASS_DiagnosisResponseType: TGUID = '{A2A77BC6-EB68-4D2F-A1D2-FA4B4D7D84B8}';
  CLASS_POIStatusType: TGUID = '{A7DCAEE9-A791-4CF1-81E6-9241C47D334E}';
  CLASS_HostStatusType: TGUID = '{FBF259FC-DBBB-48FE-812B-5AAA2489CC7A}';
  CLASS_EnableServiceRequestType: TGUID = '{914FBD93-080E-423E-9DE2-11E87FCA2B91}';
  CLASS_EnableServiceResponseType: TGUID = '{E45799E4-E383-405B-849D-975F7A61C56E}';
  CLASS_EventNotificationType: TGUID = '{F0131277-B5EC-4BDF-8E19-3F6D2EB6E42E}';
  CLASS_GetTotalsRequestType: TGUID = '{DEC1250F-7E64-4F0D-810F-958E45E2EF38}';
  CLASS_TotalFilterType: TGUID = '{0924A1B4-4FDA-4268-85F6-9DE5F01C5F83}';
  CLASS_GetTotalsResponseType: TGUID = '{C72F8C32-C60F-4817-81EA-039C03DDD78F}';
  CLASS_TransactionTotalsType: TGUID = '{EF36EECB-E0EF-4058-A9AD-80DE269E8C58}';
  CLASS_PaymentTotalsType: TGUID = '{41FD226E-572C-4203-A925-060ADEB70420}';
  CLASS_LoyaltyTotalsType: TGUID = '{E6A87161-6A11-4749-A9A3-50AD9F37D90E}';
  CLASS_InputType: TGUID = '{FDD6E085-EF7E-4C45-AE43-27ED9BCCA3B3}';
  CLASS_InputDataType: TGUID = '{C335465B-7985-401C-88C5-68F4DE054B8F}';
  CLASS_InputRequestType: TGUID = '{63F4AC58-3800-4D5E-85BA-28B7CF62EF87}';
  CLASS_InputResponseType: TGUID = '{4A9F70D9-C8CF-4E74-B21F-4789B2936AF2}';
  CLASS_InputResultType: TGUID = '{09FA9054-81E7-495D-9388-30D256AB95A1}';
  CLASS_InputUpdateType: TGUID = '{68CF5775-0088-40EA-BCFA-8935B5630A07}';
  CLASS_LoginRequestType: TGUID = '{CB1675B9-A85B-4986-9C00-650D8886918B}';
  CLASS_SaleSoftwareType: TGUID = '{F252B120-2E2C-472C-ACE3-9ACB79C2C47D}';
  CLASS_LoginResponseType: TGUID = '{3619F1F5-A693-49A3-9B40-D1E4E784D93E}';
  CLASS_POISystemDataType: TGUID = '{9A15556A-76BA-45A4-9ED8-039B1426B102}';
  CLASS_POISoftwareType: TGUID = '{70F70A98-B536-4E9B-A6EF-2E063554F09D}';
  CLASS_POITerminalDataType: TGUID = '{D4B1D955-EC30-40EF-9B80-8DEFB63474AA}';
  CLASS_POIProfileType: TGUID = '{96FD55F6-9CC5-42CB-AD5C-F6E16418C221}';
  CLASS_LogoutRequestType: TGUID = '{B02A4080-82D2-4B7B-A86E-9B7ABB9C2679}';
  CLASS_LogoutResponseType: TGUID = '{F7EF3A1B-3411-4B60-8D59-2FDB4B479AE1}';
  CLASS_LoyaltyResponseType: TGUID = '{8BC4D7F2-0167-4FA0-B62C-46955A1E2D67}';
  CLASS_PaymentReceiptType: TGUID = '{CDAB4334-6E13-4BDC-AFAE-CCB58161AAE8}';
  CLASS_MessageHeaderType: TGUID = '{7DBE0839-11E6-4F40-B0FA-A12013298517}';
  CLASS_PaymentResponseType: TGUID = '{F1A86C36-AE5C-41F9-8421-1F27C4471710}';
  CLASS_PINRequestType: TGUID = '{D4623B9C-AC53-4BC5-A152-BABB62B3B930}';
  CLASS_PINResponseType: TGUID = '{492E65BF-3873-4315-BFF4-FAEAFE1354A8}';
  CLASS_PrintOutputType: TGUID = '{5615C833-106F-48D7-8DB7-94F543E8FBC4}';
  CLASS_PrintRequestType: TGUID = '{4F2BB7B3-6363-44C1-99A4-754893F43976}';
  CLASS_PrintResponseType: TGUID = '{12A882BC-AD47-41A7-8902-6C320C4E220E}';
  CLASS_ReconciliationRequestType: TGUID = '{82E064FF-AF26-4817-9E4D-45916B443E6E}';
  CLASS_ReconciliationResponseType: TGUID = '{9B5AA547-FC81-4EA2-9312-1432C66E924B}';
  CLASS_RepeatedMessageResponseType: TGUID = '{E099701F-5DCB-476D-AB48-0978E9ED492E}';
  CLASS_ReversalResponseType: TGUID = '{C4702113-DAF9-4BD2-BFE6-C683F1B9ED00}';
  CLASS_StoredValueResponseType: TGUID = '{3B0C8308-AD34-4929-9954-D4BF7D00B16E}';
  CLASS_StoredValueResultType: TGUID = '{C6AFBBB4-E996-4F88-B098-F5908715E4FA}';
  CLASS_StoredValueAccountStatusType: TGUID = '{2A75DFF3-708E-4A10-929C-19EC74CA3A07}';
  CLASS_StoredValueAccountIDType: TGUID = '{DDFC0B16-057A-4D7A-9BED-1EA7A47ECEC7}';
  CLASS_SoundContentType: TGUID = '{63A023CE-314E-4F47-9C65-DAE8B9C95B8E}';
  CLASS_SoundRequestType: TGUID = '{909F4489-FFF3-453F-B336-39FC89277B9C}';
  CLASS_SoundResponseType: TGUID = '{6F2177C8-3161-4291-B48C-5C987587B7E7}';
  CLASS_StoredValueDataType: TGUID = '{E606F12F-2CA7-42C9-9596-86BA7797A0D5}';
  CLASS_StoredValueRequestType: TGUID = '{27FE64AF-1A52-40BE-A567-0F3654058347}';
  CLASS_TransmitRequestType: TGUID = '{7D1ABB93-5658-43D3-9F98-41E106419650}';
  CLASS_TransmitResponseType: TGUID = '{2CD668AA-F019-4BBA-B020-22274FC4743C}';
  CLASS_TransactionStatusRequestType: TGUID = '{84DEAD66-402F-4A06-B1B7-A3BBF4A3030C}';
  CLASS_TransactionStatusResponseType: TGUID = '{A8A7CE5D-BE0C-4BB3-A526-5DB03DFBCBFE}';
  CLASS_SaleToPOIRequest: TGUID = '{44B0F571-8F07-4B3F-82C9-C98DC0C47B9A}';
  CLASS_SaleToPOIResponse: TGUID = '{FC305ED4-AD08-40E4-BA6C-3A85D0366DC7}';
  CLASS_IssuerType: TGUID = '{DCF64842-EC46-4713-8C34-7A0C986AE4DE}';
  IID_INexoRetailerServerActivity: TGUID = '{F71D22CA-428A-4B19-9412-05F8552EB8F2}';
  CLASS_NexoRetailerServerActivity: TGUID = '{E1E33479-DBC6-4537-80A0-E2F693CADF4A}';
  IID__NexoRetailerServerMessageHeaderValidator: TGUID = '{1B697748-782C-3282-A8CB-142481ADB671}';
  IID_INexoRetailerServerSettings: TGUID = '{0D584C15-C13E-4123-B6A6-57D27C7937D1}';
  CLASS_NexoRetailerServerSettings: TGUID = '{D2737F59-F4EE-4935-9C89-C45667C4D506}';
  IID_INexoRetailerClientHandle: TGUID = '{006465F7-6122-44C2-BBF1-166B483315E4}';
  CLASS_NexoRetailerClientHandle: TGUID = '{1AD62E2A-7807-46E1-B3E5-69ED82788C7E}';
  IID_INexoRetailerClient: TGUID = '{8B1988DB-F6AC-4B87-B874-62C58ED8E95F}';
  CLASS_NexoRetailerClient: TGUID = '{48D91DB7-8D55-4151-B04D-02985CFCF6DF}';
  IID_INexoRetailerClientSettings: TGUID = '{96259F3B-053E-45AF-B616-079CBC11690A}';
  CLASS_NexoRetailerClientSettings: TGUID = '{863D37D5-09A2-4E2B-A2D2-9C5C41017472}';
  IID_INexoRetailerClientActivity: TGUID = '{BC3BD01B-95AA-4D4A-B2A1-3AB16231142D}';
  CLASS_NexoRetailerClientActivity: TGUID = '{6CEE4921-3084-40F3-A919-A8CF3D443A03}';
  IID__NexoResources: TGUID = '{5E42E58C-8755-3E00-B9AD-7DAF43704E4B}';
  CLASS_NexoMessage: TGUID = '{8CD2216B-9AFA-31E2-9380-85F90E7B63B7}';
  CLASS_NexoPartner: TGUID = '{CC6D8EEB-003F-3164-AD3A-3F8EBFE6503E}';
  CLASS_NexoEndPoint: TGUID = '{B8CC904E-5414-33D6-A95D-1C79D7AFFD7C}';
  CLASS_NexoSession: TGUID = '{830BB53F-1D94-3A46-BB90-CB062D671099}';
  CLASS_NexoDelegates: TGUID = '{DD3D130A-A129-3EFE-BBDF-88833E4C1D2D}';
  CLASS_NexoKey: TGUID = '{46707A80-AD18-3035-9929-9F8CA1DB5CCD}';
  CLASS_NexoMessageHeader: TGUID = '{2852BFA4-D6E3-3A12-B024-EC5A0241794A}';
  CLASS_NexoDefaultCurrency: TGUID = '{02525ADD-932B-3434-AA05-F7504ED0C29E}';
  CLASS_NexoMessageType: TGUID = '{08E705DF-3DC1-315D-B7DD-F9B61A83391B}';
  CLASS_NexoMessageClass: TGUID = '{2BB74658-2490-36FA-990E-2A917F1BFF44}';
  CLASS_NexoMessageCategory: TGUID = '{C6C3FB2F-C4E5-3D35-AD2A-77B3561A6CFF}';
  CLASS_NexoTerminalEnvironment: TGUID = '{2D05094F-7872-3E86-9586-E6081868E3FF}';
  CLASS_NexoSaleCapabilities: TGUID = '{873892FC-5F8B-353B-8E95-185364907CED}';
  CLASS_NexoProtocolVersion: TGUID = '{C3D4D901-E905-34F6-B243-3B7028F919DF}';
  CLASS_NexoID: TGUID = '{284D296D-EB14-37BA-8751-27EF60187796}';
  CLASS_NexoServiceID: TGUID = '{34496330-38B6-3A82-AD24-2D4209E1C117}';
  CLASS_NexoDeviceID: TGUID = '{EBEBCF30-AEB0-352D-B8B0-A1CF7CB26C82}';
  CLASS_NexoPOIID: TGUID = '{AE4519B9-BF82-389E-BC22-D9A00C93A9AD}';
  CLASS_NexoSaleID: TGUID = '{4C0261A2-FF89-3713-95E8-05B6B0C5CA83}';
  CLASS_NexoOperatorLanguage: TGUID = '{EE3EFD40-743D-388A-AFEF-4D4806A814E2}';
  CLASS_NexoResult: TGUID = '{1813655D-0CC0-39CB-BEBE-24815DD9E300}';
  CLASS_NexoErrorCondition: TGUID = '{D66D766D-8BED-34BC-BF5A-AF0F27773ABE}';
  CLASS_NexoAdditionalResponse: TGUID = '{E8C4D6E9-4912-34A8-8F46-8F01AAE9252D}';
  CLASS_NexoGlobalStatus: TGUID = '{F967FF82-B236-336C-9CB4-527EAB156EF4}';
  CLASS_NexoCertificationCode: TGUID = '{D9817D05-1217-3FC4-8206-FB1291C6B2E3}';
  CLASS_NexoSoftwareVersion: TGUID = '{437C2B04-E43E-329D-B322-E24956A17F52}';
  CLASS_NexoApplicationName: TGUID = '{6F7C25D6-E0CC-3016-9C76-DB43811C152A}';
  CLASS_NexoManufacturerID: TGUID = '{FA8796C7-F572-37D8-82D7-739019774212}';
  CLASS_NexoPOISerialNumber: TGUID = '{E7521718-01BF-3AAE-81C5-38122A0D31A4}';
  CLASS_NexoOperatorID: TGUID = '{0B599EC3-1A4B-33D2-9640-820885A4F990}';
  CLASS_NexoDateTime: TGUID = '{62121610-6A07-307C-8F14-CF613E68E0FA}';
  CLASS_NexoInputCommand: TGUID = '{E2659CBE-AA84-3266-B164-EB20824E9B47}';
  CLASS_NexoEventToNotify: TGUID = '{9A7C2E96-0CAB-3F07-9E65-8C6CBDED91F7}';
  CLASS_NexoPaymentIntrumentType: TGUID = '{F4B17B44-BDE6-3594-8B3B-DB80AF04FD6F}';
  CLASS_NexoRetailerServerMessageHeaderValidator: TGUID = '{F07007FC-AE64-3D6F-B8C7-6F1E18C1B92E}';
  CLASS_NexoResources: TGUID = '{E7C6F590-20F3-382D-8C0F-9711F85CE00F}';

// *********************************************************************//
// Déclaration d'énumérations définies dans la bibliothèque de types                    
// *********************************************************************//
// Constantes pour enum NexoMessageStatus
type
  NexoMessageStatus = TOleEnum;
const
  NexoMessageStatus_normal = $00000000;
  NexoMessageStatus_timeout = $00000001;
  NexoMessageStatus_cancelled = $00000002;

// Constantes pour enum NexoSchemaEventType
type
  NexoSchemaEventType = TOleEnum;
const
  NexoSchemaEventType_All = $00000000;
  NexoSchemaEventType_Error = $00000001;
  NexoSchemaEventType_Warning = $00000002;

// Constantes pour enum NexoNextAction
type
  NexoNextAction = TOleEnum;
const
  NexoNextAction_nothing = $00000000;
  NexoNextAction_final = $00000001;
  NexoNextAction_noReply = $00000002;
  NexoNextAction_sendReply = $00000003;
  NexoNextAction_sendReplyWithError = $00000004;
  NexoNextAction_sendRequest = $00000005;
  NexoNextAction_sendNotification = $00000006;

// Constantes pour enum AccountTypeEnumeration
type
  AccountTypeEnumeration = TOleEnum;
const
  AccountTypeEnumeration_Default = $00000000;
  AccountTypeEnumeration_Savings = $00000001;
  AccountTypeEnumeration_Checking = $00000002;
  AccountTypeEnumeration_CreditCard = $00000003;
  AccountTypeEnumeration_Universal = $00000004;
  AccountTypeEnumeration_Investment = $00000005;
  AccountTypeEnumeration_CardTotals = $00000006;
  AccountTypeEnumeration_EpurseCard = $00000007;

// Constantes pour enum AlignmentEnumeration
type
  AlignmentEnumeration = TOleEnum;
const
  AlignmentEnumeration_Left = $00000000;
  AlignmentEnumeration_Right = $00000001;
  AlignmentEnumeration_Centred = $00000002;
  AlignmentEnumeration_Justified = $00000003;

// Constantes pour enum AuthenticationMethodEnumeration
type
  AuthenticationMethodEnumeration = TOleEnum;
const
  AuthenticationMethodEnumeration_Bypass = $00000000;
  AuthenticationMethodEnumeration_ManualVerification = $00000001;
  AuthenticationMethodEnumeration_MerchantAuthentication = $00000002;
  AuthenticationMethodEnumeration_OfflinePIN = $00000003;
  AuthenticationMethodEnumeration_OnLinePIN = $00000004;
  AuthenticationMethodEnumeration_PaperSignature = $00000005;
  AuthenticationMethodEnumeration_SecuredChannel = $00000006;
  AuthenticationMethodEnumeration_SecureCertificate = $00000007;
  AuthenticationMethodEnumeration_SecureNoCertificate = $00000008;
  AuthenticationMethodEnumeration_SignatureCapture = $00000009;
  AuthenticationMethodEnumeration_UnknownMethod = $0000000A;

// Constantes pour enum BarcodeTypeEnumeration
type
  BarcodeTypeEnumeration = TOleEnum;
const
  BarcodeTypeEnumeration_EAN8 = $00000000;
  BarcodeTypeEnumeration_EAN13 = $00000001;
  BarcodeTypeEnumeration_UPCA = $00000002;
  BarcodeTypeEnumeration_Code25 = $00000003;
  BarcodeTypeEnumeration_Code128 = $00000004;
  BarcodeTypeEnumeration_PDF417 = $00000005;
  BarcodeTypeEnumeration_QRCODE = $00000006;

// Constantes pour enum CharacterHeightEnumeration
type
  CharacterHeightEnumeration = TOleEnum;
const
  CharacterHeightEnumeration_SingleHeight = $00000000;
  CharacterHeightEnumeration_DoubleHeight = $00000001;
  CharacterHeightEnumeration_HalfHeight = $00000002;

// Constantes pour enum CharacterStyleEnumeration
type
  CharacterStyleEnumeration = TOleEnum;
const
  CharacterStyleEnumeration_Normal = $00000000;
  CharacterStyleEnumeration_Bold = $00000001;
  CharacterStyleEnumeration_Italic = $00000002;
  CharacterStyleEnumeration_Underlined = $00000003;

// Constantes pour enum CharacterWidthEnumeration
type
  CharacterWidthEnumeration = TOleEnum;
const
  CharacterWidthEnumeration_SingleWidth = $00000000;
  CharacterWidthEnumeration_DoubleWidth = $00000001;

// Constantes pour enum CheckTypeCodeEnumeration
type
  CheckTypeCodeEnumeration = TOleEnum;
const
  CheckTypeCodeEnumeration_Personal = $00000000;
  CheckTypeCodeEnumeration_Company = $00000001;

// Constantes pour enum ColorEnumeration
type
  ColorEnumeration = TOleEnum;
const
  ColorEnumeration_White = $00000000;
  ColorEnumeration_Black = $00000001;
  ColorEnumeration_Red = $00000002;
  ColorEnumeration_Green = $00000003;
  ColorEnumeration_Blue = $00000004;
  ColorEnumeration_Yellow = $00000005;
  ColorEnumeration_Magenta = $00000006;
  ColorEnumeration_Cyan = $00000007;

// Constantes pour enum CustomerOrderReqEnumeration
type
  CustomerOrderReqEnumeration = TOleEnum;
const
  CustomerOrderReqEnumeration_Open = $00000000;
  CustomerOrderReqEnumeration_Closed = $00000001;
  CustomerOrderReqEnumeration_Both = $00000002;

// Constantes pour enum DeviceEnumeration
type
  DeviceEnumeration = TOleEnum;
const
  DeviceEnumeration_CashierDisplay = $00000000;
  DeviceEnumeration_CustomerDisplay = $00000001;
  DeviceEnumeration_CashierInput = $00000002;
  DeviceEnumeration_CustomerInput = $00000003;

// Constantes pour enum DocumentQualifierEnumeration
type
  DocumentQualifierEnumeration = TOleEnum;
const
  DocumentQualifierEnumeration_SaleReceipt = $00000000;
  DocumentQualifierEnumeration_CashierReceipt = $00000001;
  DocumentQualifierEnumeration_CustomerReceipt = $00000002;
  DocumentQualifierEnumeration_Document = $00000003;
  DocumentQualifierEnumeration_Voucher = $00000004;
  DocumentQualifierEnumeration_Journal = $00000005;

// Constantes pour enum EntryModeEnumeration
type
  EntryModeEnumeration = TOleEnum;
const
  EntryModeEnumeration_RFID = $00000000;
  EntryModeEnumeration_Keyed = $00000001;
  EntryModeEnumeration_Manual = $00000002;
  EntryModeEnumeration_File = $00000003;
  EntryModeEnumeration_Scanned = $00000004;
  EntryModeEnumeration_MagStripe = $00000005;
  EntryModeEnumeration_ICC = $00000006;
  EntryModeEnumeration_SynchronousICC = $00000007;
  EntryModeEnumeration_Tapped = $00000008;
  EntryModeEnumeration_Contactless = $00000009;
  EntryModeEnumeration_Mobile = $0000000A;

// Constantes pour enum ErrorConditionEnumeration
type
  ErrorConditionEnumeration = TOleEnum;
const
  ErrorConditionEnumeration_Aborted = $00000000;
  ErrorConditionEnumeration_Busy = $00000001;
  ErrorConditionEnumeration_Cancel = $00000002;
  ErrorConditionEnumeration_DeviceOut = $00000003;
  ErrorConditionEnumeration_InsertedCard = $00000004;
  ErrorConditionEnumeration_InProgress = $00000005;
  ErrorConditionEnumeration_LoggedOut = $00000006;
  ErrorConditionEnumeration_MessageFormat = $00000007;
  ErrorConditionEnumeration_NotAllowed = $00000008;
  ErrorConditionEnumeration_NotFound = $00000009;
  ErrorConditionEnumeration_PaymentRestriction = $0000000A;
  ErrorConditionEnumeration_Refusal = $0000000B;
  ErrorConditionEnumeration_UnavailableDevice = $0000000C;
  ErrorConditionEnumeration_UnavailableService = $0000000D;
  ErrorConditionEnumeration_InvalidCard = $0000000E;
  ErrorConditionEnumeration_UnreachableHost = $0000000F;
  ErrorConditionEnumeration_WrongPIN = $00000010;

// Constantes pour enum EventToNotifyEnumeration
type
  EventToNotifyEnumeration = TOleEnum;
const
  EventToNotifyEnumeration_BeginMaintenance = $00000000;
  EventToNotifyEnumeration_EndMaintenance = $00000001;
  EventToNotifyEnumeration_Shutdown = $00000002;
  EventToNotifyEnumeration_Initialised = $00000003;
  EventToNotifyEnumeration_OutOfOrder = $00000004;
  EventToNotifyEnumeration_Completed = $00000005;
  EventToNotifyEnumeration_Abort = $00000006;
  EventToNotifyEnumeration_SaleWakeUp = $00000007;
  EventToNotifyEnumeration_SaleAdmin = $00000008;
  EventToNotifyEnumeration_CustomerLanguage = $00000009;
  EventToNotifyEnumeration_KeyPressed = $0000000A;
  EventToNotifyEnumeration_SecurityAlarm = $0000000B;
  EventToNotifyEnumeration_StopAssistance = $0000000C;
  EventToNotifyEnumeration_CardInserted = $0000000D;
  EventToNotifyEnumeration_CardRemoved = $0000000E;
  EventToNotifyEnumeration_Reject = $0000000F;

// Constantes pour enum ForceEntryModeEnumeration
type
  ForceEntryModeEnumeration = TOleEnum;
const
  ForceEntryModeEnumeration_RFID = $00000000;
  ForceEntryModeEnumeration_Keyed = $00000001;
  ForceEntryModeEnumeration_Manual = $00000002;
  ForceEntryModeEnumeration_File = $00000003;
  ForceEntryModeEnumeration_Scanned = $00000004;
  ForceEntryModeEnumeration_MagStripe = $00000005;
  ForceEntryModeEnumeration_ICC = $00000006;
  ForceEntryModeEnumeration_SynchronousICC = $00000007;
  ForceEntryModeEnumeration_Tapped = $00000008;
  ForceEntryModeEnumeration_Contactless = $00000009;
  ForceEntryModeEnumeration_CheckReader = $0000000A;

// Constantes pour enum GenericProfileEnumeration
type
  GenericProfileEnumeration = TOleEnum;
const
  GenericProfileEnumeration_Basic = $00000000;
  GenericProfileEnumeration_Standard = $00000001;
  GenericProfileEnumeration_Extended = $00000002;

// Constantes pour enum GlobalStatusEnumeration
type
  GlobalStatusEnumeration = TOleEnum;
const
  GlobalStatusEnumeration_OK = $00000000;
  GlobalStatusEnumeration_Busy = $00000001;
  GlobalStatusEnumeration_Maintenance = $00000002;
  GlobalStatusEnumeration_Unreachable = $00000003;

// Constantes pour enum IdentificationSupportEnumeration
type
  IdentificationSupportEnumeration = TOleEnum;
const
  IdentificationSupportEnumeration_NoCard = $00000000;
  IdentificationSupportEnumeration_LoyaltyCard = $00000001;
  IdentificationSupportEnumeration_HybridCard = $00000002;
  IdentificationSupportEnumeration_LinkedCard = $00000003;

// Constantes pour enum IdentificationTypeEnumeration
type
  IdentificationTypeEnumeration = TOleEnum;
const
  IdentificationTypeEnumeration_PAN = $00000000;
  IdentificationTypeEnumeration_ISOTrack2 = $00000001;
  IdentificationTypeEnumeration_BarCode = $00000002;
  IdentificationTypeEnumeration_AccountNumber = $00000003;
  IdentificationTypeEnumeration_PhoneNumber = $00000004;

// Constantes pour enum InfoQualifyEnumeration
type
  InfoQualifyEnumeration = TOleEnum;
const
  InfoQualifyEnumeration_Status = $00000000;
  InfoQualifyEnumeration_Error = $00000001;
  InfoQualifyEnumeration_Display = $00000002;
  InfoQualifyEnumeration_Sound = $00000003;
  InfoQualifyEnumeration_Input = $00000004;
  InfoQualifyEnumeration_POIReplication = $00000005;
  InfoQualifyEnumeration_CustomerAssistance = $00000006;
  InfoQualifyEnumeration_Receipt = $00000007;
  InfoQualifyEnumeration_Document = $00000008;
  InfoQualifyEnumeration_Voucher = $00000009;

// Constantes pour enum InputCommandEnumeration
type
  InputCommandEnumeration = TOleEnum;
const
  InputCommandEnumeration_GetAnyKey = $00000000;
  InputCommandEnumeration_GetConfirmation = $00000001;
  InputCommandEnumeration_SiteManager = $00000002;
  InputCommandEnumeration_TextString = $00000003;
  InputCommandEnumeration_DigitString = $00000004;
  InputCommandEnumeration_DecimalString = $00000005;
  InputCommandEnumeration_GetFunctionKey = $00000006;
  InputCommandEnumeration_GetMenuEntry = $00000007;
  InputCommandEnumeration_Password = $00000008;

// Constantes pour enum InstalmentTypeEnumeration
type
  InstalmentTypeEnumeration = TOleEnum;
const
  InstalmentTypeEnumeration_DeferredInstalments = $00000000;
  InstalmentTypeEnumeration_EqualInstalments = $00000001;
  InstalmentTypeEnumeration_InequalInstalments = $00000002;

// Constantes pour enum LoyaltyHandlingEnumeration
type
  LoyaltyHandlingEnumeration = TOleEnum;
const
  LoyaltyHandlingEnumeration_Forbidden = $00000000;
  LoyaltyHandlingEnumeration_Processed = $00000001;
  LoyaltyHandlingEnumeration_Allowed = $00000002;
  LoyaltyHandlingEnumeration_Proposed = $00000003;
  LoyaltyHandlingEnumeration_Required = $00000004;

// Constantes pour enum LoyaltyTransactionTypeEnumeration
type
  LoyaltyTransactionTypeEnumeration = TOleEnum;
const
  LoyaltyTransactionTypeEnumeration_Award = $00000000;
  LoyaltyTransactionTypeEnumeration_Rebate = $00000001;
  LoyaltyTransactionTypeEnumeration_Redemption = $00000002;
  LoyaltyTransactionTypeEnumeration_AwardRefund = $00000003;
  LoyaltyTransactionTypeEnumeration_RebateRefund = $00000004;
  LoyaltyTransactionTypeEnumeration_RedemptionRefund = $00000005;

// Constantes pour enum LoyaltyUnitEnumeration
type
  LoyaltyUnitEnumeration = TOleEnum;
const
  LoyaltyUnitEnumeration_Point = $00000000;
  LoyaltyUnitEnumeration_Monetary = $00000001;

// Constantes pour enum MenuEntryTagEnumeration
type
  MenuEntryTagEnumeration = TOleEnum;
const
  MenuEntryTagEnumeration_Selectable = $00000000;
  MenuEntryTagEnumeration_NonSelectable = $00000001;
  MenuEntryTagEnumeration_SubMenu = $00000002;
  MenuEntryTagEnumeration_NonSelectableSubMenu = $00000003;

// Constantes pour enum MessageCategoryEnumeration
type
  MessageCategoryEnumeration = TOleEnum;
const
  MessageCategoryEnumeration_Abort = $00000000;
  MessageCategoryEnumeration_Admin = $00000001;
  MessageCategoryEnumeration_BalanceInquiry = $00000002;
  MessageCategoryEnumeration_Batch = $00000003;
  MessageCategoryEnumeration_CardAcquisition = $00000004;
  MessageCategoryEnumeration_CardReaderAPDU = $00000005;
  MessageCategoryEnumeration_CardReaderInit = $00000006;
  MessageCategoryEnumeration_CardReaderPowerOff = $00000007;
  MessageCategoryEnumeration_Diagnosis = $00000008;
  MessageCategoryEnumeration_Display = $00000009;
  MessageCategoryEnumeration_EnableService = $0000000A;
  MessageCategoryEnumeration_Event = $0000000B;
  MessageCategoryEnumeration_GetTotals = $0000000C;
  MessageCategoryEnumeration_Input = $0000000D;
  MessageCategoryEnumeration_InputUpdate = $0000000E;
  MessageCategoryEnumeration_Login = $0000000F;
  MessageCategoryEnumeration_Logout = $00000010;
  MessageCategoryEnumeration_Loyalty = $00000011;
  MessageCategoryEnumeration_Payment = $00000012;
  MessageCategoryEnumeration_PIN = $00000013;
  MessageCategoryEnumeration_Print = $00000014;
  MessageCategoryEnumeration_Reconciliation = $00000015;
  MessageCategoryEnumeration_Reversal = $00000016;
  MessageCategoryEnumeration_Sound = $00000017;
  MessageCategoryEnumeration_StoredValue = $00000018;
  MessageCategoryEnumeration_TransactionStatus = $00000019;
  MessageCategoryEnumeration_Transmit = $0000001A;

// Constantes pour enum MessageClassEnumeration
type
  MessageClassEnumeration = TOleEnum;
const
  MessageClassEnumeration_Service = $00000000;
  MessageClassEnumeration_Device = $00000001;
  MessageClassEnumeration_Event = $00000002;

// Constantes pour enum MessageTypeEnumeration
type
  MessageTypeEnumeration = TOleEnum;
const
  MessageTypeEnumeration_Request = $00000000;
  MessageTypeEnumeration_Response = $00000001;
  MessageTypeEnumeration_Notification = $00000002;

// Constantes pour enum OutputFormatEnumeration
type
  OutputFormatEnumeration = TOleEnum;
const
  OutputFormatEnumeration_MessageRef = $00000000;
  OutputFormatEnumeration_Text = $00000001;
  OutputFormatEnumeration_XHTML = $00000002;
  OutputFormatEnumeration_BarCode = $00000003;

// Constantes pour enum PaymentInstrumentTypeEnumeration
type
  PaymentInstrumentTypeEnumeration = TOleEnum;
const
  PaymentInstrumentTypeEnumeration_Card = $00000000;
  PaymentInstrumentTypeEnumeration_Check = $00000001;
  PaymentInstrumentTypeEnumeration_Mobile = $00000002;
  PaymentInstrumentTypeEnumeration_StoredValue = $00000003;
  PaymentInstrumentTypeEnumeration_Cash = $00000004;

// Constantes pour enum PaymentTypeEnumeration
type
  PaymentTypeEnumeration = TOleEnum;
const
  PaymentTypeEnumeration_Normal = $00000000;
  PaymentTypeEnumeration_Refund = $00000001;
  PaymentTypeEnumeration_OneTimeReservation = $00000002;
  PaymentTypeEnumeration_FirstReservation = $00000003;
  PaymentTypeEnumeration_UpdateReservation = $00000004;
  PaymentTypeEnumeration_Completion = $00000005;
  PaymentTypeEnumeration_CashAdvance = $00000006;
  PaymentTypeEnumeration_CashDeposit = $00000007;
  PaymentTypeEnumeration_Recurring = $00000008;
  PaymentTypeEnumeration_Instalment = $00000009;
  PaymentTypeEnumeration_IssuerInstalment = $0000000A;
  PaymentTypeEnumeration_PaidOut = $0000000B;

// Constantes pour enum PeriodUnitEnumeration
type
  PeriodUnitEnumeration = TOleEnum;
const
  PeriodUnitEnumeration_Daily = $00000000;
  PeriodUnitEnumeration_Weekly = $00000001;
  PeriodUnitEnumeration_Monthly = $00000002;
  PeriodUnitEnumeration_Annual = $00000003;

// Constantes pour enum PINFormatEnumeration
type
  PINFormatEnumeration = TOleEnum;
const
  PINFormatEnumeration_ISO0 = $00000000;
  PINFormatEnumeration_ISO1 = $00000001;
  PINFormatEnumeration_ISO2 = $00000002;
  PINFormatEnumeration_ISO3 = $00000003;

// Constantes pour enum PINRequestTypeEnumeration
type
  PINRequestTypeEnumeration = TOleEnum;
const
  PINRequestTypeEnumeration_PINVerify = $00000000;
  PINRequestTypeEnumeration_PINVerifyOnly = $00000001;
  PINRequestTypeEnumeration_PINEnter = $00000002;

// Constantes pour enum POICapabilitiesEnumeration
type
  POICapabilitiesEnumeration = TOleEnum;
const
  POICapabilitiesEnumeration_CashierDisplay = $00000000;
  POICapabilitiesEnumeration_CashierError = $00000001;
  POICapabilitiesEnumeration_CashierInput = $00000002;
  POICapabilitiesEnumeration_CustomerDisplay = $00000003;
  POICapabilitiesEnumeration_CustomerError = $00000004;
  POICapabilitiesEnumeration_CustomerInput = $00000005;
  POICapabilitiesEnumeration_PrinterReceipt = $00000006;
  POICapabilitiesEnumeration_PrinterDocument = $00000007;
  POICapabilitiesEnumeration_PrinterVoucher = $00000008;
  POICapabilitiesEnumeration_MagStripe = $00000009;
  POICapabilitiesEnumeration_ICC = $0000000A;
  POICapabilitiesEnumeration_EMVContactless = $0000000B;
  POICapabilitiesEnumeration_CashHandling = $0000000C;

// Constantes pour enum PrinterStatusEnumeration
type
  PrinterStatusEnumeration = TOleEnum;
const
  PrinterStatusEnumeration_OK = $00000000;
  PrinterStatusEnumeration_PaperLow = $00000001;
  PrinterStatusEnumeration_NoPaper = $00000002;
  PrinterStatusEnumeration_PaperJam = $00000003;
  PrinterStatusEnumeration_OutOfOrder = $00000004;

// Constantes pour enum ReconciliationTypeEnumeration
type
  ReconciliationTypeEnumeration = TOleEnum;
const
  ReconciliationTypeEnumeration_SaleReconciliation = $00000000;
  ReconciliationTypeEnumeration_AcquirerSynchronisation = $00000001;
  ReconciliationTypeEnumeration_AcquirerReconciliation = $00000002;
  ReconciliationTypeEnumeration_PreviousReconciliation = $00000003;

// Constantes pour enum ResponseModeEnumeration
type
  ResponseModeEnumeration = TOleEnum;
const
  ResponseModeEnumeration_NotRequired = $00000000;
  ResponseModeEnumeration_Immediate = $00000001;
  ResponseModeEnumeration_PrintEnd = $00000002;
  ResponseModeEnumeration_SoundEnd = $00000003;

// Constantes pour enum ResultEnumeration
type
  ResultEnumeration = TOleEnum;
const
  ResultEnumeration_Success = $00000000;
  ResultEnumeration_Failure = $00000001;
  ResultEnumeration_Partial = $00000002;

// Constantes pour enum ReversalReasonEnumeration
type
  ReversalReasonEnumeration = TOleEnum;
const
  ReversalReasonEnumeration_CustCancel = $00000000;
  ReversalReasonEnumeration_MerchantCancel = $00000001;
  ReversalReasonEnumeration_Malfunction = $00000002;
  ReversalReasonEnumeration_Unable2Compl = $00000003;

// Constantes pour enum SaleCapabilitiesEnumeration
type
  SaleCapabilitiesEnumeration = TOleEnum;
const
  SaleCapabilitiesEnumeration_CashierStatus = $00000000;
  SaleCapabilitiesEnumeration_CashierError = $00000001;
  SaleCapabilitiesEnumeration_CashierDisplay = $00000002;
  SaleCapabilitiesEnumeration_POIReplication = $00000003;
  SaleCapabilitiesEnumeration_CashierInput = $00000004;
  SaleCapabilitiesEnumeration_CustomerAssistance = $00000005;
  SaleCapabilitiesEnumeration_CustomerDisplay = $00000006;
  SaleCapabilitiesEnumeration_CustomerError = $00000007;
  SaleCapabilitiesEnumeration_CustomerInput = $00000008;
  SaleCapabilitiesEnumeration_PrinterReceipt = $00000009;
  SaleCapabilitiesEnumeration_PrinterDocument = $0000000A;
  SaleCapabilitiesEnumeration_PrinterVoucher = $0000000B;
  SaleCapabilitiesEnumeration_MagStripe = $0000000C;
  SaleCapabilitiesEnumeration_ICC = $0000000D;
  SaleCapabilitiesEnumeration_EMVContactless = $0000000E;

// Constantes pour enum ServicesEnabledEnumeration
type
  ServicesEnabledEnumeration = TOleEnum;
const
  ServicesEnabledEnumeration_CardAcquisition = $00000000;
  ServicesEnabledEnumeration_Payment = $00000001;
  ServicesEnabledEnumeration_Loyalty = $00000002;

// Constantes pour enum ServiceProfilesEnumeration
type
  ServiceProfilesEnumeration = TOleEnum;
const
  ServiceProfilesEnumeration_Synchro = $00000000;
  ServiceProfilesEnumeration_Batch = $00000001;
  ServiceProfilesEnumeration_OneTimeRes = $00000002;
  ServiceProfilesEnumeration_Reservation = $00000003;
  ServiceProfilesEnumeration_Loyalty = $00000004;
  ServiceProfilesEnumeration_StoredValue = $00000005;
  ServiceProfilesEnumeration_PIN = $00000006;
  ServiceProfilesEnumeration_CardReader = $00000007;
  ServiceProfilesEnumeration_Sound = $00000008;
  ServiceProfilesEnumeration_Communication = $00000009;

// Constantes pour enum SoundActionEnumeration
type
  SoundActionEnumeration = TOleEnum;
const
  SoundActionEnumeration_StartSound = $00000000;
  SoundActionEnumeration_StopSound = $00000001;
  SoundActionEnumeration_SetDefaultVolume = $00000002;

// Constantes pour enum SoundFormatEnumeration
type
  SoundFormatEnumeration = TOleEnum;
const
  SoundFormatEnumeration_SoundRef = $00000000;
  SoundFormatEnumeration_MessageRef = $00000001;
  SoundFormatEnumeration_Text = $00000002;

// Constantes pour enum StoredValueAccountTypeEnumeration
type
  StoredValueAccountTypeEnumeration = TOleEnum;
const
  StoredValueAccountTypeEnumeration_GiftCard = $00000000;
  StoredValueAccountTypeEnumeration_PhoneCard = $00000001;
  StoredValueAccountTypeEnumeration_Other = $00000002;

// Constantes pour enum StoredValueTransactionTypeEnumeration
type
  StoredValueTransactionTypeEnumeration = TOleEnum;
const
  StoredValueTransactionTypeEnumeration_Reserve = $00000000;
  StoredValueTransactionTypeEnumeration_Activate = $00000001;
  StoredValueTransactionTypeEnumeration_Load = $00000002;
  StoredValueTransactionTypeEnumeration_Unload = $00000003;
  StoredValueTransactionTypeEnumeration_Reverse = $00000004;
  StoredValueTransactionTypeEnumeration_Duplicate = $00000005;

// Constantes pour enum TerminalEnvironmentEnumeration
type
  TerminalEnvironmentEnumeration = TOleEnum;
const
  TerminalEnvironmentEnumeration_Attended = $00000000;
  TerminalEnvironmentEnumeration_SemiAttended = $00000001;
  TerminalEnvironmentEnumeration_Unattended = $00000002;

// Constantes pour enum TokenRequestedTypeEnumeration
type
  TokenRequestedTypeEnumeration = TOleEnum;
const
  TokenRequestedTypeEnumeration_Transaction = $00000000;
  TokenRequestedTypeEnumeration_Customer = $00000001;

// Constantes pour enum TotalDetailsEnumeration
type
  TotalDetailsEnumeration = TOleEnum;
const
  TotalDetailsEnumeration_POIID = $00000000;
  TotalDetailsEnumeration_SaleID = $00000001;
  TotalDetailsEnumeration_OperatorID = $00000002;
  TotalDetailsEnumeration_ShiftNumber = $00000003;
  TotalDetailsEnumeration_TotalsGroupID = $00000004;

// Constantes pour enum TrackFormatEnumeration
type
  TrackFormatEnumeration = TOleEnum;
const
  TrackFormatEnumeration_ISO = $00000000;
  TrackFormatEnumeration_JISI = $00000001;
  TrackFormatEnumeration_JISII = $00000002;
  TrackFormatEnumeration_AAMVA = $00000003;
  TrackFormatEnumeration_CMC7 = $00000004;
  TrackFormatEnumeration_E13B = $00000005;

// Constantes pour enum TransactionActionEnumeration
type
  TransactionActionEnumeration = TOleEnum;
const
  TransactionActionEnumeration_StartTransaction = $00000000;
  TransactionActionEnumeration_AbortTransaction = $00000001;

// Constantes pour enum TransactionTypeEnumeration
type
  TransactionTypeEnumeration = TOleEnum;
const
  TransactionTypeEnumeration_Debit = $00000000;
  TransactionTypeEnumeration_Credit = $00000001;
  TransactionTypeEnumeration_ReverseDebit = $00000002;
  TransactionTypeEnumeration_ReverseCredit = $00000003;
  TransactionTypeEnumeration_OneTimeReservation = $00000004;
  TransactionTypeEnumeration_CompletedDeffered = $00000005;
  TransactionTypeEnumeration_FirstReservation = $00000006;
  TransactionTypeEnumeration_UpdateReservation = $00000007;
  TransactionTypeEnumeration_CompletedReservation = $00000008;
  TransactionTypeEnumeration_CashAdvance = $00000009;
  TransactionTypeEnumeration_IssuerInstalment = $0000000A;
  TransactionTypeEnumeration_Declined = $0000000B;
  TransactionTypeEnumeration_Failed = $0000000C;
  TransactionTypeEnumeration_Award = $0000000D;
  TransactionTypeEnumeration_ReverseAward = $0000000E;
  TransactionTypeEnumeration_Redemption = $0000000F;
  TransactionTypeEnumeration_ReverseRedemption = $00000010;
  TransactionTypeEnumeration_Rebate = $00000011;
  TransactionTypeEnumeration_ReverseRebate = $00000012;

// Constantes pour enum UnitOfMeasureEnumeration
type
  UnitOfMeasureEnumeration = TOleEnum;
const
  UnitOfMeasureEnumeration_Case = $00000000;
  UnitOfMeasureEnumeration_Foot = $00000001;
  UnitOfMeasureEnumeration_UKGallon = $00000002;
  UnitOfMeasureEnumeration_USGallon = $00000003;
  UnitOfMeasureEnumeration_Gram = $00000004;
  UnitOfMeasureEnumeration_Inch = $00000005;
  UnitOfMeasureEnumeration_Kilogram = $00000006;
  UnitOfMeasureEnumeration_Pound = $00000007;
  UnitOfMeasureEnumeration_Meter = $00000008;
  UnitOfMeasureEnumeration_Centimetre = $00000009;
  UnitOfMeasureEnumeration_Litre = $0000000A;
  UnitOfMeasureEnumeration_Centilitre = $0000000B;
  UnitOfMeasureEnumeration_Ounce = $0000000C;
  UnitOfMeasureEnumeration_Quart = $0000000D;
  UnitOfMeasureEnumeration_Pint = $0000000E;
  UnitOfMeasureEnumeration_Mile = $0000000F;
  UnitOfMeasureEnumeration_Kilometre = $00000010;
  UnitOfMeasureEnumeration_Yard = $00000011;
  UnitOfMeasureEnumeration_Other = $00000012;

// Constantes pour enum AlgorithmEnumeration
type
  AlgorithmEnumeration = TOleEnum;
const
  AlgorithmEnumeration_idretailcbcmac = $00000000;
  AlgorithmEnumeration_idretailcbcmacsha256 = $00000001;
  AlgorithmEnumeration_idukptwrap = $00000002;
  AlgorithmEnumeration_iddukptwrap = $00000003;
  AlgorithmEnumeration_desede3ecb = $00000004;
  AlgorithmEnumeration_desede3cbc = $00000005;
  AlgorithmEnumeration_idsha256 = $00000006;
  AlgorithmEnumeration_sha256WithRSAEncryption = $00000007;
  AlgorithmEnumeration_rsaEncryption = $00000008;

// Constantes pour enum AttributeTypeEnumeration
type
  AttributeTypeEnumeration = TOleEnum;
const
  AttributeTypeEnumeration_idatcommonName = $00000000;
  AttributeTypeEnumeration_idatlocalityName = $00000001;
  AttributeTypeEnumeration_idatorganizationName = $00000002;
  AttributeTypeEnumeration_idatorganizationalUnitName = $00000003;
  AttributeTypeEnumeration_idatcountryName = $00000004;

// Constantes pour enum ContentTypeEnumeration
type
  ContentTypeEnumeration = TOleEnum;
const
  ContentTypeEnumeration_iddata = $00000000;
  ContentTypeEnumeration_idsignedData = $00000001;
  ContentTypeEnumeration_idenvelopedData = $00000002;
  ContentTypeEnumeration_iddigestedData = $00000003;
  ContentTypeEnumeration_idencryptedData = $00000004;
  ContentTypeEnumeration_idctauthData = $00000005;

// Constantes pour enum VersionEnumeration
type
  VersionEnumeration = TOleEnum;
const
  VersionEnumeration_v0 = $00000000;
  VersionEnumeration_v1 = $00000001;
  VersionEnumeration_v2 = $00000002;
  VersionEnumeration_v3 = $00000003;
  VersionEnumeration_v4 = $00000004;
  VersionEnumeration_v5 = $00000005;

// Constantes pour enum TagsEnumeration
type
  TagsEnumeration = TOleEnum;
const
  TagsEnumeration_AbortReason = $00000000;
  TagsEnumeration_AccessedBy = $00000001;
  TagsEnumeration_AccountNumber = $00000002;
  TagsEnumeration_AccountType = $00000003;
  TagsEnumeration_AcquirerID = $00000004;
  TagsEnumeration_AcquirerPOIID = $00000005;
  TagsEnumeration_AcquirerTransactionID = $00000006;
  TagsEnumeration_AdditionalInformation = $00000007;
  TagsEnumeration_AdditionalInput = $00000008;
  TagsEnumeration_AdditionalProductInfo = $00000009;
  TagsEnumeration_AdditionalResponse = $0000000A;
  TagsEnumeration_Algorithm = $0000000B;
  TagsEnumeration_Alignment = $0000000C;
  TagsEnumeration_AllowedLoyaltyBrand = $0000000D;
  TagsEnumeration_AllowedPaymentBrand = $0000000E;
  TagsEnumeration_AllowedProduct = $0000000F;
  TagsEnumeration_AllowedProductCode = $00000010;
  TagsEnumeration_AmountsReq = $00000011;
  TagsEnumeration_AmountsResp = $00000012;
  TagsEnumeration_APDUClass = $00000013;
  TagsEnumeration_APDUData = $00000014;
  TagsEnumeration_APDUExpectedLength = $00000015;
  TagsEnumeration_APDUInstruction = $00000016;
  TagsEnumeration_APDUPar1 = $00000017;
  TagsEnumeration_APDUPar2 = $00000018;
  TagsEnumeration_ApplicationName = $00000019;
  TagsEnumeration_ApprovalCode = $0000001A;
  TagsEnumeration_AreaSize = $0000001B;
  TagsEnumeration_ATRValue = $0000001C;
  TagsEnumeration_AttributeType = $0000001D;
  TagsEnumeration_AttributeValue = $0000001E;
  TagsEnumeration_AuthenticationMethod = $0000001F;
  TagsEnumeration_AuthorizedAmount = $00000020;
  TagsEnumeration_BankID = $00000021;
  TagsEnumeration_BarcodeType = $00000022;
  TagsEnumeration_BeepKeyFlag = $00000023;
  TagsEnumeration_CapturedSignature = $00000024;
  TagsEnumeration_CardAcquisitionReference = $00000025;
  TagsEnumeration_CardAcquisitionTransaction = $00000026;
  TagsEnumeration_CardBrand = $00000027;
  TagsEnumeration_CardCountryCode = $00000028;
  TagsEnumeration_CardData = $00000029;
  TagsEnumeration_CardholderPIN = $0000002A;
  TagsEnumeration_CardReaderOKFlag = $0000002B;
  TagsEnumeration_CardReaderOKFlagSpecified = $0000002C;
  TagsEnumeration_CardSeqNumb = $0000002D;
  TagsEnumeration_CardStatusWords = $0000002E;
  TagsEnumeration_CashBackAmount = $0000002F;
  TagsEnumeration_CashBackAmountSpecified = $00000030;
  TagsEnumeration_CashBackFlag = $00000031;
  TagsEnumeration_CashBackFlagSpecified = $00000032;
  TagsEnumeration_CashHandlingDevice = $00000033;
  TagsEnumeration_CashHandlingOKFlag = $00000034;
  TagsEnumeration_Certificate = $00000035;
  TagsEnumeration_CertificationCode = $00000036;
  TagsEnumeration_CharacterHeight = $00000037;
  TagsEnumeration_CharacterSet = $00000038;
  TagsEnumeration_CharacterStyle = $00000039;
  TagsEnumeration_CharacterWidth = $0000003A;
  TagsEnumeration_Charges = $0000003B;
  TagsEnumeration_ChargesSpecified = $0000003C;
  TagsEnumeration_CheckCardNumber = $0000003D;
  TagsEnumeration_CheckData = $0000003E;
  TagsEnumeration_CheckNumber = $0000003F;
  TagsEnumeration_CoinsOrBills = $00000040;
  TagsEnumeration_Color = $00000041;
  TagsEnumeration_Commission = $00000042;
  TagsEnumeration_CommissionSpecified = $00000043;
  TagsEnumeration_CommunicationOKFlag = $00000044;
  TagsEnumeration_CommunicationOKFlagSpecified = $00000045;
  TagsEnumeration_ConfirmedFlag = $00000046;
  TagsEnumeration_ConfirmedFlagSpecified = $00000047;
  TagsEnumeration_Content = $00000048;
  TagsEnumeration_ContentEncryptionAlgorithm = $00000049;
  TagsEnumeration_ContentType = $0000004A;
  TagsEnumeration_ConvertedAmount = $0000004B;
  TagsEnumeration_Country = $0000004C;
  TagsEnumeration_CumulativeAmount = $0000004D;
  TagsEnumeration_CumulativeAmountSpecified = $0000004E;
  TagsEnumeration_Currency = $0000004F;
  TagsEnumeration_CurrencyConversion = $00000050;
  TagsEnumeration_CurrentAmount = $00000051;
  TagsEnumeration_CurrentBalance = $00000052;
  TagsEnumeration_CurrentBalanceSpecified = $00000053;
  TagsEnumeration_CustomerApprovedFlag = $00000054;
  TagsEnumeration_CustomerLanguage = $00000055;
  TagsEnumeration_CustomerOrder = $00000056;
  TagsEnumeration_CustomerOrderID = $00000057;
  TagsEnumeration_CustomerOrderReq = $00000058;
  TagsEnumeration_DateTime = $00000059;
  TagsEnumeration_DebitPreferredFlag = $0000005A;
  TagsEnumeration_Declaration = $0000005B;
  TagsEnumeration_DefaultInputString = $0000005C;
  TagsEnumeration_DefaultSelectedFlag = $0000005D;
  TagsEnumeration_DerivationIdentifier = $0000005E;
  TagsEnumeration_DestinationAddress = $0000005F;
  TagsEnumeration_Device = $00000060;
  TagsEnumeration_DeviceID = $00000061;
  TagsEnumeration_Digest = $00000062;
  TagsEnumeration_DigestAlgorithm = $00000063;
  TagsEnumeration_DigitInput = $00000064;
  TagsEnumeration_DisableCancelFlag = $00000065;
  TagsEnumeration_DisableCorrectFlag = $00000066;
  TagsEnumeration_DisableValidFlag = $00000067;
  TagsEnumeration_DisplayOutput = $00000068;
  TagsEnumeration_DocumentQualifier = $00000069;
  TagsEnumeration_EanUpc = $0000006A;
  TagsEnumeration_EncapsulatedContent = $0000006B;
  TagsEnumeration_EncrPINBlock = $0000006C;
  TagsEnumeration_EncryptedContent = $0000006D;
  TagsEnumeration_EncryptedData = $0000006E;
  TagsEnumeration_EncryptedKey = $0000006F;
  TagsEnumeration_EndDate = $00000070;
  TagsEnumeration_EndDateSpecified = $00000071;
  TagsEnumeration_EndOfLineFlag = $00000072;
  TagsEnumeration_EntryMode = $00000073;
  TagsEnumeration_ErrorCondition = $00000074;
  TagsEnumeration_EventDetails = $00000075;
  TagsEnumeration_EventToNotify = $00000076;
  TagsEnumeration_ExpiryDate = $00000077;
  TagsEnumeration_ExpiryDateTime = $00000078;
  TagsEnumeration_ExpiryDateTimeSpecified = $00000079;
  TagsEnumeration_FirstAmount = $0000007A;
  TagsEnumeration_FirstAmountSpecified = $0000007B;
  TagsEnumeration_FirstPaymentDate = $0000007C;
  TagsEnumeration_Font = $0000007D;
  TagsEnumeration_ForceCustomerSelectionFlag = $0000007E;
  TagsEnumeration_ForceEntryMode = $0000007F;
  TagsEnumeration_ForceOnlineFlag = $00000080;
  TagsEnumeration_ForecastedAmount = $00000081;
  TagsEnumeration_FraudPreventionFlag = $00000082;
  TagsEnumeration_FraudPreventionFlagSpecified = $00000083;
  TagsEnumeration_FromRightToLeftFlag = $00000084;
  TagsEnumeration_FunctionKey = $00000085;
  TagsEnumeration_GenericProfile = $00000086;
  TagsEnumeration_GeographicCoordinates = $00000087;
  TagsEnumeration_Geolocation = $00000088;
  TagsEnumeration_GlobalCorrectionFlag = $00000089;
  TagsEnumeration_GlobalStatus = $0000008A;
  TagsEnumeration_HostDiagnosisFlag = $0000008B;
  TagsEnumeration_HostReconciliationID = $0000008C;
  TagsEnumeration_HostStatus = $0000008D;
  TagsEnumeration_HostTransactionID = $0000008E;
  TagsEnumeration_ICCResetData = $0000008F;
  TagsEnumeration_IdentificationSupport = $00000090;
  TagsEnumeration_IdentificationType = $00000091;
  TagsEnumeration_IMEI = $00000092;
  TagsEnumeration_ImmediateResponseFlag = $00000093;
  TagsEnumeration_IMSI = $00000094;
  TagsEnumeration_InfoQualify = $00000095;
  TagsEnumeration_InitialisationVector = $00000096;
  TagsEnumeration_Input = $00000097;
  TagsEnumeration_InputCommand = $00000098;
  TagsEnumeration_InputData = $00000099;
  TagsEnumeration_InputResult = $0000009A;
  TagsEnumeration_Instalment = $0000009B;
  TagsEnumeration_InstalmentType1 = $0000009C;
  TagsEnumeration_IntegratedPrintFlag = $0000009D;
  TagsEnumeration_IsReachableFlag = $0000009E;
  TagsEnumeration_Issuer = $0000009F;
  TagsEnumeration_IssuerAndSerialNumber = $000000A0;
  TagsEnumeration_Item = $000000A1;
  TagsEnumeration_ItemAmount = $000000A2;
  TagsEnumeration_ItemAmountSpecified = $000000A3;
  TagsEnumeration_ItemID = $000000A4;
  TagsEnumeration_Items = $000000A5;
  TagsEnumeration_KEKIdentifier = $000000A6;
  TagsEnumeration_KeyEncryptionAlgorithm = $000000A7;
  TagsEnumeration_KeyIdentifier = $000000A8;
  TagsEnumeration_KeyName = $000000A9;
  TagsEnumeration_KeyReference = $000000AA;
  TagsEnumeration_KeyVersion = $000000AB;
  TagsEnumeration_Language = $000000AC;
  TagsEnumeration_Latitude = $000000AD;
  TagsEnumeration_LeaveCardFlag = $000000AE;
  TagsEnumeration_LoggedSaleID = $000000AF;
  TagsEnumeration_Longitude = $000000B0;
  TagsEnumeration_LoyaltyAccount = $000000B1;
  TagsEnumeration_LoyaltyAccountID = $000000B2;
  TagsEnumeration_LoyaltyAccountReq = $000000B3;
  TagsEnumeration_LoyaltyAccountStatus = $000000B4;
  TagsEnumeration_LoyaltyAcquirerData = $000000B5;
  TagsEnumeration_LoyaltyAcquirerID = $000000B6;
  TagsEnumeration_LoyaltyAmount = $000000B7;
  TagsEnumeration_LoyaltyBrand = $000000B8;
  TagsEnumeration_LoyaltyCurrency = $000000B9;
  TagsEnumeration_LoyaltyData = $000000BA;
  TagsEnumeration_LoyaltyHandling = $000000BB;
  TagsEnumeration_LoyaltyResult = $000000BC;
  TagsEnumeration_LoyaltyTotals = $000000BD;
  TagsEnumeration_LoyaltyTransaction = $000000BE;
  TagsEnumeration_LoyaltyTransactionID = $000000BF;
  TagsEnumeration_LoyaltyTransactionType1 = $000000C0;
  TagsEnumeration_LoyaltyUnit = $000000C1;
  TagsEnumeration_MAC = $000000C2;
  TagsEnumeration_MACAlgorithm = $000000C3;
  TagsEnumeration_MaintenanceAllowed = $000000C4;
  TagsEnumeration_MaintenanceRequiredFlag = $000000C5;
  TagsEnumeration_ManufacturerID = $000000C6;
  TagsEnumeration_Markup = $000000C7;
  TagsEnumeration_MarkupSpecified = $000000C8;
  TagsEnumeration_MaskCharactersFlag = $000000C9;
  TagsEnumeration_MaskedMSISDN = $000000CA;
  TagsEnumeration_MaskedPAN = $000000CB;
  TagsEnumeration_MaxDecimalLength = $000000CC;
  TagsEnumeration_MaximumCashBackAmount = $000000CD;
  TagsEnumeration_MaximumCashBackAmountSpecified = $000000CE;
  TagsEnumeration_MaximumTransmitTime = $000000CF;
  TagsEnumeration_MaxInputTime = $000000D0;
  TagsEnumeration_MaxLength = $000000D1;
  TagsEnumeration_MaxWaitingTime = $000000D2;
  TagsEnumeration_MenuBackFlag = $000000D3;
  TagsEnumeration_MenuEntry = $000000D4;
  TagsEnumeration_MenuEntryNumber = $000000D5;
  TagsEnumeration_MenuEntryTag = $000000D6;
  TagsEnumeration_MerchantAddress = $000000D7;
  TagsEnumeration_MerchantCategoryCode = $000000D8;
  TagsEnumeration_MerchantCountry = $000000D9;
  TagsEnumeration_MerchantID = $000000DA;
  TagsEnumeration_MerchantName = $000000DB;
  TagsEnumeration_MerchantOverrideFlag = $000000DC;
  TagsEnumeration_Message = $000000DD;
  TagsEnumeration_MessageCategory = $000000DE;
  TagsEnumeration_MessageClass = $000000DF;
  TagsEnumeration_MessageHeader = $000000E0;
  TagsEnumeration_MessageReference = $000000E1;
  TagsEnumeration_MessageType = $000000E2;
  TagsEnumeration_MinimumAmountToDeliver = $000000E3;
  TagsEnumeration_MinimumAmountToDeliverSpecified = $000000E4;
  TagsEnumeration_MinimumDisplayTime = $000000E5;
  TagsEnumeration_MinimumSplitAmount = $000000E6;
  TagsEnumeration_MinimumSplitAmountSpecified = $000000E7;
  TagsEnumeration_MinLength = $000000E8;
  TagsEnumeration_MobileCountryCode = $000000E9;
  TagsEnumeration_MobileData = $000000EA;
  TagsEnumeration_MobileNetworkCode = $000000EB;
  TagsEnumeration_MSISDN = $000000EC;
  TagsEnumeration_NotifyCardInputFlag = $000000ED;
  TagsEnumeration_Number = $000000EE;
  TagsEnumeration_OnlineFlag = $000000EF;
  TagsEnumeration_OpenOrderState = $000000F0;
  TagsEnumeration_OperatorID = $000000F1;
  TagsEnumeration_OperatorLanguage = $000000F2;
  TagsEnumeration_OriginalPOITransaction = $000000F3;
  TagsEnumeration_OutputBarcode = $000000F4;
  TagsEnumeration_OutputContent = $000000F5;
  TagsEnumeration_OutputFormat = $000000F6;
  TagsEnumeration_OutputResult = $000000F7;
  TagsEnumeration_OutputSignature = $000000F8;
  TagsEnumeration_OutputText = $000000F9;
  TagsEnumeration_OutputXHTML = $000000FA;
  TagsEnumeration_OwnerName = $000000FB;
  TagsEnumeration_PaidAmount = $000000FC;
  TagsEnumeration_PaidAmountSpecified = $000000FD;
  TagsEnumeration_PAN = $000000FE;
  TagsEnumeration_Parameter = $000000FF;
  TagsEnumeration_Password = $00000100;
  TagsEnumeration_PaymentAccountRef = $00000101;
  TagsEnumeration_PaymentAccountReq = $00000102;
  TagsEnumeration_PaymentAccountStatus = $00000103;
  TagsEnumeration_PaymentAcquirerData = $00000104;
  TagsEnumeration_PaymentBrand = $00000105;
  TagsEnumeration_PaymentCurrency = $00000106;
  TagsEnumeration_PaymentData = $00000107;
  TagsEnumeration_PaymentInstrumentData = $00000108;
  TagsEnumeration_PaymentInstrumentType = $00000109;
  TagsEnumeration_PaymentReceipt = $0000010A;
  TagsEnumeration_PaymentResult = $0000010B;
  TagsEnumeration_PaymentToken = $0000010C;
  TagsEnumeration_PaymentTotals = $0000010D;
  TagsEnumeration_PaymentTransaction = $0000010E;
  TagsEnumeration_PaymentType = $0000010F;
  TagsEnumeration_PEDOKFlag = $00000110;
  TagsEnumeration_PEDOKFlagSpecified = $00000111;
  TagsEnumeration_PerformedTransaction = $00000112;
  TagsEnumeration_Period = $00000113;
  TagsEnumeration_PeriodUnit = $00000114;
  TagsEnumeration_PINEncAlgorithm = $00000115;
  TagsEnumeration_PINFormat = $00000116;
  TagsEnumeration_PINRequestType1 = $00000117;
  TagsEnumeration_PINVerifMethod = $00000118;
  TagsEnumeration_PlanID = $00000119;
  TagsEnumeration_POICapabilities = $0000011A;
  TagsEnumeration_POIData = $0000011B;
  TagsEnumeration_POIID = $0000011C;
  TagsEnumeration_POIProfile = $0000011D;
  TagsEnumeration_POIReconciliationID = $0000011E;
  TagsEnumeration_POISerialNumber = $0000011F;
  TagsEnumeration_POISoftware = $00000120;
  TagsEnumeration_POIStatus = $00000121;
  TagsEnumeration_POISystemData = $00000122;
  TagsEnumeration_POITerminalData = $00000123;
  TagsEnumeration_POITransactionID = $00000124;
  TagsEnumeration_PredefinedContent = $00000125;
  TagsEnumeration_PrinterStatus = $00000126;
  TagsEnumeration_PrintOutput = $00000127;
  TagsEnumeration_ProductCode = $00000128;
  TagsEnumeration_ProductLabel = $00000129;
  TagsEnumeration_ProtectedCardData = $0000012A;
  TagsEnumeration_ProtectedMobileData = $0000012B;
  TagsEnumeration_ProtectedSignature = $0000012C;
  TagsEnumeration_ProtocolVersion = $0000012D;
  TagsEnumeration_Quantity = $0000012E;
  TagsEnumeration_QuantitySpecified = $0000012F;
  TagsEnumeration_Rate = $00000130;
  TagsEnumeration_RateSpecified = $00000131;
  TagsEnumeration_RebateLabel = $00000132;
  TagsEnumeration_Rebates = $00000133;
  TagsEnumeration_ReceiptReprintFlag = $00000134;
  TagsEnumeration_RecipientIdentifier = $00000135;
  TagsEnumeration_ReconciliationType = $00000136;
  TagsEnumeration_ReferenceID = $00000137;
  TagsEnumeration_RegistrationID = $00000138;
  TagsEnumeration_RejectedMessage = $00000139;
  TagsEnumeration_RelativeDistinguishedName = $0000013A;
  TagsEnumeration_RemoveAllFlag = $0000013B;
  TagsEnumeration_RemoveAllFlagSpecified = $0000013C;
  TagsEnumeration_RepeatedMessageResponse = $0000013D;
  TagsEnumeration_RequestedAmount = $0000013E;
  TagsEnumeration_RequestedAmountSpecified = $0000013F;
  TagsEnumeration_RequestedValidityDate = $00000140;
  TagsEnumeration_RequiredSignatureFlag = $00000141;
  TagsEnumeration_Response = $00000142;
  TagsEnumeration_ResponseMode = $00000143;
  TagsEnumeration_ResponseRequiredFlag = $00000144;
  TagsEnumeration_Result = $00000145;
  TagsEnumeration_ReuseCardDataFlag = $00000146;
  TagsEnumeration_ReversalReason = $00000147;
  TagsEnumeration_ReversedAmount = $00000148;
  TagsEnumeration_ReversedAmountSpecified = $00000149;
  TagsEnumeration_SaleCapabilities = $0000014A;
  TagsEnumeration_SaleChannel = $0000014B;
  TagsEnumeration_SaleData = $0000014C;
  TagsEnumeration_SaleID = $0000014D;
  TagsEnumeration_SaleItem = $0000014E;
  TagsEnumeration_SaleItemRebate = $0000014F;
  TagsEnumeration_SaleProfile = $00000150;
  TagsEnumeration_SaleReferenceID = $00000151;
  TagsEnumeration_SaleSoftware = $00000152;
  TagsEnumeration_SaleTerminalData = $00000153;
  TagsEnumeration_SaleToAcquirerData = $00000154;
  TagsEnumeration_SaleToIssuerData = $00000155;
  TagsEnumeration_SaleToPOIData = $00000156;
  TagsEnumeration_SaleTransactionID = $00000157;
  TagsEnumeration_SecurityOKFlag = $00000158;
  TagsEnumeration_SecurityOKFlagSpecified = $00000159;
  TagsEnumeration_SecurityTrailer = $0000015A;
  TagsEnumeration_SensitiveCardData = $0000015B;
  TagsEnumeration_SensitiveMobileData = $0000015C;
  TagsEnumeration_SequenceNumber = $0000015D;
  TagsEnumeration_SerialNumber = $0000015E;
  TagsEnumeration_ServiceID = $0000015F;
  TagsEnumeration_ServiceIdentification = $00000160;
  TagsEnumeration_ServiceProfiles = $00000161;
  TagsEnumeration_ServicesEnabled = $00000162;
  TagsEnumeration_ShiftNumber = $00000163;
  TagsEnumeration_Signature = $00000164;
  TagsEnumeration_SignatureAlgorithm = $00000165;
  TagsEnumeration_SignaturePoint = $00000166;
  TagsEnumeration_Signer = $00000167;
  TagsEnumeration_SignerIdentifier = $00000168;
  TagsEnumeration_SoftwareVersion = $00000169;
  TagsEnumeration_SoundAction = $0000016A;
  TagsEnumeration_SoundContent = $0000016B;
  TagsEnumeration_SoundFormat = $0000016C;
  TagsEnumeration_SoundVolume = $0000016D;
  TagsEnumeration_SplitPaymentFlag = $0000016E;
  TagsEnumeration_SponsoredMerchant = $0000016F;
  TagsEnumeration_StartColumn = $00000170;
  TagsEnumeration_StartDate = $00000171;
  TagsEnumeration_StartRow = $00000172;
  TagsEnumeration_StatementReference = $00000173;
  TagsEnumeration_StoredValueAccountID = $00000174;
  TagsEnumeration_StoredValueAccountStatus = $00000175;
  TagsEnumeration_StoredValueAccountType = $00000176;
  TagsEnumeration_StoredValueData = $00000177;
  TagsEnumeration_StoredValueProvider = $00000178;
  TagsEnumeration_StoredValueResult = $00000179;
  TagsEnumeration_StoredValueTransactionType = $0000017A;
  TagsEnumeration_StringMask = $0000017B;
  TagsEnumeration_TaxCode = $0000017C;
  TagsEnumeration_TerminalEnvironment = $0000017D;
  TagsEnumeration_TextInput = $0000017E;
  TagsEnumeration_TimeStamp = $0000017F;
  TagsEnumeration_TipAmount = $00000180;
  TagsEnumeration_TipAmountSpecified = $00000181;
  TagsEnumeration_TokenRequestedType = $00000182;
  TagsEnumeration_TokenValue = $00000183;
  TagsEnumeration_TotalAmount = $00000184;
  TagsEnumeration_TotalAmountSpecified = $00000185;
  TagsEnumeration_TotalDetails = $00000186;
  TagsEnumeration_TotalFeesAmount = $00000187;
  TagsEnumeration_TotalFeesAmountSpecified = $00000188;
  TagsEnumeration_TotalFilter = $00000189;
  TagsEnumeration_TotalNbOfPayments = $0000018A;
  TagsEnumeration_TotalRebate = $0000018B;
  TagsEnumeration_TotalRebatesAmount = $0000018C;
  TagsEnumeration_TotalRebatesAmountSpecified = $0000018D;
  TagsEnumeration_TotalRebateSpecified = $0000018E;
  TagsEnumeration_TotalsGroupID = $0000018F;
  TagsEnumeration_TrackData = $00000190;
  TagsEnumeration_TrackFormat = $00000191;
  TagsEnumeration_TrackNumb = $00000192;
  TagsEnumeration_TrainingModeFlag = $00000193;
  TagsEnumeration_TransactionAction = $00000194;
  TagsEnumeration_TransactionAmount = $00000195;
  TagsEnumeration_TransactionConditions = $00000196;
  TagsEnumeration_TransactionCount = $00000197;
  TagsEnumeration_TransactionID = $00000198;
  TagsEnumeration_TransactionToPerform = $00000199;
  TagsEnumeration_TransactionTotals = $0000019A;
  TagsEnumeration_TransactionType = $0000019B;
  TagsEnumeration_TypeCode = $0000019C;
  TagsEnumeration_UnitOfMeasure = $0000019D;
  TagsEnumeration_UnitPrice = $0000019E;
  TagsEnumeration_UnitPriceSpecified = $0000019F;
  TagsEnumeration_UnitValue = $000001A0;
  TagsEnumeration_UTMCoordinates = $000001A1;
  TagsEnumeration_UTMEastward = $000001A2;
  TagsEnumeration_UTMNorthward = $000001A3;
  TagsEnumeration_UTMZone = $000001A4;
  TagsEnumeration_ValidityDate = $000001A5;
  TagsEnumeration_Value = $000001A6;
  TagsEnumeration_Version = $000001A7;
  TagsEnumeration_WaitResponseFlag = $000001A8;
  TagsEnumeration_WaitUserValidationFlag = $000001A9;
  TagsEnumeration_WarmResetFlag = $000001AA;
  TagsEnumeration_WarmResetFlagSpecified = $000001AB;
  TagsEnumeration_X = $000001AC;
  TagsEnumeration_Y = $000001AD;

type

// *********************************************************************//
// Déclaration Forward des types définis dans la bibliothèque de types                     
// *********************************************************************//
  INexoActivity = interface;
  INexoActivityDisp = dispinterface;
  _NexoMessage = interface;
  _NexoMessageDisp = dispinterface;
  _NexoPartner = interface;
  _NexoPartnerDisp = dispinterface;
  _NexoEndPoint = interface;
  _NexoEndPointDisp = dispinterface;
  _NexoSession = interface;
  _NexoSessionDisp = dispinterface;
  INexoAnyMessage = interface;
  INexoAnyMessageDisp = dispinterface;
  _NexoDelegates = interface;
  _NexoDelegatesDisp = dispinterface;
  INexoItem = interface;
  INexoItemDisp = dispinterface;
  _NexoKey = interface;
  _NexoKeyDisp = dispinterface;
  INexoAdmin = interface;
  INexoAdminDisp = dispinterface;
  INexoObject = interface;
  INexoObjectDisp = dispinterface;
  INexoBalanceInquiry = interface;
  INexoBalanceInquiryDisp = dispinterface;
  INexoBatch = interface;
  INexoBatchDisp = dispinterface;
  INexoCardAcquisition = interface;
  INexoCardAcquisitionDisp = dispinterface;
  INexoCardReaderInit = interface;
  INexoCardReaderInitDisp = dispinterface;
  INexoCardReaderAPDU = interface;
  INexoCardReaderAPDUDisp = dispinterface;
  INexoCardReaderPowerOFF = interface;
  INexoCardReaderPowerOFFDisp = dispinterface;
  INexoDeviceDisplay = interface;
  INexoDeviceDisplayDisp = dispinterface;
  INexoDeviceInputUpdate = interface;
  INexoDeviceInputUpdateDisp = dispinterface;
  INexoDeviceSound = interface;
  INexoDeviceSoundDisp = dispinterface;
  INexoEnableService = interface;
  INexoEnableServiceDisp = dispinterface;
  INexoGetTotals = interface;
  INexoGetTotalsDisp = dispinterface;
  INexoLoyalty = interface;
  INexoLoyaltyDisp = dispinterface;
  INexoPIN = interface;
  INexoPINDisp = dispinterface;
  INexoReconciliation = interface;
  INexoReconciliationDisp = dispinterface;
  INexoStoredValue = interface;
  INexoStoredValueDisp = dispinterface;
  INexoTransmit = interface;
  INexoTransmitDisp = dispinterface;
  INexoAbort = interface;
  INexoAbortDisp = dispinterface;
  INexoDiagnosis = interface;
  INexoDiagnosisDisp = dispinterface;
  INexoEvent = interface;
  INexoEventDisp = dispinterface;
  INexoTransactionStatus = interface;
  INexoTransactionStatusDisp = dispinterface;
  INexoDeviceInput = interface;
  INexoDeviceInputDisp = dispinterface;
  INexoDevicePrint = interface;
  INexoDevicePrintDisp = dispinterface;
  INexoLogin = interface;
  INexoLoginDisp = dispinterface;
  INexoLogout = interface;
  INexoLogoutDisp = dispinterface;
  INexoFinancial = interface;
  INexoFinancialDisp = dispinterface;
  INexoObjectToProcess = interface;
  INexoObjectToProcessDisp = dispinterface;
  INexoReversal = interface;
  INexoReversalDisp = dispinterface;
  _NexoMessageHeader = interface;
  _NexoMessageHeaderDisp = dispinterface;
  INexoTextString = interface;
  INexoTextStringDisp = dispinterface;
  INexoBooleanType = interface;
  INexoBooleanTypeDisp = dispinterface;
  INexoInteger = interface;
  INexoIntegerDisp = dispinterface;
  INexoDecimal = interface;
  INexoDecimalDisp = dispinterface;
  INexoLabel = interface;
  INexoLabelDisp = dispinterface;
  INexoEnumeration = interface;
  INexoEnumerationDisp = dispinterface;
  INexoCluster = interface;
  INexoClusterDisp = dispinterface;
  INexoLengthDrivenTextString = interface;
  INexoLengthDrivenTextStringDisp = dispinterface;
  INexoDigitString = interface;
  INexoDigitStringDisp = dispinterface;
  INexoISOData = interface;
  INexoISODataDisp = dispinterface;
  INexoISODateTime = interface;
  INexoISODateTimeDisp = dispinterface;
  INexoISODate = interface;
  INexoISODateDisp = dispinterface;
  INexoNonStringType = interface;
  INexoNonStringTypeDisp = dispinterface;
  INexoCurrency = interface;
  INexoCurrencyDisp = dispinterface;
  _NexoDefaultCurrency = interface;
  _NexoDefaultCurrencyDisp = dispinterface;
  INexoAmount = interface;
  INexoAmountDisp = dispinterface;
  _NexoMessageType = interface;
  _NexoMessageTypeDisp = dispinterface;
  _NexoMessageClass = interface;
  _NexoMessageClassDisp = dispinterface;
  _NexoMessageCategory = interface;
  _NexoMessageCategoryDisp = dispinterface;
  _NexoTerminalEnvironment = interface;
  _NexoTerminalEnvironmentDisp = dispinterface;
  _NexoSaleCapabilities = interface;
  _NexoSaleCapabilitiesDisp = dispinterface;
  _NexoProtocolVersion = interface;
  _NexoProtocolVersionDisp = dispinterface;
  _NexoID = interface;
  _NexoIDDisp = dispinterface;
  _NexoServiceID = interface;
  _NexoServiceIDDisp = dispinterface;
  _NexoDeviceID = interface;
  _NexoDeviceIDDisp = dispinterface;
  _NexoPOIID = interface;
  _NexoPOIIDDisp = dispinterface;
  _NexoSaleID = interface;
  _NexoSaleIDDisp = dispinterface;
  _NexoOperatorLanguage = interface;
  _NexoOperatorLanguageDisp = dispinterface;
  _NexoResult = interface;
  _NexoResultDisp = dispinterface;
  _NexoErrorCondition = interface;
  _NexoErrorConditionDisp = dispinterface;
  _NexoAdditionalResponse = interface;
  _NexoAdditionalResponseDisp = dispinterface;
  _NexoGlobalStatus = interface;
  _NexoGlobalStatusDisp = dispinterface;
  _NexoCertificationCode = interface;
  _NexoCertificationCodeDisp = dispinterface;
  _NexoSoftwareVersion = interface;
  _NexoSoftwareVersionDisp = dispinterface;
  _NexoApplicationName = interface;
  _NexoApplicationNameDisp = dispinterface;
  _NexoManufacturerID = interface;
  _NexoManufacturerIDDisp = dispinterface;
  _NexoPOISerialNumber = interface;
  _NexoPOISerialNumberDisp = dispinterface;
  _NexoOperatorID = interface;
  _NexoOperatorIDDisp = dispinterface;
  _NexoDateTime = interface;
  _NexoDateTimeDisp = dispinterface;
  _NexoInputCommand = interface;
  _NexoInputCommandDisp = dispinterface;
  _NexoEventToNotify = interface;
  _NexoEventToNotifyDisp = dispinterface;
  _NexoPaymentIntrumentType = interface;
  _NexoPaymentIntrumentTypeDisp = dispinterface;
  IAbortRequestType = interface;
  IAbortRequestTypeDisp = dispinterface;
  IMessageReferenceType = interface;
  IMessageReferenceTypeDisp = dispinterface;
  IDisplayResponseType = interface;
  IDisplayResponseTypeDisp = dispinterface;
  IOutputResultType = interface;
  IOutputResultTypeDisp = dispinterface;
  IResponseType = interface;
  IResponseTypeDisp = dispinterface;
  IDisplayRequestType = interface;
  IDisplayRequestTypeDisp = dispinterface;
  IDisplayOutputType = interface;
  IDisplayOutputTypeDisp = dispinterface;
  IOutputContentType = interface;
  IOutputContentTypeDisp = dispinterface;
  IPredefinedContentType = interface;
  IPredefinedContentTypeDisp = dispinterface;
  IOutputTextType = interface;
  IOutputTextTypeDisp = dispinterface;
  IOutputBarcodeType = interface;
  IOutputBarcodeTypeDisp = dispinterface;
  IMenuEntryType = interface;
  IMenuEntryTypeDisp = dispinterface;
  IAdminRequestType = interface;
  IAdminRequestTypeDisp = dispinterface;
  IAdminResponseType = interface;
  IAdminResponseTypeDisp = dispinterface;
  IAllowedProductType = interface;
  IAllowedProductTypeDisp = dispinterface;
  IAmountsReqType = interface;
  IAmountsReqTypeDisp = dispinterface;
  IAmountsRespType = interface;
  IAmountsRespTypeDisp = dispinterface;
  IAreaSizeType = interface;
  IAreaSizeTypeDisp = dispinterface;
  IBalanceInquiryRequestType = interface;
  IBalanceInquiryRequestTypeDisp = dispinterface;
  IPaymentAccountReqType = interface;
  IPaymentAccountReqTypeDisp = dispinterface;
  ITransactionIdentificationType = interface;
  ITransactionIdentificationTypeDisp = dispinterface;
  IPaymentInstrumentDataType = interface;
  IPaymentInstrumentDataTypeDisp = dispinterface;
  ICardDataType = interface;
  ICardDataTypeDisp = dispinterface;
  IContentInformationType = interface;
  IContentInformationTypeDisp = dispinterface;
  IAuthenticatedDataType = interface;
  IAuthenticatedDataTypeDisp = dispinterface;
  IKEKType = interface;
  IKEKTypeDisp = dispinterface;
  IKEKIdentifierType = interface;
  IKEKIdentifierTypeDisp = dispinterface;
  IAlgorithmIdentifier = interface;
  IAlgorithmIdentifierDisp = dispinterface;
  IParameterType = interface;
  IParameterTypeDisp = dispinterface;
  IKeyTransportType = interface;
  IKeyTransportTypeDisp = dispinterface;
  IRecipientIdentifierType = interface;
  IRecipientIdentifierTypeDisp = dispinterface;
  IIssuerAndSerialNumberType = interface;
  IIssuerAndSerialNumberTypeDisp = dispinterface;
  IRelativeDistinguishedNameType = interface;
  IRelativeDistinguishedNameTypeDisp = dispinterface;
  IEncapsulatedContentType = interface;
  IEncapsulatedContentTypeDisp = dispinterface;
  IDigestedDataType = interface;
  IDigestedDataTypeDisp = dispinterface;
  IEnvelopedDataType = interface;
  IEnvelopedDataTypeDisp = dispinterface;
  IEncryptedContentType = interface;
  IEncryptedContentTypeDisp = dispinterface;
  INamedKeyEncryptedDataType = interface;
  INamedKeyEncryptedDataTypeDisp = dispinterface;
  ISignedDataType = interface;
  ISignedDataTypeDisp = dispinterface;
  ISignerType = interface;
  ISignerTypeDisp = dispinterface;
  ISignerIdentifierType = interface;
  ISignerIdentifierTypeDisp = dispinterface;
  ISensitiveCardDataType = interface;
  ISensitiveCardDataTypeDisp = dispinterface;
  ITrackDataType = interface;
  ITrackDataTypeDisp = dispinterface;
  IPaymentTokenType = interface;
  IPaymentTokenTypeDisp = dispinterface;
  ICustomerOrderType = interface;
  ICustomerOrderTypeDisp = dispinterface;
  ICheckDataType = interface;
  ICheckDataTypeDisp = dispinterface;
  IMobileDataType = interface;
  IMobileDataTypeDisp = dispinterface;
  IGeolocationType = interface;
  IGeolocationTypeDisp = dispinterface;
  IGeographicCoordinatesType = interface;
  IGeographicCoordinatesTypeDisp = dispinterface;
  IUTMCoordinatesType = interface;
  IUTMCoordinatesTypeDisp = dispinterface;
  ISensitiveMobileDataType = interface;
  ISensitiveMobileDataTypeDisp = dispinterface;
  ILoyaltyAccountReqType = interface;
  ILoyaltyAccountReqTypeDisp = dispinterface;
  ILoyaltyAccountIDType = interface;
  ILoyaltyAccountIDTypeDisp = dispinterface;
  IBalanceInquiryResponseType = interface;
  IBalanceInquiryResponseTypeDisp = dispinterface;
  IPaymentAccountStatusType = interface;
  IPaymentAccountStatusTypeDisp = dispinterface;
  IPaymentAcquirerDataType = interface;
  IPaymentAcquirerDataTypeDisp = dispinterface;
  ILoyaltyAccountStatusType = interface;
  ILoyaltyAccountStatusTypeDisp = dispinterface;
  ILoyaltyAccountType = interface;
  ILoyaltyAccountTypeDisp = dispinterface;
  IBatchRequestType = interface;
  IBatchRequestTypeDisp = dispinterface;
  ITransactionToPerformType = interface;
  ITransactionToPerformTypeDisp = dispinterface;
  ILoyaltyRequestType = interface;
  ILoyaltyRequestTypeDisp = dispinterface;
  ISaleDataType = interface;
  ISaleDataTypeDisp = dispinterface;
  ISaleTerminalDataType = interface;
  ISaleTerminalDataTypeDisp = dispinterface;
  ISaleProfileType = interface;
  ISaleProfileTypeDisp = dispinterface;
  ISponsoredMerchantType = interface;
  ISponsoredMerchantTypeDisp = dispinterface;
  ISaleToIssuerDataType = interface;
  ISaleToIssuerDataTypeDisp = dispinterface;
  ILoyaltyTransactionType = interface;
  ILoyaltyTransactionTypeDisp = dispinterface;
  IOriginalPOITransactionType = interface;
  IOriginalPOITransactionTypeDisp = dispinterface;
  ITransactionConditionsType = interface;
  ITransactionConditionsTypeDisp = dispinterface;
  ISaleItemType = interface;
  ISaleItemTypeDisp = dispinterface;
  ILoyaltyDataType = interface;
  ILoyaltyDataTypeDisp = dispinterface;
  ILoyaltyAmountType = interface;
  ILoyaltyAmountTypeDisp = dispinterface;
  IPaymentRequestType = interface;
  IPaymentRequestTypeDisp = dispinterface;
  IPaymentTransactionType = interface;
  IPaymentTransactionTypeDisp = dispinterface;
  IPaymentDataType = interface;
  IPaymentDataTypeDisp = dispinterface;
  IInstalmentType = interface;
  IInstalmentTypeDisp = dispinterface;
  IReversalRequestType = interface;
  IReversalRequestTypeDisp = dispinterface;
  IBatchResponseType = interface;
  IBatchResponseTypeDisp = dispinterface;
  IPerformedTransactionType = interface;
  IPerformedTransactionTypeDisp = dispinterface;
  IPOIDataType = interface;
  IPOIDataTypeDisp = dispinterface;
  IPaymentResultType = interface;
  IPaymentResultTypeDisp = dispinterface;
  ICurrencyConversionType = interface;
  ICurrencyConversionTypeDisp = dispinterface;
  IAmountType = interface;
  IAmountTypeDisp = dispinterface;
  ICapturedSignatureType = interface;
  ICapturedSignatureTypeDisp = dispinterface;
  ISignaturePointType = interface;
  ISignaturePointTypeDisp = dispinterface;
  ILoyaltyResultType = interface;
  ILoyaltyResultTypeDisp = dispinterface;
  ILoyaltyAcquirerDataType = interface;
  ILoyaltyAcquirerDataTypeDisp = dispinterface;
  IRebatesType = interface;
  IRebatesTypeDisp = dispinterface;
  ISaleItemRebateType = interface;
  ISaleItemRebateTypeDisp = dispinterface;
  ICardAcquisitionRequestType = interface;
  ICardAcquisitionRequestTypeDisp = dispinterface;
  ICardAcquisitionTransactionType = interface;
  ICardAcquisitionTransactionTypeDisp = dispinterface;
  ICardAcquisitionResponseType = interface;
  ICardAcquisitionResponseTypeDisp = dispinterface;
  ICardholderPINType = interface;
  ICardholderPINTypeDisp = dispinterface;
  ICardReaderAPDURequestType = interface;
  ICardReaderAPDURequestTypeDisp = dispinterface;
  ICardReaderAPDUResponseType = interface;
  ICardReaderAPDUResponseTypeDisp = dispinterface;
  ICardReaderInitRequestType = interface;
  ICardReaderInitRequestTypeDisp = dispinterface;
  ICardReaderInitResponseType = interface;
  ICardReaderInitResponseTypeDisp = dispinterface;
  IICCResetDataType = interface;
  IICCResetDataTypeDisp = dispinterface;
  ICardReaderPowerOffRequestType = interface;
  ICardReaderPowerOffRequestTypeDisp = dispinterface;
  ICardReaderPowerOffResponseType = interface;
  ICardReaderPowerOffResponseTypeDisp = dispinterface;
  ICashHandlingDeviceType = interface;
  ICashHandlingDeviceTypeDisp = dispinterface;
  ICoinsOrBillsType = interface;
  ICoinsOrBillsTypeDisp = dispinterface;
  IDiagnosisRequestType = interface;
  IDiagnosisRequestTypeDisp = dispinterface;
  IDiagnosisResponseType = interface;
  IDiagnosisResponseTypeDisp = dispinterface;
  IPOIStatusType = interface;
  IPOIStatusTypeDisp = dispinterface;
  IHostStatusType = interface;
  IHostStatusTypeDisp = dispinterface;
  IEnableServiceRequestType = interface;
  IEnableServiceRequestTypeDisp = dispinterface;
  IEnableServiceResponseType = interface;
  IEnableServiceResponseTypeDisp = dispinterface;
  IEventNotificationType = interface;
  IEventNotificationTypeDisp = dispinterface;
  IGetTotalsRequestType = interface;
  IGetTotalsRequestTypeDisp = dispinterface;
  ITotalFilterType = interface;
  ITotalFilterTypeDisp = dispinterface;
  IGetTotalsResponseType = interface;
  IGetTotalsResponseTypeDisp = dispinterface;
  ITransactionTotalsType = interface;
  ITransactionTotalsTypeDisp = dispinterface;
  IPaymentTotalsType = interface;
  IPaymentTotalsTypeDisp = dispinterface;
  ILoyaltyTotalsType = interface;
  ILoyaltyTotalsTypeDisp = dispinterface;
  IInputType = interface;
  IInputTypeDisp = dispinterface;
  IInputDataType = interface;
  IInputDataTypeDisp = dispinterface;
  IInputRequestType = interface;
  IInputRequestTypeDisp = dispinterface;
  IInputResponseType = interface;
  IInputResponseTypeDisp = dispinterface;
  IInputResultType = interface;
  IInputResultTypeDisp = dispinterface;
  IInputUpdateType = interface;
  IInputUpdateTypeDisp = dispinterface;
  ILoginRequestType = interface;
  ILoginRequestTypeDisp = dispinterface;
  ISaleSoftwareType = interface;
  ISaleSoftwareTypeDisp = dispinterface;
  ILoginResponseType = interface;
  ILoginResponseTypeDisp = dispinterface;
  IPOISystemDataType = interface;
  IPOISystemDataTypeDisp = dispinterface;
  IPOISoftwareType = interface;
  IPOISoftwareTypeDisp = dispinterface;
  IPOITerminalDataType = interface;
  IPOITerminalDataTypeDisp = dispinterface;
  IPOIProfileType = interface;
  IPOIProfileTypeDisp = dispinterface;
  ILogoutRequestType = interface;
  ILogoutRequestTypeDisp = dispinterface;
  ILogoutResponseType = interface;
  ILogoutResponseTypeDisp = dispinterface;
  ILoyaltyResponseType = interface;
  ILoyaltyResponseTypeDisp = dispinterface;
  IPaymentReceiptType = interface;
  IPaymentReceiptTypeDisp = dispinterface;
  IMessageHeaderType = interface;
  IMessageHeaderTypeDisp = dispinterface;
  IPaymentResponseType = interface;
  IPaymentResponseTypeDisp = dispinterface;
  IPINRequestType = interface;
  IPINRequestTypeDisp = dispinterface;
  IPINResponseType = interface;
  IPINResponseTypeDisp = dispinterface;
  IPrintOutputType = interface;
  IPrintOutputTypeDisp = dispinterface;
  IPrintRequestType = interface;
  IPrintRequestTypeDisp = dispinterface;
  IPrintResponseType = interface;
  IPrintResponseTypeDisp = dispinterface;
  IReconciliationRequestType = interface;
  IReconciliationRequestTypeDisp = dispinterface;
  IReconciliationResponseType = interface;
  IReconciliationResponseTypeDisp = dispinterface;
  IRepeatedMessageResponseType = interface;
  IRepeatedMessageResponseTypeDisp = dispinterface;
  IReversalResponseType = interface;
  IReversalResponseTypeDisp = dispinterface;
  IStoredValueResponseType = interface;
  IStoredValueResponseTypeDisp = dispinterface;
  IStoredValueResultType = interface;
  IStoredValueResultTypeDisp = dispinterface;
  IStoredValueAccountStatusType = interface;
  IStoredValueAccountStatusTypeDisp = dispinterface;
  IStoredValueAccountIDType = interface;
  IStoredValueAccountIDTypeDisp = dispinterface;
  ISoundContentType = interface;
  ISoundContentTypeDisp = dispinterface;
  ISoundRequestType = interface;
  ISoundRequestTypeDisp = dispinterface;
  ISoundResponseType = interface;
  ISoundResponseTypeDisp = dispinterface;
  IStoredValueDataType = interface;
  IStoredValueDataTypeDisp = dispinterface;
  IStoredValueRequestType = interface;
  IStoredValueRequestTypeDisp = dispinterface;
  ITransmitRequestType = interface;
  ITransmitRequestTypeDisp = dispinterface;
  ITransmitResponseType = interface;
  ITransmitResponseTypeDisp = dispinterface;
  ITransactionStatusRequestType = interface;
  ITransactionStatusRequestTypeDisp = dispinterface;
  ITransactionStatusResponseType = interface;
  ITransactionStatusResponseTypeDisp = dispinterface;
  ISaleToPOIRequest = interface;
  ISaleToPOIRequestDisp = dispinterface;
  ISaleToPOIResponse = interface;
  ISaleToPOIResponseDisp = dispinterface;
  IIssuerType = interface;
  IIssuerTypeDisp = dispinterface;
  INexoRetailerServerActivity = interface;
  INexoRetailerServerActivityDisp = dispinterface;
  _NexoRetailerServerMessageHeaderValidator = interface;
  _NexoRetailerServerMessageHeaderValidatorDisp = dispinterface;
  INexoRetailerServerSettings = interface;
  INexoRetailerServerSettingsDisp = dispinterface;
  INexoRetailerClientHandle = interface;
  INexoRetailerClientHandleDisp = dispinterface;
  INexoRetailerClient = interface;
  INexoRetailerClientDisp = dispinterface;
  INexoRetailerClientSettings = interface;
  INexoRetailerClientSettingsDisp = dispinterface;
  INexoRetailerClientActivity = interface;
  INexoRetailerClientActivityDisp = dispinterface;
  _NexoResources = interface;
  _NexoResourcesDisp = dispinterface;

// *********************************************************************//
// Déclaration de CoClasses définies dans la bibliothèque de types        
// (REMARQUE: On affecte chaque CoClasse à son Interface par défaut)      
// *********************************************************************//
  NexoActivity = INexoActivity;
  NexoDictionaryOfMessages = IEnumerable;
  NexoListOfEndPoints = IEnumerable;
  NexoDictionaryOfEndPoints = IEnumerable;
  NexoListOfSessions = IEnumerable;
  NexoDictionaryOfSessions = IEnumerable;
  NexoListOfNexoKeys = IEnumerable;
  NexoDictionaryOfNexoKeys = IEnumerable;
  NexoListOfAnyMessages = IEnumerable;
  NexoDictionaryOfAnyMessages = IEnumerable;
  NexoAcceptedCommands = IEnumerable;
  NexoItem = INexoItem;
  NexoBalanceInquiry = INexoBalanceInquiry;
  NexoBatch = INexoBatch;
  NexoCardAcquisition = INexoCardAcquisition;
  NexoCardReaderInit = INexoCardReaderInit;
  NexoCardReaderAPDU = INexoCardReaderAPDU;
  NexoCardReaderPowerOFF = INexoCardReaderPowerOFF;
  NexoDeviceDisplay = INexoDeviceDisplay;
  NexoDeviceInputUpdate = INexoDeviceInputUpdate;
  NexoDeviceSound = INexoDeviceSound;
  NexoEnableService = INexoEnableService;
  NexoGetTotals = INexoGetTotals;
  NexoLoyalty = INexoLoyalty;
  NexoPIN = INexoPIN;
  NexoReconciliation = INexoReconciliation;
  NexoStoredValue = INexoStoredValue;
  NexoTransmit = INexoTransmit;
  NexoAbort = INexoAbort;
  NexoDiagnosis = INexoDiagnosis;
  NexoEvent = INexoEvent;
  NexoTransactionStatus = INexoTransactionStatus;
  NexoDeviceInput = INexoDeviceInput;
  NexoDevicePrint = INexoDevicePrint;
  NexoLogin = INexoLogin;
  NexoLogout = INexoLogout;
  NexoPayment = INexoFinancial;
  NexoRefund = INexoFinancial;
  NexoAdmin = INexoAdmin;
  NexoObject = INexoObject;
  NexoObjectToProcess = INexoObjectToProcess;
  QueueOfNexoObjectToProcess = IEnumerable;
  StackOfNexoObjectToProcess = IEnumerable;
  NexoReversal = INexoReversal;
  NexoTextString = INexoTextString;
  NexoBoolean = INexoBooleanType;
  NexoInteger = INexoInteger;
  NexoDecimal = INexoDecimal;
  NexoSimpleAmount = INexoDecimal;
  NexoLabel = INexoLabel;
  NexoEnumeration = INexoEnumeration;
  NexoCluster = INexoCluster;
  NexoLengthDrivenTextString = INexoLengthDrivenTextString;
  NexoDigitString = INexoDigitString;
  NexoISOCurrency3A = INexoISOData;
  NexoISOCountry3A = INexoISOData;
  NexoISOLanguage2A = INexoISOData;
  NexoISODateTime = INexoISODateTime;
  NexoISODate = INexoISODate;
  NexoByteSequence = INexoNonStringType;
  NexoCurrency = INexoCurrency;
  NexoCurrencyEUR = INexoCurrency;
  NexoCurrencyUSD = INexoCurrency;
  NexoCurrencyGBP = INexoCurrency;
  NexoCurrencyCHF = INexoCurrency;
  NexoCurrencyAmount = INexoAmount;
  NexoSupportedProtocolVersions = IEnumerable;
  AbortRequestType = IAbortRequestType;
  MessageReferenceType = IMessageReferenceType;
  DisplayResponseType = IDisplayResponseType;
  OutputResultType = IOutputResultType;
  ResponseType = IResponseType;
  DisplayRequestType = IDisplayRequestType;
  DisplayOutputType = IDisplayOutputType;
  OutputContentType = IOutputContentType;
  PredefinedContentType = IPredefinedContentType;
  OutputTextType = IOutputTextType;
  OutputBarcodeType = IOutputBarcodeType;
  MenuEntryType = IMenuEntryType;
  AdminRequestType = IAdminRequestType;
  AdminResponseType = IAdminResponseType;
  AllowedProductType = IAllowedProductType;
  AmountsReqType = IAmountsReqType;
  AmountsRespType = IAmountsRespType;
  AreaSizeType = IAreaSizeType;
  BalanceInquiryRequestType = IBalanceInquiryRequestType;
  PaymentAccountReqType = IPaymentAccountReqType;
  TransactionIdentificationType = ITransactionIdentificationType;
  PaymentInstrumentDataType = IPaymentInstrumentDataType;
  CardDataType = ICardDataType;
  ContentInformationType = IContentInformationType;
  AuthenticatedDataType = IAuthenticatedDataType;
  KEKType = IKEKType;
  KEKIdentifierType = IKEKIdentifierType;
  AlgorithmIdentifier = IAlgorithmIdentifier;
  ParameterType = IParameterType;
  KeyTransportType = IKeyTransportType;
  RecipientIdentifierType = IRecipientIdentifierType;
  IssuerAndSerialNumberType = IIssuerAndSerialNumberType;
  RelativeDistinguishedNameType = IRelativeDistinguishedNameType;
  EncapsulatedContentType = IEncapsulatedContentType;
  DigestedDataType = IDigestedDataType;
  EnvelopedDataType = IEnvelopedDataType;
  EncryptedContentType = IEncryptedContentType;
  NamedKeyEncryptedDataType = INamedKeyEncryptedDataType;
  SignedDataType = ISignedDataType;
  SignerType = ISignerType;
  SignerIdentifierType = ISignerIdentifierType;
  SensitiveCardDataType = ISensitiveCardDataType;
  TrackDataType = ITrackDataType;
  PaymentTokenType = IPaymentTokenType;
  CustomerOrderType = ICustomerOrderType;
  CheckDataType = ICheckDataType;
  MobileDataType = IMobileDataType;
  GeolocationType = IGeolocationType;
  GeographicCoordinatesType = IGeographicCoordinatesType;
  UTMCoordinatesType = IUTMCoordinatesType;
  SensitiveMobileDataType = ISensitiveMobileDataType;
  LoyaltyAccountReqType = ILoyaltyAccountReqType;
  LoyaltyAccountIDType = ILoyaltyAccountIDType;
  BalanceInquiryResponseType = IBalanceInquiryResponseType;
  PaymentAccountStatusType = IPaymentAccountStatusType;
  PaymentAcquirerDataType = IPaymentAcquirerDataType;
  LoyaltyAccountStatusType = ILoyaltyAccountStatusType;
  LoyaltyAccountType = ILoyaltyAccountType;
  BatchRequestType = IBatchRequestType;
  TransactionToPerformType = ITransactionToPerformType;
  LoyaltyRequestType = ILoyaltyRequestType;
  SaleDataType = ISaleDataType;
  SaleTerminalDataType = ISaleTerminalDataType;
  SaleProfileType = ISaleProfileType;
  SponsoredMerchantType = ISponsoredMerchantType;
  SaleToIssuerDataType = ISaleToIssuerDataType;
  LoyaltyTransactionType = ILoyaltyTransactionType;
  OriginalPOITransactionType = IOriginalPOITransactionType;
  TransactionConditionsType = ITransactionConditionsType;
  SaleItemType = ISaleItemType;
  LoyaltyDataType = ILoyaltyDataType;
  LoyaltyAmountType = ILoyaltyAmountType;
  PaymentRequestType = IPaymentRequestType;
  PaymentTransactionType = IPaymentTransactionType;
  PaymentDataType = IPaymentDataType;
  InstalmentType = IInstalmentType;
  ReversalRequestType = IReversalRequestType;
  BatchResponseType = IBatchResponseType;
  PerformedTransactionType = IPerformedTransactionType;
  POIDataType = IPOIDataType;
  PaymentResultType = IPaymentResultType;
  CurrencyConversionType = ICurrencyConversionType;
  AmountType = IAmountType;
  CapturedSignatureType = ICapturedSignatureType;
  SignaturePointType = ISignaturePointType;
  LoyaltyResultType = ILoyaltyResultType;
  LoyaltyAcquirerDataType = ILoyaltyAcquirerDataType;
  RebatesType = IRebatesType;
  SaleItemRebateType = ISaleItemRebateType;
  CardAcquisitionRequestType = ICardAcquisitionRequestType;
  CardAcquisitionTransactionType = ICardAcquisitionTransactionType;
  CardAcquisitionResponseType = ICardAcquisitionResponseType;
  CardholderPINType = ICardholderPINType;
  CardReaderAPDURequestType = ICardReaderAPDURequestType;
  CardReaderAPDUResponseType = ICardReaderAPDUResponseType;
  CardReaderInitRequestType = ICardReaderInitRequestType;
  CardReaderInitResponseType = ICardReaderInitResponseType;
  ICCResetDataType = IICCResetDataType;
  CardReaderPowerOffRequestType = ICardReaderPowerOffRequestType;
  CardReaderPowerOffResponseType = ICardReaderPowerOffResponseType;
  CashHandlingDeviceType = ICashHandlingDeviceType;
  CoinsOrBillsType = ICoinsOrBillsType;
  DiagnosisRequestType = IDiagnosisRequestType;
  DiagnosisResponseType = IDiagnosisResponseType;
  POIStatusType = IPOIStatusType;
  HostStatusType = IHostStatusType;
  EnableServiceRequestType = IEnableServiceRequestType;
  EnableServiceResponseType = IEnableServiceResponseType;
  EventNotificationType = IEventNotificationType;
  GetTotalsRequestType = IGetTotalsRequestType;
  TotalFilterType = ITotalFilterType;
  GetTotalsResponseType = IGetTotalsResponseType;
  TransactionTotalsType = ITransactionTotalsType;
  PaymentTotalsType = IPaymentTotalsType;
  LoyaltyTotalsType = ILoyaltyTotalsType;
  InputType = IInputType;
  InputDataType = IInputDataType;
  InputRequestType = IInputRequestType;
  InputResponseType = IInputResponseType;
  InputResultType = IInputResultType;
  InputUpdateType = IInputUpdateType;
  LoginRequestType = ILoginRequestType;
  SaleSoftwareType = ISaleSoftwareType;
  LoginResponseType = ILoginResponseType;
  POISystemDataType = IPOISystemDataType;
  POISoftwareType = IPOISoftwareType;
  POITerminalDataType = IPOITerminalDataType;
  POIProfileType = IPOIProfileType;
  LogoutRequestType = ILogoutRequestType;
  LogoutResponseType = ILogoutResponseType;
  LoyaltyResponseType = ILoyaltyResponseType;
  PaymentReceiptType = IPaymentReceiptType;
  MessageHeaderType = IMessageHeaderType;
  PaymentResponseType = IPaymentResponseType;
  PINRequestType = IPINRequestType;
  PINResponseType = IPINResponseType;
  PrintOutputType = IPrintOutputType;
  PrintRequestType = IPrintRequestType;
  PrintResponseType = IPrintResponseType;
  ReconciliationRequestType = IReconciliationRequestType;
  ReconciliationResponseType = IReconciliationResponseType;
  RepeatedMessageResponseType = IRepeatedMessageResponseType;
  ReversalResponseType = IReversalResponseType;
  StoredValueResponseType = IStoredValueResponseType;
  StoredValueResultType = IStoredValueResultType;
  StoredValueAccountStatusType = IStoredValueAccountStatusType;
  StoredValueAccountIDType = IStoredValueAccountIDType;
  SoundContentType = ISoundContentType;
  SoundRequestType = ISoundRequestType;
  SoundResponseType = ISoundResponseType;
  StoredValueDataType = IStoredValueDataType;
  StoredValueRequestType = IStoredValueRequestType;
  TransmitRequestType = ITransmitRequestType;
  TransmitResponseType = ITransmitResponseType;
  TransactionStatusRequestType = ITransactionStatusRequestType;
  TransactionStatusResponseType = ITransactionStatusResponseType;
  SaleToPOIRequest = ISaleToPOIRequest;
  SaleToPOIResponse = ISaleToPOIResponse;
  IssuerType = IIssuerType;
  NexoRetailerServerActivity = INexoRetailerServerActivity;
  NexoRetailerServerSettings = INexoRetailerServerSettings;
  NexoRetailerClientHandle = INexoRetailerClientHandle;
  NexoRetailerClient = INexoRetailerClient;
  NexoRetailerClientSettings = INexoRetailerClientSettings;
  NexoRetailerClientActivity = INexoRetailerClientActivity;
  NexoMessage = _NexoMessage;
  NexoPartner = _NexoPartner;
  NexoEndPoint = _NexoEndPoint;
  NexoSession = _NexoSession;
  NexoDelegates = _NexoDelegates;
  NexoKey = _NexoKey;
  NexoMessageHeader = _NexoMessageHeader;
  NexoDefaultCurrency = _NexoDefaultCurrency;
  NexoMessageType = _NexoMessageType;
  NexoMessageClass = _NexoMessageClass;
  NexoMessageCategory = _NexoMessageCategory;
  NexoTerminalEnvironment = _NexoTerminalEnvironment;
  NexoSaleCapabilities = _NexoSaleCapabilities;
  NexoProtocolVersion = _NexoProtocolVersion;
  NexoID = _NexoID;
  NexoServiceID = _NexoServiceID;
  NexoDeviceID = _NexoDeviceID;
  NexoPOIID = _NexoPOIID;
  NexoSaleID = _NexoSaleID;
  NexoOperatorLanguage = _NexoOperatorLanguage;
  NexoResult = _NexoResult;
  NexoErrorCondition = _NexoErrorCondition;
  NexoAdditionalResponse = _NexoAdditionalResponse;
  NexoGlobalStatus = _NexoGlobalStatus;
  NexoCertificationCode = _NexoCertificationCode;
  NexoSoftwareVersion = _NexoSoftwareVersion;
  NexoApplicationName = _NexoApplicationName;
  NexoManufacturerID = _NexoManufacturerID;
  NexoPOISerialNumber = _NexoPOISerialNumber;
  NexoOperatorID = _NexoOperatorID;
  NexoDateTime = _NexoDateTime;
  NexoInputCommand = _NexoInputCommand;
  NexoEventToNotify = _NexoEventToNotify;
  NexoPaymentIntrumentType = _NexoPaymentIntrumentType;
  NexoRetailerServerMessageHeaderValidator = _NexoRetailerServerMessageHeaderValidator;
  NexoResources = _NexoResources;


// *********************************************************************//
// Interface :   INexoActivity
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1ADB3E04-8743-492B-94C5-4F973C27B951}
// *********************************************************************//
  INexoActivity = interface(IDispatch)
    ['{1ADB3E04-8743-492B-94C5-4F973C27B951}']
    function AddSentMessage(const o: IUnknown): WordBool; safecall;
    function AddReceivedMessage(const o: IUnknown): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf :    INexoActivityDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1ADB3E04-8743-492B-94C5-4F973C27B951}
// *********************************************************************//
  INexoActivityDisp = dispinterface
    ['{1ADB3E04-8743-492B-94C5-4F973C27B951}']
    function AddSentMessage(const o: IUnknown): WordBool; dispid 100;
    function AddReceivedMessage(const o: IUnknown): WordBool; dispid 101;
  end;

// *********************************************************************//
// Interface :   _NexoMessage
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {7DA4FB59-22EF-399D-B3B4-1E0397E4CCF5}
// *********************************************************************//
  _NexoMessage = interface(IDispatch)
    ['{7DA4FB59-22EF-399D-B3B4-1E0397E4CCF5}']
  end;

// *********************************************************************//
// DispIntf :    _NexoMessageDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {7DA4FB59-22EF-399D-B3B4-1E0397E4CCF5}
// *********************************************************************//
  _NexoMessageDisp = dispinterface
    ['{7DA4FB59-22EF-399D-B3B4-1E0397E4CCF5}']
  end;

// *********************************************************************//
// Interface :   _NexoPartner
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {59BB3895-65B2-3942-940E-6DD04810656E}
// *********************************************************************//
  _NexoPartner = interface(IDispatch)
    ['{59BB3895-65B2-3942-940E-6DD04810656E}']
  end;

// *********************************************************************//
// DispIntf :    _NexoPartnerDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {59BB3895-65B2-3942-940E-6DD04810656E}
// *********************************************************************//
  _NexoPartnerDisp = dispinterface
    ['{59BB3895-65B2-3942-940E-6DD04810656E}']
  end;

// *********************************************************************//
// Interface :   _NexoEndPoint
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {5339D5FB-D6F3-3710-B640-21CEF51B9F46}
// *********************************************************************//
  _NexoEndPoint = interface(IDispatch)
    ['{5339D5FB-D6F3-3710-B640-21CEF51B9F46}']
  end;

// *********************************************************************//
// DispIntf :    _NexoEndPointDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {5339D5FB-D6F3-3710-B640-21CEF51B9F46}
// *********************************************************************//
  _NexoEndPointDisp = dispinterface
    ['{5339D5FB-D6F3-3710-B640-21CEF51B9F46}']
  end;

// *********************************************************************//
// Interface :   _NexoSession
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {22FDEE0C-B93F-3CF0-A2A2-BA85F2288CED}
// *********************************************************************//
  _NexoSession = interface(IDispatch)
    ['{22FDEE0C-B93F-3CF0-A2A2-BA85F2288CED}']
  end;

// *********************************************************************//
// DispIntf :    _NexoSessionDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {22FDEE0C-B93F-3CF0-A2A2-BA85F2288CED}
// *********************************************************************//
  _NexoSessionDisp = dispinterface
    ['{22FDEE0C-B93F-3CF0-A2A2-BA85F2288CED}']
  end;

// *********************************************************************//
// Interface :   INexoAnyMessage
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {91849B50-192A-4811-8BFA-A506BD74E778}
// *********************************************************************//
  INexoAnyMessage = interface(IDispatch)
    ['{91849B50-192A-4811-8BFA-A506BD74E778}']
    function Get_Processed: WordBool; safecall;
    procedure Set_Processed(pRetVal: WordBool); safecall;
    function Get_XML: WideString; safecall;
    function Get_Timestamp: TDateTime; safecall;
    function Get_ToString(addkey: WordBool): WideString; safecall;
    property Processed: WordBool read Get_Processed write Set_Processed;
    property XML: WideString read Get_XML;
    property Timestamp: TDateTime read Get_Timestamp;
    property ToString[addkey: WordBool]: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoAnyMessageDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {91849B50-192A-4811-8BFA-A506BD74E778}
// *********************************************************************//
  INexoAnyMessageDisp = dispinterface
    ['{91849B50-192A-4811-8BFA-A506BD74E778}']
    property Processed: WordBool dispid 1;
    property XML: WideString readonly dispid 2;
    property Timestamp: TDateTime readonly dispid 3;
    property ToString[addkey: WordBool]: WideString readonly dispid 100;
  end;

// *********************************************************************//
// Interface :   _NexoDelegates
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {9D53AE2A-5E06-352F-A630-F76256357105}
// *********************************************************************//
  _NexoDelegates = interface(IDispatch)
    ['{9D53AE2A-5E06-352F-A630-F76256357105}']
  end;

// *********************************************************************//
// DispIntf :    _NexoDelegatesDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {9D53AE2A-5E06-352F-A630-F76256357105}
// *********************************************************************//
  _NexoDelegatesDisp = dispinterface
    ['{9D53AE2A-5E06-352F-A630-F76256357105}']
  end;

// *********************************************************************//
// Interface :   INexoItem
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B7773C1A-8091-4B2A-A54E-74E686E5F91E}
// *********************************************************************//
  INexoItem = interface(IDispatch)
    ['{B7773C1A-8091-4B2A-A54E-74E686E5F91E}']
    function Get_Item: OleVariant; safecall;
    function Get_XML: WideString; safecall;
    function Get_IsRequest: WordBool; safecall;
    function Get_IsReply: WordBool; safecall;
    function Get_IsNotification: WordBool; safecall;
    function Get_type_: MessageTypeEnumeration; safecall;
    function Get_Category: MessageCategoryEnumeration; safecall;
    function Get_Class_: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_IsValid: WordBool; safecall;
    function Get_IsRequestValidForServer: WordBool; safecall;
    function Get_IsRequestValidForClient: WordBool; safecall;
    function Get_ReplyRequired: WordBool; safecall;
    function Get_SupportsAbort: WordBool; safecall;
    function Get_ToString: WideString; safecall;
    function MatchesRequest(const Item: INexoItem): WordBool; safecall;
    property Item: OleVariant read Get_Item;
    property XML: WideString read Get_XML;
    property IsRequest: WordBool read Get_IsRequest;
    property IsReply: WordBool read Get_IsReply;
    property IsNotification: WordBool read Get_IsNotification;
    property type_: MessageTypeEnumeration read Get_type_;
    property Category: MessageCategoryEnumeration read Get_Category;
    property Class_: MessageClassEnumeration read Get_Class_;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property IsValid: WordBool read Get_IsValid;
    property IsRequestValidForServer: WordBool read Get_IsRequestValidForServer;
    property IsRequestValidForClient: WordBool read Get_IsRequestValidForClient;
    property ReplyRequired: WordBool read Get_ReplyRequired;
    property SupportsAbort: WordBool read Get_SupportsAbort;
    property ToString: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoItemDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B7773C1A-8091-4B2A-A54E-74E686E5F91E}
// *********************************************************************//
  INexoItemDisp = dispinterface
    ['{B7773C1A-8091-4B2A-A54E-74E686E5F91E}']
    property Item: OleVariant readonly dispid 1;
    property XML: WideString readonly dispid 2;
    property IsRequest: WordBool readonly dispid 3;
    property IsReply: WordBool readonly dispid 4;
    property IsNotification: WordBool readonly dispid 5;
    property type_: MessageTypeEnumeration readonly dispid 6;
    property Category: MessageCategoryEnumeration readonly dispid 7;
    property Class_: MessageClassEnumeration readonly dispid 8;
    property IsService: WordBool readonly dispid 9;
    property IsDevice: WordBool readonly dispid 10;
    property IsEvent: WordBool readonly dispid 11;
    property IsValid: WordBool readonly dispid 12;
    property IsRequestValidForServer: WordBool readonly dispid 13;
    property IsRequestValidForClient: WordBool readonly dispid 14;
    property ReplyRequired: WordBool readonly dispid 15;
    property SupportsAbort: WordBool readonly dispid 16;
    property ToString: WideString readonly dispid 100;
    function MatchesRequest(const Item: INexoItem): WordBool; dispid 101;
  end;

// *********************************************************************//
// Interface :   _NexoKey
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {89CFED27-307C-3ADA-BBD6-40800D474F0F}
// *********************************************************************//
  _NexoKey = interface(IDispatch)
    ['{89CFED27-307C-3ADA-BBD6-40800D474F0F}']
  end;

// *********************************************************************//
// DispIntf :    _NexoKeyDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {89CFED27-307C-3ADA-BBD6-40800D474F0F}
// *********************************************************************//
  _NexoKeyDisp = dispinterface
    ['{89CFED27-307C-3ADA-BBD6-40800D474F0F}']
  end;

// *********************************************************************//
// Interface :   INexoAdmin
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9A3C60DD-2D50-4515-9762-4632AA45BBC5}
// *********************************************************************//
  INexoAdmin = interface(IDispatch)
    ['{9A3C60DD-2D50-4515-9762-4632AA45BBC5}']
    function Get_RequestData: IAdminRequestType; safecall;
    function Get_ReplyData: IAdminResponseType; safecall;
    function Get_RequestServiceIdentification: WideString; safecall;
    procedure Set_RequestServiceIdentification(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IAdminRequestType read Get_RequestData;
    property ReplyData: IAdminResponseType read Get_ReplyData;
    property RequestServiceIdentification: WideString read Get_RequestServiceIdentification write Set_RequestServiceIdentification;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoAdminDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9A3C60DD-2D50-4515-9762-4632AA45BBC5}
// *********************************************************************//
  INexoAdminDisp = dispinterface
    ['{9A3C60DD-2D50-4515-9762-4632AA45BBC5}']
    property RequestData: IAdminRequestType readonly dispid 1;
    property ReplyData: IAdminResponseType readonly dispid 2;
    property RequestServiceIdentification: WideString dispid 3;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoObject
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {70469D2A-4EFD-4023-82BB-7F6D382A5D83}
// *********************************************************************//
  INexoObject = interface(IDispatch)
    ['{70469D2A-4EFD-4023-82BB-7F6D382A5D83}']
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_RequestItem: OleVariant; safecall;
    function Get_ReplyItem: OleVariant; safecall;
    function Get_SerializedRequest: WideString; safecall;
    function Get_SerializedReply: WideString; safecall;
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_IsService: WordBool; safecall;
    function Get_IsDevice: WordBool; safecall;
    function Get_IsEvent: WordBool; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function RequestFromXml(const XML: WideString): WordBool; safecall;
    function ReplyFromXml(const XML: WideString): WordBool; safecall;
    function FromItem(const Item: INexoItem): WordBool; safecall;
    function SerializeAndCompleteRequest: WideString; safecall;
    function SerializeAndCompleteReply: WideString; safecall;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property RequestItem: OleVariant read Get_RequestItem;
    property ReplyItem: OleVariant read Get_ReplyItem;
    property SerializedRequest: WideString read Get_SerializedRequest;
    property SerializedReply: WideString read Get_SerializedReply;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property IsService: WordBool read Get_IsService;
    property IsDevice: WordBool read Get_IsDevice;
    property IsEvent: WordBool read Get_IsEvent;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property ToString: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoObjectDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {70469D2A-4EFD-4023-82BB-7F6D382A5D83}
// *********************************************************************//
  INexoObjectDisp = dispinterface
    ['{70469D2A-4EFD-4023-82BB-7F6D382A5D83}']
    property Request: ISaleToPOIRequest readonly dispid 7001;
    property Reply: ISaleToPOIResponse readonly dispid 7002;
    property RequestItem: OleVariant readonly dispid 7003;
    property ReplyItem: OleVariant readonly dispid 7004;
    property SerializedRequest: WideString readonly dispid 7005;
    property SerializedReply: WideString readonly dispid 7006;
    property Response: IResponseType dispid 7007;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 7008;
    property MessageClass: MessageClassEnumeration readonly dispid 7009;
    property IsService: WordBool readonly dispid 7010;
    property IsDevice: WordBool readonly dispid 7011;
    property IsEvent: WordBool readonly dispid 7012;
    property ProtocolVersion: WideString dispid 7013;
    property SaleID: WideString dispid 7014;
    property POIID: WideString dispid 7015;
    property ServiceID: WideString dispid 7016;
    property DeviceID: WideString dispid 7017;
    property Success: WordBool readonly dispid 7018;
    property Failure: WordBool readonly dispid 7019;
    property Partial: WordBool readonly dispid 7020;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 7021;
    property Busy: WordBool readonly dispid 7022;
    property Cancel: WordBool readonly dispid 7023;
    property DeviceOut: WordBool readonly dispid 7024;
    property InsertedCard: WordBool readonly dispid 7025;
    property InProgress: WordBool readonly dispid 7026;
    property LoggedOut: WordBool readonly dispid 7027;
    property MessageFormat: WordBool readonly dispid 7028;
    property NotAllowed: WordBool readonly dispid 7029;
    property NotFound: WordBool readonly dispid 7030;
    property PaymentRestriction: WordBool readonly dispid 7031;
    property Refusal: WordBool readonly dispid 7032;
    property UnavailableDevice: WordBool readonly dispid 7033;
    property UnavailableService: WordBool readonly dispid 7034;
    property InvalidCard: WordBool readonly dispid 7035;
    property UnreachableHost: WordBool readonly dispid 7036;
    property WrongPIN: WordBool readonly dispid 7037;
    property UnknownError: WordBool readonly dispid 7038;
    property AdditionalResponse: WideString readonly dispid 7039;
    property AddMilliseconds: WordBool dispid 7050;
    property Utc: WordBool dispid 7051;
    property ToString: WideString readonly dispid 7100;
    function AutoID: WideString; dispid 7101;
    function RequestFromXml(const XML: WideString): WordBool; dispid 7102;
    function ReplyFromXml(const XML: WideString): WordBool; dispid 7103;
    function FromItem(const Item: INexoItem): WordBool; dispid 7104;
    function SerializeAndCompleteRequest: WideString; dispid 7105;
    function SerializeAndCompleteReply: WideString; dispid 7106;
  end;

// *********************************************************************//
// Interface :   INexoBalanceInquiry
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CDC42997-48E2-4D4A-9DD4-4CEBCA16652B}
// *********************************************************************//
  INexoBalanceInquiry = interface(IDispatch)
    ['{CDC42997-48E2-4D4A-9DD4-4CEBCA16652B}']
    function Get_RequestData: IBalanceInquiryRequestType; safecall;
    function Get_ReplyData: IBalanceInquiryResponseType; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IBalanceInquiryRequestType read Get_RequestData;
    property ReplyData: IBalanceInquiryResponseType read Get_ReplyData;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoBalanceInquiryDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CDC42997-48E2-4D4A-9DD4-4CEBCA16652B}
// *********************************************************************//
  INexoBalanceInquiryDisp = dispinterface
    ['{CDC42997-48E2-4D4A-9DD4-4CEBCA16652B}']
    property RequestData: IBalanceInquiryRequestType readonly dispid 1;
    property ReplyData: IBalanceInquiryResponseType readonly dispid 2;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoBatch
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0AB85F76-922F-46EF-8DCB-A050E7030921}
// *********************************************************************//
  INexoBatch = interface(IDispatch)
    ['{0AB85F76-922F-46EF-8DCB-A050E7030921}']
    function Get_RequestData: IBatchRequestType; safecall;
    function Get_ReplyData: IBatchResponseType; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IBatchRequestType read Get_RequestData;
    property ReplyData: IBatchResponseType read Get_ReplyData;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoBatchDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0AB85F76-922F-46EF-8DCB-A050E7030921}
// *********************************************************************//
  INexoBatchDisp = dispinterface
    ['{0AB85F76-922F-46EF-8DCB-A050E7030921}']
    property RequestData: IBatchRequestType readonly dispid 1;
    property ReplyData: IBatchResponseType readonly dispid 2;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoCardAcquisition
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {85FADEEB-5156-405B-87EE-54D9AE22E316}
// *********************************************************************//
  INexoCardAcquisition = interface(IDispatch)
    ['{85FADEEB-5156-405B-87EE-54D9AE22E316}']
    function Get_RequestData: ICardAcquisitionRequestType; safecall;
    function Get_ReplyData: ICardAcquisitionResponseType; safecall;
    function Get_RequestSaleTransactionID: WideString; safecall;
    procedure Set_RequestSaleTransactionID(const pRetVal: WideString); safecall;
    function Get_RequestSaleTransactionTimestamp: WideString; safecall;
    procedure Set_RequestSaleTransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_ReplyPOITransactionID: WideString; safecall;
    procedure Set_ReplyPOITransactionID(const pRetVal: WideString); safecall;
    function Get_ReplyPOITransactionTimestamp: WideString; safecall;
    procedure Set_ReplyPOITransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: ICardAcquisitionRequestType read Get_RequestData;
    property ReplyData: ICardAcquisitionResponseType read Get_ReplyData;
    property RequestSaleTransactionID: WideString read Get_RequestSaleTransactionID write Set_RequestSaleTransactionID;
    property RequestSaleTransactionTimestamp: WideString read Get_RequestSaleTransactionTimestamp write Set_RequestSaleTransactionTimestamp;
    property ReplyPOITransactionID: WideString read Get_ReplyPOITransactionID write Set_ReplyPOITransactionID;
    property ReplyPOITransactionTimestamp: WideString read Get_ReplyPOITransactionTimestamp write Set_ReplyPOITransactionTimestamp;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoCardAcquisitionDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {85FADEEB-5156-405B-87EE-54D9AE22E316}
// *********************************************************************//
  INexoCardAcquisitionDisp = dispinterface
    ['{85FADEEB-5156-405B-87EE-54D9AE22E316}']
    property RequestData: ICardAcquisitionRequestType readonly dispid 1;
    property ReplyData: ICardAcquisitionResponseType readonly dispid 2;
    property RequestSaleTransactionID: WideString dispid 3;
    property RequestSaleTransactionTimestamp: WideString dispid 4;
    property ReplyPOITransactionID: WideString dispid 50;
    property ReplyPOITransactionTimestamp: WideString dispid 51;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoCardReaderInit
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {424AC59E-6B02-46F1-97AD-F4DAF1BEBDCE}
// *********************************************************************//
  INexoCardReaderInit = interface(IDispatch)
    ['{424AC59E-6B02-46F1-97AD-F4DAF1BEBDCE}']
    function Get_RequestData: ICardReaderInitRequestType; safecall;
    function Get_ReplyData: ICardReaderInitResponseType; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: ICardReaderInitRequestType read Get_RequestData;
    property ReplyData: ICardReaderInitResponseType read Get_ReplyData;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoCardReaderInitDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {424AC59E-6B02-46F1-97AD-F4DAF1BEBDCE}
// *********************************************************************//
  INexoCardReaderInitDisp = dispinterface
    ['{424AC59E-6B02-46F1-97AD-F4DAF1BEBDCE}']
    property RequestData: ICardReaderInitRequestType readonly dispid 1;
    property ReplyData: ICardReaderInitResponseType readonly dispid 2;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoCardReaderAPDU
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CB4E4768-D56A-4105-B780-004E97929361}
// *********************************************************************//
  INexoCardReaderAPDU = interface(IDispatch)
    ['{CB4E4768-D56A-4105-B780-004E97929361}']
    function Get_RequestData: ICardReaderAPDURequestType; safecall;
    function Get_ReplyData: ICardReaderAPDUResponseType; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: ICardReaderAPDURequestType read Get_RequestData;
    property ReplyData: ICardReaderAPDUResponseType read Get_ReplyData;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoCardReaderAPDUDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CB4E4768-D56A-4105-B780-004E97929361}
// *********************************************************************//
  INexoCardReaderAPDUDisp = dispinterface
    ['{CB4E4768-D56A-4105-B780-004E97929361}']
    property RequestData: ICardReaderAPDURequestType readonly dispid 1;
    property ReplyData: ICardReaderAPDUResponseType readonly dispid 2;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoCardReaderPowerOFF
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {70C8C7A9-62C2-4729-929C-8163614D09DA}
// *********************************************************************//
  INexoCardReaderPowerOFF = interface(IDispatch)
    ['{70C8C7A9-62C2-4729-929C-8163614D09DA}']
    function Get_RequestData: ICardReaderPowerOffRequestType; safecall;
    function Get_ReplyData: ICardReaderPowerOffResponseType; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: ICardReaderPowerOffRequestType read Get_RequestData;
    property ReplyData: ICardReaderPowerOffResponseType read Get_ReplyData;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoCardReaderPowerOFFDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {70C8C7A9-62C2-4729-929C-8163614D09DA}
// *********************************************************************//
  INexoCardReaderPowerOFFDisp = dispinterface
    ['{70C8C7A9-62C2-4729-929C-8163614D09DA}']
    property RequestData: ICardReaderPowerOffRequestType readonly dispid 1;
    property ReplyData: ICardReaderPowerOffResponseType readonly dispid 2;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoDeviceDisplay
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F6DC1D06-11C7-4814-9326-E68C4A9EBF4E}
// *********************************************************************//
  INexoDeviceDisplay = interface(IDispatch)
    ['{F6DC1D06-11C7-4814-9326-E68C4A9EBF4E}']
    function Get_RequestData: IDisplayRequestType; safecall;
    function Get_ReplyData: IDisplayResponseType; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IDisplayRequestType read Get_RequestData;
    property ReplyData: IDisplayResponseType read Get_ReplyData;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoDeviceDisplayDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F6DC1D06-11C7-4814-9326-E68C4A9EBF4E}
// *********************************************************************//
  INexoDeviceDisplayDisp = dispinterface
    ['{F6DC1D06-11C7-4814-9326-E68C4A9EBF4E}']
    property RequestData: IDisplayRequestType readonly dispid 1;
    property ReplyData: IDisplayResponseType readonly dispid 2;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoDeviceInputUpdate
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {529FFD3D-658C-49C5-85A3-66799AAA5E34}
// *********************************************************************//
  INexoDeviceInputUpdate = interface(IDispatch)
    ['{529FFD3D-658C-49C5-85A3-66799AAA5E34}']
    function Get_RequestData: IInputUpdateType; safecall;
    function Get_RequestMessageReferenceServiceID: WideString; safecall;
    procedure Set_RequestMessageReferenceServiceID(const pRetVal: WideString); safecall;
    function Get_RequestMessageReferenceDeviceID: WideString; safecall;
    procedure Set_RequestMessageReferenceDeviceID(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IInputUpdateType read Get_RequestData;
    property RequestMessageReferenceServiceID: WideString read Get_RequestMessageReferenceServiceID write Set_RequestMessageReferenceServiceID;
    property RequestMessageReferenceDeviceID: WideString read Get_RequestMessageReferenceDeviceID write Set_RequestMessageReferenceDeviceID;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoDeviceInputUpdateDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {529FFD3D-658C-49C5-85A3-66799AAA5E34}
// *********************************************************************//
  INexoDeviceInputUpdateDisp = dispinterface
    ['{529FFD3D-658C-49C5-85A3-66799AAA5E34}']
    property RequestData: IInputUpdateType readonly dispid 1;
    property RequestMessageReferenceServiceID: WideString dispid 3;
    property RequestMessageReferenceDeviceID: WideString dispid 4;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoDeviceSound
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A3534554-E05D-4A11-BB41-88DEC0B20EE4}
// *********************************************************************//
  INexoDeviceSound = interface(IDispatch)
    ['{A3534554-E05D-4A11-BB41-88DEC0B20EE4}']
    function Get_RequestData: ISoundRequestType; safecall;
    function Get_ReplyData: ISoundResponseType; safecall;
    function Get_RequestSoundAction: SoundActionEnumeration; safecall;
    procedure Set_RequestSoundAction(pRetVal: SoundActionEnumeration); safecall;
    function Get_RequestSoundVolume: LongWord; safecall;
    procedure Set_RequestSoundVolume(pRetVal: LongWord); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: ISoundRequestType read Get_RequestData;
    property ReplyData: ISoundResponseType read Get_ReplyData;
    property RequestSoundAction: SoundActionEnumeration read Get_RequestSoundAction write Set_RequestSoundAction;
    property RequestSoundVolume: LongWord read Get_RequestSoundVolume write Set_RequestSoundVolume;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoDeviceSoundDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A3534554-E05D-4A11-BB41-88DEC0B20EE4}
// *********************************************************************//
  INexoDeviceSoundDisp = dispinterface
    ['{A3534554-E05D-4A11-BB41-88DEC0B20EE4}']
    property RequestData: ISoundRequestType readonly dispid 1;
    property ReplyData: ISoundResponseType readonly dispid 2;
    property RequestSoundAction: SoundActionEnumeration dispid 3;
    property RequestSoundVolume: LongWord dispid 4;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoEnableService
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {459D4296-691D-48D6-84E5-F9069D5B85D6}
// *********************************************************************//
  INexoEnableService = interface(IDispatch)
    ['{459D4296-691D-48D6-84E5-F9069D5B85D6}']
    function Get_RequestData: IEnableServiceRequestType; safecall;
    function Get_ReplyData: IEnableServiceResponseType; safecall;
    function Get_RequestTransactionAction: TransactionActionEnumeration; safecall;
    procedure Set_RequestTransactionAction(pRetVal: TransactionActionEnumeration); safecall;
    function Get_RequestServicesEnabled: WideString; safecall;
    procedure Set_RequestServicesEnabled(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IEnableServiceRequestType read Get_RequestData;
    property ReplyData: IEnableServiceResponseType read Get_ReplyData;
    property RequestTransactionAction: TransactionActionEnumeration read Get_RequestTransactionAction write Set_RequestTransactionAction;
    property RequestServicesEnabled: WideString read Get_RequestServicesEnabled write Set_RequestServicesEnabled;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoEnableServiceDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {459D4296-691D-48D6-84E5-F9069D5B85D6}
// *********************************************************************//
  INexoEnableServiceDisp = dispinterface
    ['{459D4296-691D-48D6-84E5-F9069D5B85D6}']
    property RequestData: IEnableServiceRequestType readonly dispid 1;
    property ReplyData: IEnableServiceResponseType readonly dispid 2;
    property RequestTransactionAction: TransactionActionEnumeration dispid 3;
    property RequestServicesEnabled: WideString dispid 4;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoGetTotals
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {ED6FDAD1-7D79-4DA6-8F4F-35BCAFADF772}
// *********************************************************************//
  INexoGetTotals = interface(IDispatch)
    ['{ED6FDAD1-7D79-4DA6-8F4F-35BCAFADF772}']
    function Get_RequestData: IGetTotalsRequestType; safecall;
    function Get_ReplyData: IGetTotalsResponseType; safecall;
    function Get_ReplyPOIReconciliationID: WideString; safecall;
    procedure Set_ReplyPOIReconciliationID(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IGetTotalsRequestType read Get_RequestData;
    property ReplyData: IGetTotalsResponseType read Get_ReplyData;
    property ReplyPOIReconciliationID: WideString read Get_ReplyPOIReconciliationID write Set_ReplyPOIReconciliationID;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoGetTotalsDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {ED6FDAD1-7D79-4DA6-8F4F-35BCAFADF772}
// *********************************************************************//
  INexoGetTotalsDisp = dispinterface
    ['{ED6FDAD1-7D79-4DA6-8F4F-35BCAFADF772}']
    property RequestData: IGetTotalsRequestType readonly dispid 1;
    property ReplyData: IGetTotalsResponseType readonly dispid 2;
    property ReplyPOIReconciliationID: WideString dispid 50;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoLoyalty
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C69EE5BC-630A-4D1F-990B-0D0984E07F08}
// *********************************************************************//
  INexoLoyalty = interface(IDispatch)
    ['{C69EE5BC-630A-4D1F-990B-0D0984E07F08}']
    function Get_RequestData: ILoyaltyRequestType; safecall;
    function Get_ReplyData: ILoyaltyResponseType; safecall;
    function Get_RequestSaleTransactionID: WideString; safecall;
    procedure Set_RequestSaleTransactionID(const pRetVal: WideString); safecall;
    function Get_RequestSaleTransactionTimestamp: WideString; safecall;
    procedure Set_RequestSaleTransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_RequestOriginalPOITransactionID: WideString; safecall;
    procedure Set_RequestOriginalPOITransactionID(const pRetVal: WideString); safecall;
    function Get_RequestOriginalPOITransactionTimestamp: WideString; safecall;
    procedure Set_RequestOriginalPOITransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_RequestLoyaltyTransactionType: WideString; safecall;
    procedure Set_RequestLoyaltyTransactionType(const pRetVal: WideString); safecall;
    function Get_ReplySaleTransactionID: WideString; safecall;
    procedure Set_ReplySaleTransactionID(const pRetVal: WideString); safecall;
    function Get_ReplySaleTransactionTimestamp: WideString; safecall;
    procedure Set_ReplySaleTransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_ReplyPOITransactionID: WideString; safecall;
    procedure Set_ReplyPOITransactionID(const pRetVal: WideString); safecall;
    function Get_ReplyPOITransactionTimestamp: WideString; safecall;
    procedure Set_ReplyPOITransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: ILoyaltyRequestType read Get_RequestData;
    property ReplyData: ILoyaltyResponseType read Get_ReplyData;
    property RequestSaleTransactionID: WideString read Get_RequestSaleTransactionID write Set_RequestSaleTransactionID;
    property RequestSaleTransactionTimestamp: WideString read Get_RequestSaleTransactionTimestamp write Set_RequestSaleTransactionTimestamp;
    property RequestOriginalPOITransactionID: WideString read Get_RequestOriginalPOITransactionID write Set_RequestOriginalPOITransactionID;
    property RequestOriginalPOITransactionTimestamp: WideString read Get_RequestOriginalPOITransactionTimestamp write Set_RequestOriginalPOITransactionTimestamp;
    property RequestLoyaltyTransactionType: WideString read Get_RequestLoyaltyTransactionType write Set_RequestLoyaltyTransactionType;
    property ReplySaleTransactionID: WideString read Get_ReplySaleTransactionID write Set_ReplySaleTransactionID;
    property ReplySaleTransactionTimestamp: WideString read Get_ReplySaleTransactionTimestamp write Set_ReplySaleTransactionTimestamp;
    property ReplyPOITransactionID: WideString read Get_ReplyPOITransactionID write Set_ReplyPOITransactionID;
    property ReplyPOITransactionTimestamp: WideString read Get_ReplyPOITransactionTimestamp write Set_ReplyPOITransactionTimestamp;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoLoyaltyDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C69EE5BC-630A-4D1F-990B-0D0984E07F08}
// *********************************************************************//
  INexoLoyaltyDisp = dispinterface
    ['{C69EE5BC-630A-4D1F-990B-0D0984E07F08}']
    property RequestData: ILoyaltyRequestType readonly dispid 1;
    property ReplyData: ILoyaltyResponseType readonly dispid 2;
    property RequestSaleTransactionID: WideString dispid 3;
    property RequestSaleTransactionTimestamp: WideString dispid 4;
    property RequestOriginalPOITransactionID: WideString dispid 5;
    property RequestOriginalPOITransactionTimestamp: WideString dispid 6;
    property RequestLoyaltyTransactionType: WideString dispid 7;
    property ReplySaleTransactionID: WideString dispid 51;
    property ReplySaleTransactionTimestamp: WideString dispid 52;
    property ReplyPOITransactionID: WideString dispid 53;
    property ReplyPOITransactionTimestamp: WideString dispid 54;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoPIN
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {877BE257-F158-4A4F-9646-6080B193749B}
// *********************************************************************//
  INexoPIN = interface(IDispatch)
    ['{877BE257-F158-4A4F-9646-6080B193749B}']
    function Get_RequestData: IPINRequestType; safecall;
    function Get_ReplyData: IPINResponseType; safecall;
    function Get_RequestPINRequestType: PINRequestTypeEnumeration; safecall;
    procedure Set_RequestPINRequestType(pRetVal: PINRequestTypeEnumeration); safecall;
    function Get_RequestMaxWaitingTime: LongWord; safecall;
    procedure Set_RequestMaxWaitingTime(pRetVal: LongWord); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IPINRequestType read Get_RequestData;
    property ReplyData: IPINResponseType read Get_ReplyData;
    property RequestPINRequestType: PINRequestTypeEnumeration read Get_RequestPINRequestType write Set_RequestPINRequestType;
    property RequestMaxWaitingTime: LongWord read Get_RequestMaxWaitingTime write Set_RequestMaxWaitingTime;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoPINDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {877BE257-F158-4A4F-9646-6080B193749B}
// *********************************************************************//
  INexoPINDisp = dispinterface
    ['{877BE257-F158-4A4F-9646-6080B193749B}']
    property RequestData: IPINRequestType readonly dispid 1;
    property ReplyData: IPINResponseType readonly dispid 2;
    property RequestPINRequestType: PINRequestTypeEnumeration dispid 3;
    property RequestMaxWaitingTime: LongWord dispid 4;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoReconciliation
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7ADA4C0C-EEAD-4B53-8089-A8B7491D1FB6}
// *********************************************************************//
  INexoReconciliation = interface(IDispatch)
    ['{7ADA4C0C-EEAD-4B53-8089-A8B7491D1FB6}']
    function Get_RequestData: IReconciliationRequestType; safecall;
    function Get_ReplyData: IReconciliationResponseType; safecall;
    function Get_RequestReconciliationType: ReconciliationTypeEnumeration; safecall;
    procedure Set_RequestReconciliationType(pRetVal: ReconciliationTypeEnumeration); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IReconciliationRequestType read Get_RequestData;
    property ReplyData: IReconciliationResponseType read Get_ReplyData;
    property RequestReconciliationType: ReconciliationTypeEnumeration read Get_RequestReconciliationType write Set_RequestReconciliationType;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoReconciliationDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7ADA4C0C-EEAD-4B53-8089-A8B7491D1FB6}
// *********************************************************************//
  INexoReconciliationDisp = dispinterface
    ['{7ADA4C0C-EEAD-4B53-8089-A8B7491D1FB6}']
    property RequestData: IReconciliationRequestType readonly dispid 1;
    property ReplyData: IReconciliationResponseType readonly dispid 2;
    property RequestReconciliationType: ReconciliationTypeEnumeration dispid 3;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoStoredValue
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2F3C26FD-174D-45BC-86A4-981B953C6611}
// *********************************************************************//
  INexoStoredValue = interface(IDispatch)
    ['{2F3C26FD-174D-45BC-86A4-981B953C6611}']
    function Get_RequestData: IStoredValueRequestType; safecall;
    function Get_ReplyData: IStoredValueResponseType; safecall;
    function Get_RequestSaleTransactionID: WideString; safecall;
    procedure Set_RequestSaleTransactionID(const pRetVal: WideString); safecall;
    function Get_RequestSaleTransactionTimestamp: WideString; safecall;
    procedure Set_RequestSaleTransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IStoredValueRequestType read Get_RequestData;
    property ReplyData: IStoredValueResponseType read Get_ReplyData;
    property RequestSaleTransactionID: WideString read Get_RequestSaleTransactionID write Set_RequestSaleTransactionID;
    property RequestSaleTransactionTimestamp: WideString read Get_RequestSaleTransactionTimestamp write Set_RequestSaleTransactionTimestamp;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoStoredValueDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2F3C26FD-174D-45BC-86A4-981B953C6611}
// *********************************************************************//
  INexoStoredValueDisp = dispinterface
    ['{2F3C26FD-174D-45BC-86A4-981B953C6611}']
    property RequestData: IStoredValueRequestType readonly dispid 1;
    property ReplyData: IStoredValueResponseType readonly dispid 2;
    property RequestSaleTransactionID: WideString dispid 3;
    property RequestSaleTransactionTimestamp: WideString dispid 4;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoTransmit
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8314ADA0-DD56-497D-9FFA-02A86CB305CA}
// *********************************************************************//
  INexoTransmit = interface(IDispatch)
    ['{8314ADA0-DD56-497D-9FFA-02A86CB305CA}']
    function Get_RequestData: ITransmitRequestType; safecall;
    function Get_ReplyData: ITransmitResponseType; safecall;
    function Get_RequestMaximumTransmitTime: LongWord; safecall;
    procedure Set_RequestMaximumTransmitTime(pRetVal: LongWord); safecall;
    function Get_RequestDestinationAddress: WideString; safecall;
    procedure Set_RequestDestinationAddress(const pRetVal: WideString); safecall;
    function Get_RequestMessage: WideString; safecall;
    procedure Set_RequestMessage(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: ITransmitRequestType read Get_RequestData;
    property ReplyData: ITransmitResponseType read Get_ReplyData;
    property RequestMaximumTransmitTime: LongWord read Get_RequestMaximumTransmitTime write Set_RequestMaximumTransmitTime;
    property RequestDestinationAddress: WideString read Get_RequestDestinationAddress write Set_RequestDestinationAddress;
    property RequestMessage: WideString read Get_RequestMessage write Set_RequestMessage;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoTransmitDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8314ADA0-DD56-497D-9FFA-02A86CB305CA}
// *********************************************************************//
  INexoTransmitDisp = dispinterface
    ['{8314ADA0-DD56-497D-9FFA-02A86CB305CA}']
    property RequestData: ITransmitRequestType readonly dispid 1;
    property ReplyData: ITransmitResponseType readonly dispid 2;
    property RequestMaximumTransmitTime: LongWord dispid 3;
    property RequestDestinationAddress: WideString dispid 4;
    property RequestMessage: WideString dispid 5;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoAbort
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D71CE22F-0AA1-4792-9857-864A5E29A2BE}
// *********************************************************************//
  INexoAbort = interface(IDispatch)
    ['{D71CE22F-0AA1-4792-9857-864A5E29A2BE}']
    function Get_RequestData: IAbortRequestType; safecall;
    function Get_AbortPOIID: WideString; safecall;
    procedure Set_AbortPOIID(const pRetVal: WideString); safecall;
    function Get_AbortSaleID: WideString; safecall;
    procedure Set_AbortSaleID(const pRetVal: WideString); safecall;
    function Get_AbortServiceID: WideString; safecall;
    procedure Set_AbortServiceID(const pRetVal: WideString); safecall;
    function Get_AbortDeviceID: WideString; safecall;
    procedure Set_AbortDeviceID(const pRetVal: WideString); safecall;
    function Get_AbortMessageCategory: MessageCategoryEnumeration; safecall;
    procedure Set_AbortMessageCategory(pRetVal: MessageCategoryEnumeration); safecall;
    function Get_AbortReason: WideString; safecall;
    procedure Set_AbortReason(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IAbortRequestType read Get_RequestData;
    property AbortPOIID: WideString read Get_AbortPOIID write Set_AbortPOIID;
    property AbortSaleID: WideString read Get_AbortSaleID write Set_AbortSaleID;
    property AbortServiceID: WideString read Get_AbortServiceID write Set_AbortServiceID;
    property AbortDeviceID: WideString read Get_AbortDeviceID write Set_AbortDeviceID;
    property AbortMessageCategory: MessageCategoryEnumeration read Get_AbortMessageCategory write Set_AbortMessageCategory;
    property AbortReason: WideString read Get_AbortReason write Set_AbortReason;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoAbortDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D71CE22F-0AA1-4792-9857-864A5E29A2BE}
// *********************************************************************//
  INexoAbortDisp = dispinterface
    ['{D71CE22F-0AA1-4792-9857-864A5E29A2BE}']
    property RequestData: IAbortRequestType readonly dispid 1;
    property AbortPOIID: WideString dispid 3;
    property AbortSaleID: WideString dispid 4;
    property AbortServiceID: WideString dispid 5;
    property AbortDeviceID: WideString dispid 6;
    property AbortMessageCategory: MessageCategoryEnumeration dispid 7;
    property AbortReason: WideString dispid 8;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoDiagnosis
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E8C62FFB-C292-4592-A538-8283E5807DA1}
// *********************************************************************//
  INexoDiagnosis = interface(IDispatch)
    ['{E8C62FFB-C292-4592-A538-8283E5807DA1}']
    function Get_RequestData: IDiagnosisRequestType; safecall;
    function Get_ReplyData: IDiagnosisResponseType; safecall;
    function Get_RequestPOIID: WideString; safecall;
    procedure Set_RequestPOIID(const pRetVal: WideString); safecall;
    function Get_RequestHostDiagnosisFlag: WordBool; safecall;
    procedure Set_RequestHostDiagnosisFlag(pRetVal: WordBool); safecall;
    function Get_ReplyGlobalStatus: GlobalStatusEnumeration; safecall;
    procedure Set_ReplyGlobalStatus(pRetVal: GlobalStatusEnumeration); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IDiagnosisRequestType read Get_RequestData;
    property ReplyData: IDiagnosisResponseType read Get_ReplyData;
    property RequestPOIID: WideString read Get_RequestPOIID write Set_RequestPOIID;
    property RequestHostDiagnosisFlag: WordBool read Get_RequestHostDiagnosisFlag write Set_RequestHostDiagnosisFlag;
    property ReplyGlobalStatus: GlobalStatusEnumeration read Get_ReplyGlobalStatus write Set_ReplyGlobalStatus;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoDiagnosisDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E8C62FFB-C292-4592-A538-8283E5807DA1}
// *********************************************************************//
  INexoDiagnosisDisp = dispinterface
    ['{E8C62FFB-C292-4592-A538-8283E5807DA1}']
    property RequestData: IDiagnosisRequestType readonly dispid 1;
    property ReplyData: IDiagnosisResponseType readonly dispid 2;
    property RequestPOIID: WideString dispid 3;
    property RequestHostDiagnosisFlag: WordBool dispid 4;
    property ReplyGlobalStatus: GlobalStatusEnumeration dispid 50;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoEvent
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {389CD3D9-3950-4A61-B90E-BC9EB85E0008}
// *********************************************************************//
  INexoEvent = interface(IDispatch)
    ['{389CD3D9-3950-4A61-B90E-BC9EB85E0008}']
    function Get_RequestData: IEventNotificationType; safecall;
    function Get_EventTimestamp: WideString; safecall;
    procedure Set_EventTimestamp(const pRetVal: WideString); safecall;
    function Get_EventToNotify: EventToNotifyEnumeration; safecall;
    procedure Set_EventToNotify(pRetVal: EventToNotifyEnumeration); safecall;
    function Get_EventDetails: WideString; safecall;
    procedure Set_EventDetails(const pRetVal: WideString); safecall;
    function Get_EventRejectedMessage: INexoNonStringType; safecall;
    procedure _Set_EventRejectedMessage(const pRetVal: INexoNonStringType); safecall;
    function Get_EventMaintenanceRequiredFlag: WordBool; safecall;
    procedure Set_EventMaintenanceRequiredFlag(pRetVal: WordBool); safecall;
    function Get_EventCustomerLanguage: WideString; safecall;
    procedure Set_EventCustomerLanguage(const pRetVal: WideString); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IEventNotificationType read Get_RequestData;
    property EventTimestamp: WideString read Get_EventTimestamp write Set_EventTimestamp;
    property EventToNotify: EventToNotifyEnumeration read Get_EventToNotify write Set_EventToNotify;
    property EventDetails: WideString read Get_EventDetails write Set_EventDetails;
    property EventRejectedMessage: INexoNonStringType read Get_EventRejectedMessage write _Set_EventRejectedMessage;
    property EventMaintenanceRequiredFlag: WordBool read Get_EventMaintenanceRequiredFlag write Set_EventMaintenanceRequiredFlag;
    property EventCustomerLanguage: WideString read Get_EventCustomerLanguage write Set_EventCustomerLanguage;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoEventDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {389CD3D9-3950-4A61-B90E-BC9EB85E0008}
// *********************************************************************//
  INexoEventDisp = dispinterface
    ['{389CD3D9-3950-4A61-B90E-BC9EB85E0008}']
    property RequestData: IEventNotificationType readonly dispid 1;
    property EventTimestamp: WideString dispid 2;
    property EventToNotify: EventToNotifyEnumeration dispid 3;
    property EventDetails: WideString dispid 4;
    property EventRejectedMessage: INexoNonStringType dispid 5;
    property EventMaintenanceRequiredFlag: WordBool dispid 6;
    property EventCustomerLanguage: WideString dispid 7;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoTransactionStatus
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {18C58418-DF2D-4CF4-B394-7C055526C73A}
// *********************************************************************//
  INexoTransactionStatus = interface(IDispatch)
    ['{18C58418-DF2D-4CF4-B394-7C055526C73A}']
    function Get_RequestData: ITransactionStatusRequestType; safecall;
    function Get_ReplyData: ITransactionStatusResponseType; safecall;
    function Get_RequestMessageReference: IMessageReferenceType; safecall;
    procedure _Set_RequestMessageReference(const pRetVal: IMessageReferenceType); safecall;
    function Get_RequestReceiptReprintFlag: WordBool; safecall;
    procedure Set_RequestReceiptReprintFlag(pRetVal: WordBool); safecall;
    function Get_ReplyMessageReference: IMessageReferenceType; safecall;
    procedure _Set_ReplyMessageReference(const pRetVal: IMessageReferenceType); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: ITransactionStatusRequestType read Get_RequestData;
    property ReplyData: ITransactionStatusResponseType read Get_ReplyData;
    property RequestMessageReference: IMessageReferenceType read Get_RequestMessageReference write _Set_RequestMessageReference;
    property RequestReceiptReprintFlag: WordBool read Get_RequestReceiptReprintFlag write Set_RequestReceiptReprintFlag;
    property ReplyMessageReference: IMessageReferenceType read Get_ReplyMessageReference write _Set_ReplyMessageReference;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoTransactionStatusDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {18C58418-DF2D-4CF4-B394-7C055526C73A}
// *********************************************************************//
  INexoTransactionStatusDisp = dispinterface
    ['{18C58418-DF2D-4CF4-B394-7C055526C73A}']
    property RequestData: ITransactionStatusRequestType readonly dispid 1;
    property ReplyData: ITransactionStatusResponseType readonly dispid 2;
    property RequestMessageReference: IMessageReferenceType dispid 3;
    property RequestReceiptReprintFlag: WordBool dispid 4;
    property ReplyMessageReference: IMessageReferenceType dispid 5;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoDeviceInput
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2CD13AE4-4DF6-47EC-8487-0BBB017D37ED}
// *********************************************************************//
  INexoDeviceInput = interface(IDispatch)
    ['{2CD13AE4-4DF6-47EC-8487-0BBB017D37ED}']
    function Get_RequestData: IInputRequestType; safecall;
    function Get_ReplyData: IInputResponseType; safecall;
    function Get_RequestDevice: DeviceEnumeration; safecall;
    procedure Set_RequestDevice(pRetVal: DeviceEnumeration); safecall;
    function Get_RequestInfoQualify: InfoQualifyEnumeration; safecall;
    procedure Set_RequestInfoQualify(pRetVal: InfoQualifyEnumeration); safecall;
    function Get_RequestInputCommand: InputCommandEnumeration; safecall;
    procedure Set_RequestInputCommand(pRetVal: InputCommandEnumeration); safecall;
    function Get_RequestMaxInput: LongWord; safecall;
    procedure Set_RequestMaxInput(pRetVal: LongWord); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IInputRequestType read Get_RequestData;
    property ReplyData: IInputResponseType read Get_ReplyData;
    property RequestDevice: DeviceEnumeration read Get_RequestDevice write Set_RequestDevice;
    property RequestInfoQualify: InfoQualifyEnumeration read Get_RequestInfoQualify write Set_RequestInfoQualify;
    property RequestInputCommand: InputCommandEnumeration read Get_RequestInputCommand write Set_RequestInputCommand;
    property RequestMaxInput: LongWord read Get_RequestMaxInput write Set_RequestMaxInput;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoDeviceInputDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2CD13AE4-4DF6-47EC-8487-0BBB017D37ED}
// *********************************************************************//
  INexoDeviceInputDisp = dispinterface
    ['{2CD13AE4-4DF6-47EC-8487-0BBB017D37ED}']
    property RequestData: IInputRequestType readonly dispid 1;
    property ReplyData: IInputResponseType readonly dispid 2;
    property RequestDevice: DeviceEnumeration dispid 3;
    property RequestInfoQualify: InfoQualifyEnumeration dispid 4;
    property RequestInputCommand: InputCommandEnumeration dispid 5;
    property RequestMaxInput: LongWord dispid 6;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoDevicePrint
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F9BC46A7-AA77-4B4B-81CC-1348E2E4FABC}
// *********************************************************************//
  INexoDevicePrint = interface(IDispatch)
    ['{F9BC46A7-AA77-4B4B-81CC-1348E2E4FABC}']
    function Get_RequestData: IPrintRequestType; safecall;
    function Get_ReplyData: IPrintResponseType; safecall;
    function Get_RequestDocumentQualifier: DocumentQualifierEnumeration; safecall;
    procedure Set_RequestDocumentQualifier(pRetVal: DocumentQualifierEnumeration); safecall;
    function Get_RequestResponseMode: ResponseModeEnumeration; safecall;
    procedure Set_RequestResponseMode(pRetVal: ResponseModeEnumeration); safecall;
    function Get_RequestOutputFormat: OutputFormatEnumeration; safecall;
    procedure Set_RequestOutputFormat(pRetVal: OutputFormatEnumeration); safecall;
    function Get_ReplyDocumentQualifier: DocumentQualifierEnumeration; safecall;
    procedure Set_ReplyDocumentQualifier(pRetVal: DocumentQualifierEnumeration); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IPrintRequestType read Get_RequestData;
    property ReplyData: IPrintResponseType read Get_ReplyData;
    property RequestDocumentQualifier: DocumentQualifierEnumeration read Get_RequestDocumentQualifier write Set_RequestDocumentQualifier;
    property RequestResponseMode: ResponseModeEnumeration read Get_RequestResponseMode write Set_RequestResponseMode;
    property RequestOutputFormat: OutputFormatEnumeration read Get_RequestOutputFormat write Set_RequestOutputFormat;
    property ReplyDocumentQualifier: DocumentQualifierEnumeration read Get_ReplyDocumentQualifier write Set_ReplyDocumentQualifier;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoDevicePrintDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F9BC46A7-AA77-4B4B-81CC-1348E2E4FABC}
// *********************************************************************//
  INexoDevicePrintDisp = dispinterface
    ['{F9BC46A7-AA77-4B4B-81CC-1348E2E4FABC}']
    property RequestData: IPrintRequestType readonly dispid 1;
    property ReplyData: IPrintResponseType readonly dispid 2;
    property RequestDocumentQualifier: DocumentQualifierEnumeration dispid 3;
    property RequestResponseMode: ResponseModeEnumeration dispid 4;
    property RequestOutputFormat: OutputFormatEnumeration dispid 5;
    property ReplyDocumentQualifier: DocumentQualifierEnumeration dispid 50;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoLogin
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4B77D218-D00F-4C13-9652-F0E9E11F3BF3}
// *********************************************************************//
  INexoLogin = interface(IDispatch)
    ['{4B77D218-D00F-4C13-9652-F0E9E11F3BF3}']
    function Get_RequestData: ILoginRequestType; safecall;
    function Get_ReplyData: ILoginResponseType; safecall;
    function Get_RequestManufacturerID: WideString; safecall;
    procedure Set_RequestManufacturerID(const pRetVal: WideString); safecall;
    function Get_RequestApplicationName: WideString; safecall;
    procedure Set_RequestApplicationName(const pRetVal: WideString); safecall;
    function Get_RequestSoftwareVersion: WideString; safecall;
    procedure Set_RequestSoftwareVersion(const pRetVal: WideString); safecall;
    function Get_RequestCertificationCode: WideString; safecall;
    procedure Set_RequestCertificationCode(const pRetVal: WideString); safecall;
    function Get_RequestTerminalEnvironment: WideString; safecall;
    procedure Set_RequestTerminalEnvironment(const pRetVal: WideString); safecall;
    function Get_RequestSaleCapabilities: WideString; safecall;
    procedure Set_RequestSaleCapabilities(const pRetVal: WideString); safecall;
    function Get_RequestOperatorID: WideString; safecall;
    procedure Set_RequestOperatorID(const pRetVal: WideString); safecall;
    function Get_RequestOperatorLanguage: WideString; safecall;
    procedure Set_RequestOperatorLanguage(const pRetVal: WideString); safecall;
    function Get_RequestDateTime: WideString; safecall;
    procedure Set_RequestDateTime(const pRetVal: WideString); safecall;
    function Get_ReplyDateTime: WideString; safecall;
    procedure Set_ReplyDateTime(const pRetVal: WideString); safecall;
    function Get_ReplyApplicationName: WideString; safecall;
    procedure Set_ReplyApplicationName(const pRetVal: WideString); safecall;
    function Get_ReplySoftwareVersion: WideString; safecall;
    procedure Set_ReplySoftwareVersion(const pRetVal: WideString); safecall;
    function Get_ReplyCertificationCode: WideString; safecall;
    procedure Set_ReplyCertificationCode(const pRetVal: WideString); safecall;
    function Get_ReplyTerminalEnvironment: WideString; safecall;
    function Get_ReplyPOICapabilities: WideString; safecall;
    procedure Set_ReplyPOICapabilities(const pRetVal: WideString); safecall;
    function Get_ReplyPOISerialNumber: WideString; safecall;
    procedure Set_ReplyPOISerialNumber(const pRetVal: WideString); safecall;
    function Get_ReplyGlobalStatus: GlobalStatusEnumeration; safecall;
    procedure Set_ReplyGlobalStatus(pRetVal: GlobalStatusEnumeration); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: ILoginRequestType read Get_RequestData;
    property ReplyData: ILoginResponseType read Get_ReplyData;
    property RequestManufacturerID: WideString read Get_RequestManufacturerID write Set_RequestManufacturerID;
    property RequestApplicationName: WideString read Get_RequestApplicationName write Set_RequestApplicationName;
    property RequestSoftwareVersion: WideString read Get_RequestSoftwareVersion write Set_RequestSoftwareVersion;
    property RequestCertificationCode: WideString read Get_RequestCertificationCode write Set_RequestCertificationCode;
    property RequestTerminalEnvironment: WideString read Get_RequestTerminalEnvironment write Set_RequestTerminalEnvironment;
    property RequestSaleCapabilities: WideString read Get_RequestSaleCapabilities write Set_RequestSaleCapabilities;
    property RequestOperatorID: WideString read Get_RequestOperatorID write Set_RequestOperatorID;
    property RequestOperatorLanguage: WideString read Get_RequestOperatorLanguage write Set_RequestOperatorLanguage;
    property RequestDateTime: WideString read Get_RequestDateTime write Set_RequestDateTime;
    property ReplyDateTime: WideString read Get_ReplyDateTime write Set_ReplyDateTime;
    property ReplyApplicationName: WideString read Get_ReplyApplicationName write Set_ReplyApplicationName;
    property ReplySoftwareVersion: WideString read Get_ReplySoftwareVersion write Set_ReplySoftwareVersion;
    property ReplyCertificationCode: WideString read Get_ReplyCertificationCode write Set_ReplyCertificationCode;
    property ReplyTerminalEnvironment: WideString read Get_ReplyTerminalEnvironment;
    property ReplyPOICapabilities: WideString read Get_ReplyPOICapabilities write Set_ReplyPOICapabilities;
    property ReplyPOISerialNumber: WideString read Get_ReplyPOISerialNumber write Set_ReplyPOISerialNumber;
    property ReplyGlobalStatus: GlobalStatusEnumeration read Get_ReplyGlobalStatus write Set_ReplyGlobalStatus;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoLoginDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4B77D218-D00F-4C13-9652-F0E9E11F3BF3}
// *********************************************************************//
  INexoLoginDisp = dispinterface
    ['{4B77D218-D00F-4C13-9652-F0E9E11F3BF3}']
    property RequestData: ILoginRequestType readonly dispid 1;
    property ReplyData: ILoginResponseType readonly dispid 2;
    property RequestManufacturerID: WideString dispid 4;
    property RequestApplicationName: WideString dispid 5;
    property RequestSoftwareVersion: WideString dispid 6;
    property RequestCertificationCode: WideString dispid 7;
    property RequestTerminalEnvironment: WideString dispid 8;
    property RequestSaleCapabilities: WideString dispid 9;
    property RequestOperatorID: WideString dispid 10;
    property RequestOperatorLanguage: WideString dispid 11;
    property RequestDateTime: WideString dispid 12;
    property ReplyDateTime: WideString dispid 50;
    property ReplyApplicationName: WideString dispid 51;
    property ReplySoftwareVersion: WideString dispid 52;
    property ReplyCertificationCode: WideString dispid 53;
    property ReplyTerminalEnvironment: WideString readonly dispid 54;
    property ReplyPOICapabilities: WideString dispid 55;
    property ReplyPOISerialNumber: WideString dispid 56;
    property ReplyGlobalStatus: GlobalStatusEnumeration dispid 57;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoLogout
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {37A4DF49-8D4A-43E6-BAAB-FDFD7C550AB9}
// *********************************************************************//
  INexoLogout = interface(IDispatch)
    ['{37A4DF49-8D4A-43E6-BAAB-FDFD7C550AB9}']
    function Get_RequestData: ILogoutRequestType; safecall;
    function Get_ReplyData: ILogoutResponseType; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: ILogoutRequestType read Get_RequestData;
    property ReplyData: ILogoutResponseType read Get_ReplyData;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoLogoutDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {37A4DF49-8D4A-43E6-BAAB-FDFD7C550AB9}
// *********************************************************************//
  INexoLogoutDisp = dispinterface
    ['{37A4DF49-8D4A-43E6-BAAB-FDFD7C550AB9}']
    property RequestData: ILogoutRequestType readonly dispid 1;
    property ReplyData: ILogoutResponseType readonly dispid 2;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoFinancial
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D649B63E-68DC-41F0-8531-09C6A98DAC6E}
// *********************************************************************//
  INexoFinancial = interface(IDispatch)
    ['{D649B63E-68DC-41F0-8531-09C6A98DAC6E}']
    function Get_RequestData: IPaymentRequestType; safecall;
    function Get_ReplyData: IPaymentResponseType; safecall;
    function Get_RequestSaleTransactionID: WideString; safecall;
    procedure Set_RequestSaleTransactionID(const pRetVal: WideString); safecall;
    function Get_RequestSaleTransactionTimestamp: WideString; safecall;
    procedure Set_RequestSaleTransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_RequestOriginalPOITransactionID: WideString; safecall;
    procedure Set_RequestOriginalPOITransactionID(const pRetVal: WideString); safecall;
    function Get_RequestOriginalPOITransactionTimestamp: WideString; safecall;
    procedure Set_RequestOriginalPOITransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_RequestRequestedAmount: TDecimal; safecall;
    procedure Set_RequestRequestedAmount(pRetVal: TDecimal); safecall;
    function Get_RequestCurrency: WideString; safecall;
    procedure Set_RequestCurrency(const pRetVal: WideString); safecall;
    function Get_ReplyPOITransactionID: WideString; safecall;
    procedure Set_ReplyPOITransactionID(const pRetVal: WideString); safecall;
    function Get_ReplyPOITransactionTimestamp: WideString; safecall;
    procedure Set_ReplyPOITransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_ReplyAuthorizedAmount: TDecimal; safecall;
    procedure Set_ReplyAuthorizedAmount(pRetVal: TDecimal); safecall;
    function Get_ReplyPaymentInstrumentType: PaymentInstrumentTypeEnumeration; safecall;
    procedure Set_ReplyPaymentInstrumentType(pRetVal: PaymentInstrumentTypeEnumeration); safecall;
    function Get_ReplyPaymentBrand: WideString; safecall;
    procedure Set_ReplyPaymentBrand(const pRetVal: WideString); safecall;
    function Get_ReplyCardCountryCode: WideString; safecall;
    procedure Set_ReplyCardCountryCode(const pRetVal: WideString); safecall;
    function Get_ReplySensitiveCardData: ISensitiveCardDataType; safecall;
    procedure _Set_ReplySensitiveCardData(const pRetVal: ISensitiveCardDataType); safecall;
    function Get_ReplyProtectedCardData: IContentInformationType; safecall;
    procedure _Set_ReplyProtectedCardData(const pRetVal: IContentInformationType); safecall;
    function Get_Accepted: WordBool; safecall;
    function Get_PaymentType: PaymentTypeEnumeration; safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IPaymentRequestType read Get_RequestData;
    property ReplyData: IPaymentResponseType read Get_ReplyData;
    property RequestSaleTransactionID: WideString read Get_RequestSaleTransactionID write Set_RequestSaleTransactionID;
    property RequestSaleTransactionTimestamp: WideString read Get_RequestSaleTransactionTimestamp write Set_RequestSaleTransactionTimestamp;
    property RequestOriginalPOITransactionID: WideString read Get_RequestOriginalPOITransactionID write Set_RequestOriginalPOITransactionID;
    property RequestOriginalPOITransactionTimestamp: WideString read Get_RequestOriginalPOITransactionTimestamp write Set_RequestOriginalPOITransactionTimestamp;
    property RequestRequestedAmount: TDecimal read Get_RequestRequestedAmount write Set_RequestRequestedAmount;
    property RequestCurrency: WideString read Get_RequestCurrency write Set_RequestCurrency;
    property ReplyPOITransactionID: WideString read Get_ReplyPOITransactionID write Set_ReplyPOITransactionID;
    property ReplyPOITransactionTimestamp: WideString read Get_ReplyPOITransactionTimestamp write Set_ReplyPOITransactionTimestamp;
    property ReplyAuthorizedAmount: TDecimal read Get_ReplyAuthorizedAmount write Set_ReplyAuthorizedAmount;
    property ReplyPaymentInstrumentType: PaymentInstrumentTypeEnumeration read Get_ReplyPaymentInstrumentType write Set_ReplyPaymentInstrumentType;
    property ReplyPaymentBrand: WideString read Get_ReplyPaymentBrand write Set_ReplyPaymentBrand;
    property ReplyCardCountryCode: WideString read Get_ReplyCardCountryCode write Set_ReplyCardCountryCode;
    property ReplySensitiveCardData: ISensitiveCardDataType read Get_ReplySensitiveCardData write _Set_ReplySensitiveCardData;
    property ReplyProtectedCardData: IContentInformationType read Get_ReplyProtectedCardData write _Set_ReplyProtectedCardData;
    property Accepted: WordBool read Get_Accepted;
    property PaymentType: PaymentTypeEnumeration read Get_PaymentType;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoFinancialDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D649B63E-68DC-41F0-8531-09C6A98DAC6E}
// *********************************************************************//
  INexoFinancialDisp = dispinterface
    ['{D649B63E-68DC-41F0-8531-09C6A98DAC6E}']
    property RequestData: IPaymentRequestType readonly dispid 1;
    property ReplyData: IPaymentResponseType readonly dispid 2;
    property RequestSaleTransactionID: WideString dispid 5;
    property RequestSaleTransactionTimestamp: WideString dispid 6;
    property RequestOriginalPOITransactionID: WideString dispid 7;
    property RequestOriginalPOITransactionTimestamp: WideString dispid 8;
    property RequestRequestedAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 9;
    property RequestCurrency: WideString dispid 10;
    property ReplyPOITransactionID: WideString dispid 50;
    property ReplyPOITransactionTimestamp: WideString dispid 51;
    property ReplyAuthorizedAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 52;
    property ReplyPaymentInstrumentType: PaymentInstrumentTypeEnumeration dispid 53;
    property ReplyPaymentBrand: WideString dispid 54;
    property ReplyCardCountryCode: WideString dispid 55;
    property ReplySensitiveCardData: ISensitiveCardDataType dispid 56;
    property ReplyProtectedCardData: IContentInformationType dispid 57;
    property Accepted: WordBool readonly dispid 500;
    property PaymentType: PaymentTypeEnumeration readonly dispid 501;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   INexoObjectToProcess
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4DA003CE-49BF-4831-83EB-3DAEA2072370}
// *********************************************************************//
  INexoObjectToProcess = interface(IDispatch)
    ['{4DA003CE-49BF-4831-83EB-3DAEA2072370}']
    function Get_CurrentObject: INexoObject; safecall;
    function Get_NextObject: INexoObject; safecall;
    procedure _Set_NextObject(const pRetVal: INexoObject); safecall;
    function Get_NextTimer: Integer; safecall;
    procedure Set_NextTimer(pRetVal: Integer); safecall;
    function Get_Item: INexoItem; safecall;
    function Get_type_: MessageTypeEnumeration; safecall;
    function Get_Category: MessageCategoryEnumeration; safecall;
    function Get_SuggestedAction: NexoNextAction; safecall;
    function Get_CanModifyAction: WordBool; safecall;
    function Get_Action: NexoNextAction; safecall;
    procedure Set_Action(pRetVal: NexoNextAction); safecall;
    property CurrentObject: INexoObject read Get_CurrentObject;
    property NextObject: INexoObject read Get_NextObject write _Set_NextObject;
    property NextTimer: Integer read Get_NextTimer write Set_NextTimer;
    property Item: INexoItem read Get_Item;
    property type_: MessageTypeEnumeration read Get_type_;
    property Category: MessageCategoryEnumeration read Get_Category;
    property SuggestedAction: NexoNextAction read Get_SuggestedAction;
    property CanModifyAction: WordBool read Get_CanModifyAction;
    property Action: NexoNextAction read Get_Action write Set_Action;
  end;

// *********************************************************************//
// DispIntf :    INexoObjectToProcessDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4DA003CE-49BF-4831-83EB-3DAEA2072370}
// *********************************************************************//
  INexoObjectToProcessDisp = dispinterface
    ['{4DA003CE-49BF-4831-83EB-3DAEA2072370}']
    property CurrentObject: INexoObject readonly dispid 1610743808;
    property NextObject: INexoObject dispid 1610743809;
    property NextTimer: Integer dispid 1610743811;
    property Item: INexoItem readonly dispid 1610743813;
    property type_: MessageTypeEnumeration readonly dispid 1610743814;
    property Category: MessageCategoryEnumeration readonly dispid 1610743815;
    property SuggestedAction: NexoNextAction readonly dispid 1610743816;
    property CanModifyAction: WordBool readonly dispid 1610743817;
    property Action: NexoNextAction dispid 1610743818;
  end;

// *********************************************************************//
// Interface :   INexoReversal
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {DBC11F2F-A231-47BB-9CD1-0B36872B6BB4}
// *********************************************************************//
  INexoReversal = interface(IDispatch)
    ['{DBC11F2F-A231-47BB-9CD1-0B36872B6BB4}']
    function Get_RequestData: IReversalRequestType; safecall;
    function Get_ReplyData: IReversalResponseType; safecall;
    function Get_RequestOriginalPOITransactionID: WideString; safecall;
    procedure Set_RequestOriginalPOITransactionID(const pRetVal: WideString); safecall;
    function Get_RequestOriginalPOITransactionTimestamp: WideString; safecall;
    procedure Set_RequestOriginalPOITransactionTimestamp(const pRetVal: WideString); safecall;
    function Get_RequestSaleReferenceID: WideString; safecall;
    procedure Set_RequestSaleReferenceID(const pRetVal: WideString); safecall;
    function Get_RequestReversedAmount: TDecimal; safecall;
    procedure Set_RequestReversedAmount(pRetVal: TDecimal); safecall;
    function Get_RequestReversalReason: WideString; safecall;
    procedure Set_RequestReversalReason(const pRetVal: WideString); safecall;
    function Get_ReplyPOITransactionID: WideString; safecall;
    procedure Set_ReplyPOITransactionID(const pRetVal: WideString); safecall;
    function Get_ReplyPOITimestamp: WideString; safecall;
    procedure Set_ReplyPOITimestamp(const pRetVal: WideString); safecall;
    function Get_ReplyReversedAmount: TDecimal; safecall;
    procedure Set_ReplyReversedAmount(pRetVal: TDecimal); safecall;
    function Get_Request: ISaleToPOIRequest; safecall;
    function Get_Reply: ISaleToPOIResponse; safecall;
    function Get_Response: IResponseType; safecall;
    function Get_MessageCategory: MessageCategoryEnumeration; safecall;
    function Get_MessageClass: MessageClassEnumeration; safecall;
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_AddMilliseconds: WordBool; safecall;
    procedure Set_AddMilliseconds(pRetVal: WordBool); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Success: WordBool; safecall;
    function Get_Failure: WordBool; safecall;
    function Get_Partial: WordBool; safecall;
    function Get_Unknown: WordBool; safecall;
    function Get_Aborted: WordBool; safecall;
    function Get_Busy: WordBool; safecall;
    function Get_Cancel: WordBool; safecall;
    function Get_DeviceOut: WordBool; safecall;
    function Get_InsertedCard: WordBool; safecall;
    function Get_InProgress: WordBool; safecall;
    function Get_LoggedOut: WordBool; safecall;
    function Get_MessageFormat: WordBool; safecall;
    function Get_NotAllowed: WordBool; safecall;
    function Get_NotFound: WordBool; safecall;
    function Get_PaymentRestriction: WordBool; safecall;
    function Get_Refusal: WordBool; safecall;
    function Get_UnavailableDevice: WordBool; safecall;
    function Get_UnavailableService: WordBool; safecall;
    function Get_InvalidCard: WordBool; safecall;
    function Get_UnreachableHost: WordBool; safecall;
    function Get_WrongPIN: WordBool; safecall;
    function Get_UnknownError: WordBool; safecall;
    function Get_AdditionalResponse: WideString; safecall;
    function Get_ToString: WideString; safecall;
    function AutoID: WideString; safecall;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; safecall;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; safecall;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; safecall;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; safecall;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; safecall;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property RequestData: IReversalRequestType read Get_RequestData;
    property ReplyData: IReversalResponseType read Get_ReplyData;
    property RequestOriginalPOITransactionID: WideString read Get_RequestOriginalPOITransactionID write Set_RequestOriginalPOITransactionID;
    property RequestOriginalPOITransactionTimestamp: WideString read Get_RequestOriginalPOITransactionTimestamp write Set_RequestOriginalPOITransactionTimestamp;
    property RequestSaleReferenceID: WideString read Get_RequestSaleReferenceID write Set_RequestSaleReferenceID;
    property RequestReversedAmount: TDecimal read Get_RequestReversedAmount write Set_RequestReversedAmount;
    property RequestReversalReason: WideString read Get_RequestReversalReason write Set_RequestReversalReason;
    property ReplyPOITransactionID: WideString read Get_ReplyPOITransactionID write Set_ReplyPOITransactionID;
    property ReplyPOITimestamp: WideString read Get_ReplyPOITimestamp write Set_ReplyPOITimestamp;
    property ReplyReversedAmount: TDecimal read Get_ReplyReversedAmount write Set_ReplyReversedAmount;
    property Request: ISaleToPOIRequest read Get_Request;
    property Reply: ISaleToPOIResponse read Get_Reply;
    property Response: IResponseType read Get_Response;
    property MessageCategory: MessageCategoryEnumeration read Get_MessageCategory;
    property MessageClass: MessageClassEnumeration read Get_MessageClass;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property AddMilliseconds: WordBool read Get_AddMilliseconds write Set_AddMilliseconds;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Success: WordBool read Get_Success;
    property Failure: WordBool read Get_Failure;
    property Partial: WordBool read Get_Partial;
    property Unknown: WordBool read Get_Unknown;
    property Aborted: WordBool read Get_Aborted;
    property Busy: WordBool read Get_Busy;
    property Cancel: WordBool read Get_Cancel;
    property DeviceOut: WordBool read Get_DeviceOut;
    property InsertedCard: WordBool read Get_InsertedCard;
    property InProgress: WordBool read Get_InProgress;
    property LoggedOut: WordBool read Get_LoggedOut;
    property MessageFormat: WordBool read Get_MessageFormat;
    property NotAllowed: WordBool read Get_NotAllowed;
    property NotFound: WordBool read Get_NotFound;
    property PaymentRestriction: WordBool read Get_PaymentRestriction;
    property Refusal: WordBool read Get_Refusal;
    property UnavailableDevice: WordBool read Get_UnavailableDevice;
    property UnavailableService: WordBool read Get_UnavailableService;
    property InvalidCard: WordBool read Get_InvalidCard;
    property UnreachableHost: WordBool read Get_UnreachableHost;
    property WrongPIN: WordBool read Get_WrongPIN;
    property UnknownError: WordBool read Get_UnknownError;
    property AdditionalResponse: WideString read Get_AdditionalResponse;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
  end;

// *********************************************************************//
// DispIntf :    INexoReversalDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {DBC11F2F-A231-47BB-9CD1-0B36872B6BB4}
// *********************************************************************//
  INexoReversalDisp = dispinterface
    ['{DBC11F2F-A231-47BB-9CD1-0B36872B6BB4}']
    property RequestData: IReversalRequestType readonly dispid 1;
    property ReplyData: IReversalResponseType readonly dispid 2;
    property RequestOriginalPOITransactionID: WideString dispid 3;
    property RequestOriginalPOITransactionTimestamp: WideString dispid 4;
    property RequestSaleReferenceID: WideString dispid 5;
    property RequestReversedAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 6;
    property RequestReversalReason: WideString dispid 7;
    property ReplyPOITransactionID: WideString dispid 8;
    property ReplyPOITimestamp: WideString dispid 9;
    property ReplyReversedAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 10;
    property Request: ISaleToPOIRequest readonly dispid 10000;
    property Reply: ISaleToPOIResponse readonly dispid 10001;
    property Response: IResponseType readonly dispid 10002;
    property MessageCategory: MessageCategoryEnumeration readonly dispid 10101;
    property MessageClass: MessageClassEnumeration readonly dispid 10103;
    property ProtocolVersion: WideString dispid 10104;
    property ServiceID: WideString dispid 10005;
    property DeviceID: WideString dispid 10006;
    property SaleID: WideString dispid 10007;
    property POIID: WideString dispid 10008;
    property AddMilliseconds: WordBool dispid 15009;
    property Utc: WordBool dispid 15010;
    property Success: WordBool readonly dispid 10050;
    property Failure: WordBool readonly dispid 10051;
    property Partial: WordBool readonly dispid 10052;
    property Unknown: WordBool readonly dispid 10053;
    property Aborted: WordBool readonly dispid 10060;
    property Busy: WordBool readonly dispid 10061;
    property Cancel: WordBool readonly dispid 10062;
    property DeviceOut: WordBool readonly dispid 10063;
    property InsertedCard: WordBool readonly dispid 10064;
    property InProgress: WordBool readonly dispid 10065;
    property LoggedOut: WordBool readonly dispid 10066;
    property MessageFormat: WordBool readonly dispid 10067;
    property NotAllowed: WordBool readonly dispid 10068;
    property NotFound: WordBool readonly dispid 10069;
    property PaymentRestriction: WordBool readonly dispid 10070;
    property Refusal: WordBool readonly dispid 10071;
    property UnavailableDevice: WordBool readonly dispid 10072;
    property UnavailableService: WordBool readonly dispid 10073;
    property InvalidCard: WordBool readonly dispid 10074;
    property UnreachableHost: WordBool readonly dispid 10075;
    property WrongPIN: WordBool readonly dispid 10076;
    property UnknownError: WordBool readonly dispid 10077;
    property AdditionalResponse: WideString readonly dispid 10100;
    property ToString: WideString readonly dispid 11000;
    function AutoID: WideString; dispid 11001;
    function SetDefaultCluster(const data: WideString; const cluster: INexoCluster): WideString; dispid 11002;
    function SetDefaultStringValue(const data: WideString; const defaultValue: WideString; 
                                   const typeDefaultValue: WideString): WideString; dispid 11003;
    function CopyRequestStringValue(const data: WideString; const requestValue: WideString): WideString; dispid 11004;
    function SetDefaultDateTime(dt: TDateTime; Utc: WordBool): TDateTime; dispid 11005;
    function SetDefaultDateTime_2(const dt: INexoISODateTime; const defaultValue: WideString): INexoISODateTime; dispid 11006;
    function SetDefaultCurrency(const currency: INexoCurrency; const defaultValue: WideString): INexoCurrency; dispid 11007;
    property SendWithErrors: WordBool dispid 15000;
    property SendWithWarnings: WordBool dispid 15001;
    property NbErrors: Integer readonly dispid 15002;
    property ContainsErrors: WordBool readonly dispid 15003;
    property NbWarnings: Integer readonly dispid 15004;
    property ContainsWarnings: WordBool readonly dispid 15005;
    property ContainsEvents: WordBool readonly dispid 15006;
    property BOM: WordBool dispid 15008;
    function ErrorsList: WideString; dispid 15502;
    function WarningsList: WideString; dispid 15503;
    function EventsList: WideString; dispid 15504;
  end;

// *********************************************************************//
// Interface :   _NexoMessageHeader
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {172593CA-5D51-363E-9B9A-E1CBC849051E}
// *********************************************************************//
  _NexoMessageHeader = interface(IDispatch)
    ['{172593CA-5D51-363E-9B9A-E1CBC849051E}']
  end;

// *********************************************************************//
// DispIntf :    _NexoMessageHeaderDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {172593CA-5D51-363E-9B9A-E1CBC849051E}
// *********************************************************************//
  _NexoMessageHeaderDisp = dispinterface
    ['{172593CA-5D51-363E-9B9A-E1CBC849051E}']
  end;

// *********************************************************************//
// Interface :   INexoTextString
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {81DBF2A7-F56C-4316-A7DA-84A69DD10193}
// *********************************************************************//
  INexoTextString = interface(IDispatch)
    ['{81DBF2A7-F56C-4316-A7DA-84A69DD10193}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_defaultValue: WideString; safecall;
    function Get_RegularExpression: WideString; safecall;
    procedure Set_RegularExpression(const pRetVal: WideString); safecall;
    function Get_TrimInput: WordBool; safecall;
    procedure Set_TrimInput(pRetVal: WordBool); safecall;
    function Get_CaseInsensitive: WordBool; safecall;
    procedure Set_CaseInsensitive(pRetVal: WordBool); safecall;
    function Get_PreserveCase: WordBool; safecall;
    procedure Set_PreserveCase(pRetVal: WordBool); safecall;
    function Get_SetToUpperCase: WordBool; safecall;
    procedure Set_SetToUpperCase(pRetVal: WordBool); safecall;
    function Get_IsEmpty: WordBool; safecall;
    function Get_IsUnset: WordBool; safecall;
    function Get_ToString: WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
    property defaultValue: WideString read Get_defaultValue;
    property RegularExpression: WideString read Get_RegularExpression write Set_RegularExpression;
    property TrimInput: WordBool read Get_TrimInput write Set_TrimInput;
    property CaseInsensitive: WordBool read Get_CaseInsensitive write Set_CaseInsensitive;
    property PreserveCase: WordBool read Get_PreserveCase write Set_PreserveCase;
    property SetToUpperCase: WordBool read Get_SetToUpperCase write Set_SetToUpperCase;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsUnset: WordBool read Get_IsUnset;
    property ToString: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoTextStringDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {81DBF2A7-F56C-4316-A7DA-84A69DD10193}
// *********************************************************************//
  INexoTextStringDisp = dispinterface
    ['{81DBF2A7-F56C-4316-A7DA-84A69DD10193}']
    property Name: WideString dispid 1;
    property Value: WideString dispid 2;
    property defaultValue: WideString readonly dispid 3;
    property RegularExpression: WideString dispid 4;
    property TrimInput: WordBool dispid 5;
    property CaseInsensitive: WordBool dispid 6;
    property PreserveCase: WordBool dispid 7;
    property SetToUpperCase: WordBool dispid 8;
    property IsEmpty: WordBool readonly dispid 9;
    property IsUnset: WordBool readonly dispid 10;
    property ToString: WideString readonly dispid 100;
  end;

// *********************************************************************//
// Interface :   INexoBooleanType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {54927BBD-044C-4FF6-90B9-9EF4C97DF13E}
// *********************************************************************//
  INexoBooleanType = interface(IDispatch)
    ['{54927BBD-044C-4FF6-90B9-9EF4C97DF13E}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_IsEmpty: WordBool; safecall;
    function Get_IsUnset: WordBool; safecall;
    function Get_ToString: WideString; safecall;
    function Get_Boolean: WordBool; safecall;
    procedure Set_Boolean(pRetVal: WordBool); safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsUnset: WordBool read Get_IsUnset;
    property ToString: WideString read Get_ToString;
    property Boolean: WordBool read Get_Boolean write Set_Boolean;
  end;

// *********************************************************************//
// DispIntf :    INexoBooleanTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {54927BBD-044C-4FF6-90B9-9EF4C97DF13E}
// *********************************************************************//
  INexoBooleanTypeDisp = dispinterface
    ['{54927BBD-044C-4FF6-90B9-9EF4C97DF13E}']
    property Name: WideString dispid 1;
    property Value: WideString dispid 2;
    property IsEmpty: WordBool readonly dispid 9;
    property IsUnset: WordBool readonly dispid 10;
    property ToString: WideString readonly dispid 100;
    property Boolean: WordBool dispid 50;
  end;

// *********************************************************************//
// Interface :   INexoInteger
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D54E0EEC-3021-430A-958A-0CE8CBAF28CF}
// *********************************************************************//
  INexoInteger = interface(IDispatch)
    ['{D54E0EEC-3021-430A-958A-0CE8CBAF28CF}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_IsEmpty: WordBool; safecall;
    function Get_IsUnset: WordBool; safecall;
    function Get_ToString: WideString; safecall;
    function Get_AsInteger: Integer; safecall;
    procedure Set_AsInteger(pRetVal: Integer); safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsUnset: WordBool read Get_IsUnset;
    property ToString: WideString read Get_ToString;
    property AsInteger: Integer read Get_AsInteger write Set_AsInteger;
  end;

// *********************************************************************//
// DispIntf :    INexoIntegerDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D54E0EEC-3021-430A-958A-0CE8CBAF28CF}
// *********************************************************************//
  INexoIntegerDisp = dispinterface
    ['{D54E0EEC-3021-430A-958A-0CE8CBAF28CF}']
    property Name: WideString dispid 1;
    property Value: WideString dispid 2;
    property IsEmpty: WordBool readonly dispid 9;
    property IsUnset: WordBool readonly dispid 10;
    property ToString: WideString readonly dispid 100;
    property AsInteger: Integer dispid 50;
  end;

// *********************************************************************//
// Interface :   INexoDecimal
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D6A6402E-7675-4B58-A192-1E5831A63308}
// *********************************************************************//
  INexoDecimal = interface(IDispatch)
    ['{D6A6402E-7675-4B58-A192-1E5831A63308}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_IsEmpty: WordBool; safecall;
    function Get_IsUnset: WordBool; safecall;
    function Get_ToString: WideString; safecall;
    function Get_AsInteger: Integer; safecall;
    procedure Set_AsInteger(pRetVal: Integer); safecall;
    function Get_AsDecimal: TDecimal; safecall;
    procedure Set_AsDecimal(pRetVal: TDecimal); safecall;
    function Get_DecimalPlaces: LongWord; safecall;
    procedure Set_DecimalPlaces(pRetVal: LongWord); safecall;
    function Get_Mantis: LongWord; safecall;
    procedure Set_Mantis(pRetVal: LongWord); safecall;
    function Get_DecimalSeparator: WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsUnset: WordBool read Get_IsUnset;
    property ToString: WideString read Get_ToString;
    property AsInteger: Integer read Get_AsInteger write Set_AsInteger;
    property AsDecimal: TDecimal read Get_AsDecimal write Set_AsDecimal;
    property DecimalPlaces: LongWord read Get_DecimalPlaces write Set_DecimalPlaces;
    property Mantis: LongWord read Get_Mantis write Set_Mantis;
    property DecimalSeparator: WideString read Get_DecimalSeparator;
  end;

// *********************************************************************//
// DispIntf :    INexoDecimalDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D6A6402E-7675-4B58-A192-1E5831A63308}
// *********************************************************************//
  INexoDecimalDisp = dispinterface
    ['{D6A6402E-7675-4B58-A192-1E5831A63308}']
    property Name: WideString dispid 1;
    property Value: WideString dispid 2;
    property IsEmpty: WordBool readonly dispid 9;
    property IsUnset: WordBool readonly dispid 10;
    property ToString: WideString readonly dispid 100;
    property AsInteger: Integer dispid 50;
    property AsDecimal: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 51;
    property DecimalPlaces: LongWord dispid 52;
    property Mantis: LongWord dispid 53;
    property DecimalSeparator: WideString readonly dispid 54;
  end;

// *********************************************************************//
// Interface :   INexoLabel
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B1212D60-971B-4FB3-BE41-EC87DD743EFB}
// *********************************************************************//
  INexoLabel = interface(IDispatch)
    ['{B1212D60-971B-4FB3-BE41-EC87DD743EFB}']
    function Get_Label_: WideString; safecall;
    procedure Set_Label_(const pRetVal: WideString); safecall;
    function Get_ToString: WideString; safecall;
    property Label_: WideString read Get_Label_ write Set_Label_;
    property ToString: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoLabelDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B1212D60-971B-4FB3-BE41-EC87DD743EFB}
// *********************************************************************//
  INexoLabelDisp = dispinterface
    ['{B1212D60-971B-4FB3-BE41-EC87DD743EFB}']
    property Label_: WideString dispid 1;
    property ToString: WideString readonly dispid 100;
  end;

// *********************************************************************//
// Interface :   INexoEnumeration
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {44DD3DF5-C824-4E2D-8727-9F1856EB8019}
// *********************************************************************//
  INexoEnumeration = interface(IDispatch)
    ['{44DD3DF5-C824-4E2D-8727-9F1856EB8019}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_LabelsCount: Integer; safecall;
    function IsLabel(const Value: WideString): WordBool; safecall;
    function GetLabel(const Value: WideString): WideString; safecall;
    function AddLabel(const Value: WideString): WordBool; safecall;
    function RemoveLabel(const Value: WideString): WordBool; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
    property LabelsCount: Integer read Get_LabelsCount;
  end;

// *********************************************************************//
// DispIntf :    INexoEnumerationDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {44DD3DF5-C824-4E2D-8727-9F1856EB8019}
// *********************************************************************//
  INexoEnumerationDisp = dispinterface
    ['{44DD3DF5-C824-4E2D-8727-9F1856EB8019}']
    property Name: WideString dispid 1;
    property Value: WideString dispid 2;
    property LabelsCount: Integer readonly dispid 50;
    function IsLabel(const Value: WideString): WordBool; dispid 51;
    function GetLabel(const Value: WideString): WideString; dispid 52;
    function AddLabel(const Value: WideString): WordBool; dispid 53;
    function RemoveLabel(const Value: WideString): WordBool; dispid 54;
  end;

// *********************************************************************//
// Interface :   INexoCluster
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CF6E62CA-537D-4545-A336-673D288B6D58}
// *********************************************************************//
  INexoCluster = interface(IDispatch)
    ['{CF6E62CA-537D-4545-A336-673D288B6D58}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_LabelsCount: Integer; safecall;
    function Get_ValuesCount: Integer; safecall;
    function IsLabel(const Value: WideString): WordBool; safecall;
    function AddLabel(const Value: WideString): WordBool; safecall;
    function RemoveLabel(const Value: WideString): WordBool; safecall;
    function IsLabelSet(const Value: WideString): WordBool; safecall;
    function SetLabel(const Label_: WideString): WideString; safecall;
    function UnsetLabel(const Label_: WideString): WideString; safecall;
    function SetAllLabels: WideString; safecall;
    function UnsetAllLabels: WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
    property LabelsCount: Integer read Get_LabelsCount;
    property ValuesCount: Integer read Get_ValuesCount;
  end;

// *********************************************************************//
// DispIntf :    INexoClusterDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CF6E62CA-537D-4545-A336-673D288B6D58}
// *********************************************************************//
  INexoClusterDisp = dispinterface
    ['{CF6E62CA-537D-4545-A336-673D288B6D58}']
    property Name: WideString dispid 1;
    property Value: WideString dispid 2;
    property LabelsCount: Integer readonly dispid 50;
    property ValuesCount: Integer readonly dispid 51;
    function IsLabel(const Value: WideString): WordBool; dispid 52;
    function AddLabel(const Value: WideString): WordBool; dispid 53;
    function RemoveLabel(const Value: WideString): WordBool; dispid 54;
    function IsLabelSet(const Value: WideString): WordBool; dispid 55;
    function SetLabel(const Label_: WideString): WideString; dispid 56;
    function UnsetLabel(const Label_: WideString): WideString; dispid 57;
    function SetAllLabels: WideString; dispid 58;
    function UnsetAllLabels: WideString; dispid 59;
  end;

// *********************************************************************//
// Interface :   INexoLengthDrivenTextString
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {380807B4-5276-443B-A8E8-0D88A51199E8}
// *********************************************************************//
  INexoLengthDrivenTextString = interface(IDispatch)
    ['{380807B4-5276-443B-A8E8-0D88A51199E8}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_defaultValue: WideString; safecall;
    function Get_RegularExpression: WideString; safecall;
    procedure Set_RegularExpression(const pRetVal: WideString); safecall;
    function Get_TrimInput: WordBool; safecall;
    procedure Set_TrimInput(pRetVal: WordBool); safecall;
    function Get_CaseInsensitive: WordBool; safecall;
    procedure Set_CaseInsensitive(pRetVal: WordBool); safecall;
    function Get_PreserveCase: WordBool; safecall;
    procedure Set_PreserveCase(pRetVal: WordBool); safecall;
    function Get_SetToUpperCase: WordBool; safecall;
    procedure Set_SetToUpperCase(pRetVal: WordBool); safecall;
    function Get_IsEmpty: WordBool; safecall;
    function Get_IsUnset: WordBool; safecall;
    function Get_ToString: WideString; safecall;
    function Get_Min: Integer; safecall;
    procedure Set_Min(pRetVal: Integer); safecall;
    function Get_Max: Integer; safecall;
    procedure Set_Max(pRetVal: Integer); safecall;
    function Get_CharacterSet: WideString; safecall;
    procedure Set_CharacterSet(const pRetVal: WideString); safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
    property defaultValue: WideString read Get_defaultValue;
    property RegularExpression: WideString read Get_RegularExpression write Set_RegularExpression;
    property TrimInput: WordBool read Get_TrimInput write Set_TrimInput;
    property CaseInsensitive: WordBool read Get_CaseInsensitive write Set_CaseInsensitive;
    property PreserveCase: WordBool read Get_PreserveCase write Set_PreserveCase;
    property SetToUpperCase: WordBool read Get_SetToUpperCase write Set_SetToUpperCase;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsUnset: WordBool read Get_IsUnset;
    property ToString: WideString read Get_ToString;
    property Min: Integer read Get_Min write Set_Min;
    property Max: Integer read Get_Max write Set_Max;
    property CharacterSet: WideString read Get_CharacterSet write Set_CharacterSet;
  end;

// *********************************************************************//
// DispIntf :    INexoLengthDrivenTextStringDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {380807B4-5276-443B-A8E8-0D88A51199E8}
// *********************************************************************//
  INexoLengthDrivenTextStringDisp = dispinterface
    ['{380807B4-5276-443B-A8E8-0D88A51199E8}']
    property Name: WideString dispid 1;
    property Value: WideString dispid 2;
    property defaultValue: WideString readonly dispid 3;
    property RegularExpression: WideString dispid 4;
    property TrimInput: WordBool dispid 5;
    property CaseInsensitive: WordBool dispid 6;
    property PreserveCase: WordBool dispid 7;
    property SetToUpperCase: WordBool dispid 8;
    property IsEmpty: WordBool readonly dispid 9;
    property IsUnset: WordBool readonly dispid 10;
    property ToString: WideString readonly dispid 100;
    property Min: Integer dispid 50;
    property Max: Integer dispid 51;
    property CharacterSet: WideString dispid 52;
  end;

// *********************************************************************//
// Interface :   INexoDigitString
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4DEDF6AC-8EF9-41EC-92CD-51A2E7E5FC6F}
// *********************************************************************//
  INexoDigitString = interface(IDispatch)
    ['{4DEDF6AC-8EF9-41EC-92CD-51A2E7E5FC6F}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_IsEmpty: WordBool; safecall;
    function Get_IsUnset: WordBool; safecall;
    function Get_ToString: WideString; safecall;
    function Get_Min: Integer; safecall;
    procedure Set_Min(pRetVal: Integer); safecall;
    function Get_Max: Integer; safecall;
    procedure Set_Max(pRetVal: Integer); safecall;
    function Get_CharacterSet: WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsUnset: WordBool read Get_IsUnset;
    property ToString: WideString read Get_ToString;
    property Min: Integer read Get_Min write Set_Min;
    property Max: Integer read Get_Max write Set_Max;
    property CharacterSet: WideString read Get_CharacterSet;
  end;

// *********************************************************************//
// DispIntf :    INexoDigitStringDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4DEDF6AC-8EF9-41EC-92CD-51A2E7E5FC6F}
// *********************************************************************//
  INexoDigitStringDisp = dispinterface
    ['{4DEDF6AC-8EF9-41EC-92CD-51A2E7E5FC6F}']
    property Name: WideString dispid 1;
    property Value: WideString dispid 2;
    property IsEmpty: WordBool readonly dispid 9;
    property IsUnset: WordBool readonly dispid 10;
    property ToString: WideString readonly dispid 100;
    property Min: Integer dispid 50;
    property Max: Integer dispid 51;
    property CharacterSet: WideString readonly dispid 52;
  end;

// *********************************************************************//
// Interface :   INexoISOData
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {342FE081-D5F0-475B-AEC6-6374979BBDC7}
// *********************************************************************//
  INexoISOData = interface(IDispatch)
    ['{342FE081-D5F0-475B-AEC6-6374979BBDC7}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
  end;

// *********************************************************************//
// DispIntf :    INexoISODataDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {342FE081-D5F0-475B-AEC6-6374979BBDC7}
// *********************************************************************//
  INexoISODataDisp = dispinterface
    ['{342FE081-D5F0-475B-AEC6-6374979BBDC7}']
    property Name: WideString dispid 1;
    property Value: WideString dispid 2;
  end;

// *********************************************************************//
// Interface :   INexoISODateTime
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6EA56916-0B9F-48D1-B726-1F26C1897724}
// *********************************************************************//
  INexoISODateTime = interface(IDispatch)
    ['{6EA56916-0B9F-48D1-B726-1F26C1897724}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_Utc: WordBool; safecall;
    procedure Set_Utc(pRetVal: WordBool); safecall;
    function Get_Milliseconds: WordBool; safecall;
    procedure Set_Milliseconds(pRetVal: WordBool); safecall;
    procedure Reset; safecall;
    function ToDateTime: TDateTime; safecall;
    function FromDateTime(dt: TDateTime): WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
    property Utc: WordBool read Get_Utc write Set_Utc;
    property Milliseconds: WordBool read Get_Milliseconds write Set_Milliseconds;
  end;

// *********************************************************************//
// DispIntf :    INexoISODateTimeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6EA56916-0B9F-48D1-B726-1F26C1897724}
// *********************************************************************//
  INexoISODateTimeDisp = dispinterface
    ['{6EA56916-0B9F-48D1-B726-1F26C1897724}']
    property Name: WideString dispid 1;
    property Value: WideString dispid 2;
    property Utc: WordBool dispid 3;
    property Milliseconds: WordBool dispid 4;
    procedure Reset; dispid 100;
    function ToDateTime: TDateTime; dispid 101;
    function FromDateTime(dt: TDateTime): WideString; dispid 102;
  end;

// *********************************************************************//
// Interface :   INexoISODate
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {880DF188-0670-419D-8E0D-2170D0D537C9}
// *********************************************************************//
  INexoISODate = interface(IDispatch)
    ['{880DF188-0670-419D-8E0D-2170D0D537C9}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    procedure Reset; safecall;
    function ToDateTime: TDateTime; safecall;
    function FromDateTime(dt: TDateTime): WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
  end;

// *********************************************************************//
// DispIntf :    INexoISODateDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {880DF188-0670-419D-8E0D-2170D0D537C9}
// *********************************************************************//
  INexoISODateDisp = dispinterface
    ['{880DF188-0670-419D-8E0D-2170D0D537C9}']
    property Name: WideString dispid 1;
    property Value: WideString dispid 2;
    procedure Reset; dispid 100;
    function ToDateTime: TDateTime; dispid 101;
    function FromDateTime(dt: TDateTime): WideString; dispid 102;
  end;

// *********************************************************************//
// Interface :   INexoNonStringType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C7CAA85A-2A0D-49A7-925A-48A122D76C30}
// *********************************************************************//
  INexoNonStringType = interface(IDispatch)
    ['{C7CAA85A-2A0D-49A7-925A-48A122D76C30}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Value: PSafeArray; safecall;
    procedure Set_Value(pRetVal: PSafeArray); safecall;
    function Get_Size: Integer; safecall;
    procedure Set_Size(pRetVal: Integer); safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: PSafeArray read Get_Value write Set_Value;
    property Size: Integer read Get_Size write Set_Size;
  end;

// *********************************************************************//
// DispIntf :    INexoNonStringTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C7CAA85A-2A0D-49A7-925A-48A122D76C30}
// *********************************************************************//
  INexoNonStringTypeDisp = dispinterface
    ['{C7CAA85A-2A0D-49A7-925A-48A122D76C30}']
    property Name: WideString dispid 1;
    property Value: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property Size: Integer dispid 3;
  end;

// *********************************************************************//
// Interface :   INexoCurrency
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5F12D07E-EA73-4E87-98C6-DDD3A38888C8}
// *********************************************************************//
  INexoCurrency = interface(IDispatch)
    ['{5F12D07E-EA73-4E87-98C6-DDD3A38888C8}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_DecimalPlaces: LongWord; safecall;
    procedure Set_DecimalPlaces(pRetVal: LongWord); safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
    property DecimalPlaces: LongWord read Get_DecimalPlaces write Set_DecimalPlaces;
  end;

// *********************************************************************//
// DispIntf :    INexoCurrencyDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5F12D07E-EA73-4E87-98C6-DDD3A38888C8}
// *********************************************************************//
  INexoCurrencyDisp = dispinterface
    ['{5F12D07E-EA73-4E87-98C6-DDD3A38888C8}']
    property Name: WideString dispid 1;
    property Value: WideString dispid 2;
    property DecimalPlaces: LongWord dispid 3;
  end;

// *********************************************************************//
// Interface :   _NexoDefaultCurrency
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {273F1D91-1066-310D-BED8-2C4988475461}
// *********************************************************************//
  _NexoDefaultCurrency = interface(IDispatch)
    ['{273F1D91-1066-310D-BED8-2C4988475461}']
  end;

// *********************************************************************//
// DispIntf :    _NexoDefaultCurrencyDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {273F1D91-1066-310D-BED8-2C4988475461}
// *********************************************************************//
  _NexoDefaultCurrencyDisp = dispinterface
    ['{273F1D91-1066-310D-BED8-2C4988475461}']
  end;

// *********************************************************************//
// Interface :   INexoAmount
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5A214D20-F45B-4EB0-ACD4-1046EA315EF4}
// *********************************************************************//
  INexoAmount = interface(IDispatch)
    ['{5A214D20-F45B-4EB0-ACD4-1046EA315EF4}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_DecimalPlaces: LongWord; safecall;
    procedure Set_DecimalPlaces(pRetVal: LongWord); safecall;
    function Get_Amount: Int64; safecall;
    procedure Set_Amount(pRetVal: Int64); safecall;
    function Get_AmountDecimal: TDecimal; safecall;
    function Get_DisplayCurrencyAfterAmount: WordBool; safecall;
    procedure Set_DisplayCurrencyAfterAmount(pRetVal: WordBool); safecall;
    function Get_ToString: WideString; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Value: WideString read Get_Value write Set_Value;
    property DecimalPlaces: LongWord read Get_DecimalPlaces write Set_DecimalPlaces;
    property Amount: Int64 read Get_Amount write Set_Amount;
    property AmountDecimal: TDecimal read Get_AmountDecimal;
    property DisplayCurrencyAfterAmount: WordBool read Get_DisplayCurrencyAfterAmount write Set_DisplayCurrencyAfterAmount;
    property ToString: WideString read Get_ToString;
  end;

// *********************************************************************//
// DispIntf :    INexoAmountDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5A214D20-F45B-4EB0-ACD4-1046EA315EF4}
// *********************************************************************//
  INexoAmountDisp = dispinterface
    ['{5A214D20-F45B-4EB0-ACD4-1046EA315EF4}']
    property Name: WideString dispid 1;
    property Value: WideString dispid 2;
    property DecimalPlaces: LongWord dispid 3;
    property Amount: Int64 dispid 4;
    property AmountDecimal: {NOT_OLEAUTO(TDecimal)}OleVariant readonly dispid 5;
    property DisplayCurrencyAfterAmount: WordBool dispid 6;
    property ToString: WideString readonly dispid 100;
  end;

// *********************************************************************//
// Interface :   _NexoMessageType
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {9B63F343-CE34-348E-ADBB-ADF5FDC28172}
// *********************************************************************//
  _NexoMessageType = interface(IDispatch)
    ['{9B63F343-CE34-348E-ADBB-ADF5FDC28172}']
  end;

// *********************************************************************//
// DispIntf :    _NexoMessageTypeDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {9B63F343-CE34-348E-ADBB-ADF5FDC28172}
// *********************************************************************//
  _NexoMessageTypeDisp = dispinterface
    ['{9B63F343-CE34-348E-ADBB-ADF5FDC28172}']
  end;

// *********************************************************************//
// Interface :   _NexoMessageClass
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {5014AC46-3B6B-35D6-9EAB-308C612BE1BD}
// *********************************************************************//
  _NexoMessageClass = interface(IDispatch)
    ['{5014AC46-3B6B-35D6-9EAB-308C612BE1BD}']
  end;

// *********************************************************************//
// DispIntf :    _NexoMessageClassDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {5014AC46-3B6B-35D6-9EAB-308C612BE1BD}
// *********************************************************************//
  _NexoMessageClassDisp = dispinterface
    ['{5014AC46-3B6B-35D6-9EAB-308C612BE1BD}']
  end;

// *********************************************************************//
// Interface :   _NexoMessageCategory
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {56E803F5-FC60-381C-B78C-129D973A9A94}
// *********************************************************************//
  _NexoMessageCategory = interface(IDispatch)
    ['{56E803F5-FC60-381C-B78C-129D973A9A94}']
  end;

// *********************************************************************//
// DispIntf :    _NexoMessageCategoryDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {56E803F5-FC60-381C-B78C-129D973A9A94}
// *********************************************************************//
  _NexoMessageCategoryDisp = dispinterface
    ['{56E803F5-FC60-381C-B78C-129D973A9A94}']
  end;

// *********************************************************************//
// Interface :   _NexoTerminalEnvironment
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {22389591-8FAC-3D5C-8696-7F02CE9D1A28}
// *********************************************************************//
  _NexoTerminalEnvironment = interface(IDispatch)
    ['{22389591-8FAC-3D5C-8696-7F02CE9D1A28}']
  end;

// *********************************************************************//
// DispIntf :    _NexoTerminalEnvironmentDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {22389591-8FAC-3D5C-8696-7F02CE9D1A28}
// *********************************************************************//
  _NexoTerminalEnvironmentDisp = dispinterface
    ['{22389591-8FAC-3D5C-8696-7F02CE9D1A28}']
  end;

// *********************************************************************//
// Interface :   _NexoSaleCapabilities
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {27EE1457-9C5B-364B-A5B0-6F8DEA5DFD90}
// *********************************************************************//
  _NexoSaleCapabilities = interface(IDispatch)
    ['{27EE1457-9C5B-364B-A5B0-6F8DEA5DFD90}']
  end;

// *********************************************************************//
// DispIntf :    _NexoSaleCapabilitiesDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {27EE1457-9C5B-364B-A5B0-6F8DEA5DFD90}
// *********************************************************************//
  _NexoSaleCapabilitiesDisp = dispinterface
    ['{27EE1457-9C5B-364B-A5B0-6F8DEA5DFD90}']
  end;

// *********************************************************************//
// Interface :   _NexoProtocolVersion
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {80FE31BB-AA27-3228-9E9F-ACCBC7BEC91E}
// *********************************************************************//
  _NexoProtocolVersion = interface(IDispatch)
    ['{80FE31BB-AA27-3228-9E9F-ACCBC7BEC91E}']
  end;

// *********************************************************************//
// DispIntf :    _NexoProtocolVersionDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {80FE31BB-AA27-3228-9E9F-ACCBC7BEC91E}
// *********************************************************************//
  _NexoProtocolVersionDisp = dispinterface
    ['{80FE31BB-AA27-3228-9E9F-ACCBC7BEC91E}']
  end;

// *********************************************************************//
// Interface :   _NexoID
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {18471494-0F7D-3761-AA8A-4234DEEE46E0}
// *********************************************************************//
  _NexoID = interface(IDispatch)
    ['{18471494-0F7D-3761-AA8A-4234DEEE46E0}']
  end;

// *********************************************************************//
// DispIntf :    _NexoIDDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {18471494-0F7D-3761-AA8A-4234DEEE46E0}
// *********************************************************************//
  _NexoIDDisp = dispinterface
    ['{18471494-0F7D-3761-AA8A-4234DEEE46E0}']
  end;

// *********************************************************************//
// Interface :   _NexoServiceID
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {59B3973C-67DE-3226-950C-3F1AF7CA8CD9}
// *********************************************************************//
  _NexoServiceID = interface(IDispatch)
    ['{59B3973C-67DE-3226-950C-3F1AF7CA8CD9}']
  end;

// *********************************************************************//
// DispIntf :    _NexoServiceIDDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {59B3973C-67DE-3226-950C-3F1AF7CA8CD9}
// *********************************************************************//
  _NexoServiceIDDisp = dispinterface
    ['{59B3973C-67DE-3226-950C-3F1AF7CA8CD9}']
  end;

// *********************************************************************//
// Interface :   _NexoDeviceID
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {71E7118B-B956-330C-8CF3-985FF48C8383}
// *********************************************************************//
  _NexoDeviceID = interface(IDispatch)
    ['{71E7118B-B956-330C-8CF3-985FF48C8383}']
  end;

// *********************************************************************//
// DispIntf :    _NexoDeviceIDDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {71E7118B-B956-330C-8CF3-985FF48C8383}
// *********************************************************************//
  _NexoDeviceIDDisp = dispinterface
    ['{71E7118B-B956-330C-8CF3-985FF48C8383}']
  end;

// *********************************************************************//
// Interface :   _NexoPOIID
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {054197A2-96CE-3280-A396-9A9647E69093}
// *********************************************************************//
  _NexoPOIID = interface(IDispatch)
    ['{054197A2-96CE-3280-A396-9A9647E69093}']
  end;

// *********************************************************************//
// DispIntf :    _NexoPOIIDDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {054197A2-96CE-3280-A396-9A9647E69093}
// *********************************************************************//
  _NexoPOIIDDisp = dispinterface
    ['{054197A2-96CE-3280-A396-9A9647E69093}']
  end;

// *********************************************************************//
// Interface :   _NexoSaleID
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {42F36241-B65E-3279-8AB5-B0FDF51E2007}
// *********************************************************************//
  _NexoSaleID = interface(IDispatch)
    ['{42F36241-B65E-3279-8AB5-B0FDF51E2007}']
  end;

// *********************************************************************//
// DispIntf :    _NexoSaleIDDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {42F36241-B65E-3279-8AB5-B0FDF51E2007}
// *********************************************************************//
  _NexoSaleIDDisp = dispinterface
    ['{42F36241-B65E-3279-8AB5-B0FDF51E2007}']
  end;

// *********************************************************************//
// Interface :   _NexoOperatorLanguage
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {E71BBF4C-00C1-3A08-8FA7-D6AC9B58C165}
// *********************************************************************//
  _NexoOperatorLanguage = interface(IDispatch)
    ['{E71BBF4C-00C1-3A08-8FA7-D6AC9B58C165}']
  end;

// *********************************************************************//
// DispIntf :    _NexoOperatorLanguageDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {E71BBF4C-00C1-3A08-8FA7-D6AC9B58C165}
// *********************************************************************//
  _NexoOperatorLanguageDisp = dispinterface
    ['{E71BBF4C-00C1-3A08-8FA7-D6AC9B58C165}']
  end;

// *********************************************************************//
// Interface :   _NexoResult
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {4D8B2E36-3BE3-3AAE-820E-2AF11CA82E64}
// *********************************************************************//
  _NexoResult = interface(IDispatch)
    ['{4D8B2E36-3BE3-3AAE-820E-2AF11CA82E64}']
  end;

// *********************************************************************//
// DispIntf :    _NexoResultDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {4D8B2E36-3BE3-3AAE-820E-2AF11CA82E64}
// *********************************************************************//
  _NexoResultDisp = dispinterface
    ['{4D8B2E36-3BE3-3AAE-820E-2AF11CA82E64}']
  end;

// *********************************************************************//
// Interface :   _NexoErrorCondition
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {3A6C71B5-A08C-315D-B127-D96E2E2EAC09}
// *********************************************************************//
  _NexoErrorCondition = interface(IDispatch)
    ['{3A6C71B5-A08C-315D-B127-D96E2E2EAC09}']
  end;

// *********************************************************************//
// DispIntf :    _NexoErrorConditionDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {3A6C71B5-A08C-315D-B127-D96E2E2EAC09}
// *********************************************************************//
  _NexoErrorConditionDisp = dispinterface
    ['{3A6C71B5-A08C-315D-B127-D96E2E2EAC09}']
  end;

// *********************************************************************//
// Interface :   _NexoAdditionalResponse
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {B44411B6-3F45-333F-B166-1A295EED6A6C}
// *********************************************************************//
  _NexoAdditionalResponse = interface(IDispatch)
    ['{B44411B6-3F45-333F-B166-1A295EED6A6C}']
  end;

// *********************************************************************//
// DispIntf :    _NexoAdditionalResponseDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {B44411B6-3F45-333F-B166-1A295EED6A6C}
// *********************************************************************//
  _NexoAdditionalResponseDisp = dispinterface
    ['{B44411B6-3F45-333F-B166-1A295EED6A6C}']
  end;

// *********************************************************************//
// Interface :   _NexoGlobalStatus
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {3AC0D87E-F614-3958-AF82-0EDD3E6D9179}
// *********************************************************************//
  _NexoGlobalStatus = interface(IDispatch)
    ['{3AC0D87E-F614-3958-AF82-0EDD3E6D9179}']
  end;

// *********************************************************************//
// DispIntf :    _NexoGlobalStatusDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {3AC0D87E-F614-3958-AF82-0EDD3E6D9179}
// *********************************************************************//
  _NexoGlobalStatusDisp = dispinterface
    ['{3AC0D87E-F614-3958-AF82-0EDD3E6D9179}']
  end;

// *********************************************************************//
// Interface :   _NexoCertificationCode
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {02DB9CB2-8343-3689-AB49-DC0FB8415C72}
// *********************************************************************//
  _NexoCertificationCode = interface(IDispatch)
    ['{02DB9CB2-8343-3689-AB49-DC0FB8415C72}']
  end;

// *********************************************************************//
// DispIntf :    _NexoCertificationCodeDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {02DB9CB2-8343-3689-AB49-DC0FB8415C72}
// *********************************************************************//
  _NexoCertificationCodeDisp = dispinterface
    ['{02DB9CB2-8343-3689-AB49-DC0FB8415C72}']
  end;

// *********************************************************************//
// Interface :   _NexoSoftwareVersion
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {451A06B3-89A7-3712-9763-C753FC8885C3}
// *********************************************************************//
  _NexoSoftwareVersion = interface(IDispatch)
    ['{451A06B3-89A7-3712-9763-C753FC8885C3}']
  end;

// *********************************************************************//
// DispIntf :    _NexoSoftwareVersionDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {451A06B3-89A7-3712-9763-C753FC8885C3}
// *********************************************************************//
  _NexoSoftwareVersionDisp = dispinterface
    ['{451A06B3-89A7-3712-9763-C753FC8885C3}']
  end;

// *********************************************************************//
// Interface :   _NexoApplicationName
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {9C672E07-5151-38F4-A42C-CEB77A05332B}
// *********************************************************************//
  _NexoApplicationName = interface(IDispatch)
    ['{9C672E07-5151-38F4-A42C-CEB77A05332B}']
  end;

// *********************************************************************//
// DispIntf :    _NexoApplicationNameDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {9C672E07-5151-38F4-A42C-CEB77A05332B}
// *********************************************************************//
  _NexoApplicationNameDisp = dispinterface
    ['{9C672E07-5151-38F4-A42C-CEB77A05332B}']
  end;

// *********************************************************************//
// Interface :   _NexoManufacturerID
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {E49650FA-D915-3C41-8313-9A5A13A64420}
// *********************************************************************//
  _NexoManufacturerID = interface(IDispatch)
    ['{E49650FA-D915-3C41-8313-9A5A13A64420}']
  end;

// *********************************************************************//
// DispIntf :    _NexoManufacturerIDDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {E49650FA-D915-3C41-8313-9A5A13A64420}
// *********************************************************************//
  _NexoManufacturerIDDisp = dispinterface
    ['{E49650FA-D915-3C41-8313-9A5A13A64420}']
  end;

// *********************************************************************//
// Interface :   _NexoPOISerialNumber
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {6681A893-77AF-3107-A6DA-DF729D6DB446}
// *********************************************************************//
  _NexoPOISerialNumber = interface(IDispatch)
    ['{6681A893-77AF-3107-A6DA-DF729D6DB446}']
  end;

// *********************************************************************//
// DispIntf :    _NexoPOISerialNumberDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {6681A893-77AF-3107-A6DA-DF729D6DB446}
// *********************************************************************//
  _NexoPOISerialNumberDisp = dispinterface
    ['{6681A893-77AF-3107-A6DA-DF729D6DB446}']
  end;

// *********************************************************************//
// Interface :   _NexoOperatorID
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {CD18F863-D50B-352D-B4A0-5E980F36021D}
// *********************************************************************//
  _NexoOperatorID = interface(IDispatch)
    ['{CD18F863-D50B-352D-B4A0-5E980F36021D}']
  end;

// *********************************************************************//
// DispIntf :    _NexoOperatorIDDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {CD18F863-D50B-352D-B4A0-5E980F36021D}
// *********************************************************************//
  _NexoOperatorIDDisp = dispinterface
    ['{CD18F863-D50B-352D-B4A0-5E980F36021D}']
  end;

// *********************************************************************//
// Interface :   _NexoDateTime
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {8DF83577-AE20-31AB-B9C0-1F46E4CF327C}
// *********************************************************************//
  _NexoDateTime = interface(IDispatch)
    ['{8DF83577-AE20-31AB-B9C0-1F46E4CF327C}']
  end;

// *********************************************************************//
// DispIntf :    _NexoDateTimeDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {8DF83577-AE20-31AB-B9C0-1F46E4CF327C}
// *********************************************************************//
  _NexoDateTimeDisp = dispinterface
    ['{8DF83577-AE20-31AB-B9C0-1F46E4CF327C}']
  end;

// *********************************************************************//
// Interface :   _NexoInputCommand
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {4E7620D8-37EE-3EF1-8219-5905E4C30D28}
// *********************************************************************//
  _NexoInputCommand = interface(IDispatch)
    ['{4E7620D8-37EE-3EF1-8219-5905E4C30D28}']
  end;

// *********************************************************************//
// DispIntf :    _NexoInputCommandDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {4E7620D8-37EE-3EF1-8219-5905E4C30D28}
// *********************************************************************//
  _NexoInputCommandDisp = dispinterface
    ['{4E7620D8-37EE-3EF1-8219-5905E4C30D28}']
  end;

// *********************************************************************//
// Interface :   _NexoEventToNotify
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {F32A9C29-CEFF-3D25-9C49-F4350CA77ABB}
// *********************************************************************//
  _NexoEventToNotify = interface(IDispatch)
    ['{F32A9C29-CEFF-3D25-9C49-F4350CA77ABB}']
  end;

// *********************************************************************//
// DispIntf :    _NexoEventToNotifyDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {F32A9C29-CEFF-3D25-9C49-F4350CA77ABB}
// *********************************************************************//
  _NexoEventToNotifyDisp = dispinterface
    ['{F32A9C29-CEFF-3D25-9C49-F4350CA77ABB}']
  end;

// *********************************************************************//
// Interface :   _NexoPaymentIntrumentType
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {A7085E0D-4C4E-3492-9CD8-E5EEA1139AB4}
// *********************************************************************//
  _NexoPaymentIntrumentType = interface(IDispatch)
    ['{A7085E0D-4C4E-3492-9CD8-E5EEA1139AB4}']
  end;

// *********************************************************************//
// DispIntf :    _NexoPaymentIntrumentTypeDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {A7085E0D-4C4E-3492-9CD8-E5EEA1139AB4}
// *********************************************************************//
  _NexoPaymentIntrumentTypeDisp = dispinterface
    ['{A7085E0D-4C4E-3492-9CD8-E5EEA1139AB4}']
  end;

// *********************************************************************//
// Interface :   IAbortRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5164B342-574E-4BF3-BE80-736D77C0CED3}
// *********************************************************************//
  IAbortRequestType = interface(IDispatch)
    ['{5164B342-574E-4BF3-BE80-736D77C0CED3}']
    function Get_MessageReference: IMessageReferenceType; safecall;
    procedure _Set_MessageReference(const pRetVal: IMessageReferenceType); safecall;
    function Get_AbortReason: WideString; safecall;
    procedure Set_AbortReason(const pRetVal: WideString); safecall;
    function Get_DisplayOutput: IDisplayOutputType; safecall;
    procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
    function Get_xsdAbortRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdAbortRequestTypeInitFlag(pRetVal: WordBool); safecall;
    property MessageReference: IMessageReferenceType read Get_MessageReference write _Set_MessageReference;
    property AbortReason: WideString read Get_AbortReason write Set_AbortReason;
    property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
    property xsdAbortRequestTypeInitFlag: WordBool read Get_xsdAbortRequestTypeInitFlag write Set_xsdAbortRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IAbortRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5164B342-574E-4BF3-BE80-736D77C0CED3}
// *********************************************************************//
  IAbortRequestTypeDisp = dispinterface
    ['{5164B342-574E-4BF3-BE80-736D77C0CED3}']
    property MessageReference: IMessageReferenceType dispid 1;
    property AbortReason: WideString dispid 3;
    property DisplayOutput: IDisplayOutputType dispid 5;
    property xsdAbortRequestTypeInitFlag: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface :   IMessageReferenceType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3A84AA7A-9AE5-430C-B1AE-F0CEE4E3D7E0}
// *********************************************************************//
  IMessageReferenceType = interface(IDispatch)
    ['{3A84AA7A-9AE5-430C-B1AE-F0CEE4E3D7E0}']
    function Get_MessageCategory: WideString; safecall;
    procedure Set_MessageCategory(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_xsdMessageReferenceTypeInitFlag: WordBool; safecall;
    procedure Set_xsdMessageReferenceTypeInitFlag(pRetVal: WordBool); safecall;
    property MessageCategory: WideString read Get_MessageCategory write Set_MessageCategory;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property xsdMessageReferenceTypeInitFlag: WordBool read Get_xsdMessageReferenceTypeInitFlag write Set_xsdMessageReferenceTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IMessageReferenceTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3A84AA7A-9AE5-430C-B1AE-F0CEE4E3D7E0}
// *********************************************************************//
  IMessageReferenceTypeDisp = dispinterface
    ['{3A84AA7A-9AE5-430C-B1AE-F0CEE4E3D7E0}']
    property MessageCategory: WideString dispid 1;
    property ServiceID: WideString dispid 3;
    property DeviceID: WideString dispid 5;
    property SaleID: WideString dispid 7;
    property POIID: WideString dispid 9;
    property xsdMessageReferenceTypeInitFlag: WordBool dispid 11;
  end;

// *********************************************************************//
// Interface :   IDisplayResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1172E6C0-7B5B-4A6B-95F3-2C516D391256}
// *********************************************************************//
  IDisplayResponseType = interface(IDispatch)
    ['{1172E6C0-7B5B-4A6B-95F3-2C516D391256}']
    function Get_OutputResult: PSafeArray; safecall;
    procedure Set_OutputResult(pRetVal: PSafeArray); safecall;
    function Get_xsdDisplayResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdDisplayResponseTypeInitFlag(pRetVal: WordBool); safecall;
    function OutputResultSize: Integer; safecall;
    function OutputResultGetItem(index: Integer): IOutputResultType; safecall;
    function OutputResultSetItem(index: Integer; const Value: IOutputResultType): WordBool; safecall;
    function OutputResultAddItem(const Value: IOutputResultType): WordBool; safecall;
    function OutputResultRemoveItem(index: Integer): WordBool; safecall;
    property OutputResult: PSafeArray read Get_OutputResult write Set_OutputResult;
    property xsdDisplayResponseTypeInitFlag: WordBool read Get_xsdDisplayResponseTypeInitFlag write Set_xsdDisplayResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IDisplayResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1172E6C0-7B5B-4A6B-95F3-2C516D391256}
// *********************************************************************//
  IDisplayResponseTypeDisp = dispinterface
    ['{1172E6C0-7B5B-4A6B-95F3-2C516D391256}']
    property OutputResult: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property xsdDisplayResponseTypeInitFlag: WordBool dispid 3;
    function OutputResultSize: Integer; dispid 4;
    function OutputResultGetItem(index: Integer): IOutputResultType; dispid 5;
    function OutputResultSetItem(index: Integer; const Value: IOutputResultType): WordBool; dispid 6;
    function OutputResultAddItem(const Value: IOutputResultType): WordBool; dispid 7;
    function OutputResultRemoveItem(index: Integer): WordBool; dispid 8;
  end;

// *********************************************************************//
// Interface :   IOutputResultType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {182805AD-90B6-4BB5-9296-9AA3DB2EFC64}
// *********************************************************************//
  IOutputResultType = interface(IDispatch)
    ['{182805AD-90B6-4BB5-9296-9AA3DB2EFC64}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_Device: WideString; safecall;
    procedure Set_Device(const pRetVal: WideString); safecall;
    function Get_InfoQualify: WideString; safecall;
    procedure Set_InfoQualify(const pRetVal: WideString); safecall;
    function Get_xsdOutputResultTypeInitFlag: WordBool; safecall;
    procedure Set_xsdOutputResultTypeInitFlag(pRetVal: WordBool); safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property Device: WideString read Get_Device write Set_Device;
    property InfoQualify: WideString read Get_InfoQualify write Set_InfoQualify;
    property xsdOutputResultTypeInitFlag: WordBool read Get_xsdOutputResultTypeInitFlag write Set_xsdOutputResultTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IOutputResultTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {182805AD-90B6-4BB5-9296-9AA3DB2EFC64}
// *********************************************************************//
  IOutputResultTypeDisp = dispinterface
    ['{182805AD-90B6-4BB5-9296-9AA3DB2EFC64}']
    property Response: IResponseType dispid 1;
    property Device: WideString dispid 3;
    property InfoQualify: WideString dispid 5;
    property xsdOutputResultTypeInitFlag: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface :   IResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F710DB1A-1867-48F3-B078-3233A46A44C8}
// *********************************************************************//
  IResponseType = interface(IDispatch)
    ['{F710DB1A-1867-48F3-B078-3233A46A44C8}']
    function Get_AdditionalResponse: WideString; safecall;
    procedure Set_AdditionalResponse(const pRetVal: WideString); safecall;
    function Get_Result: WideString; safecall;
    procedure Set_Result(const pRetVal: WideString); safecall;
    function Get_ErrorCondition: WideString; safecall;
    procedure Set_ErrorCondition(const pRetVal: WideString); safecall;
    function Get_xsdResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdResponseTypeInitFlag(pRetVal: WordBool); safecall;
    property AdditionalResponse: WideString read Get_AdditionalResponse write Set_AdditionalResponse;
    property Result: WideString read Get_Result write Set_Result;
    property ErrorCondition: WideString read Get_ErrorCondition write Set_ErrorCondition;
    property xsdResponseTypeInitFlag: WordBool read Get_xsdResponseTypeInitFlag write Set_xsdResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F710DB1A-1867-48F3-B078-3233A46A44C8}
// *********************************************************************//
  IResponseTypeDisp = dispinterface
    ['{F710DB1A-1867-48F3-B078-3233A46A44C8}']
    property AdditionalResponse: WideString dispid 1;
    property Result: WideString dispid 3;
    property ErrorCondition: WideString dispid 5;
    property xsdResponseTypeInitFlag: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface :   IDisplayRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {52E8DBB9-1777-411F-96CA-1C39BAA9112E}
// *********************************************************************//
  IDisplayRequestType = interface(IDispatch)
    ['{52E8DBB9-1777-411F-96CA-1C39BAA9112E}']
    function Get_DisplayOutput: PSafeArray; safecall;
    procedure Set_DisplayOutput(pRetVal: PSafeArray); safecall;
    function Get_xsdDisplayRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdDisplayRequestTypeInitFlag(pRetVal: WordBool); safecall;
    function DisplayOutputSize: Integer; safecall;
    function DisplayOutputGetItem(index: Integer): IDisplayOutputType; safecall;
    function DisplayOutputSetItem(index: Integer; const Value: IDisplayOutputType): WordBool; safecall;
    function DisplayOutputAddItem(const Value: IDisplayOutputType): WordBool; safecall;
    function DisplayOutputRemoveItem(index: Integer): WordBool; safecall;
    property DisplayOutput: PSafeArray read Get_DisplayOutput write Set_DisplayOutput;
    property xsdDisplayRequestTypeInitFlag: WordBool read Get_xsdDisplayRequestTypeInitFlag write Set_xsdDisplayRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IDisplayRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {52E8DBB9-1777-411F-96CA-1C39BAA9112E}
// *********************************************************************//
  IDisplayRequestTypeDisp = dispinterface
    ['{52E8DBB9-1777-411F-96CA-1C39BAA9112E}']
    property DisplayOutput: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property xsdDisplayRequestTypeInitFlag: WordBool dispid 3;
    function DisplayOutputSize: Integer; dispid 4;
    function DisplayOutputGetItem(index: Integer): IDisplayOutputType; dispid 5;
    function DisplayOutputSetItem(index: Integer; const Value: IDisplayOutputType): WordBool; dispid 6;
    function DisplayOutputAddItem(const Value: IDisplayOutputType): WordBool; dispid 7;
    function DisplayOutputRemoveItem(index: Integer): WordBool; dispid 8;
  end;

// *********************************************************************//
// Interface :   IDisplayOutputType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4D8A806D-1E0A-4E84-A840-CF7D4A8DAC80}
// *********************************************************************//
  IDisplayOutputType = interface(IDispatch)
    ['{4D8A806D-1E0A-4E84-A840-CF7D4A8DAC80}']
    function Get_OutputContent: IOutputContentType; safecall;
    procedure _Set_OutputContent(const pRetVal: IOutputContentType); safecall;
    function Get_MenuEntry: PSafeArray; safecall;
    procedure Set_MenuEntry(pRetVal: PSafeArray); safecall;
    function Get_OutputSignature: PSafeArray; safecall;
    procedure Set_OutputSignature(pRetVal: PSafeArray); safecall;
    function Get_ResponseRequiredFlag: WordBool; safecall;
    procedure Set_ResponseRequiredFlag(pRetVal: WordBool); safecall;
    function Get_MinimumDisplayTime: WideString; safecall;
    procedure Set_MinimumDisplayTime(const pRetVal: WideString); safecall;
    function Get_Device: WideString; safecall;
    procedure Set_Device(const pRetVal: WideString); safecall;
    function Get_InfoQualify: WideString; safecall;
    procedure Set_InfoQualify(const pRetVal: WideString); safecall;
    function Get_xsdDisplayOutputTypeInitFlag: WordBool; safecall;
    procedure Set_xsdDisplayOutputTypeInitFlag(pRetVal: WordBool); safecall;
    function MenuEntrySize: Integer; safecall;
    function MenuEntryGetItem(index: Integer): IMenuEntryType; safecall;
    function MenuEntrySetItem(index: Integer; const Value: IMenuEntryType): WordBool; safecall;
    function MenuEntryAddItem(const Value: IMenuEntryType): WordBool; safecall;
    function MenuEntryRemoveItem(index: Integer): WordBool; safecall;
    function OutputSignatureSize: Integer; safecall;
    function OutputSignatureGetItem(index: Integer): Byte; safecall;
    function OutputSignatureSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function OutputSignatureAddItem(Value: Byte): WordBool; safecall;
    function OutputSignatureRemoveItem(index: Integer): WordBool; safecall;
    property OutputContent: IOutputContentType read Get_OutputContent write _Set_OutputContent;
    property MenuEntry: PSafeArray read Get_MenuEntry write Set_MenuEntry;
    property OutputSignature: PSafeArray read Get_OutputSignature write Set_OutputSignature;
    property ResponseRequiredFlag: WordBool read Get_ResponseRequiredFlag write Set_ResponseRequiredFlag;
    property MinimumDisplayTime: WideString read Get_MinimumDisplayTime write Set_MinimumDisplayTime;
    property Device: WideString read Get_Device write Set_Device;
    property InfoQualify: WideString read Get_InfoQualify write Set_InfoQualify;
    property xsdDisplayOutputTypeInitFlag: WordBool read Get_xsdDisplayOutputTypeInitFlag write Set_xsdDisplayOutputTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IDisplayOutputTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4D8A806D-1E0A-4E84-A840-CF7D4A8DAC80}
// *********************************************************************//
  IDisplayOutputTypeDisp = dispinterface
    ['{4D8A806D-1E0A-4E84-A840-CF7D4A8DAC80}']
    property OutputContent: IOutputContentType dispid 2;
    property MenuEntry: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property OutputSignature: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 6;
    property ResponseRequiredFlag: WordBool dispid 8;
    property MinimumDisplayTime: WideString dispid 10;
    property Device: WideString dispid 12;
    property InfoQualify: WideString dispid 14;
    property xsdDisplayOutputTypeInitFlag: WordBool dispid 16;
    function MenuEntrySize: Integer; dispid 17;
    function MenuEntryGetItem(index: Integer): IMenuEntryType; dispid 18;
    function MenuEntrySetItem(index: Integer; const Value: IMenuEntryType): WordBool; dispid 19;
    function MenuEntryAddItem(const Value: IMenuEntryType): WordBool; dispid 20;
    function MenuEntryRemoveItem(index: Integer): WordBool; dispid 21;
    function OutputSignatureSize: Integer; dispid 22;
    function OutputSignatureGetItem(index: Integer): Byte; dispid 23;
    function OutputSignatureSetItem(index: Integer; Value: Byte): WordBool; dispid 24;
    function OutputSignatureAddItem(Value: Byte): WordBool; dispid 25;
    function OutputSignatureRemoveItem(index: Integer): WordBool; dispid 26;
  end;

// *********************************************************************//
// Interface :   IOutputContentType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {18E3DF04-9D3E-4488-9644-02F46A00808E}
// *********************************************************************//
  IOutputContentType = interface(IDispatch)
    ['{18E3DF04-9D3E-4488-9644-02F46A00808E}']
    function Get_PredefinedContent: IPredefinedContentType; safecall;
    procedure _Set_PredefinedContent(const pRetVal: IPredefinedContentType); safecall;
    function Get_OutputText: PSafeArray; safecall;
    procedure Set_OutputText(pRetVal: PSafeArray); safecall;
    function Get_OutputXHTML: PSafeArray; safecall;
    procedure Set_OutputXHTML(pRetVal: PSafeArray); safecall;
    function Get_OutputBarcode: IOutputBarcodeType; safecall;
    procedure _Set_OutputBarcode(const pRetVal: IOutputBarcodeType); safecall;
    function Get_OutputFormat: WideString; safecall;
    procedure Set_OutputFormat(const pRetVal: WideString); safecall;
    function Get_xsdOutputContentTypeInitFlag: WordBool; safecall;
    procedure Set_xsdOutputContentTypeInitFlag(pRetVal: WordBool); safecall;
    function OutputTextSize: Integer; safecall;
    function OutputTextGetItem(index: Integer): IOutputTextType; safecall;
    function OutputTextSetItem(index: Integer; const Value: IOutputTextType): WordBool; safecall;
    function OutputTextAddItem(const Value: IOutputTextType): WordBool; safecall;
    function OutputTextRemoveItem(index: Integer): WordBool; safecall;
    function OutputXHTMLSize: Integer; safecall;
    function OutputXHTMLGetItem(index: Integer): Byte; safecall;
    function OutputXHTMLSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function OutputXHTMLAddItem(Value: Byte): WordBool; safecall;
    function OutputXHTMLRemoveItem(index: Integer): WordBool; safecall;
    property PredefinedContent: IPredefinedContentType read Get_PredefinedContent write _Set_PredefinedContent;
    property OutputText: PSafeArray read Get_OutputText write Set_OutputText;
    property OutputXHTML: PSafeArray read Get_OutputXHTML write Set_OutputXHTML;
    property OutputBarcode: IOutputBarcodeType read Get_OutputBarcode write _Set_OutputBarcode;
    property OutputFormat: WideString read Get_OutputFormat write Set_OutputFormat;
    property xsdOutputContentTypeInitFlag: WordBool read Get_xsdOutputContentTypeInitFlag write Set_xsdOutputContentTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IOutputContentTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {18E3DF04-9D3E-4488-9644-02F46A00808E}
// *********************************************************************//
  IOutputContentTypeDisp = dispinterface
    ['{18E3DF04-9D3E-4488-9644-02F46A00808E}']
    property PredefinedContent: IPredefinedContentType dispid 1;
    property OutputText: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property OutputXHTML: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property OutputBarcode: IOutputBarcodeType dispid 7;
    property OutputFormat: WideString dispid 9;
    property xsdOutputContentTypeInitFlag: WordBool dispid 11;
    function OutputTextSize: Integer; dispid 12;
    function OutputTextGetItem(index: Integer): IOutputTextType; dispid 13;
    function OutputTextSetItem(index: Integer; const Value: IOutputTextType): WordBool; dispid 14;
    function OutputTextAddItem(const Value: IOutputTextType): WordBool; dispid 15;
    function OutputTextRemoveItem(index: Integer): WordBool; dispid 16;
    function OutputXHTMLSize: Integer; dispid 17;
    function OutputXHTMLGetItem(index: Integer): Byte; dispid 18;
    function OutputXHTMLSetItem(index: Integer; Value: Byte): WordBool; dispid 19;
    function OutputXHTMLAddItem(Value: Byte): WordBool; dispid 20;
    function OutputXHTMLRemoveItem(index: Integer): WordBool; dispid 21;
  end;

// *********************************************************************//
// Interface :   IPredefinedContentType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {50EA9E0C-AD32-4881-9EC8-412F45F1E4CA}
// *********************************************************************//
  IPredefinedContentType = interface(IDispatch)
    ['{50EA9E0C-AD32-4881-9EC8-412F45F1E4CA}']
    function Get_ReferenceID: WideString; safecall;
    procedure Set_ReferenceID(const pRetVal: WideString); safecall;
    function Get_Language: WideString; safecall;
    procedure Set_Language(const pRetVal: WideString); safecall;
    function Get_xsdPredefinedContentTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPredefinedContentTypeInitFlag(pRetVal: WordBool); safecall;
    property ReferenceID: WideString read Get_ReferenceID write Set_ReferenceID;
    property Language: WideString read Get_Language write Set_Language;
    property xsdPredefinedContentTypeInitFlag: WordBool read Get_xsdPredefinedContentTypeInitFlag write Set_xsdPredefinedContentTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPredefinedContentTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {50EA9E0C-AD32-4881-9EC8-412F45F1E4CA}
// *********************************************************************//
  IPredefinedContentTypeDisp = dispinterface
    ['{50EA9E0C-AD32-4881-9EC8-412F45F1E4CA}']
    property ReferenceID: WideString dispid 1;
    property Language: WideString dispid 3;
    property xsdPredefinedContentTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IOutputTextType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {55A3955B-9057-4AF9-9D23-FE2FA7B0ACFF}
// *********************************************************************//
  IOutputTextType = interface(IDispatch)
    ['{55A3955B-9057-4AF9-9D23-FE2FA7B0ACFF}']
    function Get_CharacterSet: WideString; safecall;
    procedure Set_CharacterSet(const pRetVal: WideString); safecall;
    function Get_Font: WideString; safecall;
    procedure Set_Font(const pRetVal: WideString); safecall;
    function Get_StartRow: WideString; safecall;
    procedure Set_StartRow(const pRetVal: WideString); safecall;
    function Get_StartColumn: WideString; safecall;
    procedure Set_StartColumn(const pRetVal: WideString); safecall;
    function Get_Color: WideString; safecall;
    procedure Set_Color(const pRetVal: WideString); safecall;
    function Get_CharacterWidth: WideString; safecall;
    procedure Set_CharacterWidth(const pRetVal: WideString); safecall;
    function Get_CharacterHeight: WideString; safecall;
    procedure Set_CharacterHeight(const pRetVal: WideString); safecall;
    function Get_CharacterStyle: WideString; safecall;
    procedure Set_CharacterStyle(const pRetVal: WideString); safecall;
    function Get_Alignment: WideString; safecall;
    procedure Set_Alignment(const pRetVal: WideString); safecall;
    function Get_EndOfLineFlag: WordBool; safecall;
    procedure Set_EndOfLineFlag(pRetVal: WordBool); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_xsdOutputTextTypeInitFlag: WordBool; safecall;
    procedure Set_xsdOutputTextTypeInitFlag(pRetVal: WordBool); safecall;
    property CharacterSet: WideString read Get_CharacterSet write Set_CharacterSet;
    property Font: WideString read Get_Font write Set_Font;
    property StartRow: WideString read Get_StartRow write Set_StartRow;
    property StartColumn: WideString read Get_StartColumn write Set_StartColumn;
    property Color: WideString read Get_Color write Set_Color;
    property CharacterWidth: WideString read Get_CharacterWidth write Set_CharacterWidth;
    property CharacterHeight: WideString read Get_CharacterHeight write Set_CharacterHeight;
    property CharacterStyle: WideString read Get_CharacterStyle write Set_CharacterStyle;
    property Alignment: WideString read Get_Alignment write Set_Alignment;
    property EndOfLineFlag: WordBool read Get_EndOfLineFlag write Set_EndOfLineFlag;
    property Value: WideString read Get_Value write Set_Value;
    property xsdOutputTextTypeInitFlag: WordBool read Get_xsdOutputTextTypeInitFlag write Set_xsdOutputTextTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IOutputTextTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {55A3955B-9057-4AF9-9D23-FE2FA7B0ACFF}
// *********************************************************************//
  IOutputTextTypeDisp = dispinterface
    ['{55A3955B-9057-4AF9-9D23-FE2FA7B0ACFF}']
    property CharacterSet: WideString dispid 2;
    property Font: WideString dispid 4;
    property StartRow: WideString dispid 6;
    property StartColumn: WideString dispid 8;
    property Color: WideString dispid 10;
    property CharacterWidth: WideString dispid 12;
    property CharacterHeight: WideString dispid 14;
    property CharacterStyle: WideString dispid 16;
    property Alignment: WideString dispid 18;
    property EndOfLineFlag: WordBool dispid 20;
    property Value: WideString dispid 22;
    property xsdOutputTextTypeInitFlag: WordBool dispid 24;
  end;

// *********************************************************************//
// Interface :   IOutputBarcodeType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {13A4F0E2-8CC8-4EE6-B72A-85F36BA1D21E}
// *********************************************************************//
  IOutputBarcodeType = interface(IDispatch)
    ['{13A4F0E2-8CC8-4EE6-B72A-85F36BA1D21E}']
    function Get_BarcodeType: WideString; safecall;
    procedure Set_BarcodeType(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_xsdOutputBarcodeTypeInitFlag: WordBool; safecall;
    procedure Set_xsdOutputBarcodeTypeInitFlag(pRetVal: WordBool); safecall;
    property BarcodeType: WideString read Get_BarcodeType write Set_BarcodeType;
    property Value: WideString read Get_Value write Set_Value;
    property xsdOutputBarcodeTypeInitFlag: WordBool read Get_xsdOutputBarcodeTypeInitFlag write Set_xsdOutputBarcodeTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IOutputBarcodeTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {13A4F0E2-8CC8-4EE6-B72A-85F36BA1D21E}
// *********************************************************************//
  IOutputBarcodeTypeDisp = dispinterface
    ['{13A4F0E2-8CC8-4EE6-B72A-85F36BA1D21E}']
    property BarcodeType: WideString dispid 2;
    property Value: WideString dispid 4;
    property xsdOutputBarcodeTypeInitFlag: WordBool dispid 6;
  end;

// *********************************************************************//
// Interface :   IMenuEntryType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {09A3B6F8-0D9E-456A-B15C-EC009B7A8CD7}
// *********************************************************************//
  IMenuEntryType = interface(IDispatch)
    ['{09A3B6F8-0D9E-456A-B15C-EC009B7A8CD7}']
    function Get_PredefinedContent: IPredefinedContentType; safecall;
    procedure _Set_PredefinedContent(const pRetVal: IPredefinedContentType); safecall;
    function Get_OutputText: PSafeArray; safecall;
    procedure Set_OutputText(pRetVal: PSafeArray); safecall;
    function Get_OutputXHTML: PSafeArray; safecall;
    procedure Set_OutputXHTML(pRetVal: PSafeArray); safecall;
    function Get_MenuEntryTag: WideString; safecall;
    procedure Set_MenuEntryTag(const pRetVal: WideString); safecall;
    function Get_OutputFormat: WideString; safecall;
    procedure Set_OutputFormat(const pRetVal: WideString); safecall;
    function Get_DefaultSelectedFlag: WordBool; safecall;
    procedure Set_DefaultSelectedFlag(pRetVal: WordBool); safecall;
    function Get_xsdMenuEntryTypeInitFlag: WordBool; safecall;
    procedure Set_xsdMenuEntryTypeInitFlag(pRetVal: WordBool); safecall;
    function OutputTextSize: Integer; safecall;
    function OutputTextGetItem(index: Integer): IOutputTextType; safecall;
    function OutputTextSetItem(index: Integer; const Value: IOutputTextType): WordBool; safecall;
    function OutputTextAddItem(const Value: IOutputTextType): WordBool; safecall;
    function OutputTextRemoveItem(index: Integer): WordBool; safecall;
    function OutputXHTMLSize: Integer; safecall;
    function OutputXHTMLGetItem(index: Integer): Byte; safecall;
    function OutputXHTMLSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function OutputXHTMLAddItem(Value: Byte): WordBool; safecall;
    function OutputXHTMLRemoveItem(index: Integer): WordBool; safecall;
    property PredefinedContent: IPredefinedContentType read Get_PredefinedContent write _Set_PredefinedContent;
    property OutputText: PSafeArray read Get_OutputText write Set_OutputText;
    property OutputXHTML: PSafeArray read Get_OutputXHTML write Set_OutputXHTML;
    property MenuEntryTag: WideString read Get_MenuEntryTag write Set_MenuEntryTag;
    property OutputFormat: WideString read Get_OutputFormat write Set_OutputFormat;
    property DefaultSelectedFlag: WordBool read Get_DefaultSelectedFlag write Set_DefaultSelectedFlag;
    property xsdMenuEntryTypeInitFlag: WordBool read Get_xsdMenuEntryTypeInitFlag write Set_xsdMenuEntryTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IMenuEntryTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {09A3B6F8-0D9E-456A-B15C-EC009B7A8CD7}
// *********************************************************************//
  IMenuEntryTypeDisp = dispinterface
    ['{09A3B6F8-0D9E-456A-B15C-EC009B7A8CD7}']
    property PredefinedContent: IPredefinedContentType dispid 2;
    property OutputText: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property OutputXHTML: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 6;
    property MenuEntryTag: WideString dispid 8;
    property OutputFormat: WideString dispid 10;
    property DefaultSelectedFlag: WordBool dispid 12;
    property xsdMenuEntryTypeInitFlag: WordBool dispid 14;
    function OutputTextSize: Integer; dispid 15;
    function OutputTextGetItem(index: Integer): IOutputTextType; dispid 16;
    function OutputTextSetItem(index: Integer; const Value: IOutputTextType): WordBool; dispid 17;
    function OutputTextAddItem(const Value: IOutputTextType): WordBool; dispid 18;
    function OutputTextRemoveItem(index: Integer): WordBool; dispid 19;
    function OutputXHTMLSize: Integer; dispid 20;
    function OutputXHTMLGetItem(index: Integer): Byte; dispid 21;
    function OutputXHTMLSetItem(index: Integer; Value: Byte): WordBool; dispid 22;
    function OutputXHTMLAddItem(Value: Byte): WordBool; dispid 23;
    function OutputXHTMLRemoveItem(index: Integer): WordBool; dispid 24;
  end;

// *********************************************************************//
// Interface :   IAdminRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {FFA37AEA-66CD-4F2F-B0D7-7320C918AEC8}
// *********************************************************************//
  IAdminRequestType = interface(IDispatch)
    ['{FFA37AEA-66CD-4F2F-B0D7-7320C918AEC8}']
    function Get_ServiceIdentification: WideString; safecall;
    procedure Set_ServiceIdentification(const pRetVal: WideString); safecall;
    function Get_xsdAdminRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdAdminRequestTypeInitFlag(pRetVal: WordBool); safecall;
    property ServiceIdentification: WideString read Get_ServiceIdentification write Set_ServiceIdentification;
    property xsdAdminRequestTypeInitFlag: WordBool read Get_xsdAdminRequestTypeInitFlag write Set_xsdAdminRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IAdminRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {FFA37AEA-66CD-4F2F-B0D7-7320C918AEC8}
// *********************************************************************//
  IAdminRequestTypeDisp = dispinterface
    ['{FFA37AEA-66CD-4F2F-B0D7-7320C918AEC8}']
    property ServiceIdentification: WideString dispid 1;
    property xsdAdminRequestTypeInitFlag: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface :   IAdminResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B954A868-9DC7-4616-86ED-417FAF9D9AE9}
// *********************************************************************//
  IAdminResponseType = interface(IDispatch)
    ['{B954A868-9DC7-4616-86ED-417FAF9D9AE9}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_xsdAdminResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdAdminResponseTypeInitFlag(pRetVal: WordBool); safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property xsdAdminResponseTypeInitFlag: WordBool read Get_xsdAdminResponseTypeInitFlag write Set_xsdAdminResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IAdminResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B954A868-9DC7-4616-86ED-417FAF9D9AE9}
// *********************************************************************//
  IAdminResponseTypeDisp = dispinterface
    ['{B954A868-9DC7-4616-86ED-417FAF9D9AE9}']
    property Response: IResponseType dispid 1;
    property xsdAdminResponseTypeInitFlag: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface :   IAllowedProductType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {34312584-386D-4AA1-ADCA-688472AEF400}
// *********************************************************************//
  IAllowedProductType = interface(IDispatch)
    ['{34312584-386D-4AA1-ADCA-688472AEF400}']
    function Get_ProductLabel: WideString; safecall;
    procedure Set_ProductLabel(const pRetVal: WideString); safecall;
    function Get_AdditionalProductInfo: WideString; safecall;
    procedure Set_AdditionalProductInfo(const pRetVal: WideString); safecall;
    function Get_ProductCode: WideString; safecall;
    procedure Set_ProductCode(const pRetVal: WideString); safecall;
    function Get_EanUpc: WideString; safecall;
    procedure Set_EanUpc(const pRetVal: WideString); safecall;
    function Get_xsdAllowedProductTypeInitFlag: WordBool; safecall;
    procedure Set_xsdAllowedProductTypeInitFlag(pRetVal: WordBool); safecall;
    property ProductLabel: WideString read Get_ProductLabel write Set_ProductLabel;
    property AdditionalProductInfo: WideString read Get_AdditionalProductInfo write Set_AdditionalProductInfo;
    property ProductCode: WideString read Get_ProductCode write Set_ProductCode;
    property EanUpc: WideString read Get_EanUpc write Set_EanUpc;
    property xsdAllowedProductTypeInitFlag: WordBool read Get_xsdAllowedProductTypeInitFlag write Set_xsdAllowedProductTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IAllowedProductTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {34312584-386D-4AA1-ADCA-688472AEF400}
// *********************************************************************//
  IAllowedProductTypeDisp = dispinterface
    ['{34312584-386D-4AA1-ADCA-688472AEF400}']
    property ProductLabel: WideString dispid 1;
    property AdditionalProductInfo: WideString dispid 3;
    property ProductCode: WideString dispid 5;
    property EanUpc: WideString dispid 7;
    property xsdAllowedProductTypeInitFlag: WordBool dispid 9;
  end;

// *********************************************************************//
// Interface :   IAmountsReqType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0E808B35-1732-4D9A-BB32-C3817606309F}
// *********************************************************************//
  IAmountsReqType = interface(IDispatch)
    ['{0E808B35-1732-4D9A-BB32-C3817606309F}']
    function Get_currency: WideString; safecall;
    procedure Set_currency(const pRetVal: WideString); safecall;
    function Get_RequestedAmount: TDecimal; safecall;
    procedure Set_RequestedAmount(pRetVal: TDecimal); safecall;
    function Get_RequestedAmountSpecified: WordBool; safecall;
    procedure Set_RequestedAmountSpecified(pRetVal: WordBool); safecall;
    function Get_CashBackAmount: TDecimal; safecall;
    procedure Set_CashBackAmount(pRetVal: TDecimal); safecall;
    function Get_CashBackAmountSpecified: WordBool; safecall;
    procedure Set_CashBackAmountSpecified(pRetVal: WordBool); safecall;
    function Get_TipAmount: TDecimal; safecall;
    procedure Set_TipAmount(pRetVal: TDecimal); safecall;
    function Get_TipAmountSpecified: WordBool; safecall;
    procedure Set_TipAmountSpecified(pRetVal: WordBool); safecall;
    function Get_PaidAmount: TDecimal; safecall;
    procedure Set_PaidAmount(pRetVal: TDecimal); safecall;
    function Get_PaidAmountSpecified: WordBool; safecall;
    procedure Set_PaidAmountSpecified(pRetVal: WordBool); safecall;
    function Get_MinimumAmountToDeliver: TDecimal; safecall;
    procedure Set_MinimumAmountToDeliver(pRetVal: TDecimal); safecall;
    function Get_MinimumAmountToDeliverSpecified: WordBool; safecall;
    procedure Set_MinimumAmountToDeliverSpecified(pRetVal: WordBool); safecall;
    function Get_MaximumCashBackAmount: TDecimal; safecall;
    procedure Set_MaximumCashBackAmount(pRetVal: TDecimal); safecall;
    function Get_MaximumCashBackAmountSpecified: WordBool; safecall;
    procedure Set_MaximumCashBackAmountSpecified(pRetVal: WordBool); safecall;
    function Get_MinimumSplitAmount: TDecimal; safecall;
    procedure Set_MinimumSplitAmount(pRetVal: TDecimal); safecall;
    function Get_MinimumSplitAmountSpecified: WordBool; safecall;
    procedure Set_MinimumSplitAmountSpecified(pRetVal: WordBool); safecall;
    function Get_xsdAmountsReqTypeInitFlag: WordBool; safecall;
    procedure Set_xsdAmountsReqTypeInitFlag(pRetVal: WordBool); safecall;
    property currency: WideString read Get_currency write Set_currency;
    property RequestedAmount: TDecimal read Get_RequestedAmount write Set_RequestedAmount;
    property RequestedAmountSpecified: WordBool read Get_RequestedAmountSpecified write Set_RequestedAmountSpecified;
    property CashBackAmount: TDecimal read Get_CashBackAmount write Set_CashBackAmount;
    property CashBackAmountSpecified: WordBool read Get_CashBackAmountSpecified write Set_CashBackAmountSpecified;
    property TipAmount: TDecimal read Get_TipAmount write Set_TipAmount;
    property TipAmountSpecified: WordBool read Get_TipAmountSpecified write Set_TipAmountSpecified;
    property PaidAmount: TDecimal read Get_PaidAmount write Set_PaidAmount;
    property PaidAmountSpecified: WordBool read Get_PaidAmountSpecified write Set_PaidAmountSpecified;
    property MinimumAmountToDeliver: TDecimal read Get_MinimumAmountToDeliver write Set_MinimumAmountToDeliver;
    property MinimumAmountToDeliverSpecified: WordBool read Get_MinimumAmountToDeliverSpecified write Set_MinimumAmountToDeliverSpecified;
    property MaximumCashBackAmount: TDecimal read Get_MaximumCashBackAmount write Set_MaximumCashBackAmount;
    property MaximumCashBackAmountSpecified: WordBool read Get_MaximumCashBackAmountSpecified write Set_MaximumCashBackAmountSpecified;
    property MinimumSplitAmount: TDecimal read Get_MinimumSplitAmount write Set_MinimumSplitAmount;
    property MinimumSplitAmountSpecified: WordBool read Get_MinimumSplitAmountSpecified write Set_MinimumSplitAmountSpecified;
    property xsdAmountsReqTypeInitFlag: WordBool read Get_xsdAmountsReqTypeInitFlag write Set_xsdAmountsReqTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IAmountsReqTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0E808B35-1732-4D9A-BB32-C3817606309F}
// *********************************************************************//
  IAmountsReqTypeDisp = dispinterface
    ['{0E808B35-1732-4D9A-BB32-C3817606309F}']
    property currency: WideString dispid 1;
    property RequestedAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 3;
    property RequestedAmountSpecified: WordBool dispid 5;
    property CashBackAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 7;
    property CashBackAmountSpecified: WordBool dispid 9;
    property TipAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 11;
    property TipAmountSpecified: WordBool dispid 13;
    property PaidAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 15;
    property PaidAmountSpecified: WordBool dispid 17;
    property MinimumAmountToDeliver: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 19;
    property MinimumAmountToDeliverSpecified: WordBool dispid 21;
    property MaximumCashBackAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 23;
    property MaximumCashBackAmountSpecified: WordBool dispid 25;
    property MinimumSplitAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 27;
    property MinimumSplitAmountSpecified: WordBool dispid 29;
    property xsdAmountsReqTypeInitFlag: WordBool dispid 31;
  end;

// *********************************************************************//
// Interface :   IAmountsRespType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CD7F9693-3E83-45D9-84FF-30E4C3C60C87}
// *********************************************************************//
  IAmountsRespType = interface(IDispatch)
    ['{CD7F9693-3E83-45D9-84FF-30E4C3C60C87}']
    function Get_currency: WideString; safecall;
    procedure Set_currency(const pRetVal: WideString); safecall;
    function Get_AuthorizedAmount: TDecimal; safecall;
    procedure Set_AuthorizedAmount(pRetVal: TDecimal); safecall;
    function Get_TotalRebatesAmount: TDecimal; safecall;
    procedure Set_TotalRebatesAmount(pRetVal: TDecimal); safecall;
    function Get_TotalRebatesAmountSpecified: WordBool; safecall;
    procedure Set_TotalRebatesAmountSpecified(pRetVal: WordBool); safecall;
    function Get_TotalFeesAmount: TDecimal; safecall;
    procedure Set_TotalFeesAmount(pRetVal: TDecimal); safecall;
    function Get_TotalFeesAmountSpecified: WordBool; safecall;
    procedure Set_TotalFeesAmountSpecified(pRetVal: WordBool); safecall;
    function Get_CashBackAmount: TDecimal; safecall;
    procedure Set_CashBackAmount(pRetVal: TDecimal); safecall;
    function Get_CashBackAmountSpecified: WordBool; safecall;
    procedure Set_CashBackAmountSpecified(pRetVal: WordBool); safecall;
    function Get_TipAmount: TDecimal; safecall;
    procedure Set_TipAmount(pRetVal: TDecimal); safecall;
    function Get_TipAmountSpecified: WordBool; safecall;
    procedure Set_TipAmountSpecified(pRetVal: WordBool); safecall;
    function Get_xsdAmountsRespTypeInitFlag: WordBool; safecall;
    procedure Set_xsdAmountsRespTypeInitFlag(pRetVal: WordBool); safecall;
    property currency: WideString read Get_currency write Set_currency;
    property AuthorizedAmount: TDecimal read Get_AuthorizedAmount write Set_AuthorizedAmount;
    property TotalRebatesAmount: TDecimal read Get_TotalRebatesAmount write Set_TotalRebatesAmount;
    property TotalRebatesAmountSpecified: WordBool read Get_TotalRebatesAmountSpecified write Set_TotalRebatesAmountSpecified;
    property TotalFeesAmount: TDecimal read Get_TotalFeesAmount write Set_TotalFeesAmount;
    property TotalFeesAmountSpecified: WordBool read Get_TotalFeesAmountSpecified write Set_TotalFeesAmountSpecified;
    property CashBackAmount: TDecimal read Get_CashBackAmount write Set_CashBackAmount;
    property CashBackAmountSpecified: WordBool read Get_CashBackAmountSpecified write Set_CashBackAmountSpecified;
    property TipAmount: TDecimal read Get_TipAmount write Set_TipAmount;
    property TipAmountSpecified: WordBool read Get_TipAmountSpecified write Set_TipAmountSpecified;
    property xsdAmountsRespTypeInitFlag: WordBool read Get_xsdAmountsRespTypeInitFlag write Set_xsdAmountsRespTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IAmountsRespTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CD7F9693-3E83-45D9-84FF-30E4C3C60C87}
// *********************************************************************//
  IAmountsRespTypeDisp = dispinterface
    ['{CD7F9693-3E83-45D9-84FF-30E4C3C60C87}']
    property currency: WideString dispid 1;
    property AuthorizedAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 3;
    property TotalRebatesAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 5;
    property TotalRebatesAmountSpecified: WordBool dispid 7;
    property TotalFeesAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 9;
    property TotalFeesAmountSpecified: WordBool dispid 11;
    property CashBackAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 13;
    property CashBackAmountSpecified: WordBool dispid 15;
    property TipAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 17;
    property TipAmountSpecified: WordBool dispid 19;
    property xsdAmountsRespTypeInitFlag: WordBool dispid 21;
  end;

// *********************************************************************//
// Interface :   IAreaSizeType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {31F77C9F-7B6C-4FF9-AB82-B5FA585B2CD9}
// *********************************************************************//
  IAreaSizeType = interface(IDispatch)
    ['{31F77C9F-7B6C-4FF9-AB82-B5FA585B2CD9}']
    function Get_X: WideString; safecall;
    procedure Set_X(const pRetVal: WideString); safecall;
    function Get_Y: WideString; safecall;
    procedure Set_Y(const pRetVal: WideString); safecall;
    function Get_xsdAreaSizeTypeInitFlag: WordBool; safecall;
    procedure Set_xsdAreaSizeTypeInitFlag(pRetVal: WordBool); safecall;
    property X: WideString read Get_X write Set_X;
    property Y: WideString read Get_Y write Set_Y;
    property xsdAreaSizeTypeInitFlag: WordBool read Get_xsdAreaSizeTypeInitFlag write Set_xsdAreaSizeTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IAreaSizeTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {31F77C9F-7B6C-4FF9-AB82-B5FA585B2CD9}
// *********************************************************************//
  IAreaSizeTypeDisp = dispinterface
    ['{31F77C9F-7B6C-4FF9-AB82-B5FA585B2CD9}']
    property X: WideString dispid 1;
    property Y: WideString dispid 3;
    property xsdAreaSizeTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IBalanceInquiryRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D487A8E1-FFDD-4FDD-8120-87EADB267EBA}
// *********************************************************************//
  IBalanceInquiryRequestType = interface(IDispatch)
    ['{D487A8E1-FFDD-4FDD-8120-87EADB267EBA}']
    function Get_PaymentAccountReq: IPaymentAccountReqType; safecall;
    procedure _Set_PaymentAccountReq(const pRetVal: IPaymentAccountReqType); safecall;
    function Get_LoyaltyAccountReq: ILoyaltyAccountReqType; safecall;
    procedure _Set_LoyaltyAccountReq(const pRetVal: ILoyaltyAccountReqType); safecall;
    function Get_xsdBalanceInquiryRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdBalanceInquiryRequestTypeInitFlag(pRetVal: WordBool); safecall;
    property PaymentAccountReq: IPaymentAccountReqType read Get_PaymentAccountReq write _Set_PaymentAccountReq;
    property LoyaltyAccountReq: ILoyaltyAccountReqType read Get_LoyaltyAccountReq write _Set_LoyaltyAccountReq;
    property xsdBalanceInquiryRequestTypeInitFlag: WordBool read Get_xsdBalanceInquiryRequestTypeInitFlag write Set_xsdBalanceInquiryRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IBalanceInquiryRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D487A8E1-FFDD-4FDD-8120-87EADB267EBA}
// *********************************************************************//
  IBalanceInquiryRequestTypeDisp = dispinterface
    ['{D487A8E1-FFDD-4FDD-8120-87EADB267EBA}']
    property PaymentAccountReq: IPaymentAccountReqType dispid 1;
    property LoyaltyAccountReq: ILoyaltyAccountReqType dispid 3;
    property xsdBalanceInquiryRequestTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IPaymentAccountReqType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {EDE17C01-81F9-44F7-AF01-E6CAB375634A}
// *********************************************************************//
  IPaymentAccountReqType = interface(IDispatch)
    ['{EDE17C01-81F9-44F7-AF01-E6CAB375634A}']
    function Get_CardAcquisitionReference: ITransactionIdentificationType; safecall;
    procedure _Set_CardAcquisitionReference(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_PaymentInstrumentData: IPaymentInstrumentDataType; safecall;
    procedure _Set_PaymentInstrumentData(const pRetVal: IPaymentInstrumentDataType); safecall;
    function Get_AccountType: WideString; safecall;
    procedure Set_AccountType(const pRetVal: WideString); safecall;
    function Get_xsdPaymentAccountReqTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPaymentAccountReqTypeInitFlag(pRetVal: WordBool); safecall;
    property CardAcquisitionReference: ITransactionIdentificationType read Get_CardAcquisitionReference write _Set_CardAcquisitionReference;
    property PaymentInstrumentData: IPaymentInstrumentDataType read Get_PaymentInstrumentData write _Set_PaymentInstrumentData;
    property AccountType: WideString read Get_AccountType write Set_AccountType;
    property xsdPaymentAccountReqTypeInitFlag: WordBool read Get_xsdPaymentAccountReqTypeInitFlag write Set_xsdPaymentAccountReqTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPaymentAccountReqTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {EDE17C01-81F9-44F7-AF01-E6CAB375634A}
// *********************************************************************//
  IPaymentAccountReqTypeDisp = dispinterface
    ['{EDE17C01-81F9-44F7-AF01-E6CAB375634A}']
    property CardAcquisitionReference: ITransactionIdentificationType dispid 2;
    property PaymentInstrumentData: IPaymentInstrumentDataType dispid 4;
    property AccountType: WideString dispid 6;
    property xsdPaymentAccountReqTypeInitFlag: WordBool dispid 8;
  end;

// *********************************************************************//
// Interface :   ITransactionIdentificationType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {29B4F24C-7F9B-42A9-99AE-21527B05675C}
// *********************************************************************//
  ITransactionIdentificationType = interface(IDispatch)
    ['{29B4F24C-7F9B-42A9-99AE-21527B05675C}']
    function Get_TransactionID: WideString; safecall;
    procedure Set_TransactionID(const pRetVal: WideString); safecall;
    function Get_Timestamp: WideString; safecall;
    procedure Set_Timestamp(const pRetVal: WideString); safecall;
    function Get_xsdTransactionIdentificationTypeInitFlag: WordBool; safecall;
    procedure Set_xsdTransactionIdentificationTypeInitFlag(pRetVal: WordBool); safecall;
    property TransactionID: WideString read Get_TransactionID write Set_TransactionID;
    property Timestamp: WideString read Get_Timestamp write Set_Timestamp;
    property xsdTransactionIdentificationTypeInitFlag: WordBool read Get_xsdTransactionIdentificationTypeInitFlag write Set_xsdTransactionIdentificationTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ITransactionIdentificationTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {29B4F24C-7F9B-42A9-99AE-21527B05675C}
// *********************************************************************//
  ITransactionIdentificationTypeDisp = dispinterface
    ['{29B4F24C-7F9B-42A9-99AE-21527B05675C}']
    property TransactionID: WideString dispid 1;
    property Timestamp: WideString dispid 3;
    property xsdTransactionIdentificationTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IPaymentInstrumentDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {70D0AB55-144D-4768-AD09-7FBA57253821}
// *********************************************************************//
  IPaymentInstrumentDataType = interface(IDispatch)
    ['{70D0AB55-144D-4768-AD09-7FBA57253821}']
    function Get_CardData: ICardDataType; safecall;
    procedure _Set_CardData(const pRetVal: ICardDataType); safecall;
    function Get_CheckData: ICheckDataType; safecall;
    procedure _Set_CheckData(const pRetVal: ICheckDataType); safecall;
    function Get_MobileData: IMobileDataType; safecall;
    procedure _Set_MobileData(const pRetVal: IMobileDataType); safecall;
    function Get_PaymentInstrumentType: WideString; safecall;
    procedure Set_PaymentInstrumentType(const pRetVal: WideString); safecall;
    function Get_xsdPaymentInstrumentDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPaymentInstrumentDataTypeInitFlag(pRetVal: WordBool); safecall;
    property CardData: ICardDataType read Get_CardData write _Set_CardData;
    property CheckData: ICheckDataType read Get_CheckData write _Set_CheckData;
    property MobileData: IMobileDataType read Get_MobileData write _Set_MobileData;
    property PaymentInstrumentType: WideString read Get_PaymentInstrumentType write Set_PaymentInstrumentType;
    property xsdPaymentInstrumentDataTypeInitFlag: WordBool read Get_xsdPaymentInstrumentDataTypeInitFlag write Set_xsdPaymentInstrumentDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPaymentInstrumentDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {70D0AB55-144D-4768-AD09-7FBA57253821}
// *********************************************************************//
  IPaymentInstrumentDataTypeDisp = dispinterface
    ['{70D0AB55-144D-4768-AD09-7FBA57253821}']
    property CardData: ICardDataType dispid 1;
    property CheckData: ICheckDataType dispid 3;
    property MobileData: IMobileDataType dispid 5;
    property PaymentInstrumentType: WideString dispid 7;
    property xsdPaymentInstrumentDataTypeInitFlag: WordBool dispid 9;
  end;

// *********************************************************************//
// Interface :   ICardDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B0C7F944-3BDB-4645-BA90-7F47191E84E9}
// *********************************************************************//
  ICardDataType = interface(IDispatch)
    ['{B0C7F944-3BDB-4645-BA90-7F47191E84E9}']
    function Get_ProtectedCardData: IContentInformationType; safecall;
    procedure _Set_ProtectedCardData(const pRetVal: IContentInformationType); safecall;
    function Get_SensitiveCardData: ISensitiveCardDataType; safecall;
    procedure _Set_SensitiveCardData(const pRetVal: ISensitiveCardDataType); safecall;
    function Get_AllowedProductCode: PSafeArray; safecall;
    procedure Set_AllowedProductCode(pRetVal: PSafeArray); safecall;
    function Get_AllowedProduct: PSafeArray; safecall;
    procedure Set_AllowedProduct(pRetVal: PSafeArray); safecall;
    function Get_PaymentToken: IPaymentTokenType; safecall;
    procedure _Set_PaymentToken(const pRetVal: IPaymentTokenType); safecall;
    function Get_CustomerOrder: PSafeArray; safecall;
    procedure Set_CustomerOrder(pRetVal: PSafeArray); safecall;
    function Get_PaymentBrand: WideString; safecall;
    procedure Set_PaymentBrand(const pRetVal: WideString); safecall;
    function Get_MaskedPAN: WideString; safecall;
    procedure Set_MaskedPAN(const pRetVal: WideString); safecall;
    function Get_PaymentAccountRef: WideString; safecall;
    procedure Set_PaymentAccountRef(const pRetVal: WideString); safecall;
    function Get_EntryMode: PSafeArray; safecall;
    procedure Set_EntryMode(pRetVal: PSafeArray); safecall;
    function Get_CardCountryCode: WideString; safecall;
    procedure Set_CardCountryCode(const pRetVal: WideString); safecall;
    function Get_xsdCardDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCardDataTypeInitFlag(pRetVal: WordBool); safecall;
    function AllowedProductCodeSize: Integer; safecall;
    function AllowedProductCodeGetItem(index: Integer): WideString; safecall;
    function AllowedProductCodeSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function AllowedProductCodeAddItem(const Value: WideString): WordBool; safecall;
    function AllowedProductCodeRemoveItem(index: Integer): WordBool; safecall;
    function AllowedProductSize: Integer; safecall;
    function AllowedProductGetItem(index: Integer): IAllowedProductType; safecall;
    function AllowedProductSetItem(index: Integer; const Value: IAllowedProductType): WordBool; safecall;
    function AllowedProductAddItem(const Value: IAllowedProductType): WordBool; safecall;
    function AllowedProductRemoveItem(index: Integer): WordBool; safecall;
    function CustomerOrderSize: Integer; safecall;
    function CustomerOrderGetItem(index: Integer): ICustomerOrderType; safecall;
    function CustomerOrderSetItem(index: Integer; const Value: ICustomerOrderType): WordBool; safecall;
    function CustomerOrderAddItem(const Value: ICustomerOrderType): WordBool; safecall;
    function CustomerOrderRemoveItem(index: Integer): WordBool; safecall;
    function EntryModeSize: Integer; safecall;
    function EntryModeGetItem(index: Integer): WideString; safecall;
    function EntryModeSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function EntryModeAddItem(const Value: WideString): WordBool; safecall;
    function EntryModeRemoveItem(index: Integer): WordBool; safecall;
    property ProtectedCardData: IContentInformationType read Get_ProtectedCardData write _Set_ProtectedCardData;
    property SensitiveCardData: ISensitiveCardDataType read Get_SensitiveCardData write _Set_SensitiveCardData;
    property AllowedProductCode: PSafeArray read Get_AllowedProductCode write Set_AllowedProductCode;
    property AllowedProduct: PSafeArray read Get_AllowedProduct write Set_AllowedProduct;
    property PaymentToken: IPaymentTokenType read Get_PaymentToken write _Set_PaymentToken;
    property CustomerOrder: PSafeArray read Get_CustomerOrder write Set_CustomerOrder;
    property PaymentBrand: WideString read Get_PaymentBrand write Set_PaymentBrand;
    property MaskedPAN: WideString read Get_MaskedPAN write Set_MaskedPAN;
    property PaymentAccountRef: WideString read Get_PaymentAccountRef write Set_PaymentAccountRef;
    property EntryMode: PSafeArray read Get_EntryMode write Set_EntryMode;
    property CardCountryCode: WideString read Get_CardCountryCode write Set_CardCountryCode;
    property xsdCardDataTypeInitFlag: WordBool read Get_xsdCardDataTypeInitFlag write Set_xsdCardDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICardDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B0C7F944-3BDB-4645-BA90-7F47191E84E9}
// *********************************************************************//
  ICardDataTypeDisp = dispinterface
    ['{B0C7F944-3BDB-4645-BA90-7F47191E84E9}']
    property ProtectedCardData: IContentInformationType dispid 1;
    property SensitiveCardData: ISensitiveCardDataType dispid 3;
    property AllowedProductCode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property AllowedProduct: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 7;
    property PaymentToken: IPaymentTokenType dispid 9;
    property CustomerOrder: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 11;
    property PaymentBrand: WideString dispid 13;
    property MaskedPAN: WideString dispid 15;
    property PaymentAccountRef: WideString dispid 17;
    property EntryMode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 19;
    property CardCountryCode: WideString dispid 21;
    property xsdCardDataTypeInitFlag: WordBool dispid 23;
    function AllowedProductCodeSize: Integer; dispid 24;
    function AllowedProductCodeGetItem(index: Integer): WideString; dispid 25;
    function AllowedProductCodeSetItem(index: Integer; const Value: WideString): WordBool; dispid 26;
    function AllowedProductCodeAddItem(const Value: WideString): WordBool; dispid 27;
    function AllowedProductCodeRemoveItem(index: Integer): WordBool; dispid 28;
    function AllowedProductSize: Integer; dispid 29;
    function AllowedProductGetItem(index: Integer): IAllowedProductType; dispid 30;
    function AllowedProductSetItem(index: Integer; const Value: IAllowedProductType): WordBool; dispid 31;
    function AllowedProductAddItem(const Value: IAllowedProductType): WordBool; dispid 32;
    function AllowedProductRemoveItem(index: Integer): WordBool; dispid 33;
    function CustomerOrderSize: Integer; dispid 34;
    function CustomerOrderGetItem(index: Integer): ICustomerOrderType; dispid 35;
    function CustomerOrderSetItem(index: Integer; const Value: ICustomerOrderType): WordBool; dispid 36;
    function CustomerOrderAddItem(const Value: ICustomerOrderType): WordBool; dispid 37;
    function CustomerOrderRemoveItem(index: Integer): WordBool; dispid 38;
    function EntryModeSize: Integer; dispid 39;
    function EntryModeGetItem(index: Integer): WideString; dispid 40;
    function EntryModeSetItem(index: Integer; const Value: WideString): WordBool; dispid 41;
    function EntryModeAddItem(const Value: WideString): WordBool; dispid 42;
    function EntryModeRemoveItem(index: Integer): WordBool; dispid 43;
  end;

// *********************************************************************//
// Interface :   IContentInformationType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {496C06D8-9D26-4C8C-9C26-402A7034394C}
// *********************************************************************//
  IContentInformationType = interface(IDispatch)
    ['{496C06D8-9D26-4C8C-9C26-402A7034394C}']
    function Get_Item: OleVariant; safecall;
    procedure _Set_Item(pRetVal: OleVariant); safecall;
    function Get_ContentType: WideString; safecall;
    procedure Set_ContentType(const pRetVal: WideString); safecall;
    function Get_xsdContentInformationTypeInitFlag: WordBool; safecall;
    procedure Set_xsdContentInformationTypeInitFlag(pRetVal: WordBool); safecall;
    property Item: OleVariant read Get_Item write _Set_Item;
    property ContentType: WideString read Get_ContentType write Set_ContentType;
    property xsdContentInformationTypeInitFlag: WordBool read Get_xsdContentInformationTypeInitFlag write Set_xsdContentInformationTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IContentInformationTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {496C06D8-9D26-4C8C-9C26-402A7034394C}
// *********************************************************************//
  IContentInformationTypeDisp = dispinterface
    ['{496C06D8-9D26-4C8C-9C26-402A7034394C}']
    property Item: OleVariant dispid 1;
    property ContentType: WideString dispid 3;
    property xsdContentInformationTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IAuthenticatedDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F30D7BD3-0DFD-4ED7-AB64-9D8CE4D969D3}
// *********************************************************************//
  IAuthenticatedDataType = interface(IDispatch)
    ['{F30D7BD3-0DFD-4ED7-AB64-9D8CE4D969D3}']
    function Get_Items: PSafeArray; safecall;
    procedure Set_Items(pRetVal: PSafeArray); safecall;
    function Get_MACAlgorithm: IAlgorithmIdentifier; safecall;
    procedure _Set_MACAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
    function Get_EncapsulatedContent: IEncapsulatedContentType; safecall;
    procedure _Set_EncapsulatedContent(const pRetVal: IEncapsulatedContentType); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_MAC: PSafeArray; safecall;
    procedure Set_MAC(pRetVal: PSafeArray); safecall;
    function Get_xsdAuthenticatedDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdAuthenticatedDataTypeInitFlag(pRetVal: WordBool); safecall;
    function ItemsSize: Integer; safecall;
    function ItemsGetItem(index: Integer): OleVariant; safecall;
    function ItemsSetItem(index: Integer; Value: OleVariant): WordBool; safecall;
    function ItemsAddItem(Value: OleVariant): WordBool; safecall;
    function ItemsRemoveItem(index: Integer): WordBool; safecall;
    function MACSize: Integer; safecall;
    function MACGetItem(index: Integer): Byte; safecall;
    function MACSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function MACAddItem(Value: Byte): WordBool; safecall;
    function MACRemoveItem(index: Integer): WordBool; safecall;
    property Items: PSafeArray read Get_Items write Set_Items;
    property MACAlgorithm: IAlgorithmIdentifier read Get_MACAlgorithm write _Set_MACAlgorithm;
    property EncapsulatedContent: IEncapsulatedContentType read Get_EncapsulatedContent write _Set_EncapsulatedContent;
    property Version: WideString read Get_Version write Set_Version;
    property MAC: PSafeArray read Get_MAC write Set_MAC;
    property xsdAuthenticatedDataTypeInitFlag: WordBool read Get_xsdAuthenticatedDataTypeInitFlag write Set_xsdAuthenticatedDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IAuthenticatedDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F30D7BD3-0DFD-4ED7-AB64-9D8CE4D969D3}
// *********************************************************************//
  IAuthenticatedDataTypeDisp = dispinterface
    ['{F30D7BD3-0DFD-4ED7-AB64-9D8CE4D969D3}']
    property Items: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property MACAlgorithm: IAlgorithmIdentifier dispid 4;
    property EncapsulatedContent: IEncapsulatedContentType dispid 6;
    property Version: WideString dispid 8;
    property MAC: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 10;
    property xsdAuthenticatedDataTypeInitFlag: WordBool dispid 12;
    function ItemsSize: Integer; dispid 13;
    function ItemsGetItem(index: Integer): OleVariant; dispid 14;
    function ItemsSetItem(index: Integer; Value: OleVariant): WordBool; dispid 15;
    function ItemsAddItem(Value: OleVariant): WordBool; dispid 16;
    function ItemsRemoveItem(index: Integer): WordBool; dispid 17;
    function MACSize: Integer; dispid 18;
    function MACGetItem(index: Integer): Byte; dispid 19;
    function MACSetItem(index: Integer; Value: Byte): WordBool; dispid 20;
    function MACAddItem(Value: Byte): WordBool; dispid 21;
    function MACRemoveItem(index: Integer): WordBool; dispid 22;
  end;

// *********************************************************************//
// Interface :   IKEKType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4E272660-B3E8-4835-B9BE-F51027F7ED66}
// *********************************************************************//
  IKEKType = interface(IDispatch)
    ['{4E272660-B3E8-4835-B9BE-F51027F7ED66}']
    function Get_KEKIdentifier: IKEKIdentifierType; safecall;
    procedure _Set_KEKIdentifier(const pRetVal: IKEKIdentifierType); safecall;
    function Get_KeyEncryptionAlgorithm: IAlgorithmIdentifier; safecall;
    procedure _Set_KeyEncryptionAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_EncryptedKey: PSafeArray; safecall;
    procedure Set_EncryptedKey(pRetVal: PSafeArray); safecall;
    function Get_xsdKEKTypeInitFlag: WordBool; safecall;
    procedure Set_xsdKEKTypeInitFlag(pRetVal: WordBool); safecall;
    function EncryptedKeySize: Integer; safecall;
    function EncryptedKeyGetItem(index: Integer): Byte; safecall;
    function EncryptedKeySetItem(index: Integer; Value: Byte): WordBool; safecall;
    function EncryptedKeyAddItem(Value: Byte): WordBool; safecall;
    function EncryptedKeyRemoveItem(index: Integer): WordBool; safecall;
    property KEKIdentifier: IKEKIdentifierType read Get_KEKIdentifier write _Set_KEKIdentifier;
    property KeyEncryptionAlgorithm: IAlgorithmIdentifier read Get_KeyEncryptionAlgorithm write _Set_KeyEncryptionAlgorithm;
    property Version: WideString read Get_Version write Set_Version;
    property EncryptedKey: PSafeArray read Get_EncryptedKey write Set_EncryptedKey;
    property xsdKEKTypeInitFlag: WordBool read Get_xsdKEKTypeInitFlag write Set_xsdKEKTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IKEKTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4E272660-B3E8-4835-B9BE-F51027F7ED66}
// *********************************************************************//
  IKEKTypeDisp = dispinterface
    ['{4E272660-B3E8-4835-B9BE-F51027F7ED66}']
    property KEKIdentifier: IKEKIdentifierType dispid 2;
    property KeyEncryptionAlgorithm: IAlgorithmIdentifier dispid 4;
    property Version: WideString dispid 6;
    property EncryptedKey: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 8;
    property xsdKEKTypeInitFlag: WordBool dispid 10;
    function EncryptedKeySize: Integer; dispid 11;
    function EncryptedKeyGetItem(index: Integer): Byte; dispid 12;
    function EncryptedKeySetItem(index: Integer; Value: Byte): WordBool; dispid 13;
    function EncryptedKeyAddItem(Value: Byte): WordBool; dispid 14;
    function EncryptedKeyRemoveItem(index: Integer): WordBool; dispid 15;
  end;

// *********************************************************************//
// Interface :   IKEKIdentifierType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2D809DC5-9852-4B1C-A0A9-DCF5F6BF9D4F}
// *********************************************************************//
  IKEKIdentifierType = interface(IDispatch)
    ['{2D809DC5-9852-4B1C-A0A9-DCF5F6BF9D4F}']
    function Get_KeyIdentifier: WideString; safecall;
    procedure Set_KeyIdentifier(const pRetVal: WideString); safecall;
    function Get_KeyVersion: WideString; safecall;
    procedure Set_KeyVersion(const pRetVal: WideString); safecall;
    function Get_DerivationIdentifier: PSafeArray; safecall;
    procedure Set_DerivationIdentifier(pRetVal: PSafeArray); safecall;
    function Get_xsdKEKIdentifierTypeInitFlag: WordBool; safecall;
    procedure Set_xsdKEKIdentifierTypeInitFlag(pRetVal: WordBool); safecall;
    function DerivationIdentifierSize: Integer; safecall;
    function DerivationIdentifierGetItem(index: Integer): Byte; safecall;
    function DerivationIdentifierSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function DerivationIdentifierAddItem(Value: Byte): WordBool; safecall;
    function DerivationIdentifierRemoveItem(index: Integer): WordBool; safecall;
    property KeyIdentifier: WideString read Get_KeyIdentifier write Set_KeyIdentifier;
    property KeyVersion: WideString read Get_KeyVersion write Set_KeyVersion;
    property DerivationIdentifier: PSafeArray read Get_DerivationIdentifier write Set_DerivationIdentifier;
    property xsdKEKIdentifierTypeInitFlag: WordBool read Get_xsdKEKIdentifierTypeInitFlag write Set_xsdKEKIdentifierTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IKEKIdentifierTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2D809DC5-9852-4B1C-A0A9-DCF5F6BF9D4F}
// *********************************************************************//
  IKEKIdentifierTypeDisp = dispinterface
    ['{2D809DC5-9852-4B1C-A0A9-DCF5F6BF9D4F}']
    property KeyIdentifier: WideString dispid 1;
    property KeyVersion: WideString dispid 3;
    property DerivationIdentifier: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property xsdKEKIdentifierTypeInitFlag: WordBool dispid 7;
    function DerivationIdentifierSize: Integer; dispid 8;
    function DerivationIdentifierGetItem(index: Integer): Byte; dispid 9;
    function DerivationIdentifierSetItem(index: Integer; Value: Byte): WordBool; dispid 10;
    function DerivationIdentifierAddItem(Value: Byte): WordBool; dispid 11;
    function DerivationIdentifierRemoveItem(index: Integer): WordBool; dispid 12;
  end;

// *********************************************************************//
// Interface :   IAlgorithmIdentifier
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {ED60A7C1-9957-4F5A-9073-68236A422D32}
// *********************************************************************//
  IAlgorithmIdentifier = interface(IDispatch)
    ['{ED60A7C1-9957-4F5A-9073-68236A422D32}']
    function Get_Parameter: IParameterType; safecall;
    procedure _Set_Parameter(const pRetVal: IParameterType); safecall;
    function Get_Algorithm: WideString; safecall;
    procedure Set_Algorithm(const pRetVal: WideString); safecall;
    function Get_xsdAlgorithmIdentifierInitFlag: WordBool; safecall;
    procedure Set_xsdAlgorithmIdentifierInitFlag(pRetVal: WordBool); safecall;
    property Parameter: IParameterType read Get_Parameter write _Set_Parameter;
    property Algorithm: WideString read Get_Algorithm write Set_Algorithm;
    property xsdAlgorithmIdentifierInitFlag: WordBool read Get_xsdAlgorithmIdentifierInitFlag write Set_xsdAlgorithmIdentifierInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IAlgorithmIdentifierDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {ED60A7C1-9957-4F5A-9073-68236A422D32}
// *********************************************************************//
  IAlgorithmIdentifierDisp = dispinterface
    ['{ED60A7C1-9957-4F5A-9073-68236A422D32}']
    property Parameter: IParameterType dispid 1;
    property Algorithm: WideString dispid 3;
    property xsdAlgorithmIdentifierInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IParameterType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AEA8B01F-DCA4-46C1-9769-E77140B72D0D}
// *********************************************************************//
  IParameterType = interface(IDispatch)
    ['{AEA8B01F-DCA4-46C1-9769-E77140B72D0D}']
    function Get_InitialisationVector: PSafeArray; safecall;
    procedure Set_InitialisationVector(pRetVal: PSafeArray); safecall;
    function Get_xsdParameterTypeInitFlag: WordBool; safecall;
    procedure Set_xsdParameterTypeInitFlag(pRetVal: WordBool); safecall;
    function InitialisationVectorSize: Integer; safecall;
    function InitialisationVectorGetItem(index: Integer): Byte; safecall;
    function InitialisationVectorSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function InitialisationVectorAddItem(Value: Byte): WordBool; safecall;
    function InitialisationVectorRemoveItem(index: Integer): WordBool; safecall;
    property InitialisationVector: PSafeArray read Get_InitialisationVector write Set_InitialisationVector;
    property xsdParameterTypeInitFlag: WordBool read Get_xsdParameterTypeInitFlag write Set_xsdParameterTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IParameterTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AEA8B01F-DCA4-46C1-9769-E77140B72D0D}
// *********************************************************************//
  IParameterTypeDisp = dispinterface
    ['{AEA8B01F-DCA4-46C1-9769-E77140B72D0D}']
    property InitialisationVector: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property xsdParameterTypeInitFlag: WordBool dispid 3;
    function InitialisationVectorSize: Integer; dispid 4;
    function InitialisationVectorGetItem(index: Integer): Byte; dispid 5;
    function InitialisationVectorSetItem(index: Integer; Value: Byte): WordBool; dispid 6;
    function InitialisationVectorAddItem(Value: Byte): WordBool; dispid 7;
    function InitialisationVectorRemoveItem(index: Integer): WordBool; dispid 8;
  end;

// *********************************************************************//
// Interface :   IKeyTransportType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A66313F5-E913-4A5F-9750-CC5BCCED136A}
// *********************************************************************//
  IKeyTransportType = interface(IDispatch)
    ['{A66313F5-E913-4A5F-9750-CC5BCCED136A}']
    function Get_RecipientIdentifier: IRecipientIdentifierType; safecall;
    procedure _Set_RecipientIdentifier(const pRetVal: IRecipientIdentifierType); safecall;
    function Get_KeyEncryptionAlgorithm: IAlgorithmIdentifier; safecall;
    procedure _Set_KeyEncryptionAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_EncryptedKey: PSafeArray; safecall;
    procedure Set_EncryptedKey(pRetVal: PSafeArray); safecall;
    function Get_xsdKeyTransportTypeInitFlag: WordBool; safecall;
    procedure Set_xsdKeyTransportTypeInitFlag(pRetVal: WordBool); safecall;
    function EncryptedKeySize: Integer; safecall;
    function EncryptedKeyGetItem(index: Integer): Byte; safecall;
    function EncryptedKeySetItem(index: Integer; Value: Byte): WordBool; safecall;
    function EncryptedKeyAddItem(Value: Byte): WordBool; safecall;
    function EncryptedKeyRemoveItem(index: Integer): WordBool; safecall;
    property RecipientIdentifier: IRecipientIdentifierType read Get_RecipientIdentifier write _Set_RecipientIdentifier;
    property KeyEncryptionAlgorithm: IAlgorithmIdentifier read Get_KeyEncryptionAlgorithm write _Set_KeyEncryptionAlgorithm;
    property Version: WideString read Get_Version write Set_Version;
    property EncryptedKey: PSafeArray read Get_EncryptedKey write Set_EncryptedKey;
    property xsdKeyTransportTypeInitFlag: WordBool read Get_xsdKeyTransportTypeInitFlag write Set_xsdKeyTransportTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IKeyTransportTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A66313F5-E913-4A5F-9750-CC5BCCED136A}
// *********************************************************************//
  IKeyTransportTypeDisp = dispinterface
    ['{A66313F5-E913-4A5F-9750-CC5BCCED136A}']
    property RecipientIdentifier: IRecipientIdentifierType dispid 2;
    property KeyEncryptionAlgorithm: IAlgorithmIdentifier dispid 4;
    property Version: WideString dispid 6;
    property EncryptedKey: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 8;
    property xsdKeyTransportTypeInitFlag: WordBool dispid 10;
    function EncryptedKeySize: Integer; dispid 11;
    function EncryptedKeyGetItem(index: Integer): Byte; dispid 12;
    function EncryptedKeySetItem(index: Integer; Value: Byte): WordBool; dispid 13;
    function EncryptedKeyAddItem(Value: Byte): WordBool; dispid 14;
    function EncryptedKeyRemoveItem(index: Integer): WordBool; dispid 15;
  end;

// *********************************************************************//
// Interface :   IRecipientIdentifierType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {198F539D-2C07-4D91-B8BE-1531F033F6FF}
// *********************************************************************//
  IRecipientIdentifierType = interface(IDispatch)
    ['{198F539D-2C07-4D91-B8BE-1531F033F6FF}']
    function Get_IssuerAndSerialNumber: IIssuerAndSerialNumberType; safecall;
    procedure _Set_IssuerAndSerialNumber(const pRetVal: IIssuerAndSerialNumberType); safecall;
    function Get_xsdRecipientIdentifierTypeInitFlag: WordBool; safecall;
    procedure Set_xsdRecipientIdentifierTypeInitFlag(pRetVal: WordBool); safecall;
    property IssuerAndSerialNumber: IIssuerAndSerialNumberType read Get_IssuerAndSerialNumber write _Set_IssuerAndSerialNumber;
    property xsdRecipientIdentifierTypeInitFlag: WordBool read Get_xsdRecipientIdentifierTypeInitFlag write Set_xsdRecipientIdentifierTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IRecipientIdentifierTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {198F539D-2C07-4D91-B8BE-1531F033F6FF}
// *********************************************************************//
  IRecipientIdentifierTypeDisp = dispinterface
    ['{198F539D-2C07-4D91-B8BE-1531F033F6FF}']
    property IssuerAndSerialNumber: IIssuerAndSerialNumberType dispid 1;
    property xsdRecipientIdentifierTypeInitFlag: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface :   IIssuerAndSerialNumberType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C46779EE-586D-4F72-AD48-E86FD51A1871}
// *********************************************************************//
  IIssuerAndSerialNumberType = interface(IDispatch)
    ['{C46779EE-586D-4F72-AD48-E86FD51A1871}']
    function Get_Issuer: PSafeArray; safecall;
    procedure Set_Issuer(pRetVal: PSafeArray); safecall;
    function Get_SerialNumber: WideString; safecall;
    procedure Set_SerialNumber(const pRetVal: WideString); safecall;
    function Get_xsdIssuerAndSerialNumberTypeInitFlag: WordBool; safecall;
    procedure Set_xsdIssuerAndSerialNumberTypeInitFlag(pRetVal: WordBool); safecall;
    function IssuerSize: Integer; safecall;
    function IssuerGetItem(index: Integer): IRelativeDistinguishedNameType; safecall;
    function IssuerSetItem(index: Integer; const Value: IRelativeDistinguishedNameType): WordBool; safecall;
    function IssuerAddItem(const Value: IRelativeDistinguishedNameType): WordBool; safecall;
    function IssuerRemoveItem(index: Integer): WordBool; safecall;
    property Issuer: PSafeArray read Get_Issuer write Set_Issuer;
    property SerialNumber: WideString read Get_SerialNumber write Set_SerialNumber;
    property xsdIssuerAndSerialNumberTypeInitFlag: WordBool read Get_xsdIssuerAndSerialNumberTypeInitFlag write Set_xsdIssuerAndSerialNumberTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IIssuerAndSerialNumberTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C46779EE-586D-4F72-AD48-E86FD51A1871}
// *********************************************************************//
  IIssuerAndSerialNumberTypeDisp = dispinterface
    ['{C46779EE-586D-4F72-AD48-E86FD51A1871}']
    property Issuer: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property SerialNumber: WideString dispid 3;
    property xsdIssuerAndSerialNumberTypeInitFlag: WordBool dispid 5;
    function IssuerSize: Integer; dispid 6;
    function IssuerGetItem(index: Integer): IRelativeDistinguishedNameType; dispid 7;
    function IssuerSetItem(index: Integer; const Value: IRelativeDistinguishedNameType): WordBool; dispid 8;
    function IssuerAddItem(const Value: IRelativeDistinguishedNameType): WordBool; dispid 9;
    function IssuerRemoveItem(index: Integer): WordBool; dispid 10;
  end;

// *********************************************************************//
// Interface :   IRelativeDistinguishedNameType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4C93726A-6BB7-45AC-AF24-AFE53C35D20C}
// *********************************************************************//
  IRelativeDistinguishedNameType = interface(IDispatch)
    ['{4C93726A-6BB7-45AC-AF24-AFE53C35D20C}']
    function Get_AttributeType: WideString; safecall;
    procedure Set_AttributeType(const pRetVal: WideString); safecall;
    function Get_AttributeValue: WideString; safecall;
    procedure Set_AttributeValue(const pRetVal: WideString); safecall;
    function Get_xsdRelativeDistinguishedNameTypeInitFlag: WordBool; safecall;
    procedure Set_xsdRelativeDistinguishedNameTypeInitFlag(pRetVal: WordBool); safecall;
    property AttributeType: WideString read Get_AttributeType write Set_AttributeType;
    property AttributeValue: WideString read Get_AttributeValue write Set_AttributeValue;
    property xsdRelativeDistinguishedNameTypeInitFlag: WordBool read Get_xsdRelativeDistinguishedNameTypeInitFlag write Set_xsdRelativeDistinguishedNameTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IRelativeDistinguishedNameTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4C93726A-6BB7-45AC-AF24-AFE53C35D20C}
// *********************************************************************//
  IRelativeDistinguishedNameTypeDisp = dispinterface
    ['{4C93726A-6BB7-45AC-AF24-AFE53C35D20C}']
    property AttributeType: WideString dispid 1;
    property AttributeValue: WideString dispid 3;
    property xsdRelativeDistinguishedNameTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IEncapsulatedContentType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C9B7E57E-6567-4B19-AB0B-FD4DC727C8A8}
// *********************************************************************//
  IEncapsulatedContentType = interface(IDispatch)
    ['{C9B7E57E-6567-4B19-AB0B-FD4DC727C8A8}']
    function Get_Content: PSafeArray; safecall;
    procedure Set_Content(pRetVal: PSafeArray); safecall;
    function Get_ContentType: WideString; safecall;
    procedure Set_ContentType(const pRetVal: WideString); safecall;
    function Get_xsdEncapsulatedContentTypeInitFlag: WordBool; safecall;
    procedure Set_xsdEncapsulatedContentTypeInitFlag(pRetVal: WordBool); safecall;
    function ContentSize: Integer; safecall;
    function ContentGetItem(index: Integer): Byte; safecall;
    function ContentSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function ContentAddItem(Value: Byte): WordBool; safecall;
    function ContentRemoveItem(index: Integer): WordBool; safecall;
    property Content: PSafeArray read Get_Content write Set_Content;
    property ContentType: WideString read Get_ContentType write Set_ContentType;
    property xsdEncapsulatedContentTypeInitFlag: WordBool read Get_xsdEncapsulatedContentTypeInitFlag write Set_xsdEncapsulatedContentTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IEncapsulatedContentTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C9B7E57E-6567-4B19-AB0B-FD4DC727C8A8}
// *********************************************************************//
  IEncapsulatedContentTypeDisp = dispinterface
    ['{C9B7E57E-6567-4B19-AB0B-FD4DC727C8A8}']
    property Content: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property ContentType: WideString dispid 3;
    property xsdEncapsulatedContentTypeInitFlag: WordBool dispid 5;
    function ContentSize: Integer; dispid 6;
    function ContentGetItem(index: Integer): Byte; dispid 7;
    function ContentSetItem(index: Integer; Value: Byte): WordBool; dispid 8;
    function ContentAddItem(Value: Byte): WordBool; dispid 9;
    function ContentRemoveItem(index: Integer): WordBool; dispid 10;
  end;

// *********************************************************************//
// Interface :   IDigestedDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2F30C6A7-E730-4331-9943-FB4E4AF161A0}
// *********************************************************************//
  IDigestedDataType = interface(IDispatch)
    ['{2F30C6A7-E730-4331-9943-FB4E4AF161A0}']
    function Get_DigestAlgorithm: IAlgorithmIdentifier; safecall;
    procedure _Set_DigestAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
    function Get_EncapsulatedContent: IEncapsulatedContentType; safecall;
    procedure _Set_EncapsulatedContent(const pRetVal: IEncapsulatedContentType); safecall;
    function Get_Digest: PSafeArray; safecall;
    procedure Set_Digest(pRetVal: PSafeArray); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_xsdDigestedDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdDigestedDataTypeInitFlag(pRetVal: WordBool); safecall;
    function DigestSize: Integer; safecall;
    function DigestGetItem(index: Integer): Byte; safecall;
    function DigestSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function DigestAddItem(Value: Byte): WordBool; safecall;
    function DigestRemoveItem(index: Integer): WordBool; safecall;
    property DigestAlgorithm: IAlgorithmIdentifier read Get_DigestAlgorithm write _Set_DigestAlgorithm;
    property EncapsulatedContent: IEncapsulatedContentType read Get_EncapsulatedContent write _Set_EncapsulatedContent;
    property Digest: PSafeArray read Get_Digest write Set_Digest;
    property Version: WideString read Get_Version write Set_Version;
    property xsdDigestedDataTypeInitFlag: WordBool read Get_xsdDigestedDataTypeInitFlag write Set_xsdDigestedDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IDigestedDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2F30C6A7-E730-4331-9943-FB4E4AF161A0}
// *********************************************************************//
  IDigestedDataTypeDisp = dispinterface
    ['{2F30C6A7-E730-4331-9943-FB4E4AF161A0}']
    property DigestAlgorithm: IAlgorithmIdentifier dispid 1;
    property EncapsulatedContent: IEncapsulatedContentType dispid 3;
    property Digest: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property Version: WideString dispid 7;
    property xsdDigestedDataTypeInitFlag: WordBool dispid 9;
    function DigestSize: Integer; dispid 10;
    function DigestGetItem(index: Integer): Byte; dispid 11;
    function DigestSetItem(index: Integer; Value: Byte): WordBool; dispid 12;
    function DigestAddItem(Value: Byte): WordBool; dispid 13;
    function DigestRemoveItem(index: Integer): WordBool; dispid 14;
  end;

// *********************************************************************//
// Interface :   IEnvelopedDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E39FEB83-EF7D-4039-A06A-EBE8C53D79A0}
// *********************************************************************//
  IEnvelopedDataType = interface(IDispatch)
    ['{E39FEB83-EF7D-4039-A06A-EBE8C53D79A0}']
    function Get_Items: PSafeArray; safecall;
    procedure Set_Items(pRetVal: PSafeArray); safecall;
    function Get_EncryptedContent: IEncryptedContentType; safecall;
    procedure _Set_EncryptedContent(const pRetVal: IEncryptedContentType); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_xsdEnvelopedDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdEnvelopedDataTypeInitFlag(pRetVal: WordBool); safecall;
    function ItemsSize: Integer; safecall;
    function ItemsGetItem(index: Integer): OleVariant; safecall;
    function ItemsSetItem(index: Integer; Value: OleVariant): WordBool; safecall;
    function ItemsAddItem(Value: OleVariant): WordBool; safecall;
    function ItemsRemoveItem(index: Integer): WordBool; safecall;
    property Items: PSafeArray read Get_Items write Set_Items;
    property EncryptedContent: IEncryptedContentType read Get_EncryptedContent write _Set_EncryptedContent;
    property Version: WideString read Get_Version write Set_Version;
    property xsdEnvelopedDataTypeInitFlag: WordBool read Get_xsdEnvelopedDataTypeInitFlag write Set_xsdEnvelopedDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IEnvelopedDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E39FEB83-EF7D-4039-A06A-EBE8C53D79A0}
// *********************************************************************//
  IEnvelopedDataTypeDisp = dispinterface
    ['{E39FEB83-EF7D-4039-A06A-EBE8C53D79A0}']
    property Items: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property EncryptedContent: IEncryptedContentType dispid 4;
    property Version: WideString dispid 6;
    property xsdEnvelopedDataTypeInitFlag: WordBool dispid 8;
    function ItemsSize: Integer; dispid 9;
    function ItemsGetItem(index: Integer): OleVariant; dispid 10;
    function ItemsSetItem(index: Integer; Value: OleVariant): WordBool; dispid 11;
    function ItemsAddItem(Value: OleVariant): WordBool; dispid 12;
    function ItemsRemoveItem(index: Integer): WordBool; dispid 13;
  end;

// *********************************************************************//
// Interface :   IEncryptedContentType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0E704104-C20E-493E-BD6D-9609D4F842F9}
// *********************************************************************//
  IEncryptedContentType = interface(IDispatch)
    ['{0E704104-C20E-493E-BD6D-9609D4F842F9}']
    function Get_ContentEncryptionAlgorithm: IAlgorithmIdentifier; safecall;
    procedure _Set_ContentEncryptionAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
    function Get_EncryptedData: PSafeArray; safecall;
    procedure Set_EncryptedData(pRetVal: PSafeArray); safecall;
    function Get_ContentType: WideString; safecall;
    procedure Set_ContentType(const pRetVal: WideString); safecall;
    function Get_xsdEncryptedContentTypeInitFlag: WordBool; safecall;
    procedure Set_xsdEncryptedContentTypeInitFlag(pRetVal: WordBool); safecall;
    function EncryptedDataSize: Integer; safecall;
    function EncryptedDataGetItem(index: Integer): Byte; safecall;
    function EncryptedDataSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function EncryptedDataAddItem(Value: Byte): WordBool; safecall;
    function EncryptedDataRemoveItem(index: Integer): WordBool; safecall;
    property ContentEncryptionAlgorithm: IAlgorithmIdentifier read Get_ContentEncryptionAlgorithm write _Set_ContentEncryptionAlgorithm;
    property EncryptedData: PSafeArray read Get_EncryptedData write Set_EncryptedData;
    property ContentType: WideString read Get_ContentType write Set_ContentType;
    property xsdEncryptedContentTypeInitFlag: WordBool read Get_xsdEncryptedContentTypeInitFlag write Set_xsdEncryptedContentTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IEncryptedContentTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0E704104-C20E-493E-BD6D-9609D4F842F9}
// *********************************************************************//
  IEncryptedContentTypeDisp = dispinterface
    ['{0E704104-C20E-493E-BD6D-9609D4F842F9}']
    property ContentEncryptionAlgorithm: IAlgorithmIdentifier dispid 1;
    property EncryptedData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property ContentType: WideString dispid 5;
    property xsdEncryptedContentTypeInitFlag: WordBool dispid 7;
    function EncryptedDataSize: Integer; dispid 8;
    function EncryptedDataGetItem(index: Integer): Byte; dispid 9;
    function EncryptedDataSetItem(index: Integer; Value: Byte): WordBool; dispid 10;
    function EncryptedDataAddItem(Value: Byte): WordBool; dispid 11;
    function EncryptedDataRemoveItem(index: Integer): WordBool; dispid 12;
  end;

// *********************************************************************//
// Interface :   INamedKeyEncryptedDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {61399485-CB3F-4976-9008-35BF682B8CED}
// *********************************************************************//
  INamedKeyEncryptedDataType = interface(IDispatch)
    ['{61399485-CB3F-4976-9008-35BF682B8CED}']
    function Get_KeyName: WideString; safecall;
    procedure Set_KeyName(const pRetVal: WideString); safecall;
    function Get_EncryptedContent: IEncryptedContentType; safecall;
    procedure _Set_EncryptedContent(const pRetVal: IEncryptedContentType); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_xsdNamedKeyEncryptedDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdNamedKeyEncryptedDataTypeInitFlag(pRetVal: WordBool); safecall;
    property KeyName: WideString read Get_KeyName write Set_KeyName;
    property EncryptedContent: IEncryptedContentType read Get_EncryptedContent write _Set_EncryptedContent;
    property Version: WideString read Get_Version write Set_Version;
    property xsdNamedKeyEncryptedDataTypeInitFlag: WordBool read Get_xsdNamedKeyEncryptedDataTypeInitFlag write Set_xsdNamedKeyEncryptedDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    INamedKeyEncryptedDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {61399485-CB3F-4976-9008-35BF682B8CED}
// *********************************************************************//
  INamedKeyEncryptedDataTypeDisp = dispinterface
    ['{61399485-CB3F-4976-9008-35BF682B8CED}']
    property KeyName: WideString dispid 2;
    property EncryptedContent: IEncryptedContentType dispid 4;
    property Version: WideString dispid 6;
    property xsdNamedKeyEncryptedDataTypeInitFlag: WordBool dispid 8;
  end;

// *********************************************************************//
// Interface :   ISignedDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E85A8492-A33B-4092-902B-04D78683A70A}
// *********************************************************************//
  ISignedDataType = interface(IDispatch)
    ['{E85A8492-A33B-4092-902B-04D78683A70A}']
    function Get_DigestAlgorithm: PSafeArray; safecall;
    procedure Set_DigestAlgorithm(pRetVal: PSafeArray); safecall;
    function Get_EncapsulatedContent: IEncapsulatedContentType; safecall;
    procedure _Set_EncapsulatedContent(const pRetVal: IEncapsulatedContentType); safecall;
    procedure GhostMethod_ISignedDataType_44_1; safecall;
    procedure GhostMethod_ISignedDataType_48_2; safecall;
    function Get_Signer: PSafeArray; safecall;
    procedure Set_Signer(pRetVal: PSafeArray); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_xsdSignedDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSignedDataTypeInitFlag(pRetVal: WordBool); safecall;
    function DigestAlgorithmSize: Integer; safecall;
    function DigestAlgorithmGetItem(index: Integer): IAlgorithmIdentifier; safecall;
    function DigestAlgorithmSetItem(index: Integer; const Value: IAlgorithmIdentifier): WordBool; safecall;
    function DigestAlgorithmAddItem(const Value: IAlgorithmIdentifier): WordBool; safecall;
    function DigestAlgorithmRemoveItem(index: Integer): WordBool; safecall;
    function SignerSize: Integer; safecall;
    function SignerGetItem(index: Integer): ISignerType; safecall;
    function SignerSetItem(index: Integer; const Value: ISignerType): WordBool; safecall;
    function SignerAddItem(const Value: ISignerType): WordBool; safecall;
    function SignerRemoveItem(index: Integer): WordBool; safecall;
    property DigestAlgorithm: PSafeArray read Get_DigestAlgorithm write Set_DigestAlgorithm;
    property EncapsulatedContent: IEncapsulatedContentType read Get_EncapsulatedContent write _Set_EncapsulatedContent;
    property Signer: PSafeArray read Get_Signer write Set_Signer;
    property Version: WideString read Get_Version write Set_Version;
    property xsdSignedDataTypeInitFlag: WordBool read Get_xsdSignedDataTypeInitFlag write Set_xsdSignedDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISignedDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E85A8492-A33B-4092-902B-04D78683A70A}
// *********************************************************************//
  ISignedDataTypeDisp = dispinterface
    ['{E85A8492-A33B-4092-902B-04D78683A70A}']
    property DigestAlgorithm: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property EncapsulatedContent: IEncapsulatedContentType dispid 4;
    procedure GhostMethod_ISignedDataType_44_1; dispid 1610743812;
    procedure GhostMethod_ISignedDataType_48_2; dispid 1610743813;
    property Signer: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 8;
    property Version: WideString dispid 10;
    property xsdSignedDataTypeInitFlag: WordBool dispid 12;
    function DigestAlgorithmSize: Integer; dispid 13;
    function DigestAlgorithmGetItem(index: Integer): IAlgorithmIdentifier; dispid 14;
    function DigestAlgorithmSetItem(index: Integer; const Value: IAlgorithmIdentifier): WordBool; dispid 15;
    function DigestAlgorithmAddItem(const Value: IAlgorithmIdentifier): WordBool; dispid 16;
    function DigestAlgorithmRemoveItem(index: Integer): WordBool; dispid 17;
    function SignerSize: Integer; dispid 18;
    function SignerGetItem(index: Integer): ISignerType; dispid 19;
    function SignerSetItem(index: Integer; const Value: ISignerType): WordBool; dispid 20;
    function SignerAddItem(const Value: ISignerType): WordBool; dispid 21;
    function SignerRemoveItem(index: Integer): WordBool; dispid 22;
  end;

// *********************************************************************//
// Interface :   ISignerType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4F518D77-9AFD-44E8-BEDE-1D9261C6F0AE}
// *********************************************************************//
  ISignerType = interface(IDispatch)
    ['{4F518D77-9AFD-44E8-BEDE-1D9261C6F0AE}']
    function Get_SignerIdentifier: ISignerIdentifierType; safecall;
    procedure _Set_SignerIdentifier(const pRetVal: ISignerIdentifierType); safecall;
    function Get_DigestAlgorithm: IAlgorithmIdentifier; safecall;
    procedure _Set_DigestAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
    function Get_SignatureAlgorithm: IAlgorithmIdentifier; safecall;
    procedure _Set_SignatureAlgorithm(const pRetVal: IAlgorithmIdentifier); safecall;
    function Get_Signature: PSafeArray; safecall;
    procedure Set_Signature(pRetVal: PSafeArray); safecall;
    function Get_Version: WideString; safecall;
    procedure Set_Version(const pRetVal: WideString); safecall;
    function Get_xsdSignerTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSignerTypeInitFlag(pRetVal: WordBool); safecall;
    function SignatureSize: Integer; safecall;
    function SignatureGetItem(index: Integer): Byte; safecall;
    function SignatureSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function SignatureAddItem(Value: Byte): WordBool; safecall;
    function SignatureRemoveItem(index: Integer): WordBool; safecall;
    property SignerIdentifier: ISignerIdentifierType read Get_SignerIdentifier write _Set_SignerIdentifier;
    property DigestAlgorithm: IAlgorithmIdentifier read Get_DigestAlgorithm write _Set_DigestAlgorithm;
    property SignatureAlgorithm: IAlgorithmIdentifier read Get_SignatureAlgorithm write _Set_SignatureAlgorithm;
    property Signature: PSafeArray read Get_Signature write Set_Signature;
    property Version: WideString read Get_Version write Set_Version;
    property xsdSignerTypeInitFlag: WordBool read Get_xsdSignerTypeInitFlag write Set_xsdSignerTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISignerTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4F518D77-9AFD-44E8-BEDE-1D9261C6F0AE}
// *********************************************************************//
  ISignerTypeDisp = dispinterface
    ['{4F518D77-9AFD-44E8-BEDE-1D9261C6F0AE}']
    property SignerIdentifier: ISignerIdentifierType dispid 2;
    property DigestAlgorithm: IAlgorithmIdentifier dispid 4;
    property SignatureAlgorithm: IAlgorithmIdentifier dispid 6;
    property Signature: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 8;
    property Version: WideString dispid 10;
    property xsdSignerTypeInitFlag: WordBool dispid 12;
    function SignatureSize: Integer; dispid 13;
    function SignatureGetItem(index: Integer): Byte; dispid 14;
    function SignatureSetItem(index: Integer; Value: Byte): WordBool; dispid 15;
    function SignatureAddItem(Value: Byte): WordBool; dispid 16;
    function SignatureRemoveItem(index: Integer): WordBool; dispid 17;
  end;

// *********************************************************************//
// Interface :   ISignerIdentifierType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {10A100BF-BAE5-409A-A95F-FC4263CEE4A5}
// *********************************************************************//
  ISignerIdentifierType = interface(IDispatch)
    ['{10A100BF-BAE5-409A-A95F-FC4263CEE4A5}']
    function Get_IssuerAndSerialNumber: IIssuerAndSerialNumberType; safecall;
    procedure _Set_IssuerAndSerialNumber(const pRetVal: IIssuerAndSerialNumberType); safecall;
    function Get_xsdSignerIdentifierTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSignerIdentifierTypeInitFlag(pRetVal: WordBool); safecall;
    property IssuerAndSerialNumber: IIssuerAndSerialNumberType read Get_IssuerAndSerialNumber write _Set_IssuerAndSerialNumber;
    property xsdSignerIdentifierTypeInitFlag: WordBool read Get_xsdSignerIdentifierTypeInitFlag write Set_xsdSignerIdentifierTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISignerIdentifierTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {10A100BF-BAE5-409A-A95F-FC4263CEE4A5}
// *********************************************************************//
  ISignerIdentifierTypeDisp = dispinterface
    ['{10A100BF-BAE5-409A-A95F-FC4263CEE4A5}']
    property IssuerAndSerialNumber: IIssuerAndSerialNumberType dispid 1;
    property xsdSignerIdentifierTypeInitFlag: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface :   ISensitiveCardDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1426F57D-637D-4F6A-A15B-18C6EEB5B00D}
// *********************************************************************//
  ISensitiveCardDataType = interface(IDispatch)
    ['{1426F57D-637D-4F6A-A15B-18C6EEB5B00D}']
    function Get_TrackData: PSafeArray; safecall;
    procedure Set_TrackData(pRetVal: PSafeArray); safecall;
    function Get_PAN: WideString; safecall;
    procedure Set_PAN(const pRetVal: WideString); safecall;
    function Get_CardSeqNumb: WideString; safecall;
    procedure Set_CardSeqNumb(const pRetVal: WideString); safecall;
    function Get_ExpiryDate: WideString; safecall;
    procedure Set_ExpiryDate(const pRetVal: WideString); safecall;
    function Get_xsdSensitiveCardDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSensitiveCardDataTypeInitFlag(pRetVal: WordBool); safecall;
    function TrackDataSize: Integer; safecall;
    function TrackDataGetItem(index: Integer): ITrackDataType; safecall;
    function TrackDataSetItem(index: Integer; const Value: ITrackDataType): WordBool; safecall;
    function TrackDataAddItem(const Value: ITrackDataType): WordBool; safecall;
    function TrackDataRemoveItem(index: Integer): WordBool; safecall;
    property TrackData: PSafeArray read Get_TrackData write Set_TrackData;
    property PAN: WideString read Get_PAN write Set_PAN;
    property CardSeqNumb: WideString read Get_CardSeqNumb write Set_CardSeqNumb;
    property ExpiryDate: WideString read Get_ExpiryDate write Set_ExpiryDate;
    property xsdSensitiveCardDataTypeInitFlag: WordBool read Get_xsdSensitiveCardDataTypeInitFlag write Set_xsdSensitiveCardDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISensitiveCardDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1426F57D-637D-4F6A-A15B-18C6EEB5B00D}
// *********************************************************************//
  ISensitiveCardDataTypeDisp = dispinterface
    ['{1426F57D-637D-4F6A-A15B-18C6EEB5B00D}']
    property TrackData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property PAN: WideString dispid 3;
    property CardSeqNumb: WideString dispid 5;
    property ExpiryDate: WideString dispid 7;
    property xsdSensitiveCardDataTypeInitFlag: WordBool dispid 9;
    function TrackDataSize: Integer; dispid 10;
    function TrackDataGetItem(index: Integer): ITrackDataType; dispid 11;
    function TrackDataSetItem(index: Integer; const Value: ITrackDataType): WordBool; dispid 12;
    function TrackDataAddItem(const Value: ITrackDataType): WordBool; dispid 13;
    function TrackDataRemoveItem(index: Integer): WordBool; dispid 14;
  end;

// *********************************************************************//
// Interface :   ITrackDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9F5C8443-2B7F-4D2C-9965-1B3E059B1CE1}
// *********************************************************************//
  ITrackDataType = interface(IDispatch)
    ['{9F5C8443-2B7F-4D2C-9965-1B3E059B1CE1}']
    function Get_TrackNumb: WideString; safecall;
    procedure Set_TrackNumb(const pRetVal: WideString); safecall;
    function Get_TrackFormat: WideString; safecall;
    procedure Set_TrackFormat(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_xsdTrackDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdTrackDataTypeInitFlag(pRetVal: WordBool); safecall;
    property TrackNumb: WideString read Get_TrackNumb write Set_TrackNumb;
    property TrackFormat: WideString read Get_TrackFormat write Set_TrackFormat;
    property Value: WideString read Get_Value write Set_Value;
    property xsdTrackDataTypeInitFlag: WordBool read Get_xsdTrackDataTypeInitFlag write Set_xsdTrackDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ITrackDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9F5C8443-2B7F-4D2C-9965-1B3E059B1CE1}
// *********************************************************************//
  ITrackDataTypeDisp = dispinterface
    ['{9F5C8443-2B7F-4D2C-9965-1B3E059B1CE1}']
    property TrackNumb: WideString dispid 2;
    property TrackFormat: WideString dispid 4;
    property Value: WideString dispid 6;
    property xsdTrackDataTypeInitFlag: WordBool dispid 8;
  end;

// *********************************************************************//
// Interface :   IPaymentTokenType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {40848B50-31D6-49D6-B5DC-52B235CB12E0}
// *********************************************************************//
  IPaymentTokenType = interface(IDispatch)
    ['{40848B50-31D6-49D6-B5DC-52B235CB12E0}']
    function Get_TokenRequestedType: WideString; safecall;
    procedure Set_TokenRequestedType(const pRetVal: WideString); safecall;
    function Get_TokenValue: WideString; safecall;
    procedure Set_TokenValue(const pRetVal: WideString); safecall;
    function Get_ExpiryDateTime: WideString; safecall;
    procedure Set_ExpiryDateTime(const pRetVal: WideString); safecall;
    function Get_ExpiryDateTimeSpecified: WordBool; safecall;
    procedure Set_ExpiryDateTimeSpecified(pRetVal: WordBool); safecall;
    function Get_xsdPaymentTokenTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPaymentTokenTypeInitFlag(pRetVal: WordBool); safecall;
    property TokenRequestedType: WideString read Get_TokenRequestedType write Set_TokenRequestedType;
    property TokenValue: WideString read Get_TokenValue write Set_TokenValue;
    property ExpiryDateTime: WideString read Get_ExpiryDateTime write Set_ExpiryDateTime;
    property ExpiryDateTimeSpecified: WordBool read Get_ExpiryDateTimeSpecified write Set_ExpiryDateTimeSpecified;
    property xsdPaymentTokenTypeInitFlag: WordBool read Get_xsdPaymentTokenTypeInitFlag write Set_xsdPaymentTokenTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPaymentTokenTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {40848B50-31D6-49D6-B5DC-52B235CB12E0}
// *********************************************************************//
  IPaymentTokenTypeDisp = dispinterface
    ['{40848B50-31D6-49D6-B5DC-52B235CB12E0}']
    property TokenRequestedType: WideString dispid 1;
    property TokenValue: WideString dispid 3;
    property ExpiryDateTime: WideString dispid 5;
    property ExpiryDateTimeSpecified: WordBool dispid 7;
    property xsdPaymentTokenTypeInitFlag: WordBool dispid 9;
  end;

// *********************************************************************//
// Interface :   ICustomerOrderType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BD57DA3D-0B6F-47EA-8A46-79B692F331C1}
// *********************************************************************//
  ICustomerOrderType = interface(IDispatch)
    ['{BD57DA3D-0B6F-47EA-8A46-79B692F331C1}']
    function Get_AdditionalInformation: WideString; safecall;
    procedure Set_AdditionalInformation(const pRetVal: WideString); safecall;
    function Get_CustomerOrderID: WideString; safecall;
    procedure Set_CustomerOrderID(const pRetVal: WideString); safecall;
    function Get_OpenOrderState: WordBool; safecall;
    procedure Set_OpenOrderState(pRetVal: WordBool); safecall;
    function Get_StartDate: WideString; safecall;
    procedure Set_StartDate(const pRetVal: WideString); safecall;
    function Get_EndDate: WideString; safecall;
    procedure Set_EndDate(const pRetVal: WideString); safecall;
    function Get_EndDateSpecified: WordBool; safecall;
    procedure Set_EndDateSpecified(pRetVal: WordBool); safecall;
    function Get_ForecastedAmount: TDecimal; safecall;
    procedure Set_ForecastedAmount(pRetVal: TDecimal); safecall;
    function Get_CurrentAmount: TDecimal; safecall;
    procedure Set_CurrentAmount(pRetVal: TDecimal); safecall;
    function Get_currency: WideString; safecall;
    procedure Set_currency(const pRetVal: WideString); safecall;
    function Get_AccessedBy: WideString; safecall;
    procedure Set_AccessedBy(const pRetVal: WideString); safecall;
    function Get_xsdCustomerOrderTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCustomerOrderTypeInitFlag(pRetVal: WordBool); safecall;
    property AdditionalInformation: WideString read Get_AdditionalInformation write Set_AdditionalInformation;
    property CustomerOrderID: WideString read Get_CustomerOrderID write Set_CustomerOrderID;
    property OpenOrderState: WordBool read Get_OpenOrderState write Set_OpenOrderState;
    property StartDate: WideString read Get_StartDate write Set_StartDate;
    property EndDate: WideString read Get_EndDate write Set_EndDate;
    property EndDateSpecified: WordBool read Get_EndDateSpecified write Set_EndDateSpecified;
    property ForecastedAmount: TDecimal read Get_ForecastedAmount write Set_ForecastedAmount;
    property CurrentAmount: TDecimal read Get_CurrentAmount write Set_CurrentAmount;
    property currency: WideString read Get_currency write Set_currency;
    property AccessedBy: WideString read Get_AccessedBy write Set_AccessedBy;
    property xsdCustomerOrderTypeInitFlag: WordBool read Get_xsdCustomerOrderTypeInitFlag write Set_xsdCustomerOrderTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICustomerOrderTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BD57DA3D-0B6F-47EA-8A46-79B692F331C1}
// *********************************************************************//
  ICustomerOrderTypeDisp = dispinterface
    ['{BD57DA3D-0B6F-47EA-8A46-79B692F331C1}']
    property AdditionalInformation: WideString dispid 2;
    property CustomerOrderID: WideString dispid 4;
    property OpenOrderState: WordBool dispid 6;
    property StartDate: WideString dispid 8;
    property EndDate: WideString dispid 10;
    property EndDateSpecified: WordBool dispid 12;
    property ForecastedAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 14;
    property CurrentAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 16;
    property currency: WideString dispid 18;
    property AccessedBy: WideString dispid 20;
    property xsdCustomerOrderTypeInitFlag: WordBool dispid 22;
  end;

// *********************************************************************//
// Interface :   ICheckDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5F6EEC56-6E27-4A74-B051-306E11C65989}
// *********************************************************************//
  ICheckDataType = interface(IDispatch)
    ['{5F6EEC56-6E27-4A74-B051-306E11C65989}']
    function Get_BankID: WideString; safecall;
    procedure Set_BankID(const pRetVal: WideString); safecall;
    function Get_AccountNumber: WideString; safecall;
    procedure Set_AccountNumber(const pRetVal: WideString); safecall;
    function Get_CheckNumber: WideString; safecall;
    procedure Set_CheckNumber(const pRetVal: WideString); safecall;
    function Get_TrackData: ITrackDataType; safecall;
    procedure _Set_TrackData(const pRetVal: ITrackDataType); safecall;
    function Get_CheckCardNumber: WideString; safecall;
    procedure Set_CheckCardNumber(const pRetVal: WideString); safecall;
    function Get_TypeCode: WideString; safecall;
    procedure Set_TypeCode(const pRetVal: WideString); safecall;
    function Get_Country: WideString; safecall;
    procedure Set_Country(const pRetVal: WideString); safecall;
    function Get_xsdCheckDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCheckDataTypeInitFlag(pRetVal: WordBool); safecall;
    property BankID: WideString read Get_BankID write Set_BankID;
    property AccountNumber: WideString read Get_AccountNumber write Set_AccountNumber;
    property CheckNumber: WideString read Get_CheckNumber write Set_CheckNumber;
    property TrackData: ITrackDataType read Get_TrackData write _Set_TrackData;
    property CheckCardNumber: WideString read Get_CheckCardNumber write Set_CheckCardNumber;
    property TypeCode: WideString read Get_TypeCode write Set_TypeCode;
    property Country: WideString read Get_Country write Set_Country;
    property xsdCheckDataTypeInitFlag: WordBool read Get_xsdCheckDataTypeInitFlag write Set_xsdCheckDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICheckDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5F6EEC56-6E27-4A74-B051-306E11C65989}
// *********************************************************************//
  ICheckDataTypeDisp = dispinterface
    ['{5F6EEC56-6E27-4A74-B051-306E11C65989}']
    property BankID: WideString dispid 2;
    property AccountNumber: WideString dispid 4;
    property CheckNumber: WideString dispid 6;
    property TrackData: ITrackDataType dispid 8;
    property CheckCardNumber: WideString dispid 10;
    property TypeCode: WideString dispid 12;
    property Country: WideString dispid 14;
    property xsdCheckDataTypeInitFlag: WordBool dispid 16;
  end;

// *********************************************************************//
// Interface :   IMobileDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4F491078-5DFE-417A-8AEF-E09151D17938}
// *********************************************************************//
  IMobileDataType = interface(IDispatch)
    ['{4F491078-5DFE-417A-8AEF-E09151D17938}']
    function Get_MobileCountryCode: WideString; safecall;
    procedure Set_MobileCountryCode(const pRetVal: WideString); safecall;
    function Get_Geolocation: IGeolocationType; safecall;
    procedure _Set_Geolocation(const pRetVal: IGeolocationType); safecall;
    function Get_ProtectedMobileData: IContentInformationType; safecall;
    procedure _Set_ProtectedMobileData(const pRetVal: IContentInformationType); safecall;
    function Get_SensitiveMobileData: ISensitiveMobileDataType; safecall;
    procedure _Set_SensitiveMobileData(const pRetVal: ISensitiveMobileDataType); safecall;
    function Get_MobileNetworkCode: WideString; safecall;
    procedure Set_MobileNetworkCode(const pRetVal: WideString); safecall;
    function Get_MaskedMSISDN: WideString; safecall;
    procedure Set_MaskedMSISDN(const pRetVal: WideString); safecall;
    function Get_xsdMobileDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdMobileDataTypeInitFlag(pRetVal: WordBool); safecall;
    property MobileCountryCode: WideString read Get_MobileCountryCode write Set_MobileCountryCode;
    property Geolocation: IGeolocationType read Get_Geolocation write _Set_Geolocation;
    property ProtectedMobileData: IContentInformationType read Get_ProtectedMobileData write _Set_ProtectedMobileData;
    property SensitiveMobileData: ISensitiveMobileDataType read Get_SensitiveMobileData write _Set_SensitiveMobileData;
    property MobileNetworkCode: WideString read Get_MobileNetworkCode write Set_MobileNetworkCode;
    property MaskedMSISDN: WideString read Get_MaskedMSISDN write Set_MaskedMSISDN;
    property xsdMobileDataTypeInitFlag: WordBool read Get_xsdMobileDataTypeInitFlag write Set_xsdMobileDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IMobileDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4F491078-5DFE-417A-8AEF-E09151D17938}
// *********************************************************************//
  IMobileDataTypeDisp = dispinterface
    ['{4F491078-5DFE-417A-8AEF-E09151D17938}']
    property MobileCountryCode: WideString dispid 1;
    property Geolocation: IGeolocationType dispid 3;
    property ProtectedMobileData: IContentInformationType dispid 5;
    property SensitiveMobileData: ISensitiveMobileDataType dispid 7;
    property MobileNetworkCode: WideString dispid 9;
    property MaskedMSISDN: WideString dispid 11;
    property xsdMobileDataTypeInitFlag: WordBool dispid 13;
  end;

// *********************************************************************//
// Interface :   IGeolocationType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B5615848-F0C3-4DF0-8A0E-4CA968FC8462}
// *********************************************************************//
  IGeolocationType = interface(IDispatch)
    ['{B5615848-F0C3-4DF0-8A0E-4CA968FC8462}']
    function Get_GeographicCoordinates: IGeographicCoordinatesType; safecall;
    procedure _Set_GeographicCoordinates(const pRetVal: IGeographicCoordinatesType); safecall;
    function Get_UTMCoordinates: IUTMCoordinatesType; safecall;
    procedure _Set_UTMCoordinates(const pRetVal: IUTMCoordinatesType); safecall;
    function Get_xsdGeolocationTypeInitFlag: WordBool; safecall;
    procedure Set_xsdGeolocationTypeInitFlag(pRetVal: WordBool); safecall;
    property GeographicCoordinates: IGeographicCoordinatesType read Get_GeographicCoordinates write _Set_GeographicCoordinates;
    property UTMCoordinates: IUTMCoordinatesType read Get_UTMCoordinates write _Set_UTMCoordinates;
    property xsdGeolocationTypeInitFlag: WordBool read Get_xsdGeolocationTypeInitFlag write Set_xsdGeolocationTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IGeolocationTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B5615848-F0C3-4DF0-8A0E-4CA968FC8462}
// *********************************************************************//
  IGeolocationTypeDisp = dispinterface
    ['{B5615848-F0C3-4DF0-8A0E-4CA968FC8462}']
    property GeographicCoordinates: IGeographicCoordinatesType dispid 1;
    property UTMCoordinates: IUTMCoordinatesType dispid 3;
    property xsdGeolocationTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IGeographicCoordinatesType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8D4B1EB8-931E-42B0-950E-ECB372854909}
// *********************************************************************//
  IGeographicCoordinatesType = interface(IDispatch)
    ['{8D4B1EB8-931E-42B0-950E-ECB372854909}']
    function Get_Latitude: WideString; safecall;
    procedure Set_Latitude(const pRetVal: WideString); safecall;
    function Get_Longitude: WideString; safecall;
    procedure Set_Longitude(const pRetVal: WideString); safecall;
    function Get_xsdGeographicCoordinatesTypeInitFlag: WordBool; safecall;
    procedure Set_xsdGeographicCoordinatesTypeInitFlag(pRetVal: WordBool); safecall;
    property Latitude: WideString read Get_Latitude write Set_Latitude;
    property Longitude: WideString read Get_Longitude write Set_Longitude;
    property xsdGeographicCoordinatesTypeInitFlag: WordBool read Get_xsdGeographicCoordinatesTypeInitFlag write Set_xsdGeographicCoordinatesTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IGeographicCoordinatesTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8D4B1EB8-931E-42B0-950E-ECB372854909}
// *********************************************************************//
  IGeographicCoordinatesTypeDisp = dispinterface
    ['{8D4B1EB8-931E-42B0-950E-ECB372854909}']
    property Latitude: WideString dispid 1;
    property Longitude: WideString dispid 3;
    property xsdGeographicCoordinatesTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IUTMCoordinatesType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2EE351A0-2FF9-4654-8BA7-D584B73DB460}
// *********************************************************************//
  IUTMCoordinatesType = interface(IDispatch)
    ['{2EE351A0-2FF9-4654-8BA7-D584B73DB460}']
    function Get_UTMZone: WideString; safecall;
    procedure Set_UTMZone(const pRetVal: WideString); safecall;
    function Get_UTMEastward: WideString; safecall;
    procedure Set_UTMEastward(const pRetVal: WideString); safecall;
    function Get_UTMNorthward: WideString; safecall;
    procedure Set_UTMNorthward(const pRetVal: WideString); safecall;
    function Get_xsdUTMCoordinatesTypeInitFlag: WordBool; safecall;
    procedure Set_xsdUTMCoordinatesTypeInitFlag(pRetVal: WordBool); safecall;
    property UTMZone: WideString read Get_UTMZone write Set_UTMZone;
    property UTMEastward: WideString read Get_UTMEastward write Set_UTMEastward;
    property UTMNorthward: WideString read Get_UTMNorthward write Set_UTMNorthward;
    property xsdUTMCoordinatesTypeInitFlag: WordBool read Get_xsdUTMCoordinatesTypeInitFlag write Set_xsdUTMCoordinatesTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IUTMCoordinatesTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2EE351A0-2FF9-4654-8BA7-D584B73DB460}
// *********************************************************************//
  IUTMCoordinatesTypeDisp = dispinterface
    ['{2EE351A0-2FF9-4654-8BA7-D584B73DB460}']
    property UTMZone: WideString dispid 1;
    property UTMEastward: WideString dispid 3;
    property UTMNorthward: WideString dispid 5;
    property xsdUTMCoordinatesTypeInitFlag: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface :   ISensitiveMobileDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E1754B51-5C8D-47E0-B502-35FC40ACBFA6}
// *********************************************************************//
  ISensitiveMobileDataType = interface(IDispatch)
    ['{E1754B51-5C8D-47E0-B502-35FC40ACBFA6}']
    function Get_MSISDN: WideString; safecall;
    procedure Set_MSISDN(const pRetVal: WideString); safecall;
    function Get_IMSI: WideString; safecall;
    procedure Set_IMSI(const pRetVal: WideString); safecall;
    function Get_IMEI: WideString; safecall;
    procedure Set_IMEI(const pRetVal: WideString); safecall;
    function Get_xsdSensitiveMobileDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSensitiveMobileDataTypeInitFlag(pRetVal: WordBool); safecall;
    property MSISDN: WideString read Get_MSISDN write Set_MSISDN;
    property IMSI: WideString read Get_IMSI write Set_IMSI;
    property IMEI: WideString read Get_IMEI write Set_IMEI;
    property xsdSensitiveMobileDataTypeInitFlag: WordBool read Get_xsdSensitiveMobileDataTypeInitFlag write Set_xsdSensitiveMobileDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISensitiveMobileDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E1754B51-5C8D-47E0-B502-35FC40ACBFA6}
// *********************************************************************//
  ISensitiveMobileDataTypeDisp = dispinterface
    ['{E1754B51-5C8D-47E0-B502-35FC40ACBFA6}']
    property MSISDN: WideString dispid 1;
    property IMSI: WideString dispid 3;
    property IMEI: WideString dispid 5;
    property xsdSensitiveMobileDataTypeInitFlag: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface :   ILoyaltyAccountReqType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {05C3AFF8-5599-473C-9338-7D28938E1B05}
// *********************************************************************//
  ILoyaltyAccountReqType = interface(IDispatch)
    ['{05C3AFF8-5599-473C-9338-7D28938E1B05}']
    function Get_CardAcquisitionReference: ITransactionIdentificationType; safecall;
    procedure _Set_CardAcquisitionReference(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_LoyaltyAccountID: ILoyaltyAccountIDType; safecall;
    procedure _Set_LoyaltyAccountID(const pRetVal: ILoyaltyAccountIDType); safecall;
    function Get_xsdLoyaltyAccountReqTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLoyaltyAccountReqTypeInitFlag(pRetVal: WordBool); safecall;
    property CardAcquisitionReference: ITransactionIdentificationType read Get_CardAcquisitionReference write _Set_CardAcquisitionReference;
    property LoyaltyAccountID: ILoyaltyAccountIDType read Get_LoyaltyAccountID write _Set_LoyaltyAccountID;
    property xsdLoyaltyAccountReqTypeInitFlag: WordBool read Get_xsdLoyaltyAccountReqTypeInitFlag write Set_xsdLoyaltyAccountReqTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyAccountReqTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {05C3AFF8-5599-473C-9338-7D28938E1B05}
// *********************************************************************//
  ILoyaltyAccountReqTypeDisp = dispinterface
    ['{05C3AFF8-5599-473C-9338-7D28938E1B05}']
    property CardAcquisitionReference: ITransactionIdentificationType dispid 1;
    property LoyaltyAccountID: ILoyaltyAccountIDType dispid 3;
    property xsdLoyaltyAccountReqTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   ILoyaltyAccountIDType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A56DECA1-0DD8-428A-BA74-0201067C50D6}
// *********************************************************************//
  ILoyaltyAccountIDType = interface(IDispatch)
    ['{A56DECA1-0DD8-428A-BA74-0201067C50D6}']
    function Get_EntryMode: PSafeArray; safecall;
    procedure Set_EntryMode(pRetVal: PSafeArray); safecall;
    function Get_IdentificationType: WideString; safecall;
    procedure Set_IdentificationType(const pRetVal: WideString); safecall;
    function Get_IdentificationSupport: WideString; safecall;
    procedure Set_IdentificationSupport(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_xsdLoyaltyAccountIDTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLoyaltyAccountIDTypeInitFlag(pRetVal: WordBool); safecall;
    function EntryModeSize: Integer; safecall;
    function EntryModeGetItem(index: Integer): WideString; safecall;
    function EntryModeSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function EntryModeAddItem(const Value: WideString): WordBool; safecall;
    function EntryModeRemoveItem(index: Integer): WordBool; safecall;
    property EntryMode: PSafeArray read Get_EntryMode write Set_EntryMode;
    property IdentificationType: WideString read Get_IdentificationType write Set_IdentificationType;
    property IdentificationSupport: WideString read Get_IdentificationSupport write Set_IdentificationSupport;
    property Value: WideString read Get_Value write Set_Value;
    property xsdLoyaltyAccountIDTypeInitFlag: WordBool read Get_xsdLoyaltyAccountIDTypeInitFlag write Set_xsdLoyaltyAccountIDTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyAccountIDTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A56DECA1-0DD8-428A-BA74-0201067C50D6}
// *********************************************************************//
  ILoyaltyAccountIDTypeDisp = dispinterface
    ['{A56DECA1-0DD8-428A-BA74-0201067C50D6}']
    property EntryMode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property IdentificationType: WideString dispid 3;
    property IdentificationSupport: WideString dispid 5;
    property Value: WideString dispid 7;
    property xsdLoyaltyAccountIDTypeInitFlag: WordBool dispid 9;
    function EntryModeSize: Integer; dispid 10;
    function EntryModeGetItem(index: Integer): WideString; dispid 11;
    function EntryModeSetItem(index: Integer; const Value: WideString): WordBool; dispid 12;
    function EntryModeAddItem(const Value: WideString): WordBool; dispid 13;
    function EntryModeRemoveItem(index: Integer): WordBool; dispid 14;
  end;

// *********************************************************************//
// Interface :   IBalanceInquiryResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {51960756-B608-400F-AE06-F74C94DABEE5}
// *********************************************************************//
  IBalanceInquiryResponseType = interface(IDispatch)
    ['{51960756-B608-400F-AE06-F74C94DABEE5}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_PaymentAccountStatus: IPaymentAccountStatusType; safecall;
    procedure _Set_PaymentAccountStatus(const pRetVal: IPaymentAccountStatusType); safecall;
    function Get_LoyaltyAccountStatus: ILoyaltyAccountStatusType; safecall;
    procedure _Set_LoyaltyAccountStatus(const pRetVal: ILoyaltyAccountStatusType); safecall;
    function Get_xsdBalanceInquiryResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdBalanceInquiryResponseTypeInitFlag(pRetVal: WordBool); safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property PaymentAccountStatus: IPaymentAccountStatusType read Get_PaymentAccountStatus write _Set_PaymentAccountStatus;
    property LoyaltyAccountStatus: ILoyaltyAccountStatusType read Get_LoyaltyAccountStatus write _Set_LoyaltyAccountStatus;
    property xsdBalanceInquiryResponseTypeInitFlag: WordBool read Get_xsdBalanceInquiryResponseTypeInitFlag write Set_xsdBalanceInquiryResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IBalanceInquiryResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {51960756-B608-400F-AE06-F74C94DABEE5}
// *********************************************************************//
  IBalanceInquiryResponseTypeDisp = dispinterface
    ['{51960756-B608-400F-AE06-F74C94DABEE5}']
    property Response: IResponseType dispid 1;
    property PaymentAccountStatus: IPaymentAccountStatusType dispid 3;
    property LoyaltyAccountStatus: ILoyaltyAccountStatusType dispid 5;
    property xsdBalanceInquiryResponseTypeInitFlag: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface :   IPaymentAccountStatusType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A37E52AB-5DF7-4D75-B529-AAF2BF9E33A5}
// *********************************************************************//
  IPaymentAccountStatusType = interface(IDispatch)
    ['{A37E52AB-5DF7-4D75-B529-AAF2BF9E33A5}']
    function Get_PaymentInstrumentData: IPaymentInstrumentDataType; safecall;
    procedure _Set_PaymentInstrumentData(const pRetVal: IPaymentInstrumentDataType); safecall;
    function Get_PaymentAcquirerData: IPaymentAcquirerDataType; safecall;
    procedure _Set_PaymentAcquirerData(const pRetVal: IPaymentAcquirerDataType); safecall;
    function Get_LoyaltyAccountStatus: ILoyaltyAccountStatusType; safecall;
    procedure _Set_LoyaltyAccountStatus(const pRetVal: ILoyaltyAccountStatusType); safecall;
    function Get_currency: WideString; safecall;
    procedure Set_currency(const pRetVal: WideString); safecall;
    function Get_CurrentBalance: TDecimal; safecall;
    procedure Set_CurrentBalance(pRetVal: TDecimal); safecall;
    function Get_CurrentBalanceSpecified: WordBool; safecall;
    procedure Set_CurrentBalanceSpecified(pRetVal: WordBool); safecall;
    function Get_xsdPaymentAccountStatusTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPaymentAccountStatusTypeInitFlag(pRetVal: WordBool); safecall;
    property PaymentInstrumentData: IPaymentInstrumentDataType read Get_PaymentInstrumentData write _Set_PaymentInstrumentData;
    property PaymentAcquirerData: IPaymentAcquirerDataType read Get_PaymentAcquirerData write _Set_PaymentAcquirerData;
    property LoyaltyAccountStatus: ILoyaltyAccountStatusType read Get_LoyaltyAccountStatus write _Set_LoyaltyAccountStatus;
    property currency: WideString read Get_currency write Set_currency;
    property CurrentBalance: TDecimal read Get_CurrentBalance write Set_CurrentBalance;
    property CurrentBalanceSpecified: WordBool read Get_CurrentBalanceSpecified write Set_CurrentBalanceSpecified;
    property xsdPaymentAccountStatusTypeInitFlag: WordBool read Get_xsdPaymentAccountStatusTypeInitFlag write Set_xsdPaymentAccountStatusTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPaymentAccountStatusTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A37E52AB-5DF7-4D75-B529-AAF2BF9E33A5}
// *********************************************************************//
  IPaymentAccountStatusTypeDisp = dispinterface
    ['{A37E52AB-5DF7-4D75-B529-AAF2BF9E33A5}']
    property PaymentInstrumentData: IPaymentInstrumentDataType dispid 1;
    property PaymentAcquirerData: IPaymentAcquirerDataType dispid 3;
    property LoyaltyAccountStatus: ILoyaltyAccountStatusType dispid 5;
    property currency: WideString dispid 7;
    property CurrentBalance: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 9;
    property CurrentBalanceSpecified: WordBool dispid 11;
    property xsdPaymentAccountStatusTypeInitFlag: WordBool dispid 13;
  end;

// *********************************************************************//
// Interface :   IPaymentAcquirerDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {49ECACF1-62B8-4A1B-94F4-2D1609107919}
// *********************************************************************//
  IPaymentAcquirerDataType = interface(IDispatch)
    ['{49ECACF1-62B8-4A1B-94F4-2D1609107919}']
    function Get_AcquirerTransactionID: ITransactionIdentificationType; safecall;
    procedure _Set_AcquirerTransactionID(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_ApprovalCode: WideString; safecall;
    procedure Set_ApprovalCode(const pRetVal: WideString); safecall;
    function Get_AcquirerID: WideString; safecall;
    procedure Set_AcquirerID(const pRetVal: WideString); safecall;
    function Get_MerchantID: WideString; safecall;
    procedure Set_MerchantID(const pRetVal: WideString); safecall;
    function Get_AcquirerPOIID: WideString; safecall;
    procedure Set_AcquirerPOIID(const pRetVal: WideString); safecall;
    function Get_xsdPaymentAcquirerDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPaymentAcquirerDataTypeInitFlag(pRetVal: WordBool); safecall;
    property AcquirerTransactionID: ITransactionIdentificationType read Get_AcquirerTransactionID write _Set_AcquirerTransactionID;
    property ApprovalCode: WideString read Get_ApprovalCode write Set_ApprovalCode;
    property AcquirerID: WideString read Get_AcquirerID write Set_AcquirerID;
    property MerchantID: WideString read Get_MerchantID write Set_MerchantID;
    property AcquirerPOIID: WideString read Get_AcquirerPOIID write Set_AcquirerPOIID;
    property xsdPaymentAcquirerDataTypeInitFlag: WordBool read Get_xsdPaymentAcquirerDataTypeInitFlag write Set_xsdPaymentAcquirerDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPaymentAcquirerDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {49ECACF1-62B8-4A1B-94F4-2D1609107919}
// *********************************************************************//
  IPaymentAcquirerDataTypeDisp = dispinterface
    ['{49ECACF1-62B8-4A1B-94F4-2D1609107919}']
    property AcquirerTransactionID: ITransactionIdentificationType dispid 1;
    property ApprovalCode: WideString dispid 3;
    property AcquirerID: WideString dispid 5;
    property MerchantID: WideString dispid 7;
    property AcquirerPOIID: WideString dispid 9;
    property xsdPaymentAcquirerDataTypeInitFlag: WordBool dispid 11;
  end;

// *********************************************************************//
// Interface :   ILoyaltyAccountStatusType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D37010F7-4309-4C79-80A2-159D322A9506}
// *********************************************************************//
  ILoyaltyAccountStatusType = interface(IDispatch)
    ['{D37010F7-4309-4C79-80A2-159D322A9506}']
    function Get_LoyaltyAccount: ILoyaltyAccountType; safecall;
    procedure _Set_LoyaltyAccount(const pRetVal: ILoyaltyAccountType); safecall;
    function Get_CurrentBalance: TDecimal; safecall;
    procedure Set_CurrentBalance(pRetVal: TDecimal); safecall;
    function Get_CurrentBalanceSpecified: WordBool; safecall;
    procedure Set_CurrentBalanceSpecified(pRetVal: WordBool); safecall;
    function Get_LoyaltyUnit: WideString; safecall;
    procedure Set_LoyaltyUnit(const pRetVal: WideString); safecall;
    function Get_currency: WideString; safecall;
    procedure Set_currency(const pRetVal: WideString); safecall;
    function Get_xsdLoyaltyAccountStatusTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLoyaltyAccountStatusTypeInitFlag(pRetVal: WordBool); safecall;
    property LoyaltyAccount: ILoyaltyAccountType read Get_LoyaltyAccount write _Set_LoyaltyAccount;
    property CurrentBalance: TDecimal read Get_CurrentBalance write Set_CurrentBalance;
    property CurrentBalanceSpecified: WordBool read Get_CurrentBalanceSpecified write Set_CurrentBalanceSpecified;
    property LoyaltyUnit: WideString read Get_LoyaltyUnit write Set_LoyaltyUnit;
    property currency: WideString read Get_currency write Set_currency;
    property xsdLoyaltyAccountStatusTypeInitFlag: WordBool read Get_xsdLoyaltyAccountStatusTypeInitFlag write Set_xsdLoyaltyAccountStatusTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyAccountStatusTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D37010F7-4309-4C79-80A2-159D322A9506}
// *********************************************************************//
  ILoyaltyAccountStatusTypeDisp = dispinterface
    ['{D37010F7-4309-4C79-80A2-159D322A9506}']
    property LoyaltyAccount: ILoyaltyAccountType dispid 2;
    property CurrentBalance: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 4;
    property CurrentBalanceSpecified: WordBool dispid 6;
    property LoyaltyUnit: WideString dispid 8;
    property currency: WideString dispid 10;
    property xsdLoyaltyAccountStatusTypeInitFlag: WordBool dispid 12;
  end;

// *********************************************************************//
// Interface :   ILoyaltyAccountType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {705D598C-5FB0-40BF-AA6F-C334E6C6006F}
// *********************************************************************//
  ILoyaltyAccountType = interface(IDispatch)
    ['{705D598C-5FB0-40BF-AA6F-C334E6C6006F}']
    function Get_LoyaltyAccountID: ILoyaltyAccountIDType; safecall;
    procedure _Set_LoyaltyAccountID(const pRetVal: ILoyaltyAccountIDType); safecall;
    function Get_LoyaltyBrand: WideString; safecall;
    procedure Set_LoyaltyBrand(const pRetVal: WideString); safecall;
    function Get_xsdLoyaltyAccountTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLoyaltyAccountTypeInitFlag(pRetVal: WordBool); safecall;
    property LoyaltyAccountID: ILoyaltyAccountIDType read Get_LoyaltyAccountID write _Set_LoyaltyAccountID;
    property LoyaltyBrand: WideString read Get_LoyaltyBrand write Set_LoyaltyBrand;
    property xsdLoyaltyAccountTypeInitFlag: WordBool read Get_xsdLoyaltyAccountTypeInitFlag write Set_xsdLoyaltyAccountTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyAccountTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {705D598C-5FB0-40BF-AA6F-C334E6C6006F}
// *********************************************************************//
  ILoyaltyAccountTypeDisp = dispinterface
    ['{705D598C-5FB0-40BF-AA6F-C334E6C6006F}']
    property LoyaltyAccountID: ILoyaltyAccountIDType dispid 1;
    property LoyaltyBrand: WideString dispid 3;
    property xsdLoyaltyAccountTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IBatchRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {961AD3ED-4823-456E-AC65-E8DA00A6BB27}
// *********************************************************************//
  IBatchRequestType = interface(IDispatch)
    ['{961AD3ED-4823-456E-AC65-E8DA00A6BB27}']
    function Get_TransactionToPerform: PSafeArray; safecall;
    procedure Set_TransactionToPerform(pRetVal: PSafeArray); safecall;
    function Get_RemoveAllFlag: WordBool; safecall;
    procedure Set_RemoveAllFlag(pRetVal: WordBool); safecall;
    function Get_RemoveAllFlagSpecified: WordBool; safecall;
    procedure Set_RemoveAllFlagSpecified(pRetVal: WordBool); safecall;
    function Get_xsdBatchRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdBatchRequestTypeInitFlag(pRetVal: WordBool); safecall;
    function TransactionToPerformSize: Integer; safecall;
    function TransactionToPerformGetItem(index: Integer): ITransactionToPerformType; safecall;
    function TransactionToPerformSetItem(index: Integer; const Value: ITransactionToPerformType): WordBool; safecall;
    function TransactionToPerformAddItem(const Value: ITransactionToPerformType): WordBool; safecall;
    function TransactionToPerformRemoveItem(index: Integer): WordBool; safecall;
    property TransactionToPerform: PSafeArray read Get_TransactionToPerform write Set_TransactionToPerform;
    property RemoveAllFlag: WordBool read Get_RemoveAllFlag write Set_RemoveAllFlag;
    property RemoveAllFlagSpecified: WordBool read Get_RemoveAllFlagSpecified write Set_RemoveAllFlagSpecified;
    property xsdBatchRequestTypeInitFlag: WordBool read Get_xsdBatchRequestTypeInitFlag write Set_xsdBatchRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IBatchRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {961AD3ED-4823-456E-AC65-E8DA00A6BB27}
// *********************************************************************//
  IBatchRequestTypeDisp = dispinterface
    ['{961AD3ED-4823-456E-AC65-E8DA00A6BB27}']
    property TransactionToPerform: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property RemoveAllFlag: WordBool dispid 3;
    property RemoveAllFlagSpecified: WordBool dispid 5;
    property xsdBatchRequestTypeInitFlag: WordBool dispid 7;
    function TransactionToPerformSize: Integer; dispid 8;
    function TransactionToPerformGetItem(index: Integer): ITransactionToPerformType; dispid 9;
    function TransactionToPerformSetItem(index: Integer; const Value: ITransactionToPerformType): WordBool; dispid 10;
    function TransactionToPerformAddItem(const Value: ITransactionToPerformType): WordBool; dispid 11;
    function TransactionToPerformRemoveItem(index: Integer): WordBool; dispid 12;
  end;

// *********************************************************************//
// Interface :   ITransactionToPerformType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AA613B2D-3109-48EF-A84E-80BB525B9C8B}
// *********************************************************************//
  ITransactionToPerformType = interface(IDispatch)
    ['{AA613B2D-3109-48EF-A84E-80BB525B9C8B}']
    function Get_Item: OleVariant; safecall;
    procedure _Set_Item(pRetVal: OleVariant); safecall;
    function Get_xsdTransactionToPerformTypeInitFlag: WordBool; safecall;
    procedure Set_xsdTransactionToPerformTypeInitFlag(pRetVal: WordBool); safecall;
    property Item: OleVariant read Get_Item write _Set_Item;
    property xsdTransactionToPerformTypeInitFlag: WordBool read Get_xsdTransactionToPerformTypeInitFlag write Set_xsdTransactionToPerformTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ITransactionToPerformTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AA613B2D-3109-48EF-A84E-80BB525B9C8B}
// *********************************************************************//
  ITransactionToPerformTypeDisp = dispinterface
    ['{AA613B2D-3109-48EF-A84E-80BB525B9C8B}']
    property Item: OleVariant dispid 1;
    property xsdTransactionToPerformTypeInitFlag: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface :   ILoyaltyRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8330E532-398D-4068-8016-A0B6F328459D}
// *********************************************************************//
  ILoyaltyRequestType = interface(IDispatch)
    ['{8330E532-398D-4068-8016-A0B6F328459D}']
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_LoyaltyTransaction: ILoyaltyTransactionType; safecall;
    procedure _Set_LoyaltyTransaction(const pRetVal: ILoyaltyTransactionType); safecall;
    function Get_LoyaltyData: PSafeArray; safecall;
    procedure Set_LoyaltyData(pRetVal: PSafeArray); safecall;
    function Get_xsdLoyaltyRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLoyaltyRequestTypeInitFlag(pRetVal: WordBool); safecall;
    function LoyaltyDataSize: Integer; safecall;
    function LoyaltyDataGetItem(index: Integer): ILoyaltyDataType; safecall;
    function LoyaltyDataSetItem(index: Integer; const Value: ILoyaltyDataType): WordBool; safecall;
    function LoyaltyDataAddItem(const Value: ILoyaltyDataType): WordBool; safecall;
    function LoyaltyDataRemoveItem(index: Integer): WordBool; safecall;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property LoyaltyTransaction: ILoyaltyTransactionType read Get_LoyaltyTransaction write _Set_LoyaltyTransaction;
    property LoyaltyData: PSafeArray read Get_LoyaltyData write Set_LoyaltyData;
    property xsdLoyaltyRequestTypeInitFlag: WordBool read Get_xsdLoyaltyRequestTypeInitFlag write Set_xsdLoyaltyRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8330E532-398D-4068-8016-A0B6F328459D}
// *********************************************************************//
  ILoyaltyRequestTypeDisp = dispinterface
    ['{8330E532-398D-4068-8016-A0B6F328459D}']
    property SaleData: ISaleDataType dispid 1;
    property LoyaltyTransaction: ILoyaltyTransactionType dispid 3;
    property LoyaltyData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property xsdLoyaltyRequestTypeInitFlag: WordBool dispid 7;
    function LoyaltyDataSize: Integer; dispid 8;
    function LoyaltyDataGetItem(index: Integer): ILoyaltyDataType; dispid 9;
    function LoyaltyDataSetItem(index: Integer; const Value: ILoyaltyDataType): WordBool; dispid 10;
    function LoyaltyDataAddItem(const Value: ILoyaltyDataType): WordBool; dispid 11;
    function LoyaltyDataRemoveItem(index: Integer): WordBool; dispid 12;
  end;

// *********************************************************************//
// Interface :   ISaleDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3F0907BF-64CF-4C46-874A-5287CBA3FE8B}
// *********************************************************************//
  ISaleDataType = interface(IDispatch)
    ['{3F0907BF-64CF-4C46-874A-5287CBA3FE8B}']
    function Get_SaleTransactionID: ITransactionIdentificationType; safecall;
    procedure _Set_SaleTransactionID(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_SaleTerminalData: ISaleTerminalDataType; safecall;
    procedure _Set_SaleTerminalData(const pRetVal: ISaleTerminalDataType); safecall;
    function Get_SponsoredMerchant: PSafeArray; safecall;
    procedure Set_SponsoredMerchant(pRetVal: PSafeArray); safecall;
    function Get_SaleToPOIData: WideString; safecall;
    procedure Set_SaleToPOIData(const pRetVal: WideString); safecall;
    function Get_SaleToAcquirerData: WideString; safecall;
    procedure Set_SaleToAcquirerData(const pRetVal: WideString); safecall;
    function Get_SaleToIssuerData: ISaleToIssuerDataType; safecall;
    procedure _Set_SaleToIssuerData(const pRetVal: ISaleToIssuerDataType); safecall;
    function Get_OperatorID: WideString; safecall;
    procedure Set_OperatorID(const pRetVal: WideString); safecall;
    function Get_OperatorLanguage: WideString; safecall;
    procedure Set_OperatorLanguage(const pRetVal: WideString); safecall;
    function Get_ShiftNumber: WideString; safecall;
    procedure Set_ShiftNumber(const pRetVal: WideString); safecall;
    function Get_SaleReferenceID: WideString; safecall;
    procedure Set_SaleReferenceID(const pRetVal: WideString); safecall;
    function Get_TokenRequestedType: WideString; safecall;
    procedure Set_TokenRequestedType(const pRetVal: WideString); safecall;
    function Get_CustomerOrderID: WideString; safecall;
    procedure Set_CustomerOrderID(const pRetVal: WideString); safecall;
    function Get_CustomerOrderReq: PSafeArray; safecall;
    procedure Set_CustomerOrderReq(pRetVal: PSafeArray); safecall;
    function Get_xsdSaleDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSaleDataTypeInitFlag(pRetVal: WordBool); safecall;
    function SponsoredMerchantSize: Integer; safecall;
    function SponsoredMerchantGetItem(index: Integer): ISponsoredMerchantType; safecall;
    function SponsoredMerchantSetItem(index: Integer; const Value: ISponsoredMerchantType): WordBool; safecall;
    function SponsoredMerchantAddItem(const Value: ISponsoredMerchantType): WordBool; safecall;
    function SponsoredMerchantRemoveItem(index: Integer): WordBool; safecall;
    function CustomerOrderReqSize: Integer; safecall;
    function CustomerOrderReqGetItem(index: Integer): WideString; safecall;
    function CustomerOrderReqSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function CustomerOrderReqAddItem(const Value: WideString): WordBool; safecall;
    function CustomerOrderReqRemoveItem(index: Integer): WordBool; safecall;
    property SaleTransactionID: ITransactionIdentificationType read Get_SaleTransactionID write _Set_SaleTransactionID;
    property SaleTerminalData: ISaleTerminalDataType read Get_SaleTerminalData write _Set_SaleTerminalData;
    property SponsoredMerchant: PSafeArray read Get_SponsoredMerchant write Set_SponsoredMerchant;
    property SaleToPOIData: WideString read Get_SaleToPOIData write Set_SaleToPOIData;
    property SaleToAcquirerData: WideString read Get_SaleToAcquirerData write Set_SaleToAcquirerData;
    property SaleToIssuerData: ISaleToIssuerDataType read Get_SaleToIssuerData write _Set_SaleToIssuerData;
    property OperatorID: WideString read Get_OperatorID write Set_OperatorID;
    property OperatorLanguage: WideString read Get_OperatorLanguage write Set_OperatorLanguage;
    property ShiftNumber: WideString read Get_ShiftNumber write Set_ShiftNumber;
    property SaleReferenceID: WideString read Get_SaleReferenceID write Set_SaleReferenceID;
    property TokenRequestedType: WideString read Get_TokenRequestedType write Set_TokenRequestedType;
    property CustomerOrderID: WideString read Get_CustomerOrderID write Set_CustomerOrderID;
    property CustomerOrderReq: PSafeArray read Get_CustomerOrderReq write Set_CustomerOrderReq;
    property xsdSaleDataTypeInitFlag: WordBool read Get_xsdSaleDataTypeInitFlag write Set_xsdSaleDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISaleDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3F0907BF-64CF-4C46-874A-5287CBA3FE8B}
// *********************************************************************//
  ISaleDataTypeDisp = dispinterface
    ['{3F0907BF-64CF-4C46-874A-5287CBA3FE8B}']
    property SaleTransactionID: ITransactionIdentificationType dispid 1;
    property SaleTerminalData: ISaleTerminalDataType dispid 3;
    property SponsoredMerchant: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property SaleToPOIData: WideString dispid 7;
    property SaleToAcquirerData: WideString dispid 9;
    property SaleToIssuerData: ISaleToIssuerDataType dispid 11;
    property OperatorID: WideString dispid 13;
    property OperatorLanguage: WideString dispid 15;
    property ShiftNumber: WideString dispid 17;
    property SaleReferenceID: WideString dispid 19;
    property TokenRequestedType: WideString dispid 21;
    property CustomerOrderID: WideString dispid 23;
    property CustomerOrderReq: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 25;
    property xsdSaleDataTypeInitFlag: WordBool dispid 27;
    function SponsoredMerchantSize: Integer; dispid 28;
    function SponsoredMerchantGetItem(index: Integer): ISponsoredMerchantType; dispid 29;
    function SponsoredMerchantSetItem(index: Integer; const Value: ISponsoredMerchantType): WordBool; dispid 30;
    function SponsoredMerchantAddItem(const Value: ISponsoredMerchantType): WordBool; dispid 31;
    function SponsoredMerchantRemoveItem(index: Integer): WordBool; dispid 32;
    function CustomerOrderReqSize: Integer; dispid 33;
    function CustomerOrderReqGetItem(index: Integer): WideString; dispid 34;
    function CustomerOrderReqSetItem(index: Integer; const Value: WideString): WordBool; dispid 35;
    function CustomerOrderReqAddItem(const Value: WideString): WordBool; dispid 36;
    function CustomerOrderReqRemoveItem(index: Integer): WordBool; dispid 37;
  end;

// *********************************************************************//
// Interface :   ISaleTerminalDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4E1180D5-D34E-4B42-9CAD-A170B0379413}
// *********************************************************************//
  ISaleTerminalDataType = interface(IDispatch)
    ['{4E1180D5-D34E-4B42-9CAD-A170B0379413}']
    function Get_SaleCapabilities: WideString; safecall;
    procedure Set_SaleCapabilities(const pRetVal: WideString); safecall;
    function Get_SaleProfile: ISaleProfileType; safecall;
    procedure _Set_SaleProfile(const pRetVal: ISaleProfileType); safecall;
    function Get_TerminalEnvironment: WideString; safecall;
    procedure Set_TerminalEnvironment(const pRetVal: WideString); safecall;
    function Get_TotalsGroupID: WideString; safecall;
    procedure Set_TotalsGroupID(const pRetVal: WideString); safecall;
    function Get_xsdSaleTerminalDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSaleTerminalDataTypeInitFlag(pRetVal: WordBool); safecall;
    property SaleCapabilities: WideString read Get_SaleCapabilities write Set_SaleCapabilities;
    property SaleProfile: ISaleProfileType read Get_SaleProfile write _Set_SaleProfile;
    property TerminalEnvironment: WideString read Get_TerminalEnvironment write Set_TerminalEnvironment;
    property TotalsGroupID: WideString read Get_TotalsGroupID write Set_TotalsGroupID;
    property xsdSaleTerminalDataTypeInitFlag: WordBool read Get_xsdSaleTerminalDataTypeInitFlag write Set_xsdSaleTerminalDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISaleTerminalDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4E1180D5-D34E-4B42-9CAD-A170B0379413}
// *********************************************************************//
  ISaleTerminalDataTypeDisp = dispinterface
    ['{4E1180D5-D34E-4B42-9CAD-A170B0379413}']
    property SaleCapabilities: WideString dispid 1;
    property SaleProfile: ISaleProfileType dispid 3;
    property TerminalEnvironment: WideString dispid 5;
    property TotalsGroupID: WideString dispid 7;
    property xsdSaleTerminalDataTypeInitFlag: WordBool dispid 9;
  end;

// *********************************************************************//
// Interface :   ISaleProfileType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C0B3086B-4608-42A4-8BBA-5418A5BAF26C}
// *********************************************************************//
  ISaleProfileType = interface(IDispatch)
    ['{C0B3086B-4608-42A4-8BBA-5418A5BAF26C}']
    function Get_ServiceProfiles: WideString; safecall;
    procedure Set_ServiceProfiles(const pRetVal: WideString); safecall;
    function Get_GenericProfile: WideString; safecall;
    procedure Set_GenericProfile(const pRetVal: WideString); safecall;
    function Get_xsdSaleProfileTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSaleProfileTypeInitFlag(pRetVal: WordBool); safecall;
    property ServiceProfiles: WideString read Get_ServiceProfiles write Set_ServiceProfiles;
    property GenericProfile: WideString read Get_GenericProfile write Set_GenericProfile;
    property xsdSaleProfileTypeInitFlag: WordBool read Get_xsdSaleProfileTypeInitFlag write Set_xsdSaleProfileTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISaleProfileTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C0B3086B-4608-42A4-8BBA-5418A5BAF26C}
// *********************************************************************//
  ISaleProfileTypeDisp = dispinterface
    ['{C0B3086B-4608-42A4-8BBA-5418A5BAF26C}']
    property ServiceProfiles: WideString dispid 2;
    property GenericProfile: WideString dispid 4;
    property xsdSaleProfileTypeInitFlag: WordBool dispid 6;
  end;

// *********************************************************************//
// Interface :   ISponsoredMerchantType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D6EEDF8F-DB3C-46CA-9045-35200F4AC146}
// *********************************************************************//
  ISponsoredMerchantType = interface(IDispatch)
    ['{D6EEDF8F-DB3C-46CA-9045-35200F4AC146}']
    function Get_MerchantName: WideString; safecall;
    procedure Set_MerchantName(const pRetVal: WideString); safecall;
    function Get_MerchantAddress: WideString; safecall;
    procedure Set_MerchantAddress(const pRetVal: WideString); safecall;
    function Get_MerchantCountry: WideString; safecall;
    procedure Set_MerchantCountry(const pRetVal: WideString); safecall;
    function Get_MerchantCategoryCode: WideString; safecall;
    procedure Set_MerchantCategoryCode(const pRetVal: WideString); safecall;
    function Get_RegistrationID: WideString; safecall;
    procedure Set_RegistrationID(const pRetVal: WideString); safecall;
    function Get_xsdSponsoredMerchantTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSponsoredMerchantTypeInitFlag(pRetVal: WordBool); safecall;
    property MerchantName: WideString read Get_MerchantName write Set_MerchantName;
    property MerchantAddress: WideString read Get_MerchantAddress write Set_MerchantAddress;
    property MerchantCountry: WideString read Get_MerchantCountry write Set_MerchantCountry;
    property MerchantCategoryCode: WideString read Get_MerchantCategoryCode write Set_MerchantCategoryCode;
    property RegistrationID: WideString read Get_RegistrationID write Set_RegistrationID;
    property xsdSponsoredMerchantTypeInitFlag: WordBool read Get_xsdSponsoredMerchantTypeInitFlag write Set_xsdSponsoredMerchantTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISponsoredMerchantTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D6EEDF8F-DB3C-46CA-9045-35200F4AC146}
// *********************************************************************//
  ISponsoredMerchantTypeDisp = dispinterface
    ['{D6EEDF8F-DB3C-46CA-9045-35200F4AC146}']
    property MerchantName: WideString dispid 1;
    property MerchantAddress: WideString dispid 3;
    property MerchantCountry: WideString dispid 5;
    property MerchantCategoryCode: WideString dispid 7;
    property RegistrationID: WideString dispid 9;
    property xsdSponsoredMerchantTypeInitFlag: WordBool dispid 11;
  end;

// *********************************************************************//
// Interface :   ISaleToIssuerDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C160F560-EBB7-4BB6-9F61-AEB041F90308}
// *********************************************************************//
  ISaleToIssuerDataType = interface(IDispatch)
    ['{C160F560-EBB7-4BB6-9F61-AEB041F90308}']
    function Get_StatementReference: WideString; safecall;
    procedure Set_StatementReference(const pRetVal: WideString); safecall;
    function Get_xsdSaleToIssuerDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSaleToIssuerDataTypeInitFlag(pRetVal: WordBool); safecall;
    property StatementReference: WideString read Get_StatementReference write Set_StatementReference;
    property xsdSaleToIssuerDataTypeInitFlag: WordBool read Get_xsdSaleToIssuerDataTypeInitFlag write Set_xsdSaleToIssuerDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISaleToIssuerDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {C160F560-EBB7-4BB6-9F61-AEB041F90308}
// *********************************************************************//
  ISaleToIssuerDataTypeDisp = dispinterface
    ['{C160F560-EBB7-4BB6-9F61-AEB041F90308}']
    property StatementReference: WideString dispid 1;
    property xsdSaleToIssuerDataTypeInitFlag: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface :   ILoyaltyTransactionType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4E8F99DA-8AEA-4416-A68B-1607A0F5AF27}
// *********************************************************************//
  ILoyaltyTransactionType = interface(IDispatch)
    ['{4E8F99DA-8AEA-4416-A68B-1607A0F5AF27}']
    function Get_OriginalPOITransaction: IOriginalPOITransactionType; safecall;
    procedure _Set_OriginalPOITransaction(const pRetVal: IOriginalPOITransactionType); safecall;
    function Get_TransactionConditions: ITransactionConditionsType; safecall;
    procedure _Set_TransactionConditions(const pRetVal: ITransactionConditionsType); safecall;
    function Get_SaleItem: PSafeArray; safecall;
    procedure Set_SaleItem(pRetVal: PSafeArray); safecall;
    function Get_LoyaltyTransactionType1: WideString; safecall;
    procedure Set_LoyaltyTransactionType1(const pRetVal: WideString); safecall;
    function Get_currency: WideString; safecall;
    procedure Set_currency(const pRetVal: WideString); safecall;
    function Get_TotalAmount: TDecimal; safecall;
    procedure Set_TotalAmount(pRetVal: TDecimal); safecall;
    function Get_TotalAmountSpecified: WordBool; safecall;
    procedure Set_TotalAmountSpecified(pRetVal: WordBool); safecall;
    function Get_xsdLoyaltyTransactionTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLoyaltyTransactionTypeInitFlag(pRetVal: WordBool); safecall;
    function SaleItemSize: Integer; safecall;
    function SaleItemGetItem(index: Integer): ISaleItemType; safecall;
    function SaleItemSetItem(index: Integer; const Value: ISaleItemType): WordBool; safecall;
    function SaleItemAddItem(const Value: ISaleItemType): WordBool; safecall;
    function SaleItemRemoveItem(index: Integer): WordBool; safecall;
    property OriginalPOITransaction: IOriginalPOITransactionType read Get_OriginalPOITransaction write _Set_OriginalPOITransaction;
    property TransactionConditions: ITransactionConditionsType read Get_TransactionConditions write _Set_TransactionConditions;
    property SaleItem: PSafeArray read Get_SaleItem write Set_SaleItem;
    property LoyaltyTransactionType1: WideString read Get_LoyaltyTransactionType1 write Set_LoyaltyTransactionType1;
    property currency: WideString read Get_currency write Set_currency;
    property TotalAmount: TDecimal read Get_TotalAmount write Set_TotalAmount;
    property TotalAmountSpecified: WordBool read Get_TotalAmountSpecified write Set_TotalAmountSpecified;
    property xsdLoyaltyTransactionTypeInitFlag: WordBool read Get_xsdLoyaltyTransactionTypeInitFlag write Set_xsdLoyaltyTransactionTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyTransactionTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4E8F99DA-8AEA-4416-A68B-1607A0F5AF27}
// *********************************************************************//
  ILoyaltyTransactionTypeDisp = dispinterface
    ['{4E8F99DA-8AEA-4416-A68B-1607A0F5AF27}']
    property OriginalPOITransaction: IOriginalPOITransactionType dispid 1;
    property TransactionConditions: ITransactionConditionsType dispid 3;
    property SaleItem: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property LoyaltyTransactionType1: WideString dispid 7;
    property currency: WideString dispid 9;
    property TotalAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 11;
    property TotalAmountSpecified: WordBool dispid 13;
    property xsdLoyaltyTransactionTypeInitFlag: WordBool dispid 15;
    function SaleItemSize: Integer; dispid 16;
    function SaleItemGetItem(index: Integer): ISaleItemType; dispid 17;
    function SaleItemSetItem(index: Integer; const Value: ISaleItemType): WordBool; dispid 18;
    function SaleItemAddItem(const Value: ISaleItemType): WordBool; dispid 19;
    function SaleItemRemoveItem(index: Integer): WordBool; dispid 20;
  end;

// *********************************************************************//
// Interface :   IOriginalPOITransactionType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F9CF0339-6625-498C-A49C-1C9C03D5C560}
// *********************************************************************//
  IOriginalPOITransactionType = interface(IDispatch)
    ['{F9CF0339-6625-498C-A49C-1C9C03D5C560}']
    function Get_POITransactionID: ITransactionIdentificationType; safecall;
    procedure _Set_POITransactionID(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_ApprovalCode: WideString; safecall;
    procedure Set_ApprovalCode(const pRetVal: WideString); safecall;
    function Get_HostTransactionID: ITransactionIdentificationType; safecall;
    procedure _Set_HostTransactionID(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_ReuseCardDataFlag: WordBool; safecall;
    procedure Set_ReuseCardDataFlag(pRetVal: WordBool); safecall;
    function Get_CustomerLanguage: WideString; safecall;
    procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
    function Get_AcquirerID: WideString; safecall;
    procedure Set_AcquirerID(const pRetVal: WideString); safecall;
    function Get_xsdOriginalPOITransactionTypeInitFlag: WordBool; safecall;
    procedure Set_xsdOriginalPOITransactionTypeInitFlag(pRetVal: WordBool); safecall;
    property POITransactionID: ITransactionIdentificationType read Get_POITransactionID write _Set_POITransactionID;
    property ApprovalCode: WideString read Get_ApprovalCode write Set_ApprovalCode;
    property HostTransactionID: ITransactionIdentificationType read Get_HostTransactionID write _Set_HostTransactionID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property ReuseCardDataFlag: WordBool read Get_ReuseCardDataFlag write Set_ReuseCardDataFlag;
    property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
    property AcquirerID: WideString read Get_AcquirerID write Set_AcquirerID;
    property xsdOriginalPOITransactionTypeInitFlag: WordBool read Get_xsdOriginalPOITransactionTypeInitFlag write Set_xsdOriginalPOITransactionTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IOriginalPOITransactionTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F9CF0339-6625-498C-A49C-1C9C03D5C560}
// *********************************************************************//
  IOriginalPOITransactionTypeDisp = dispinterface
    ['{F9CF0339-6625-498C-A49C-1C9C03D5C560}']
    property POITransactionID: ITransactionIdentificationType dispid 2;
    property ApprovalCode: WideString dispid 4;
    property HostTransactionID: ITransactionIdentificationType dispid 6;
    property SaleID: WideString dispid 8;
    property POIID: WideString dispid 10;
    property ReuseCardDataFlag: WordBool dispid 12;
    property CustomerLanguage: WideString dispid 14;
    property AcquirerID: WideString dispid 16;
    property xsdOriginalPOITransactionTypeInitFlag: WordBool dispid 18;
  end;

// *********************************************************************//
// Interface :   ITransactionConditionsType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {487A58B9-E70B-4479-9B77-6B87BD28B5BD}
// *********************************************************************//
  ITransactionConditionsType = interface(IDispatch)
    ['{487A58B9-E70B-4479-9B77-6B87BD28B5BD}']
    function Get_AllowedPaymentBrand: PSafeArray; safecall;
    procedure Set_AllowedPaymentBrand(pRetVal: PSafeArray); safecall;
    function Get_AcquirerID: PSafeArray; safecall;
    procedure Set_AcquirerID(pRetVal: PSafeArray); safecall;
    function Get_AllowedLoyaltyBrand: PSafeArray; safecall;
    procedure Set_AllowedLoyaltyBrand(pRetVal: PSafeArray); safecall;
    function Get_ForceEntryMode: PSafeArray; safecall;
    procedure Set_ForceEntryMode(pRetVal: PSafeArray); safecall;
    function Get_DebitPreferredFlag: WordBool; safecall;
    procedure Set_DebitPreferredFlag(pRetVal: WordBool); safecall;
    function Get_LoyaltyHandling: WideString; safecall;
    procedure Set_LoyaltyHandling(const pRetVal: WideString); safecall;
    function Get_CustomerLanguage: WideString; safecall;
    procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
    function Get_ForceOnlineFlag: WordBool; safecall;
    procedure Set_ForceOnlineFlag(pRetVal: WordBool); safecall;
    function Get_MerchantCategoryCode: WideString; safecall;
    procedure Set_MerchantCategoryCode(const pRetVal: WideString); safecall;
    function Get_xsdTransactionConditionsTypeInitFlag: WordBool; safecall;
    procedure Set_xsdTransactionConditionsTypeInitFlag(pRetVal: WordBool); safecall;
    function AllowedPaymentBrandSize: Integer; safecall;
    function AllowedPaymentBrandGetItem(index: Integer): WideString; safecall;
    function AllowedPaymentBrandSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function AllowedPaymentBrandAddItem(const Value: WideString): WordBool; safecall;
    function AllowedPaymentBrandRemoveItem(index: Integer): WordBool; safecall;
    function AcquirerIDSize: Integer; safecall;
    function AcquirerIDGetItem(index: Integer): WideString; safecall;
    function AcquirerIDSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function AcquirerIDAddItem(const Value: WideString): WordBool; safecall;
    function AcquirerIDRemoveItem(index: Integer): WordBool; safecall;
    function AllowedLoyaltyBrandSize: Integer; safecall;
    function AllowedLoyaltyBrandGetItem(index: Integer): WideString; safecall;
    function AllowedLoyaltyBrandSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function AllowedLoyaltyBrandAddItem(const Value: WideString): WordBool; safecall;
    function AllowedLoyaltyBrandRemoveItem(index: Integer): WordBool; safecall;
    function ForceEntryModeSize: Integer; safecall;
    function ForceEntryModeGetItem(index: Integer): WideString; safecall;
    function ForceEntryModeSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function ForceEntryModeAddItem(const Value: WideString): WordBool; safecall;
    function ForceEntryModeRemoveItem(index: Integer): WordBool; safecall;
    property AllowedPaymentBrand: PSafeArray read Get_AllowedPaymentBrand write Set_AllowedPaymentBrand;
    property AcquirerID: PSafeArray read Get_AcquirerID write Set_AcquirerID;
    property AllowedLoyaltyBrand: PSafeArray read Get_AllowedLoyaltyBrand write Set_AllowedLoyaltyBrand;
    property ForceEntryMode: PSafeArray read Get_ForceEntryMode write Set_ForceEntryMode;
    property DebitPreferredFlag: WordBool read Get_DebitPreferredFlag write Set_DebitPreferredFlag;
    property LoyaltyHandling: WideString read Get_LoyaltyHandling write Set_LoyaltyHandling;
    property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
    property ForceOnlineFlag: WordBool read Get_ForceOnlineFlag write Set_ForceOnlineFlag;
    property MerchantCategoryCode: WideString read Get_MerchantCategoryCode write Set_MerchantCategoryCode;
    property xsdTransactionConditionsTypeInitFlag: WordBool read Get_xsdTransactionConditionsTypeInitFlag write Set_xsdTransactionConditionsTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ITransactionConditionsTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {487A58B9-E70B-4479-9B77-6B87BD28B5BD}
// *********************************************************************//
  ITransactionConditionsTypeDisp = dispinterface
    ['{487A58B9-E70B-4479-9B77-6B87BD28B5BD}']
    property AllowedPaymentBrand: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property AcquirerID: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property AllowedLoyaltyBrand: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 6;
    property ForceEntryMode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 8;
    property DebitPreferredFlag: WordBool dispid 10;
    property LoyaltyHandling: WideString dispid 12;
    property CustomerLanguage: WideString dispid 14;
    property ForceOnlineFlag: WordBool dispid 16;
    property MerchantCategoryCode: WideString dispid 18;
    property xsdTransactionConditionsTypeInitFlag: WordBool dispid 20;
    function AllowedPaymentBrandSize: Integer; dispid 21;
    function AllowedPaymentBrandGetItem(index: Integer): WideString; dispid 22;
    function AllowedPaymentBrandSetItem(index: Integer; const Value: WideString): WordBool; dispid 23;
    function AllowedPaymentBrandAddItem(const Value: WideString): WordBool; dispid 24;
    function AllowedPaymentBrandRemoveItem(index: Integer): WordBool; dispid 25;
    function AcquirerIDSize: Integer; dispid 26;
    function AcquirerIDGetItem(index: Integer): WideString; dispid 27;
    function AcquirerIDSetItem(index: Integer; const Value: WideString): WordBool; dispid 28;
    function AcquirerIDAddItem(const Value: WideString): WordBool; dispid 29;
    function AcquirerIDRemoveItem(index: Integer): WordBool; dispid 30;
    function AllowedLoyaltyBrandSize: Integer; dispid 31;
    function AllowedLoyaltyBrandGetItem(index: Integer): WideString; dispid 32;
    function AllowedLoyaltyBrandSetItem(index: Integer; const Value: WideString): WordBool; dispid 33;
    function AllowedLoyaltyBrandAddItem(const Value: WideString): WordBool; dispid 34;
    function AllowedLoyaltyBrandRemoveItem(index: Integer): WordBool; dispid 35;
    function ForceEntryModeSize: Integer; dispid 36;
    function ForceEntryModeGetItem(index: Integer): WideString; dispid 37;
    function ForceEntryModeSetItem(index: Integer; const Value: WideString): WordBool; dispid 38;
    function ForceEntryModeAddItem(const Value: WideString): WordBool; dispid 39;
    function ForceEntryModeRemoveItem(index: Integer): WordBool; dispid 40;
  end;

// *********************************************************************//
// Interface :   ISaleItemType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B71142E5-0AB9-4144-945E-5AF10DDBD9B5}
// *********************************************************************//
  ISaleItemType = interface(IDispatch)
    ['{B71142E5-0AB9-4144-945E-5AF10DDBD9B5}']
    function Get_UnitOfMeasure: WideString; safecall;
    procedure Set_UnitOfMeasure(const pRetVal: WideString); safecall;
    function Get_Quantity: TDecimal; safecall;
    procedure Set_Quantity(pRetVal: TDecimal); safecall;
    function Get_QuantitySpecified: WordBool; safecall;
    procedure Set_QuantitySpecified(pRetVal: WordBool); safecall;
    function Get_UnitPrice: TDecimal; safecall;
    procedure Set_UnitPrice(pRetVal: TDecimal); safecall;
    function Get_UnitPriceSpecified: WordBool; safecall;
    procedure Set_UnitPriceSpecified(pRetVal: WordBool); safecall;
    function Get_TaxCode: WideString; safecall;
    procedure Set_TaxCode(const pRetVal: WideString); safecall;
    function Get_SaleChannel: WideString; safecall;
    procedure Set_SaleChannel(const pRetVal: WideString); safecall;
    function Get_ProductLabel: WideString; safecall;
    procedure Set_ProductLabel(const pRetVal: WideString); safecall;
    function Get_AdditionalProductInfo: WideString; safecall;
    procedure Set_AdditionalProductInfo(const pRetVal: WideString); safecall;
    function Get_ItemID: WideString; safecall;
    procedure Set_ItemID(const pRetVal: WideString); safecall;
    function Get_ProductCode: WideString; safecall;
    procedure Set_ProductCode(const pRetVal: WideString); safecall;
    function Get_EanUpc: WideString; safecall;
    procedure Set_EanUpc(const pRetVal: WideString); safecall;
    function Get_ItemAmount: TDecimal; safecall;
    procedure Set_ItemAmount(pRetVal: TDecimal); safecall;
    function Get_xsdSaleItemTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSaleItemTypeInitFlag(pRetVal: WordBool); safecall;
    property UnitOfMeasure: WideString read Get_UnitOfMeasure write Set_UnitOfMeasure;
    property Quantity: TDecimal read Get_Quantity write Set_Quantity;
    property QuantitySpecified: WordBool read Get_QuantitySpecified write Set_QuantitySpecified;
    property UnitPrice: TDecimal read Get_UnitPrice write Set_UnitPrice;
    property UnitPriceSpecified: WordBool read Get_UnitPriceSpecified write Set_UnitPriceSpecified;
    property TaxCode: WideString read Get_TaxCode write Set_TaxCode;
    property SaleChannel: WideString read Get_SaleChannel write Set_SaleChannel;
    property ProductLabel: WideString read Get_ProductLabel write Set_ProductLabel;
    property AdditionalProductInfo: WideString read Get_AdditionalProductInfo write Set_AdditionalProductInfo;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property ProductCode: WideString read Get_ProductCode write Set_ProductCode;
    property EanUpc: WideString read Get_EanUpc write Set_EanUpc;
    property ItemAmount: TDecimal read Get_ItemAmount write Set_ItemAmount;
    property xsdSaleItemTypeInitFlag: WordBool read Get_xsdSaleItemTypeInitFlag write Set_xsdSaleItemTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISaleItemTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B71142E5-0AB9-4144-945E-5AF10DDBD9B5}
// *********************************************************************//
  ISaleItemTypeDisp = dispinterface
    ['{B71142E5-0AB9-4144-945E-5AF10DDBD9B5}']
    property UnitOfMeasure: WideString dispid 1;
    property Quantity: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 3;
    property QuantitySpecified: WordBool dispid 5;
    property UnitPrice: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 7;
    property UnitPriceSpecified: WordBool dispid 9;
    property TaxCode: WideString dispid 11;
    property SaleChannel: WideString dispid 13;
    property ProductLabel: WideString dispid 15;
    property AdditionalProductInfo: WideString dispid 17;
    property ItemID: WideString dispid 19;
    property ProductCode: WideString dispid 21;
    property EanUpc: WideString dispid 23;
    property ItemAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 25;
    property xsdSaleItemTypeInitFlag: WordBool dispid 27;
  end;

// *********************************************************************//
// Interface :   ILoyaltyDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {26F4B618-EE5D-49C5-965A-076FD6918F4B}
// *********************************************************************//
  ILoyaltyDataType = interface(IDispatch)
    ['{26F4B618-EE5D-49C5-965A-076FD6918F4B}']
    function Get_CardAcquisitionReference: ITransactionIdentificationType; safecall;
    procedure _Set_CardAcquisitionReference(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_LoyaltyAccountID: ILoyaltyAccountIDType; safecall;
    procedure _Set_LoyaltyAccountID(const pRetVal: ILoyaltyAccountIDType); safecall;
    function Get_LoyaltyAmount: ILoyaltyAmountType; safecall;
    procedure _Set_LoyaltyAmount(const pRetVal: ILoyaltyAmountType); safecall;
    function Get_xsdLoyaltyDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLoyaltyDataTypeInitFlag(pRetVal: WordBool); safecall;
    property CardAcquisitionReference: ITransactionIdentificationType read Get_CardAcquisitionReference write _Set_CardAcquisitionReference;
    property LoyaltyAccountID: ILoyaltyAccountIDType read Get_LoyaltyAccountID write _Set_LoyaltyAccountID;
    property LoyaltyAmount: ILoyaltyAmountType read Get_LoyaltyAmount write _Set_LoyaltyAmount;
    property xsdLoyaltyDataTypeInitFlag: WordBool read Get_xsdLoyaltyDataTypeInitFlag write Set_xsdLoyaltyDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {26F4B618-EE5D-49C5-965A-076FD6918F4B}
// *********************************************************************//
  ILoyaltyDataTypeDisp = dispinterface
    ['{26F4B618-EE5D-49C5-965A-076FD6918F4B}']
    property CardAcquisitionReference: ITransactionIdentificationType dispid 1;
    property LoyaltyAccountID: ILoyaltyAccountIDType dispid 3;
    property LoyaltyAmount: ILoyaltyAmountType dispid 5;
    property xsdLoyaltyDataTypeInitFlag: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface :   ILoyaltyAmountType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1F83E6E9-E1BF-4C8D-B1D7-FE3E01E3196B}
// *********************************************************************//
  ILoyaltyAmountType = interface(IDispatch)
    ['{1F83E6E9-E1BF-4C8D-B1D7-FE3E01E3196B}']
    function Get_LoyaltyUnit: WideString; safecall;
    procedure Set_LoyaltyUnit(const pRetVal: WideString); safecall;
    function Get_currency: WideString; safecall;
    procedure Set_currency(const pRetVal: WideString); safecall;
    function Get_Value: TDecimal; safecall;
    procedure Set_Value(pRetVal: TDecimal); safecall;
    function Get_xsdLoyaltyAmountTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLoyaltyAmountTypeInitFlag(pRetVal: WordBool); safecall;
    property LoyaltyUnit: WideString read Get_LoyaltyUnit write Set_LoyaltyUnit;
    property currency: WideString read Get_currency write Set_currency;
    property Value: TDecimal read Get_Value write Set_Value;
    property xsdLoyaltyAmountTypeInitFlag: WordBool read Get_xsdLoyaltyAmountTypeInitFlag write Set_xsdLoyaltyAmountTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyAmountTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1F83E6E9-E1BF-4C8D-B1D7-FE3E01E3196B}
// *********************************************************************//
  ILoyaltyAmountTypeDisp = dispinterface
    ['{1F83E6E9-E1BF-4C8D-B1D7-FE3E01E3196B}']
    property LoyaltyUnit: WideString dispid 2;
    property currency: WideString dispid 4;
    property Value: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 6;
    property xsdLoyaltyAmountTypeInitFlag: WordBool dispid 8;
  end;

// *********************************************************************//
// Interface :   IPaymentRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0A2EA7B4-D671-461A-B68D-9496C8A9ABA2}
// *********************************************************************//
  IPaymentRequestType = interface(IDispatch)
    ['{0A2EA7B4-D671-461A-B68D-9496C8A9ABA2}']
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_PaymentTransaction: IPaymentTransactionType; safecall;
    procedure _Set_PaymentTransaction(const pRetVal: IPaymentTransactionType); safecall;
    function Get_PaymentData: IPaymentDataType; safecall;
    procedure _Set_PaymentData(const pRetVal: IPaymentDataType); safecall;
    function Get_LoyaltyData: PSafeArray; safecall;
    procedure Set_LoyaltyData(pRetVal: PSafeArray); safecall;
    function Get_xsdPaymentRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPaymentRequestTypeInitFlag(pRetVal: WordBool); safecall;
    function LoyaltyDataSize: Integer; safecall;
    function LoyaltyDataGetItem(index: Integer): ILoyaltyDataType; safecall;
    function LoyaltyDataSetItem(index: Integer; const Value: ILoyaltyDataType): WordBool; safecall;
    function LoyaltyDataAddItem(const Value: ILoyaltyDataType): WordBool; safecall;
    function LoyaltyDataRemoveItem(index: Integer): WordBool; safecall;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property PaymentTransaction: IPaymentTransactionType read Get_PaymentTransaction write _Set_PaymentTransaction;
    property PaymentData: IPaymentDataType read Get_PaymentData write _Set_PaymentData;
    property LoyaltyData: PSafeArray read Get_LoyaltyData write Set_LoyaltyData;
    property xsdPaymentRequestTypeInitFlag: WordBool read Get_xsdPaymentRequestTypeInitFlag write Set_xsdPaymentRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPaymentRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0A2EA7B4-D671-461A-B68D-9496C8A9ABA2}
// *********************************************************************//
  IPaymentRequestTypeDisp = dispinterface
    ['{0A2EA7B4-D671-461A-B68D-9496C8A9ABA2}']
    property SaleData: ISaleDataType dispid 1;
    property PaymentTransaction: IPaymentTransactionType dispid 3;
    property PaymentData: IPaymentDataType dispid 5;
    property LoyaltyData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 7;
    property xsdPaymentRequestTypeInitFlag: WordBool dispid 9;
    function LoyaltyDataSize: Integer; dispid 10;
    function LoyaltyDataGetItem(index: Integer): ILoyaltyDataType; dispid 11;
    function LoyaltyDataSetItem(index: Integer; const Value: ILoyaltyDataType): WordBool; dispid 12;
    function LoyaltyDataAddItem(const Value: ILoyaltyDataType): WordBool; dispid 13;
    function LoyaltyDataRemoveItem(index: Integer): WordBool; dispid 14;
  end;

// *********************************************************************//
// Interface :   IPaymentTransactionType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {91DF001E-B87B-4148-8741-2D04436640DA}
// *********************************************************************//
  IPaymentTransactionType = interface(IDispatch)
    ['{91DF001E-B87B-4148-8741-2D04436640DA}']
    function Get_AmountsReq: IAmountsReqType; safecall;
    procedure _Set_AmountsReq(const pRetVal: IAmountsReqType); safecall;
    function Get_OriginalPOITransaction: IOriginalPOITransactionType; safecall;
    procedure _Set_OriginalPOITransaction(const pRetVal: IOriginalPOITransactionType); safecall;
    function Get_TransactionConditions: ITransactionConditionsType; safecall;
    procedure _Set_TransactionConditions(const pRetVal: ITransactionConditionsType); safecall;
    function Get_SaleItem: PSafeArray; safecall;
    procedure Set_SaleItem(pRetVal: PSafeArray); safecall;
    function Get_xsdPaymentTransactionTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPaymentTransactionTypeInitFlag(pRetVal: WordBool); safecall;
    function SaleItemSize: Integer; safecall;
    function SaleItemGetItem(index: Integer): ISaleItemType; safecall;
    function SaleItemSetItem(index: Integer; const Value: ISaleItemType): WordBool; safecall;
    function SaleItemAddItem(const Value: ISaleItemType): WordBool; safecall;
    function SaleItemRemoveItem(index: Integer): WordBool; safecall;
    property AmountsReq: IAmountsReqType read Get_AmountsReq write _Set_AmountsReq;
    property OriginalPOITransaction: IOriginalPOITransactionType read Get_OriginalPOITransaction write _Set_OriginalPOITransaction;
    property TransactionConditions: ITransactionConditionsType read Get_TransactionConditions write _Set_TransactionConditions;
    property SaleItem: PSafeArray read Get_SaleItem write Set_SaleItem;
    property xsdPaymentTransactionTypeInitFlag: WordBool read Get_xsdPaymentTransactionTypeInitFlag write Set_xsdPaymentTransactionTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPaymentTransactionTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {91DF001E-B87B-4148-8741-2D04436640DA}
// *********************************************************************//
  IPaymentTransactionTypeDisp = dispinterface
    ['{91DF001E-B87B-4148-8741-2D04436640DA}']
    property AmountsReq: IAmountsReqType dispid 1;
    property OriginalPOITransaction: IOriginalPOITransactionType dispid 3;
    property TransactionConditions: ITransactionConditionsType dispid 5;
    property SaleItem: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 7;
    property xsdPaymentTransactionTypeInitFlag: WordBool dispid 9;
    function SaleItemSize: Integer; dispid 10;
    function SaleItemGetItem(index: Integer): ISaleItemType; dispid 11;
    function SaleItemSetItem(index: Integer; const Value: ISaleItemType): WordBool; dispid 12;
    function SaleItemAddItem(const Value: ISaleItemType): WordBool; dispid 13;
    function SaleItemRemoveItem(index: Integer): WordBool; dispid 14;
  end;

// *********************************************************************//
// Interface :   IPaymentDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {101AB398-936F-4463-90AC-65F12939A335}
// *********************************************************************//
  IPaymentDataType = interface(IDispatch)
    ['{101AB398-936F-4463-90AC-65F12939A335}']
    function Get_CardAcquisitionReference: ITransactionIdentificationType; safecall;
    procedure _Set_CardAcquisitionReference(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_RequestedValidityDate: WideString; safecall;
    procedure Set_RequestedValidityDate(const pRetVal: WideString); safecall;
    function Get_Instalment: IInstalmentType; safecall;
    procedure _Set_Instalment(const pRetVal: IInstalmentType); safecall;
    function Get_CustomerOrder: ICustomerOrderType; safecall;
    procedure _Set_CustomerOrder(const pRetVal: ICustomerOrderType); safecall;
    function Get_PaymentInstrumentData: IPaymentInstrumentDataType; safecall;
    procedure _Set_PaymentInstrumentData(const pRetVal: IPaymentInstrumentDataType); safecall;
    function Get_PaymentType: WideString; safecall;
    procedure Set_PaymentType(const pRetVal: WideString); safecall;
    function Get_SplitPaymentFlag: WordBool; safecall;
    procedure Set_SplitPaymentFlag(pRetVal: WordBool); safecall;
    function Get_xsdPaymentDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPaymentDataTypeInitFlag(pRetVal: WordBool); safecall;
    property CardAcquisitionReference: ITransactionIdentificationType read Get_CardAcquisitionReference write _Set_CardAcquisitionReference;
    property RequestedValidityDate: WideString read Get_RequestedValidityDate write Set_RequestedValidityDate;
    property Instalment: IInstalmentType read Get_Instalment write _Set_Instalment;
    property CustomerOrder: ICustomerOrderType read Get_CustomerOrder write _Set_CustomerOrder;
    property PaymentInstrumentData: IPaymentInstrumentDataType read Get_PaymentInstrumentData write _Set_PaymentInstrumentData;
    property PaymentType: WideString read Get_PaymentType write Set_PaymentType;
    property SplitPaymentFlag: WordBool read Get_SplitPaymentFlag write Set_SplitPaymentFlag;
    property xsdPaymentDataTypeInitFlag: WordBool read Get_xsdPaymentDataTypeInitFlag write Set_xsdPaymentDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPaymentDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {101AB398-936F-4463-90AC-65F12939A335}
// *********************************************************************//
  IPaymentDataTypeDisp = dispinterface
    ['{101AB398-936F-4463-90AC-65F12939A335}']
    property CardAcquisitionReference: ITransactionIdentificationType dispid 2;
    property RequestedValidityDate: WideString dispid 4;
    property Instalment: IInstalmentType dispid 6;
    property CustomerOrder: ICustomerOrderType dispid 8;
    property PaymentInstrumentData: IPaymentInstrumentDataType dispid 10;
    property PaymentType: WideString dispid 12;
    property SplitPaymentFlag: WordBool dispid 14;
    property xsdPaymentDataTypeInitFlag: WordBool dispid 16;
  end;

// *********************************************************************//
// Interface :   IInstalmentType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1B2C52FC-AE54-49B7-A5C6-03AF48167FEC}
// *********************************************************************//
  IInstalmentType = interface(IDispatch)
    ['{1B2C52FC-AE54-49B7-A5C6-03AF48167FEC}']
    function Get_InstalmentType1: WideString; safecall;
    procedure Set_InstalmentType1(const pRetVal: WideString); safecall;
    function Get_SequenceNumber: WideString; safecall;
    procedure Set_SequenceNumber(const pRetVal: WideString); safecall;
    function Get_PlanID: WideString; safecall;
    procedure Set_PlanID(const pRetVal: WideString); safecall;
    function Get_Period: WideString; safecall;
    procedure Set_Period(const pRetVal: WideString); safecall;
    function Get_PeriodUnit: WideString; safecall;
    procedure Set_PeriodUnit(const pRetVal: WideString); safecall;
    function Get_FirstPaymentDate: WideString; safecall;
    procedure Set_FirstPaymentDate(const pRetVal: WideString); safecall;
    function Get_TotalNbOfPayments: WideString; safecall;
    procedure Set_TotalNbOfPayments(const pRetVal: WideString); safecall;
    function Get_CumulativeAmount: TDecimal; safecall;
    procedure Set_CumulativeAmount(pRetVal: TDecimal); safecall;
    function Get_CumulativeAmountSpecified: WordBool; safecall;
    procedure Set_CumulativeAmountSpecified(pRetVal: WordBool); safecall;
    function Get_FirstAmount: TDecimal; safecall;
    procedure Set_FirstAmount(pRetVal: TDecimal); safecall;
    function Get_FirstAmountSpecified: WordBool; safecall;
    procedure Set_FirstAmountSpecified(pRetVal: WordBool); safecall;
    function Get_Charges: TDecimal; safecall;
    procedure Set_Charges(pRetVal: TDecimal); safecall;
    function Get_ChargesSpecified: WordBool; safecall;
    procedure Set_ChargesSpecified(pRetVal: WordBool); safecall;
    function Get_xsdInstalmentTypeInitFlag: WordBool; safecall;
    procedure Set_xsdInstalmentTypeInitFlag(pRetVal: WordBool); safecall;
    property InstalmentType1: WideString read Get_InstalmentType1 write Set_InstalmentType1;
    property SequenceNumber: WideString read Get_SequenceNumber write Set_SequenceNumber;
    property PlanID: WideString read Get_PlanID write Set_PlanID;
    property Period: WideString read Get_Period write Set_Period;
    property PeriodUnit: WideString read Get_PeriodUnit write Set_PeriodUnit;
    property FirstPaymentDate: WideString read Get_FirstPaymentDate write Set_FirstPaymentDate;
    property TotalNbOfPayments: WideString read Get_TotalNbOfPayments write Set_TotalNbOfPayments;
    property CumulativeAmount: TDecimal read Get_CumulativeAmount write Set_CumulativeAmount;
    property CumulativeAmountSpecified: WordBool read Get_CumulativeAmountSpecified write Set_CumulativeAmountSpecified;
    property FirstAmount: TDecimal read Get_FirstAmount write Set_FirstAmount;
    property FirstAmountSpecified: WordBool read Get_FirstAmountSpecified write Set_FirstAmountSpecified;
    property Charges: TDecimal read Get_Charges write Set_Charges;
    property ChargesSpecified: WordBool read Get_ChargesSpecified write Set_ChargesSpecified;
    property xsdInstalmentTypeInitFlag: WordBool read Get_xsdInstalmentTypeInitFlag write Set_xsdInstalmentTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IInstalmentTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1B2C52FC-AE54-49B7-A5C6-03AF48167FEC}
// *********************************************************************//
  IInstalmentTypeDisp = dispinterface
    ['{1B2C52FC-AE54-49B7-A5C6-03AF48167FEC}']
    property InstalmentType1: WideString dispid 1;
    property SequenceNumber: WideString dispid 3;
    property PlanID: WideString dispid 5;
    property Period: WideString dispid 7;
    property PeriodUnit: WideString dispid 9;
    property FirstPaymentDate: WideString dispid 11;
    property TotalNbOfPayments: WideString dispid 13;
    property CumulativeAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 15;
    property CumulativeAmountSpecified: WordBool dispid 17;
    property FirstAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 19;
    property FirstAmountSpecified: WordBool dispid 21;
    property Charges: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 23;
    property ChargesSpecified: WordBool dispid 25;
    property xsdInstalmentTypeInitFlag: WordBool dispid 27;
  end;

// *********************************************************************//
// Interface :   IReversalRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {855DA19B-FCFF-412F-826F-4F297051AB0D}
// *********************************************************************//
  IReversalRequestType = interface(IDispatch)
    ['{855DA19B-FCFF-412F-826F-4F297051AB0D}']
    function Get_OriginalPOITransaction: IOriginalPOITransactionType; safecall;
    procedure _Set_OriginalPOITransaction(const pRetVal: IOriginalPOITransactionType); safecall;
    function Get_CustomerOrderID: ICustomerOrderType; safecall;
    procedure _Set_CustomerOrderID(const pRetVal: ICustomerOrderType); safecall;
    function Get_SaleReferenceID: WideString; safecall;
    procedure Set_SaleReferenceID(const pRetVal: WideString); safecall;
    function Get_ReversalReason: WideString; safecall;
    procedure Set_ReversalReason(const pRetVal: WideString); safecall;
    function Get_ReversedAmount: TDecimal; safecall;
    procedure Set_ReversedAmount(pRetVal: TDecimal); safecall;
    function Get_ReversedAmountSpecified: WordBool; safecall;
    procedure Set_ReversedAmountSpecified(pRetVal: WordBool); safecall;
    function Get_xsdReversalRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdReversalRequestTypeInitFlag(pRetVal: WordBool); safecall;
    property OriginalPOITransaction: IOriginalPOITransactionType read Get_OriginalPOITransaction write _Set_OriginalPOITransaction;
    property CustomerOrderID: ICustomerOrderType read Get_CustomerOrderID write _Set_CustomerOrderID;
    property SaleReferenceID: WideString read Get_SaleReferenceID write Set_SaleReferenceID;
    property ReversalReason: WideString read Get_ReversalReason write Set_ReversalReason;
    property ReversedAmount: TDecimal read Get_ReversedAmount write Set_ReversedAmount;
    property ReversedAmountSpecified: WordBool read Get_ReversedAmountSpecified write Set_ReversedAmountSpecified;
    property xsdReversalRequestTypeInitFlag: WordBool read Get_xsdReversalRequestTypeInitFlag write Set_xsdReversalRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IReversalRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {855DA19B-FCFF-412F-826F-4F297051AB0D}
// *********************************************************************//
  IReversalRequestTypeDisp = dispinterface
    ['{855DA19B-FCFF-412F-826F-4F297051AB0D}']
    property OriginalPOITransaction: IOriginalPOITransactionType dispid 1;
    property CustomerOrderID: ICustomerOrderType dispid 3;
    property SaleReferenceID: WideString dispid 5;
    property ReversalReason: WideString dispid 7;
    property ReversedAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 9;
    property ReversedAmountSpecified: WordBool dispid 11;
    property xsdReversalRequestTypeInitFlag: WordBool dispid 13;
  end;

// *********************************************************************//
// Interface :   IBatchResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {114F1C3D-AE53-4336-86F0-2EF0FE392509}
// *********************************************************************//
  IBatchResponseType = interface(IDispatch)
    ['{114F1C3D-AE53-4336-86F0-2EF0FE392509}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_PerformedTransaction: PSafeArray; safecall;
    procedure Set_PerformedTransaction(pRetVal: PSafeArray); safecall;
    function Get_xsdBatchResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdBatchResponseTypeInitFlag(pRetVal: WordBool); safecall;
    function PerformedTransactionSize: Integer; safecall;
    function PerformedTransactionGetItem(index: Integer): IPerformedTransactionType; safecall;
    function PerformedTransactionSetItem(index: Integer; const Value: IPerformedTransactionType): WordBool; safecall;
    function PerformedTransactionAddItem(const Value: IPerformedTransactionType): WordBool; safecall;
    function PerformedTransactionRemoveItem(index: Integer): WordBool; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property PerformedTransaction: PSafeArray read Get_PerformedTransaction write Set_PerformedTransaction;
    property xsdBatchResponseTypeInitFlag: WordBool read Get_xsdBatchResponseTypeInitFlag write Set_xsdBatchResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IBatchResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {114F1C3D-AE53-4336-86F0-2EF0FE392509}
// *********************************************************************//
  IBatchResponseTypeDisp = dispinterface
    ['{114F1C3D-AE53-4336-86F0-2EF0FE392509}']
    property Response: IResponseType dispid 1;
    property PerformedTransaction: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property xsdBatchResponseTypeInitFlag: WordBool dispid 5;
    function PerformedTransactionSize: Integer; dispid 6;
    function PerformedTransactionGetItem(index: Integer): IPerformedTransactionType; dispid 7;
    function PerformedTransactionSetItem(index: Integer; const Value: IPerformedTransactionType): WordBool; dispid 8;
    function PerformedTransactionAddItem(const Value: IPerformedTransactionType): WordBool; dispid 9;
    function PerformedTransactionRemoveItem(index: Integer): WordBool; dispid 10;
  end;

// *********************************************************************//
// Interface :   IPerformedTransactionType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {770F162A-50AA-4766-974E-55AC9511DCAF}
// *********************************************************************//
  IPerformedTransactionType = interface(IDispatch)
    ['{770F162A-50AA-4766-974E-55AC9511DCAF}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_POIData: IPOIDataType; safecall;
    procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
    function Get_PaymentResult: IPaymentResultType; safecall;
    procedure _Set_PaymentResult(const pRetVal: IPaymentResultType); safecall;
    function Get_LoyaltyResult: PSafeArray; safecall;
    procedure Set_LoyaltyResult(pRetVal: PSafeArray); safecall;
    function Get_ReversedAmount: TDecimal; safecall;
    procedure Set_ReversedAmount(pRetVal: TDecimal); safecall;
    function Get_ReversedAmountSpecified: WordBool; safecall;
    procedure Set_ReversedAmountSpecified(pRetVal: WordBool); safecall;
    function Get_xsdPerformedTransactionTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPerformedTransactionTypeInitFlag(pRetVal: WordBool); safecall;
    function LoyaltyResultSize: Integer; safecall;
    function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; safecall;
    function LoyaltyResultSetItem(index: Integer; const Value: ILoyaltyResultType): WordBool; safecall;
    function LoyaltyResultAddItem(const Value: ILoyaltyResultType): WordBool; safecall;
    function LoyaltyResultRemoveItem(index: Integer): WordBool; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property POIData: IPOIDataType read Get_POIData write _Set_POIData;
    property PaymentResult: IPaymentResultType read Get_PaymentResult write _Set_PaymentResult;
    property LoyaltyResult: PSafeArray read Get_LoyaltyResult write Set_LoyaltyResult;
    property ReversedAmount: TDecimal read Get_ReversedAmount write Set_ReversedAmount;
    property ReversedAmountSpecified: WordBool read Get_ReversedAmountSpecified write Set_ReversedAmountSpecified;
    property xsdPerformedTransactionTypeInitFlag: WordBool read Get_xsdPerformedTransactionTypeInitFlag write Set_xsdPerformedTransactionTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPerformedTransactionTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {770F162A-50AA-4766-974E-55AC9511DCAF}
// *********************************************************************//
  IPerformedTransactionTypeDisp = dispinterface
    ['{770F162A-50AA-4766-974E-55AC9511DCAF}']
    property Response: IResponseType dispid 1;
    property SaleData: ISaleDataType dispid 3;
    property POIData: IPOIDataType dispid 5;
    property PaymentResult: IPaymentResultType dispid 7;
    property LoyaltyResult: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 9;
    property ReversedAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 11;
    property ReversedAmountSpecified: WordBool dispid 13;
    property xsdPerformedTransactionTypeInitFlag: WordBool dispid 15;
    function LoyaltyResultSize: Integer; dispid 16;
    function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; dispid 17;
    function LoyaltyResultSetItem(index: Integer; const Value: ILoyaltyResultType): WordBool; dispid 18;
    function LoyaltyResultAddItem(const Value: ILoyaltyResultType): WordBool; dispid 19;
    function LoyaltyResultRemoveItem(index: Integer): WordBool; dispid 20;
  end;

// *********************************************************************//
// Interface :   IPOIDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9ED102D7-70AF-4EF6-A67D-1894928D6F7A}
// *********************************************************************//
  IPOIDataType = interface(IDispatch)
    ['{9ED102D7-70AF-4EF6-A67D-1894928D6F7A}']
    function Get_POITransactionID: ITransactionIdentificationType; safecall;
    procedure _Set_POITransactionID(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_POIReconciliationID: WideString; safecall;
    procedure Set_POIReconciliationID(const pRetVal: WideString); safecall;
    function Get_xsdPOIDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPOIDataTypeInitFlag(pRetVal: WordBool); safecall;
    property POITransactionID: ITransactionIdentificationType read Get_POITransactionID write _Set_POITransactionID;
    property POIReconciliationID: WideString read Get_POIReconciliationID write Set_POIReconciliationID;
    property xsdPOIDataTypeInitFlag: WordBool read Get_xsdPOIDataTypeInitFlag write Set_xsdPOIDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPOIDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9ED102D7-70AF-4EF6-A67D-1894928D6F7A}
// *********************************************************************//
  IPOIDataTypeDisp = dispinterface
    ['{9ED102D7-70AF-4EF6-A67D-1894928D6F7A}']
    property POITransactionID: ITransactionIdentificationType dispid 1;
    property POIReconciliationID: WideString dispid 3;
    property xsdPOIDataTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IPaymentResultType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {87179765-5D04-427B-86AE-DAB53C2A43EE}
// *********************************************************************//
  IPaymentResultType = interface(IDispatch)
    ['{87179765-5D04-427B-86AE-DAB53C2A43EE}']
    function Get_PaymentInstrumentData: IPaymentInstrumentDataType; safecall;
    procedure _Set_PaymentInstrumentData(const pRetVal: IPaymentInstrumentDataType); safecall;
    function Get_AmountsResp: IAmountsRespType; safecall;
    procedure _Set_AmountsResp(const pRetVal: IAmountsRespType); safecall;
    function Get_Instalment: IInstalmentType; safecall;
    procedure _Set_Instalment(const pRetVal: IInstalmentType); safecall;
    function Get_CurrencyConversion: PSafeArray; safecall;
    procedure Set_CurrencyConversion(pRetVal: PSafeArray); safecall;
    function Get_CapturedSignature: ICapturedSignatureType; safecall;
    procedure _Set_CapturedSignature(const pRetVal: ICapturedSignatureType); safecall;
    function Get_ProtectedSignature: IContentInformationType; safecall;
    procedure _Set_ProtectedSignature(const pRetVal: IContentInformationType); safecall;
    function Get_PaymentAcquirerData: IPaymentAcquirerDataType; safecall;
    procedure _Set_PaymentAcquirerData(const pRetVal: IPaymentAcquirerDataType); safecall;
    function Get_PaymentType: WideString; safecall;
    procedure Set_PaymentType(const pRetVal: WideString); safecall;
    function Get_MerchantOverrideFlag: WordBool; safecall;
    procedure Set_MerchantOverrideFlag(pRetVal: WordBool); safecall;
    function Get_CustomerLanguage: WideString; safecall;
    procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
    function Get_OnlineFlag: WordBool; safecall;
    procedure Set_OnlineFlag(pRetVal: WordBool); safecall;
    function Get_AuthenticationMethod: PSafeArray; safecall;
    procedure Set_AuthenticationMethod(pRetVal: PSafeArray); safecall;
    function Get_ValidityDate: WideString; safecall;
    procedure Set_ValidityDate(const pRetVal: WideString); safecall;
    function Get_xsdPaymentResultTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPaymentResultTypeInitFlag(pRetVal: WordBool); safecall;
    function CurrencyConversionSize: Integer; safecall;
    function CurrencyConversionGetItem(index: Integer): ICurrencyConversionType; safecall;
    function CurrencyConversionSetItem(index: Integer; const Value: ICurrencyConversionType): WordBool; safecall;
    function CurrencyConversionAddItem(const Value: ICurrencyConversionType): WordBool; safecall;
    function CurrencyConversionRemoveItem(index: Integer): WordBool; safecall;
    function AuthenticationMethodSize: Integer; safecall;
    function AuthenticationMethodGetItem(index: Integer): WideString; safecall;
    function AuthenticationMethodSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function AuthenticationMethodAddItem(const Value: WideString): WordBool; safecall;
    function AuthenticationMethodRemoveItem(index: Integer): WordBool; safecall;
    property PaymentInstrumentData: IPaymentInstrumentDataType read Get_PaymentInstrumentData write _Set_PaymentInstrumentData;
    property AmountsResp: IAmountsRespType read Get_AmountsResp write _Set_AmountsResp;
    property Instalment: IInstalmentType read Get_Instalment write _Set_Instalment;
    property CurrencyConversion: PSafeArray read Get_CurrencyConversion write Set_CurrencyConversion;
    property CapturedSignature: ICapturedSignatureType read Get_CapturedSignature write _Set_CapturedSignature;
    property ProtectedSignature: IContentInformationType read Get_ProtectedSignature write _Set_ProtectedSignature;
    property PaymentAcquirerData: IPaymentAcquirerDataType read Get_PaymentAcquirerData write _Set_PaymentAcquirerData;
    property PaymentType: WideString read Get_PaymentType write Set_PaymentType;
    property MerchantOverrideFlag: WordBool read Get_MerchantOverrideFlag write Set_MerchantOverrideFlag;
    property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
    property OnlineFlag: WordBool read Get_OnlineFlag write Set_OnlineFlag;
    property AuthenticationMethod: PSafeArray read Get_AuthenticationMethod write Set_AuthenticationMethod;
    property ValidityDate: WideString read Get_ValidityDate write Set_ValidityDate;
    property xsdPaymentResultTypeInitFlag: WordBool read Get_xsdPaymentResultTypeInitFlag write Set_xsdPaymentResultTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPaymentResultTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {87179765-5D04-427B-86AE-DAB53C2A43EE}
// *********************************************************************//
  IPaymentResultTypeDisp = dispinterface
    ['{87179765-5D04-427B-86AE-DAB53C2A43EE}']
    property PaymentInstrumentData: IPaymentInstrumentDataType dispid 2;
    property AmountsResp: IAmountsRespType dispid 4;
    property Instalment: IInstalmentType dispid 6;
    property CurrencyConversion: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 8;
    property CapturedSignature: ICapturedSignatureType dispid 10;
    property ProtectedSignature: IContentInformationType dispid 12;
    property PaymentAcquirerData: IPaymentAcquirerDataType dispid 14;
    property PaymentType: WideString dispid 16;
    property MerchantOverrideFlag: WordBool dispid 18;
    property CustomerLanguage: WideString dispid 20;
    property OnlineFlag: WordBool dispid 22;
    property AuthenticationMethod: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 24;
    property ValidityDate: WideString dispid 26;
    property xsdPaymentResultTypeInitFlag: WordBool dispid 28;
    function CurrencyConversionSize: Integer; dispid 29;
    function CurrencyConversionGetItem(index: Integer): ICurrencyConversionType; dispid 30;
    function CurrencyConversionSetItem(index: Integer; const Value: ICurrencyConversionType): WordBool; dispid 31;
    function CurrencyConversionAddItem(const Value: ICurrencyConversionType): WordBool; dispid 32;
    function CurrencyConversionRemoveItem(index: Integer): WordBool; dispid 33;
    function AuthenticationMethodSize: Integer; dispid 34;
    function AuthenticationMethodGetItem(index: Integer): WideString; dispid 35;
    function AuthenticationMethodSetItem(index: Integer; const Value: WideString): WordBool; dispid 36;
    function AuthenticationMethodAddItem(const Value: WideString): WordBool; dispid 37;
    function AuthenticationMethodRemoveItem(index: Integer): WordBool; dispid 38;
  end;

// *********************************************************************//
// Interface :   ICurrencyConversionType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {71047486-F789-4684-90DE-23E9D96F5F6F}
// *********************************************************************//
  ICurrencyConversionType = interface(IDispatch)
    ['{71047486-F789-4684-90DE-23E9D96F5F6F}']
    function Get_ConvertedAmount: IAmountType; safecall;
    procedure _Set_ConvertedAmount(const pRetVal: IAmountType); safecall;
    function Get_Commission: TDecimal; safecall;
    procedure Set_Commission(pRetVal: TDecimal); safecall;
    function Get_CommissionSpecified: WordBool; safecall;
    procedure Set_CommissionSpecified(pRetVal: WordBool); safecall;
    function Get_Declaration: WideString; safecall;
    procedure Set_Declaration(const pRetVal: WideString); safecall;
    function Get_CustomerApprovedFlag: WordBool; safecall;
    procedure Set_CustomerApprovedFlag(pRetVal: WordBool); safecall;
    function Get_Rate: TDecimal; safecall;
    procedure Set_Rate(pRetVal: TDecimal); safecall;
    function Get_RateSpecified: WordBool; safecall;
    procedure Set_RateSpecified(pRetVal: WordBool); safecall;
    function Get_Markup: TDecimal; safecall;
    procedure Set_Markup(pRetVal: TDecimal); safecall;
    function Get_MarkupSpecified: WordBool; safecall;
    procedure Set_MarkupSpecified(pRetVal: WordBool); safecall;
    function Get_xsdCurrencyConversionTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCurrencyConversionTypeInitFlag(pRetVal: WordBool); safecall;
    property ConvertedAmount: IAmountType read Get_ConvertedAmount write _Set_ConvertedAmount;
    property Commission: TDecimal read Get_Commission write Set_Commission;
    property CommissionSpecified: WordBool read Get_CommissionSpecified write Set_CommissionSpecified;
    property Declaration: WideString read Get_Declaration write Set_Declaration;
    property CustomerApprovedFlag: WordBool read Get_CustomerApprovedFlag write Set_CustomerApprovedFlag;
    property Rate: TDecimal read Get_Rate write Set_Rate;
    property RateSpecified: WordBool read Get_RateSpecified write Set_RateSpecified;
    property Markup: TDecimal read Get_Markup write Set_Markup;
    property MarkupSpecified: WordBool read Get_MarkupSpecified write Set_MarkupSpecified;
    property xsdCurrencyConversionTypeInitFlag: WordBool read Get_xsdCurrencyConversionTypeInitFlag write Set_xsdCurrencyConversionTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICurrencyConversionTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {71047486-F789-4684-90DE-23E9D96F5F6F}
// *********************************************************************//
  ICurrencyConversionTypeDisp = dispinterface
    ['{71047486-F789-4684-90DE-23E9D96F5F6F}']
    property ConvertedAmount: IAmountType dispid 2;
    property Commission: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 4;
    property CommissionSpecified: WordBool dispid 6;
    property Declaration: WideString dispid 8;
    property CustomerApprovedFlag: WordBool dispid 10;
    property Rate: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 12;
    property RateSpecified: WordBool dispid 14;
    property Markup: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 16;
    property MarkupSpecified: WordBool dispid 18;
    property xsdCurrencyConversionTypeInitFlag: WordBool dispid 20;
  end;

// *********************************************************************//
// Interface :   IAmountType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {EAF54C07-401E-43C4-BA84-7C7C4782B3AC}
// *********************************************************************//
  IAmountType = interface(IDispatch)
    ['{EAF54C07-401E-43C4-BA84-7C7C4782B3AC}']
    function Get_currency: WideString; safecall;
    procedure Set_currency(const pRetVal: WideString); safecall;
    function Get_Value: TDecimal; safecall;
    procedure Set_Value(pRetVal: TDecimal); safecall;
    function Get_xsdAmountTypeInitFlag: WordBool; safecall;
    procedure Set_xsdAmountTypeInitFlag(pRetVal: WordBool); safecall;
    property currency: WideString read Get_currency write Set_currency;
    property Value: TDecimal read Get_Value write Set_Value;
    property xsdAmountTypeInitFlag: WordBool read Get_xsdAmountTypeInitFlag write Set_xsdAmountTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IAmountTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {EAF54C07-401E-43C4-BA84-7C7C4782B3AC}
// *********************************************************************//
  IAmountTypeDisp = dispinterface
    ['{EAF54C07-401E-43C4-BA84-7C7C4782B3AC}']
    property currency: WideString dispid 1;
    property Value: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 3;
    property xsdAmountTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   ICapturedSignatureType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {156A54CB-3483-481E-9232-1C70CFA556EF}
// *********************************************************************//
  ICapturedSignatureType = interface(IDispatch)
    ['{156A54CB-3483-481E-9232-1C70CFA556EF}']
    function Get_AreaSize: IAreaSizeType; safecall;
    procedure _Set_AreaSize(const pRetVal: IAreaSizeType); safecall;
    function Get_SignaturePoint: PSafeArray; safecall;
    procedure Set_SignaturePoint(pRetVal: PSafeArray); safecall;
    function Get_xsdCapturedSignatureTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCapturedSignatureTypeInitFlag(pRetVal: WordBool); safecall;
    function SignaturePointSize: Integer; safecall;
    function SignaturePointGetItem(index: Integer): ISignaturePointType; safecall;
    function SignaturePointSetItem(index: Integer; const Value: ISignaturePointType): WordBool; safecall;
    function SignaturePointAddItem(const Value: ISignaturePointType): WordBool; safecall;
    function SignaturePointRemoveItem(index: Integer): WordBool; safecall;
    property AreaSize: IAreaSizeType read Get_AreaSize write _Set_AreaSize;
    property SignaturePoint: PSafeArray read Get_SignaturePoint write Set_SignaturePoint;
    property xsdCapturedSignatureTypeInitFlag: WordBool read Get_xsdCapturedSignatureTypeInitFlag write Set_xsdCapturedSignatureTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICapturedSignatureTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {156A54CB-3483-481E-9232-1C70CFA556EF}
// *********************************************************************//
  ICapturedSignatureTypeDisp = dispinterface
    ['{156A54CB-3483-481E-9232-1C70CFA556EF}']
    property AreaSize: IAreaSizeType dispid 1;
    property SignaturePoint: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property xsdCapturedSignatureTypeInitFlag: WordBool dispid 5;
    function SignaturePointSize: Integer; dispid 6;
    function SignaturePointGetItem(index: Integer): ISignaturePointType; dispid 7;
    function SignaturePointSetItem(index: Integer; const Value: ISignaturePointType): WordBool; dispid 8;
    function SignaturePointAddItem(const Value: ISignaturePointType): WordBool; dispid 9;
    function SignaturePointRemoveItem(index: Integer): WordBool; dispid 10;
  end;

// *********************************************************************//
// Interface :   ISignaturePointType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0054AE7A-6389-4BBC-A73C-3D39841571E6}
// *********************************************************************//
  ISignaturePointType = interface(IDispatch)
    ['{0054AE7A-6389-4BBC-A73C-3D39841571E6}']
    function Get_X: WideString; safecall;
    procedure Set_X(const pRetVal: WideString); safecall;
    function Get_Y: WideString; safecall;
    procedure Set_Y(const pRetVal: WideString); safecall;
    function Get_xsdSignaturePointTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSignaturePointTypeInitFlag(pRetVal: WordBool); safecall;
    property X: WideString read Get_X write Set_X;
    property Y: WideString read Get_Y write Set_Y;
    property xsdSignaturePointTypeInitFlag: WordBool read Get_xsdSignaturePointTypeInitFlag write Set_xsdSignaturePointTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISignaturePointTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0054AE7A-6389-4BBC-A73C-3D39841571E6}
// *********************************************************************//
  ISignaturePointTypeDisp = dispinterface
    ['{0054AE7A-6389-4BBC-A73C-3D39841571E6}']
    property X: WideString dispid 1;
    property Y: WideString dispid 3;
    property xsdSignaturePointTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   ILoyaltyResultType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {28CCBE6A-62A3-4734-A2FE-C5002E5092BA}
// *********************************************************************//
  ILoyaltyResultType = interface(IDispatch)
    ['{28CCBE6A-62A3-4734-A2FE-C5002E5092BA}']
    function Get_LoyaltyAccount: ILoyaltyAccountType; safecall;
    procedure _Set_LoyaltyAccount(const pRetVal: ILoyaltyAccountType); safecall;
    function Get_LoyaltyAmount: ILoyaltyAmountType; safecall;
    procedure _Set_LoyaltyAmount(const pRetVal: ILoyaltyAmountType); safecall;
    function Get_LoyaltyAcquirerData: ILoyaltyAcquirerDataType; safecall;
    procedure _Set_LoyaltyAcquirerData(const pRetVal: ILoyaltyAcquirerDataType); safecall;
    function Get_Rebates: IRebatesType; safecall;
    procedure _Set_Rebates(const pRetVal: IRebatesType); safecall;
    function Get_CurrentBalance: TDecimal; safecall;
    procedure Set_CurrentBalance(pRetVal: TDecimal); safecall;
    function Get_CurrentBalanceSpecified: WordBool; safecall;
    procedure Set_CurrentBalanceSpecified(pRetVal: WordBool); safecall;
    function Get_xsdLoyaltyResultTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLoyaltyResultTypeInitFlag(pRetVal: WordBool); safecall;
    property LoyaltyAccount: ILoyaltyAccountType read Get_LoyaltyAccount write _Set_LoyaltyAccount;
    property LoyaltyAmount: ILoyaltyAmountType read Get_LoyaltyAmount write _Set_LoyaltyAmount;
    property LoyaltyAcquirerData: ILoyaltyAcquirerDataType read Get_LoyaltyAcquirerData write _Set_LoyaltyAcquirerData;
    property Rebates: IRebatesType read Get_Rebates write _Set_Rebates;
    property CurrentBalance: TDecimal read Get_CurrentBalance write Set_CurrentBalance;
    property CurrentBalanceSpecified: WordBool read Get_CurrentBalanceSpecified write Set_CurrentBalanceSpecified;
    property xsdLoyaltyResultTypeInitFlag: WordBool read Get_xsdLoyaltyResultTypeInitFlag write Set_xsdLoyaltyResultTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyResultTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {28CCBE6A-62A3-4734-A2FE-C5002E5092BA}
// *********************************************************************//
  ILoyaltyResultTypeDisp = dispinterface
    ['{28CCBE6A-62A3-4734-A2FE-C5002E5092BA}']
    property LoyaltyAccount: ILoyaltyAccountType dispid 1;
    property LoyaltyAmount: ILoyaltyAmountType dispid 3;
    property LoyaltyAcquirerData: ILoyaltyAcquirerDataType dispid 5;
    property Rebates: IRebatesType dispid 7;
    property CurrentBalance: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 9;
    property CurrentBalanceSpecified: WordBool dispid 11;
    property xsdLoyaltyResultTypeInitFlag: WordBool dispid 13;
  end;

// *********************************************************************//
// Interface :   ILoyaltyAcquirerDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7A1A9B2C-CC30-49FB-9E0F-8C47695564D1}
// *********************************************************************//
  ILoyaltyAcquirerDataType = interface(IDispatch)
    ['{7A1A9B2C-CC30-49FB-9E0F-8C47695564D1}']
    function Get_ApprovalCode: WideString; safecall;
    procedure Set_ApprovalCode(const pRetVal: WideString); safecall;
    function Get_LoyaltyTransactionID: ITransactionIdentificationType; safecall;
    procedure _Set_LoyaltyTransactionID(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_LoyaltyAcquirerID: WideString; safecall;
    procedure Set_LoyaltyAcquirerID(const pRetVal: WideString); safecall;
    function Get_HostReconciliationID: WideString; safecall;
    procedure Set_HostReconciliationID(const pRetVal: WideString); safecall;
    function Get_xsdLoyaltyAcquirerDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLoyaltyAcquirerDataTypeInitFlag(pRetVal: WordBool); safecall;
    property ApprovalCode: WideString read Get_ApprovalCode write Set_ApprovalCode;
    property LoyaltyTransactionID: ITransactionIdentificationType read Get_LoyaltyTransactionID write _Set_LoyaltyTransactionID;
    property LoyaltyAcquirerID: WideString read Get_LoyaltyAcquirerID write Set_LoyaltyAcquirerID;
    property HostReconciliationID: WideString read Get_HostReconciliationID write Set_HostReconciliationID;
    property xsdLoyaltyAcquirerDataTypeInitFlag: WordBool read Get_xsdLoyaltyAcquirerDataTypeInitFlag write Set_xsdLoyaltyAcquirerDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyAcquirerDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7A1A9B2C-CC30-49FB-9E0F-8C47695564D1}
// *********************************************************************//
  ILoyaltyAcquirerDataTypeDisp = dispinterface
    ['{7A1A9B2C-CC30-49FB-9E0F-8C47695564D1}']
    property ApprovalCode: WideString dispid 1;
    property LoyaltyTransactionID: ITransactionIdentificationType dispid 3;
    property LoyaltyAcquirerID: WideString dispid 5;
    property HostReconciliationID: WideString dispid 7;
    property xsdLoyaltyAcquirerDataTypeInitFlag: WordBool dispid 9;
  end;

// *********************************************************************//
// Interface :   IRebatesType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5AE11FBF-C9A4-473A-93E8-C9352942F09F}
// *********************************************************************//
  IRebatesType = interface(IDispatch)
    ['{5AE11FBF-C9A4-473A-93E8-C9352942F09F}']
    function Get_TotalRebate: TDecimal; safecall;
    procedure Set_TotalRebate(pRetVal: TDecimal); safecall;
    function Get_TotalRebateSpecified: WordBool; safecall;
    procedure Set_TotalRebateSpecified(pRetVal: WordBool); safecall;
    function Get_RebateLabel: WideString; safecall;
    procedure Set_RebateLabel(const pRetVal: WideString); safecall;
    function Get_SaleItemRebate: PSafeArray; safecall;
    procedure Set_SaleItemRebate(pRetVal: PSafeArray); safecall;
    function Get_xsdRebatesTypeInitFlag: WordBool; safecall;
    procedure Set_xsdRebatesTypeInitFlag(pRetVal: WordBool); safecall;
    function SaleItemRebateSize: Integer; safecall;
    function SaleItemRebateGetItem(index: Integer): ISaleItemRebateType; safecall;
    function SaleItemRebateSetItem(index: Integer; const Value: ISaleItemRebateType): WordBool; safecall;
    function SaleItemRebateAddItem(const Value: ISaleItemRebateType): WordBool; safecall;
    function SaleItemRebateRemoveItem(index: Integer): WordBool; safecall;
    property TotalRebate: TDecimal read Get_TotalRebate write Set_TotalRebate;
    property TotalRebateSpecified: WordBool read Get_TotalRebateSpecified write Set_TotalRebateSpecified;
    property RebateLabel: WideString read Get_RebateLabel write Set_RebateLabel;
    property SaleItemRebate: PSafeArray read Get_SaleItemRebate write Set_SaleItemRebate;
    property xsdRebatesTypeInitFlag: WordBool read Get_xsdRebatesTypeInitFlag write Set_xsdRebatesTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IRebatesTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5AE11FBF-C9A4-473A-93E8-C9352942F09F}
// *********************************************************************//
  IRebatesTypeDisp = dispinterface
    ['{5AE11FBF-C9A4-473A-93E8-C9352942F09F}']
    property TotalRebate: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 1;
    property TotalRebateSpecified: WordBool dispid 3;
    property RebateLabel: WideString dispid 5;
    property SaleItemRebate: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 7;
    property xsdRebatesTypeInitFlag: WordBool dispid 9;
    function SaleItemRebateSize: Integer; dispid 10;
    function SaleItemRebateGetItem(index: Integer): ISaleItemRebateType; dispid 11;
    function SaleItemRebateSetItem(index: Integer; const Value: ISaleItemRebateType): WordBool; dispid 12;
    function SaleItemRebateAddItem(const Value: ISaleItemRebateType): WordBool; dispid 13;
    function SaleItemRebateRemoveItem(index: Integer): WordBool; dispid 14;
  end;

// *********************************************************************//
// Interface :   ISaleItemRebateType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3F273CE2-BEC2-4502-8C63-4D946002DBB8}
// *********************************************************************//
  ISaleItemRebateType = interface(IDispatch)
    ['{3F273CE2-BEC2-4502-8C63-4D946002DBB8}']
    function Get_UnitOfMeasure: WideString; safecall;
    procedure Set_UnitOfMeasure(const pRetVal: WideString); safecall;
    function Get_Quantity: TDecimal; safecall;
    procedure Set_Quantity(pRetVal: TDecimal); safecall;
    function Get_QuantitySpecified: WordBool; safecall;
    procedure Set_QuantitySpecified(pRetVal: WordBool); safecall;
    function Get_RebateLabel: WideString; safecall;
    procedure Set_RebateLabel(const pRetVal: WideString); safecall;
    function Get_ItemID: WideString; safecall;
    procedure Set_ItemID(const pRetVal: WideString); safecall;
    function Get_ProductCode: WideString; safecall;
    procedure Set_ProductCode(const pRetVal: WideString); safecall;
    function Get_EanUpc: WideString; safecall;
    procedure Set_EanUpc(const pRetVal: WideString); safecall;
    function Get_ItemAmount: TDecimal; safecall;
    procedure Set_ItemAmount(pRetVal: TDecimal); safecall;
    function Get_ItemAmountSpecified: WordBool; safecall;
    procedure Set_ItemAmountSpecified(pRetVal: WordBool); safecall;
    function Get_xsdSaleItemRebateTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSaleItemRebateTypeInitFlag(pRetVal: WordBool); safecall;
    property UnitOfMeasure: WideString read Get_UnitOfMeasure write Set_UnitOfMeasure;
    property Quantity: TDecimal read Get_Quantity write Set_Quantity;
    property QuantitySpecified: WordBool read Get_QuantitySpecified write Set_QuantitySpecified;
    property RebateLabel: WideString read Get_RebateLabel write Set_RebateLabel;
    property ItemID: WideString read Get_ItemID write Set_ItemID;
    property ProductCode: WideString read Get_ProductCode write Set_ProductCode;
    property EanUpc: WideString read Get_EanUpc write Set_EanUpc;
    property ItemAmount: TDecimal read Get_ItemAmount write Set_ItemAmount;
    property ItemAmountSpecified: WordBool read Get_ItemAmountSpecified write Set_ItemAmountSpecified;
    property xsdSaleItemRebateTypeInitFlag: WordBool read Get_xsdSaleItemRebateTypeInitFlag write Set_xsdSaleItemRebateTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISaleItemRebateTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3F273CE2-BEC2-4502-8C63-4D946002DBB8}
// *********************************************************************//
  ISaleItemRebateTypeDisp = dispinterface
    ['{3F273CE2-BEC2-4502-8C63-4D946002DBB8}']
    property UnitOfMeasure: WideString dispid 1;
    property Quantity: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 3;
    property QuantitySpecified: WordBool dispid 5;
    property RebateLabel: WideString dispid 7;
    property ItemID: WideString dispid 9;
    property ProductCode: WideString dispid 11;
    property EanUpc: WideString dispid 13;
    property ItemAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 15;
    property ItemAmountSpecified: WordBool dispid 17;
    property xsdSaleItemRebateTypeInitFlag: WordBool dispid 19;
  end;

// *********************************************************************//
// Interface :   ICardAcquisitionRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {95964348-71BA-45AC-9868-BB1743A986D7}
// *********************************************************************//
  ICardAcquisitionRequestType = interface(IDispatch)
    ['{95964348-71BA-45AC-9868-BB1743A986D7}']
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_CardAcquisitionTransaction: ICardAcquisitionTransactionType; safecall;
    procedure _Set_CardAcquisitionTransaction(const pRetVal: ICardAcquisitionTransactionType); safecall;
    function Get_xsdCardAcquisitionRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCardAcquisitionRequestTypeInitFlag(pRetVal: WordBool); safecall;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property CardAcquisitionTransaction: ICardAcquisitionTransactionType read Get_CardAcquisitionTransaction write _Set_CardAcquisitionTransaction;
    property xsdCardAcquisitionRequestTypeInitFlag: WordBool read Get_xsdCardAcquisitionRequestTypeInitFlag write Set_xsdCardAcquisitionRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICardAcquisitionRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {95964348-71BA-45AC-9868-BB1743A986D7}
// *********************************************************************//
  ICardAcquisitionRequestTypeDisp = dispinterface
    ['{95964348-71BA-45AC-9868-BB1743A986D7}']
    property SaleData: ISaleDataType dispid 1;
    property CardAcquisitionTransaction: ICardAcquisitionTransactionType dispid 3;
    property xsdCardAcquisitionRequestTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   ICardAcquisitionTransactionType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0F160141-9BBC-406B-8A6C-8C49771640EB}
// *********************************************************************//
  ICardAcquisitionTransactionType = interface(IDispatch)
    ['{0F160141-9BBC-406B-8A6C-8C49771640EB}']
    function Get_AllowedPaymentBrand: PSafeArray; safecall;
    procedure Set_AllowedPaymentBrand(pRetVal: PSafeArray); safecall;
    function Get_AllowedLoyaltyBrand: PSafeArray; safecall;
    procedure Set_AllowedLoyaltyBrand(pRetVal: PSafeArray); safecall;
    function Get_ForceEntryMode: PSafeArray; safecall;
    procedure Set_ForceEntryMode(pRetVal: PSafeArray); safecall;
    function Get_LoyaltyHandling: WideString; safecall;
    procedure Set_LoyaltyHandling(const pRetVal: WideString); safecall;
    function Get_CustomerLanguage: WideString; safecall;
    procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
    function Get_ForceCustomerSelectionFlag: WordBool; safecall;
    procedure Set_ForceCustomerSelectionFlag(pRetVal: WordBool); safecall;
    function Get_TotalAmount: TDecimal; safecall;
    procedure Set_TotalAmount(pRetVal: TDecimal); safecall;
    function Get_TotalAmountSpecified: WordBool; safecall;
    procedure Set_TotalAmountSpecified(pRetVal: WordBool); safecall;
    function Get_PaymentType: WideString; safecall;
    procedure Set_PaymentType(const pRetVal: WideString); safecall;
    function Get_CashBackFlag: WordBool; safecall;
    procedure Set_CashBackFlag(pRetVal: WordBool); safecall;
    function Get_CashBackFlagSpecified: WordBool; safecall;
    procedure Set_CashBackFlagSpecified(pRetVal: WordBool); safecall;
    function Get_xsdCardAcquisitionTransactionTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCardAcquisitionTransactionTypeInitFlag(pRetVal: WordBool); safecall;
    function AllowedPaymentBrandSize: Integer; safecall;
    function AllowedPaymentBrandGetItem(index: Integer): WideString; safecall;
    function AllowedPaymentBrandSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function AllowedPaymentBrandAddItem(const Value: WideString): WordBool; safecall;
    function AllowedPaymentBrandRemoveItem(index: Integer): WordBool; safecall;
    function AllowedLoyaltyBrandSize: Integer; safecall;
    function AllowedLoyaltyBrandGetItem(index: Integer): WideString; safecall;
    function AllowedLoyaltyBrandSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function AllowedLoyaltyBrandAddItem(const Value: WideString): WordBool; safecall;
    function AllowedLoyaltyBrandRemoveItem(index: Integer): WordBool; safecall;
    function ForceEntryModeSize: Integer; safecall;
    function ForceEntryModeGetItem(index: Integer): WideString; safecall;
    function ForceEntryModeSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function ForceEntryModeAddItem(const Value: WideString): WordBool; safecall;
    function ForceEntryModeRemoveItem(index: Integer): WordBool; safecall;
    property AllowedPaymentBrand: PSafeArray read Get_AllowedPaymentBrand write Set_AllowedPaymentBrand;
    property AllowedLoyaltyBrand: PSafeArray read Get_AllowedLoyaltyBrand write Set_AllowedLoyaltyBrand;
    property ForceEntryMode: PSafeArray read Get_ForceEntryMode write Set_ForceEntryMode;
    property LoyaltyHandling: WideString read Get_LoyaltyHandling write Set_LoyaltyHandling;
    property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
    property ForceCustomerSelectionFlag: WordBool read Get_ForceCustomerSelectionFlag write Set_ForceCustomerSelectionFlag;
    property TotalAmount: TDecimal read Get_TotalAmount write Set_TotalAmount;
    property TotalAmountSpecified: WordBool read Get_TotalAmountSpecified write Set_TotalAmountSpecified;
    property PaymentType: WideString read Get_PaymentType write Set_PaymentType;
    property CashBackFlag: WordBool read Get_CashBackFlag write Set_CashBackFlag;
    property CashBackFlagSpecified: WordBool read Get_CashBackFlagSpecified write Set_CashBackFlagSpecified;
    property xsdCardAcquisitionTransactionTypeInitFlag: WordBool read Get_xsdCardAcquisitionTransactionTypeInitFlag write Set_xsdCardAcquisitionTransactionTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICardAcquisitionTransactionTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0F160141-9BBC-406B-8A6C-8C49771640EB}
// *********************************************************************//
  ICardAcquisitionTransactionTypeDisp = dispinterface
    ['{0F160141-9BBC-406B-8A6C-8C49771640EB}']
    property AllowedPaymentBrand: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property AllowedLoyaltyBrand: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property ForceEntryMode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 6;
    property LoyaltyHandling: WideString dispid 8;
    property CustomerLanguage: WideString dispid 10;
    property ForceCustomerSelectionFlag: WordBool dispid 12;
    property TotalAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 14;
    property TotalAmountSpecified: WordBool dispid 16;
    property PaymentType: WideString dispid 18;
    property CashBackFlag: WordBool dispid 20;
    property CashBackFlagSpecified: WordBool dispid 22;
    property xsdCardAcquisitionTransactionTypeInitFlag: WordBool dispid 24;
    function AllowedPaymentBrandSize: Integer; dispid 25;
    function AllowedPaymentBrandGetItem(index: Integer): WideString; dispid 26;
    function AllowedPaymentBrandSetItem(index: Integer; const Value: WideString): WordBool; dispid 27;
    function AllowedPaymentBrandAddItem(const Value: WideString): WordBool; dispid 28;
    function AllowedPaymentBrandRemoveItem(index: Integer): WordBool; dispid 29;
    function AllowedLoyaltyBrandSize: Integer; dispid 30;
    function AllowedLoyaltyBrandGetItem(index: Integer): WideString; dispid 31;
    function AllowedLoyaltyBrandSetItem(index: Integer; const Value: WideString): WordBool; dispid 32;
    function AllowedLoyaltyBrandAddItem(const Value: WideString): WordBool; dispid 33;
    function AllowedLoyaltyBrandRemoveItem(index: Integer): WordBool; dispid 34;
    function ForceEntryModeSize: Integer; dispid 35;
    function ForceEntryModeGetItem(index: Integer): WideString; dispid 36;
    function ForceEntryModeSetItem(index: Integer; const Value: WideString): WordBool; dispid 37;
    function ForceEntryModeAddItem(const Value: WideString): WordBool; dispid 38;
    function ForceEntryModeRemoveItem(index: Integer): WordBool; dispid 39;
  end;

// *********************************************************************//
// Interface :   ICardAcquisitionResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F3293EBB-746B-4A50-BCF4-872C24051702}
// *********************************************************************//
  ICardAcquisitionResponseType = interface(IDispatch)
    ['{F3293EBB-746B-4A50-BCF4-872C24051702}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_POIData: IPOIDataType; safecall;
    procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
    function Get_PaymentBrand: PSafeArray; safecall;
    procedure Set_PaymentBrand(pRetVal: PSafeArray); safecall;
    function Get_PaymentInstrumentData: IPaymentInstrumentDataType; safecall;
    procedure _Set_PaymentInstrumentData(const pRetVal: IPaymentInstrumentDataType); safecall;
    function Get_LoyaltyAccount: PSafeArray; safecall;
    procedure Set_LoyaltyAccount(pRetVal: PSafeArray); safecall;
    function Get_CustomerOrder: PSafeArray; safecall;
    procedure Set_CustomerOrder(pRetVal: PSafeArray); safecall;
    function Get_xsdCardAcquisitionResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCardAcquisitionResponseTypeInitFlag(pRetVal: WordBool); safecall;
    function PaymentBrandSize: Integer; safecall;
    function PaymentBrandGetItem(index: Integer): WideString; safecall;
    function PaymentBrandSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function PaymentBrandAddItem(const Value: WideString): WordBool; safecall;
    function PaymentBrandRemoveItem(index: Integer): WordBool; safecall;
    function LoyaltyAccountSize: Integer; safecall;
    function LoyaltyAccountGetItem(index: Integer): ILoyaltyAccountType; safecall;
    function LoyaltyAccountSetItem(index: Integer; const Value: ILoyaltyAccountType): WordBool; safecall;
    function LoyaltyAccountAddItem(const Value: ILoyaltyAccountType): WordBool; safecall;
    function LoyaltyAccountRemoveItem(index: Integer): WordBool; safecall;
    function CustomerOrderSize: Integer; safecall;
    function CustomerOrderGetItem(index: Integer): ICustomerOrderType; safecall;
    function CustomerOrderSetItem(index: Integer; const Value: ICustomerOrderType): WordBool; safecall;
    function CustomerOrderAddItem(const Value: ICustomerOrderType): WordBool; safecall;
    function CustomerOrderRemoveItem(index: Integer): WordBool; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property POIData: IPOIDataType read Get_POIData write _Set_POIData;
    property PaymentBrand: PSafeArray read Get_PaymentBrand write Set_PaymentBrand;
    property PaymentInstrumentData: IPaymentInstrumentDataType read Get_PaymentInstrumentData write _Set_PaymentInstrumentData;
    property LoyaltyAccount: PSafeArray read Get_LoyaltyAccount write Set_LoyaltyAccount;
    property CustomerOrder: PSafeArray read Get_CustomerOrder write Set_CustomerOrder;
    property xsdCardAcquisitionResponseTypeInitFlag: WordBool read Get_xsdCardAcquisitionResponseTypeInitFlag write Set_xsdCardAcquisitionResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICardAcquisitionResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F3293EBB-746B-4A50-BCF4-872C24051702}
// *********************************************************************//
  ICardAcquisitionResponseTypeDisp = dispinterface
    ['{F3293EBB-746B-4A50-BCF4-872C24051702}']
    property Response: IResponseType dispid 1;
    property SaleData: ISaleDataType dispid 3;
    property POIData: IPOIDataType dispid 5;
    property PaymentBrand: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 7;
    property PaymentInstrumentData: IPaymentInstrumentDataType dispid 9;
    property LoyaltyAccount: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 11;
    property CustomerOrder: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 13;
    property xsdCardAcquisitionResponseTypeInitFlag: WordBool dispid 15;
    function PaymentBrandSize: Integer; dispid 16;
    function PaymentBrandGetItem(index: Integer): WideString; dispid 17;
    function PaymentBrandSetItem(index: Integer; const Value: WideString): WordBool; dispid 18;
    function PaymentBrandAddItem(const Value: WideString): WordBool; dispid 19;
    function PaymentBrandRemoveItem(index: Integer): WordBool; dispid 20;
    function LoyaltyAccountSize: Integer; dispid 21;
    function LoyaltyAccountGetItem(index: Integer): ILoyaltyAccountType; dispid 22;
    function LoyaltyAccountSetItem(index: Integer; const Value: ILoyaltyAccountType): WordBool; dispid 23;
    function LoyaltyAccountAddItem(const Value: ILoyaltyAccountType): WordBool; dispid 24;
    function LoyaltyAccountRemoveItem(index: Integer): WordBool; dispid 25;
    function CustomerOrderSize: Integer; dispid 26;
    function CustomerOrderGetItem(index: Integer): ICustomerOrderType; dispid 27;
    function CustomerOrderSetItem(index: Integer; const Value: ICustomerOrderType): WordBool; dispid 28;
    function CustomerOrderAddItem(const Value: ICustomerOrderType): WordBool; dispid 29;
    function CustomerOrderRemoveItem(index: Integer): WordBool; dispid 30;
  end;

// *********************************************************************//
// Interface :   ICardholderPINType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {17DAD50B-417B-4CD2-B432-B6C3F00FBC62}
// *********************************************************************//
  ICardholderPINType = interface(IDispatch)
    ['{17DAD50B-417B-4CD2-B432-B6C3F00FBC62}']
    function Get_EncrPINBlock: IContentInformationType; safecall;
    procedure _Set_EncrPINBlock(const pRetVal: IContentInformationType); safecall;
    function Get_PINFormat: WideString; safecall;
    procedure Set_PINFormat(const pRetVal: WideString); safecall;
    function Get_AdditionalInput: WideString; safecall;
    procedure Set_AdditionalInput(const pRetVal: WideString); safecall;
    function Get_xsdCardholderPINTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCardholderPINTypeInitFlag(pRetVal: WordBool); safecall;
    property EncrPINBlock: IContentInformationType read Get_EncrPINBlock write _Set_EncrPINBlock;
    property PINFormat: WideString read Get_PINFormat write Set_PINFormat;
    property AdditionalInput: WideString read Get_AdditionalInput write Set_AdditionalInput;
    property xsdCardholderPINTypeInitFlag: WordBool read Get_xsdCardholderPINTypeInitFlag write Set_xsdCardholderPINTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICardholderPINTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {17DAD50B-417B-4CD2-B432-B6C3F00FBC62}
// *********************************************************************//
  ICardholderPINTypeDisp = dispinterface
    ['{17DAD50B-417B-4CD2-B432-B6C3F00FBC62}']
    property EncrPINBlock: IContentInformationType dispid 1;
    property PINFormat: WideString dispid 3;
    property AdditionalInput: WideString dispid 5;
    property xsdCardholderPINTypeInitFlag: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface :   ICardReaderAPDURequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {17E1E2CD-85F6-41BE-A79C-07E5404B6776}
// *********************************************************************//
  ICardReaderAPDURequestType = interface(IDispatch)
    ['{17E1E2CD-85F6-41BE-A79C-07E5404B6776}']
    function Get_APDUData: PSafeArray; safecall;
    procedure Set_APDUData(pRetVal: PSafeArray); safecall;
    function Get_APDUClass: PSafeArray; safecall;
    procedure Set_APDUClass(pRetVal: PSafeArray); safecall;
    function Get_APDUInstruction: PSafeArray; safecall;
    procedure Set_APDUInstruction(pRetVal: PSafeArray); safecall;
    function Get_APDUPar1: PSafeArray; safecall;
    procedure Set_APDUPar1(pRetVal: PSafeArray); safecall;
    function Get_APDUPar2: PSafeArray; safecall;
    procedure Set_APDUPar2(pRetVal: PSafeArray); safecall;
    function Get_APDUExpectedLength: PSafeArray; safecall;
    procedure Set_APDUExpectedLength(pRetVal: PSafeArray); safecall;
    function Get_xsdCardReaderAPDURequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCardReaderAPDURequestTypeInitFlag(pRetVal: WordBool); safecall;
    function APDUDataSize: Integer; safecall;
    function APDUDataGetItem(index: Integer): Byte; safecall;
    function APDUDataSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function APDUDataAddItem(Value: Byte): WordBool; safecall;
    function APDUDataRemoveItem(index: Integer): WordBool; safecall;
    function APDUClassSize: Integer; safecall;
    function APDUClassGetItem(index: Integer): Byte; safecall;
    function APDUClassSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function APDUClassAddItem(Value: Byte): WordBool; safecall;
    function APDUClassRemoveItem(index: Integer): WordBool; safecall;
    function APDUInstructionSize: Integer; safecall;
    function APDUInstructionGetItem(index: Integer): Byte; safecall;
    function APDUInstructionSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function APDUInstructionAddItem(Value: Byte): WordBool; safecall;
    function APDUInstructionRemoveItem(index: Integer): WordBool; safecall;
    function APDUPar1Size: Integer; safecall;
    function APDUPar1GetItem(index: Integer): Byte; safecall;
    function APDUPar1SetItem(index: Integer; Value: Byte): WordBool; safecall;
    function APDUPar1AddItem(Value: Byte): WordBool; safecall;
    function APDUPar1RemoveItem(index: Integer): WordBool; safecall;
    function APDUPar2Size: Integer; safecall;
    function APDUPar2GetItem(index: Integer): Byte; safecall;
    function APDUPar2SetItem(index: Integer; Value: Byte): WordBool; safecall;
    function APDUPar2AddItem(Value: Byte): WordBool; safecall;
    function APDUPar2RemoveItem(index: Integer): WordBool; safecall;
    function APDUExpectedLengthSize: Integer; safecall;
    function APDUExpectedLengthGetItem(index: Integer): Byte; safecall;
    function APDUExpectedLengthSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function APDUExpectedLengthAddItem(Value: Byte): WordBool; safecall;
    function APDUExpectedLengthRemoveItem(index: Integer): WordBool; safecall;
    property APDUData: PSafeArray read Get_APDUData write Set_APDUData;
    property APDUClass: PSafeArray read Get_APDUClass write Set_APDUClass;
    property APDUInstruction: PSafeArray read Get_APDUInstruction write Set_APDUInstruction;
    property APDUPar1: PSafeArray read Get_APDUPar1 write Set_APDUPar1;
    property APDUPar2: PSafeArray read Get_APDUPar2 write Set_APDUPar2;
    property APDUExpectedLength: PSafeArray read Get_APDUExpectedLength write Set_APDUExpectedLength;
    property xsdCardReaderAPDURequestTypeInitFlag: WordBool read Get_xsdCardReaderAPDURequestTypeInitFlag write Set_xsdCardReaderAPDURequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICardReaderAPDURequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {17E1E2CD-85F6-41BE-A79C-07E5404B6776}
// *********************************************************************//
  ICardReaderAPDURequestTypeDisp = dispinterface
    ['{17E1E2CD-85F6-41BE-A79C-07E5404B6776}']
    property APDUData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property APDUClass: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property APDUInstruction: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property APDUPar1: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 7;
    property APDUPar2: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 9;
    property APDUExpectedLength: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 11;
    property xsdCardReaderAPDURequestTypeInitFlag: WordBool dispid 13;
    function APDUDataSize: Integer; dispid 14;
    function APDUDataGetItem(index: Integer): Byte; dispid 15;
    function APDUDataSetItem(index: Integer; Value: Byte): WordBool; dispid 16;
    function APDUDataAddItem(Value: Byte): WordBool; dispid 17;
    function APDUDataRemoveItem(index: Integer): WordBool; dispid 18;
    function APDUClassSize: Integer; dispid 19;
    function APDUClassGetItem(index: Integer): Byte; dispid 20;
    function APDUClassSetItem(index: Integer; Value: Byte): WordBool; dispid 21;
    function APDUClassAddItem(Value: Byte): WordBool; dispid 22;
    function APDUClassRemoveItem(index: Integer): WordBool; dispid 23;
    function APDUInstructionSize: Integer; dispid 24;
    function APDUInstructionGetItem(index: Integer): Byte; dispid 25;
    function APDUInstructionSetItem(index: Integer; Value: Byte): WordBool; dispid 26;
    function APDUInstructionAddItem(Value: Byte): WordBool; dispid 27;
    function APDUInstructionRemoveItem(index: Integer): WordBool; dispid 28;
    function APDUPar1Size: Integer; dispid 29;
    function APDUPar1GetItem(index: Integer): Byte; dispid 30;
    function APDUPar1SetItem(index: Integer; Value: Byte): WordBool; dispid 31;
    function APDUPar1AddItem(Value: Byte): WordBool; dispid 32;
    function APDUPar1RemoveItem(index: Integer): WordBool; dispid 33;
    function APDUPar2Size: Integer; dispid 34;
    function APDUPar2GetItem(index: Integer): Byte; dispid 35;
    function APDUPar2SetItem(index: Integer; Value: Byte): WordBool; dispid 36;
    function APDUPar2AddItem(Value: Byte): WordBool; dispid 37;
    function APDUPar2RemoveItem(index: Integer): WordBool; dispid 38;
    function APDUExpectedLengthSize: Integer; dispid 39;
    function APDUExpectedLengthGetItem(index: Integer): Byte; dispid 40;
    function APDUExpectedLengthSetItem(index: Integer; Value: Byte): WordBool; dispid 41;
    function APDUExpectedLengthAddItem(Value: Byte): WordBool; dispid 42;
    function APDUExpectedLengthRemoveItem(index: Integer): WordBool; dispid 43;
  end;

// *********************************************************************//
// Interface :   ICardReaderAPDUResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {80682103-DFB9-4654-941D-F4B6DA7B4EF1}
// *********************************************************************//
  ICardReaderAPDUResponseType = interface(IDispatch)
    ['{80682103-DFB9-4654-941D-F4B6DA7B4EF1}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_APDUData: PSafeArray; safecall;
    procedure Set_APDUData(pRetVal: PSafeArray); safecall;
    function Get_CardStatusWords: PSafeArray; safecall;
    procedure Set_CardStatusWords(pRetVal: PSafeArray); safecall;
    function Get_xsdCardReaderAPDUResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCardReaderAPDUResponseTypeInitFlag(pRetVal: WordBool); safecall;
    function APDUDataSize: Integer; safecall;
    function APDUDataGetItem(index: Integer): Byte; safecall;
    function APDUDataSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function APDUDataAddItem(Value: Byte): WordBool; safecall;
    function APDUDataRemoveItem(index: Integer): WordBool; safecall;
    function CardStatusWordsSize: Integer; safecall;
    function CardStatusWordsGetItem(index: Integer): Byte; safecall;
    function CardStatusWordsSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function CardStatusWordsAddItem(Value: Byte): WordBool; safecall;
    function CardStatusWordsRemoveItem(index: Integer): WordBool; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property APDUData: PSafeArray read Get_APDUData write Set_APDUData;
    property CardStatusWords: PSafeArray read Get_CardStatusWords write Set_CardStatusWords;
    property xsdCardReaderAPDUResponseTypeInitFlag: WordBool read Get_xsdCardReaderAPDUResponseTypeInitFlag write Set_xsdCardReaderAPDUResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICardReaderAPDUResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {80682103-DFB9-4654-941D-F4B6DA7B4EF1}
// *********************************************************************//
  ICardReaderAPDUResponseTypeDisp = dispinterface
    ['{80682103-DFB9-4654-941D-F4B6DA7B4EF1}']
    property Response: IResponseType dispid 1;
    property APDUData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property CardStatusWords: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property xsdCardReaderAPDUResponseTypeInitFlag: WordBool dispid 7;
    function APDUDataSize: Integer; dispid 8;
    function APDUDataGetItem(index: Integer): Byte; dispid 9;
    function APDUDataSetItem(index: Integer; Value: Byte): WordBool; dispid 10;
    function APDUDataAddItem(Value: Byte): WordBool; dispid 11;
    function APDUDataRemoveItem(index: Integer): WordBool; dispid 12;
    function CardStatusWordsSize: Integer; dispid 13;
    function CardStatusWordsGetItem(index: Integer): Byte; dispid 14;
    function CardStatusWordsSetItem(index: Integer; Value: Byte): WordBool; dispid 15;
    function CardStatusWordsAddItem(Value: Byte): WordBool; dispid 16;
    function CardStatusWordsRemoveItem(index: Integer): WordBool; dispid 17;
  end;

// *********************************************************************//
// Interface :   ICardReaderInitRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7E28398E-92DA-4362-9C5A-D9DB716F1F36}
// *********************************************************************//
  ICardReaderInitRequestType = interface(IDispatch)
    ['{7E28398E-92DA-4362-9C5A-D9DB716F1F36}']
    function Get_ForceEntryMode: PSafeArray; safecall;
    procedure Set_ForceEntryMode(pRetVal: PSafeArray); safecall;
    function Get_DisplayOutput: IDisplayOutputType; safecall;
    procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
    function Get_WarmResetFlag: WordBool; safecall;
    procedure Set_WarmResetFlag(pRetVal: WordBool); safecall;
    function Get_WarmResetFlagSpecified: WordBool; safecall;
    procedure Set_WarmResetFlagSpecified(pRetVal: WordBool); safecall;
    function Get_LeaveCardFlag: WordBool; safecall;
    procedure Set_LeaveCardFlag(pRetVal: WordBool); safecall;
    function Get_MaxWaitingTime: WideString; safecall;
    procedure Set_MaxWaitingTime(const pRetVal: WideString); safecall;
    function Get_xsdCardReaderInitRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCardReaderInitRequestTypeInitFlag(pRetVal: WordBool); safecall;
    function ForceEntryModeSize: Integer; safecall;
    function ForceEntryModeGetItem(index: Integer): WideString; safecall;
    function ForceEntryModeSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function ForceEntryModeAddItem(const Value: WideString): WordBool; safecall;
    function ForceEntryModeRemoveItem(index: Integer): WordBool; safecall;
    property ForceEntryMode: PSafeArray read Get_ForceEntryMode write Set_ForceEntryMode;
    property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
    property WarmResetFlag: WordBool read Get_WarmResetFlag write Set_WarmResetFlag;
    property WarmResetFlagSpecified: WordBool read Get_WarmResetFlagSpecified write Set_WarmResetFlagSpecified;
    property LeaveCardFlag: WordBool read Get_LeaveCardFlag write Set_LeaveCardFlag;
    property MaxWaitingTime: WideString read Get_MaxWaitingTime write Set_MaxWaitingTime;
    property xsdCardReaderInitRequestTypeInitFlag: WordBool read Get_xsdCardReaderInitRequestTypeInitFlag write Set_xsdCardReaderInitRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICardReaderInitRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7E28398E-92DA-4362-9C5A-D9DB716F1F36}
// *********************************************************************//
  ICardReaderInitRequestTypeDisp = dispinterface
    ['{7E28398E-92DA-4362-9C5A-D9DB716F1F36}']
    property ForceEntryMode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property DisplayOutput: IDisplayOutputType dispid 4;
    property WarmResetFlag: WordBool dispid 6;
    property WarmResetFlagSpecified: WordBool dispid 8;
    property LeaveCardFlag: WordBool dispid 10;
    property MaxWaitingTime: WideString dispid 12;
    property xsdCardReaderInitRequestTypeInitFlag: WordBool dispid 14;
    function ForceEntryModeSize: Integer; dispid 15;
    function ForceEntryModeGetItem(index: Integer): WideString; dispid 16;
    function ForceEntryModeSetItem(index: Integer; const Value: WideString): WordBool; dispid 17;
    function ForceEntryModeAddItem(const Value: WideString): WordBool; dispid 18;
    function ForceEntryModeRemoveItem(index: Integer): WordBool; dispid 19;
  end;

// *********************************************************************//
// Interface :   ICardReaderInitResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {DCA1232D-0BFC-4AAD-BF94-5B9DB2F2004C}
// *********************************************************************//
  ICardReaderInitResponseType = interface(IDispatch)
    ['{DCA1232D-0BFC-4AAD-BF94-5B9DB2F2004C}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_TrackData: PSafeArray; safecall;
    procedure Set_TrackData(pRetVal: PSafeArray); safecall;
    function Get_ICCResetData: IICCResetDataType; safecall;
    procedure _Set_ICCResetData(const pRetVal: IICCResetDataType); safecall;
    function Get_EntryMode: PSafeArray; safecall;
    procedure Set_EntryMode(pRetVal: PSafeArray); safecall;
    function Get_xsdCardReaderInitResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCardReaderInitResponseTypeInitFlag(pRetVal: WordBool); safecall;
    function TrackDataSize: Integer; safecall;
    function TrackDataGetItem(index: Integer): ITrackDataType; safecall;
    function TrackDataSetItem(index: Integer; const Value: ITrackDataType): WordBool; safecall;
    function TrackDataAddItem(const Value: ITrackDataType): WordBool; safecall;
    function TrackDataRemoveItem(index: Integer): WordBool; safecall;
    function EntryModeSize: Integer; safecall;
    function EntryModeGetItem(index: Integer): WideString; safecall;
    function EntryModeSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function EntryModeAddItem(const Value: WideString): WordBool; safecall;
    function EntryModeRemoveItem(index: Integer): WordBool; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property TrackData: PSafeArray read Get_TrackData write Set_TrackData;
    property ICCResetData: IICCResetDataType read Get_ICCResetData write _Set_ICCResetData;
    property EntryMode: PSafeArray read Get_EntryMode write Set_EntryMode;
    property xsdCardReaderInitResponseTypeInitFlag: WordBool read Get_xsdCardReaderInitResponseTypeInitFlag write Set_xsdCardReaderInitResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICardReaderInitResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {DCA1232D-0BFC-4AAD-BF94-5B9DB2F2004C}
// *********************************************************************//
  ICardReaderInitResponseTypeDisp = dispinterface
    ['{DCA1232D-0BFC-4AAD-BF94-5B9DB2F2004C}']
    property Response: IResponseType dispid 1;
    property TrackData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property ICCResetData: IICCResetDataType dispid 5;
    property EntryMode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 7;
    property xsdCardReaderInitResponseTypeInitFlag: WordBool dispid 9;
    function TrackDataSize: Integer; dispid 10;
    function TrackDataGetItem(index: Integer): ITrackDataType; dispid 11;
    function TrackDataSetItem(index: Integer; const Value: ITrackDataType): WordBool; dispid 12;
    function TrackDataAddItem(const Value: ITrackDataType): WordBool; dispid 13;
    function TrackDataRemoveItem(index: Integer): WordBool; dispid 14;
    function EntryModeSize: Integer; dispid 15;
    function EntryModeGetItem(index: Integer): WideString; dispid 16;
    function EntryModeSetItem(index: Integer; const Value: WideString): WordBool; dispid 17;
    function EntryModeAddItem(const Value: WideString): WordBool; dispid 18;
    function EntryModeRemoveItem(index: Integer): WordBool; dispid 19;
  end;

// *********************************************************************//
// Interface :   IICCResetDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0E15BBC0-804B-4C5D-983D-5DCE68ADF8E0}
// *********************************************************************//
  IICCResetDataType = interface(IDispatch)
    ['{0E15BBC0-804B-4C5D-983D-5DCE68ADF8E0}']
    function Get_ATRValue: PSafeArray; safecall;
    procedure Set_ATRValue(pRetVal: PSafeArray); safecall;
    function Get_CardStatusWords: PSafeArray; safecall;
    procedure Set_CardStatusWords(pRetVal: PSafeArray); safecall;
    function Get_xsdICCResetDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdICCResetDataTypeInitFlag(pRetVal: WordBool); safecall;
    function ATRValueSize: Integer; safecall;
    function ATRValueGetItem(index: Integer): Byte; safecall;
    function ATRValueSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function ATRValueAddItem(Value: Byte): WordBool; safecall;
    function ATRValueRemoveItem(index: Integer): WordBool; safecall;
    function CardStatusWordsSize: Integer; safecall;
    function CardStatusWordsGetItem(index: Integer): Byte; safecall;
    function CardStatusWordsSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function CardStatusWordsAddItem(Value: Byte): WordBool; safecall;
    function CardStatusWordsRemoveItem(index: Integer): WordBool; safecall;
    property ATRValue: PSafeArray read Get_ATRValue write Set_ATRValue;
    property CardStatusWords: PSafeArray read Get_CardStatusWords write Set_CardStatusWords;
    property xsdICCResetDataTypeInitFlag: WordBool read Get_xsdICCResetDataTypeInitFlag write Set_xsdICCResetDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IICCResetDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0E15BBC0-804B-4C5D-983D-5DCE68ADF8E0}
// *********************************************************************//
  IICCResetDataTypeDisp = dispinterface
    ['{0E15BBC0-804B-4C5D-983D-5DCE68ADF8E0}']
    property ATRValue: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property CardStatusWords: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property xsdICCResetDataTypeInitFlag: WordBool dispid 5;
    function ATRValueSize: Integer; dispid 6;
    function ATRValueGetItem(index: Integer): Byte; dispid 7;
    function ATRValueSetItem(index: Integer; Value: Byte): WordBool; dispid 8;
    function ATRValueAddItem(Value: Byte): WordBool; dispid 9;
    function ATRValueRemoveItem(index: Integer): WordBool; dispid 10;
    function CardStatusWordsSize: Integer; dispid 11;
    function CardStatusWordsGetItem(index: Integer): Byte; dispid 12;
    function CardStatusWordsSetItem(index: Integer; Value: Byte): WordBool; dispid 13;
    function CardStatusWordsAddItem(Value: Byte): WordBool; dispid 14;
    function CardStatusWordsRemoveItem(index: Integer): WordBool; dispid 15;
  end;

// *********************************************************************//
// Interface :   ICardReaderPowerOffRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E02EFE42-1C6C-4190-B1C3-A7C8DC88B111}
// *********************************************************************//
  ICardReaderPowerOffRequestType = interface(IDispatch)
    ['{E02EFE42-1C6C-4190-B1C3-A7C8DC88B111}']
    function Get_DisplayOutput: IDisplayOutputType; safecall;
    procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
    function Get_MaxWaitingTime: WideString; safecall;
    procedure Set_MaxWaitingTime(const pRetVal: WideString); safecall;
    function Get_xsdCardReaderPowerOffRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCardReaderPowerOffRequestTypeInitFlag(pRetVal: WordBool); safecall;
    property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
    property MaxWaitingTime: WideString read Get_MaxWaitingTime write Set_MaxWaitingTime;
    property xsdCardReaderPowerOffRequestTypeInitFlag: WordBool read Get_xsdCardReaderPowerOffRequestTypeInitFlag write Set_xsdCardReaderPowerOffRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICardReaderPowerOffRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E02EFE42-1C6C-4190-B1C3-A7C8DC88B111}
// *********************************************************************//
  ICardReaderPowerOffRequestTypeDisp = dispinterface
    ['{E02EFE42-1C6C-4190-B1C3-A7C8DC88B111}']
    property DisplayOutput: IDisplayOutputType dispid 1;
    property MaxWaitingTime: WideString dispid 3;
    property xsdCardReaderPowerOffRequestTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   ICardReaderPowerOffResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {DAC55A55-261D-44BF-9E00-D99F678C2921}
// *********************************************************************//
  ICardReaderPowerOffResponseType = interface(IDispatch)
    ['{DAC55A55-261D-44BF-9E00-D99F678C2921}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_xsdCardReaderPowerOffResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCardReaderPowerOffResponseTypeInitFlag(pRetVal: WordBool); safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property xsdCardReaderPowerOffResponseTypeInitFlag: WordBool read Get_xsdCardReaderPowerOffResponseTypeInitFlag write Set_xsdCardReaderPowerOffResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICardReaderPowerOffResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {DAC55A55-261D-44BF-9E00-D99F678C2921}
// *********************************************************************//
  ICardReaderPowerOffResponseTypeDisp = dispinterface
    ['{DAC55A55-261D-44BF-9E00-D99F678C2921}']
    property Response: IResponseType dispid 1;
    property xsdCardReaderPowerOffResponseTypeInitFlag: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface :   ICashHandlingDeviceType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {DE966E96-A9D3-4C7C-9FCC-C79421729631}
// *********************************************************************//
  ICashHandlingDeviceType = interface(IDispatch)
    ['{DE966E96-A9D3-4C7C-9FCC-C79421729631}']
    function Get_CoinsOrBills: PSafeArray; safecall;
    procedure Set_CoinsOrBills(pRetVal: PSafeArray); safecall;
    function Get_CashHandlingOKFlag: WordBool; safecall;
    procedure Set_CashHandlingOKFlag(pRetVal: WordBool); safecall;
    function Get_currency: WideString; safecall;
    procedure Set_currency(const pRetVal: WideString); safecall;
    function Get_xsdCashHandlingDeviceTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCashHandlingDeviceTypeInitFlag(pRetVal: WordBool); safecall;
    function CoinsOrBillsSize: Integer; safecall;
    function CoinsOrBillsGetItem(index: Integer): ICoinsOrBillsType; safecall;
    function CoinsOrBillsSetItem(index: Integer; const Value: ICoinsOrBillsType): WordBool; safecall;
    function CoinsOrBillsAddItem(const Value: ICoinsOrBillsType): WordBool; safecall;
    function CoinsOrBillsRemoveItem(index: Integer): WordBool; safecall;
    property CoinsOrBills: PSafeArray read Get_CoinsOrBills write Set_CoinsOrBills;
    property CashHandlingOKFlag: WordBool read Get_CashHandlingOKFlag write Set_CashHandlingOKFlag;
    property currency: WideString read Get_currency write Set_currency;
    property xsdCashHandlingDeviceTypeInitFlag: WordBool read Get_xsdCashHandlingDeviceTypeInitFlag write Set_xsdCashHandlingDeviceTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICashHandlingDeviceTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {DE966E96-A9D3-4C7C-9FCC-C79421729631}
// *********************************************************************//
  ICashHandlingDeviceTypeDisp = dispinterface
    ['{DE966E96-A9D3-4C7C-9FCC-C79421729631}']
    property CoinsOrBills: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property CashHandlingOKFlag: WordBool dispid 3;
    property currency: WideString dispid 5;
    property xsdCashHandlingDeviceTypeInitFlag: WordBool dispid 7;
    function CoinsOrBillsSize: Integer; dispid 8;
    function CoinsOrBillsGetItem(index: Integer): ICoinsOrBillsType; dispid 9;
    function CoinsOrBillsSetItem(index: Integer; const Value: ICoinsOrBillsType): WordBool; dispid 10;
    function CoinsOrBillsAddItem(const Value: ICoinsOrBillsType): WordBool; dispid 11;
    function CoinsOrBillsRemoveItem(index: Integer): WordBool; dispid 12;
  end;

// *********************************************************************//
// Interface :   ICoinsOrBillsType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {ABD91E0D-E60C-4FD6-858E-0946D509B677}
// *********************************************************************//
  ICoinsOrBillsType = interface(IDispatch)
    ['{ABD91E0D-E60C-4FD6-858E-0946D509B677}']
    function Get_UnitValue: TDecimal; safecall;
    procedure Set_UnitValue(pRetVal: TDecimal); safecall;
    function Get_Number: WideString; safecall;
    procedure Set_Number(const pRetVal: WideString); safecall;
    function Get_xsdCoinsOrBillsTypeInitFlag: WordBool; safecall;
    procedure Set_xsdCoinsOrBillsTypeInitFlag(pRetVal: WordBool); safecall;
    property UnitValue: TDecimal read Get_UnitValue write Set_UnitValue;
    property Number: WideString read Get_Number write Set_Number;
    property xsdCoinsOrBillsTypeInitFlag: WordBool read Get_xsdCoinsOrBillsTypeInitFlag write Set_xsdCoinsOrBillsTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ICoinsOrBillsTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {ABD91E0D-E60C-4FD6-858E-0946D509B677}
// *********************************************************************//
  ICoinsOrBillsTypeDisp = dispinterface
    ['{ABD91E0D-E60C-4FD6-858E-0946D509B677}']
    property UnitValue: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 1;
    property Number: WideString dispid 3;
    property xsdCoinsOrBillsTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IDiagnosisRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2E511EE0-D62B-42B5-97FD-9DD80CCAFF27}
// *********************************************************************//
  IDiagnosisRequestType = interface(IDispatch)
    ['{2E511EE0-D62B-42B5-97FD-9DD80CCAFF27}']
    function Get_AcquirerID: PSafeArray; safecall;
    procedure Set_AcquirerID(pRetVal: PSafeArray); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_HostDiagnosisFlag: WordBool; safecall;
    procedure Set_HostDiagnosisFlag(pRetVal: WordBool); safecall;
    function Get_xsdDiagnosisRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdDiagnosisRequestTypeInitFlag(pRetVal: WordBool); safecall;
    function AcquirerIDSize: Integer; safecall;
    function AcquirerIDGetItem(index: Integer): WideString; safecall;
    function AcquirerIDSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function AcquirerIDAddItem(const Value: WideString): WordBool; safecall;
    function AcquirerIDRemoveItem(index: Integer): WordBool; safecall;
    property AcquirerID: PSafeArray read Get_AcquirerID write Set_AcquirerID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property HostDiagnosisFlag: WordBool read Get_HostDiagnosisFlag write Set_HostDiagnosisFlag;
    property xsdDiagnosisRequestTypeInitFlag: WordBool read Get_xsdDiagnosisRequestTypeInitFlag write Set_xsdDiagnosisRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IDiagnosisRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2E511EE0-D62B-42B5-97FD-9DD80CCAFF27}
// *********************************************************************//
  IDiagnosisRequestTypeDisp = dispinterface
    ['{2E511EE0-D62B-42B5-97FD-9DD80CCAFF27}']
    property AcquirerID: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property POIID: WideString dispid 4;
    property HostDiagnosisFlag: WordBool dispid 6;
    property xsdDiagnosisRequestTypeInitFlag: WordBool dispid 8;
    function AcquirerIDSize: Integer; dispid 9;
    function AcquirerIDGetItem(index: Integer): WideString; dispid 10;
    function AcquirerIDSetItem(index: Integer; const Value: WideString): WordBool; dispid 11;
    function AcquirerIDAddItem(const Value: WideString): WordBool; dispid 12;
    function AcquirerIDRemoveItem(index: Integer): WordBool; dispid 13;
  end;

// *********************************************************************//
// Interface :   IDiagnosisResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6889C5A3-88F9-4509-8F58-C34EF6566797}
// *********************************************************************//
  IDiagnosisResponseType = interface(IDispatch)
    ['{6889C5A3-88F9-4509-8F58-C34EF6566797}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_LoggedSaleID: PSafeArray; safecall;
    procedure Set_LoggedSaleID(pRetVal: PSafeArray); safecall;
    function Get_POIStatus: IPOIStatusType; safecall;
    procedure _Set_POIStatus(const pRetVal: IPOIStatusType); safecall;
    function Get_HostStatus: PSafeArray; safecall;
    procedure Set_HostStatus(pRetVal: PSafeArray); safecall;
    function Get_xsdDiagnosisResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdDiagnosisResponseTypeInitFlag(pRetVal: WordBool); safecall;
    function LoggedSaleIDSize: Integer; safecall;
    function LoggedSaleIDGetItem(index: Integer): WideString; safecall;
    function LoggedSaleIDSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function LoggedSaleIDAddItem(const Value: WideString): WordBool; safecall;
    function LoggedSaleIDRemoveItem(index: Integer): WordBool; safecall;
    function HostStatusSize: Integer; safecall;
    function HostStatusGetItem(index: Integer): IHostStatusType; safecall;
    function HostStatusSetItem(index: Integer; const Value: IHostStatusType): WordBool; safecall;
    function HostStatusAddItem(const Value: IHostStatusType): WordBool; safecall;
    function HostStatusRemoveItem(index: Integer): WordBool; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property LoggedSaleID: PSafeArray read Get_LoggedSaleID write Set_LoggedSaleID;
    property POIStatus: IPOIStatusType read Get_POIStatus write _Set_POIStatus;
    property HostStatus: PSafeArray read Get_HostStatus write Set_HostStatus;
    property xsdDiagnosisResponseTypeInitFlag: WordBool read Get_xsdDiagnosisResponseTypeInitFlag write Set_xsdDiagnosisResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IDiagnosisResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6889C5A3-88F9-4509-8F58-C34EF6566797}
// *********************************************************************//
  IDiagnosisResponseTypeDisp = dispinterface
    ['{6889C5A3-88F9-4509-8F58-C34EF6566797}']
    property Response: IResponseType dispid 1;
    property LoggedSaleID: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property POIStatus: IPOIStatusType dispid 5;
    property HostStatus: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 7;
    property xsdDiagnosisResponseTypeInitFlag: WordBool dispid 9;
    function LoggedSaleIDSize: Integer; dispid 10;
    function LoggedSaleIDGetItem(index: Integer): WideString; dispid 11;
    function LoggedSaleIDSetItem(index: Integer; const Value: WideString): WordBool; dispid 12;
    function LoggedSaleIDAddItem(const Value: WideString): WordBool; dispid 13;
    function LoggedSaleIDRemoveItem(index: Integer): WordBool; dispid 14;
    function HostStatusSize: Integer; dispid 15;
    function HostStatusGetItem(index: Integer): IHostStatusType; dispid 16;
    function HostStatusSetItem(index: Integer; const Value: IHostStatusType): WordBool; dispid 17;
    function HostStatusAddItem(const Value: IHostStatusType): WordBool; dispid 18;
    function HostStatusRemoveItem(index: Integer): WordBool; dispid 19;
  end;

// *********************************************************************//
// Interface :   IPOIStatusType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E3A9F35E-7863-4B50-899A-89A2AAE36BB9}
// *********************************************************************//
  IPOIStatusType = interface(IDispatch)
    ['{E3A9F35E-7863-4B50-899A-89A2AAE36BB9}']
    function Get_CashHandlingDevice: PSafeArray; safecall;
    procedure Set_CashHandlingDevice(pRetVal: PSafeArray); safecall;
    function Get_GlobalStatus: WideString; safecall;
    procedure Set_GlobalStatus(const pRetVal: WideString); safecall;
    function Get_SecurityOKFlag: WordBool; safecall;
    procedure Set_SecurityOKFlag(pRetVal: WordBool); safecall;
    function Get_SecurityOKFlagSpecified: WordBool; safecall;
    procedure Set_SecurityOKFlagSpecified(pRetVal: WordBool); safecall;
    function Get_PEDOKFlag: WordBool; safecall;
    procedure Set_PEDOKFlag(pRetVal: WordBool); safecall;
    function Get_PEDOKFlagSpecified: WordBool; safecall;
    procedure Set_PEDOKFlagSpecified(pRetVal: WordBool); safecall;
    function Get_CardReaderOKFlag: WordBool; safecall;
    procedure Set_CardReaderOKFlag(pRetVal: WordBool); safecall;
    function Get_CardReaderOKFlagSpecified: WordBool; safecall;
    procedure Set_CardReaderOKFlagSpecified(pRetVal: WordBool); safecall;
    function Get_PrinterStatus: WideString; safecall;
    procedure Set_PrinterStatus(const pRetVal: WideString); safecall;
    function Get_CommunicationOKFlag: WordBool; safecall;
    procedure Set_CommunicationOKFlag(pRetVal: WordBool); safecall;
    function Get_CommunicationOKFlagSpecified: WordBool; safecall;
    procedure Set_CommunicationOKFlagSpecified(pRetVal: WordBool); safecall;
    function Get_FraudPreventionFlag: WordBool; safecall;
    procedure Set_FraudPreventionFlag(pRetVal: WordBool); safecall;
    function Get_FraudPreventionFlagSpecified: WordBool; safecall;
    procedure Set_FraudPreventionFlagSpecified(pRetVal: WordBool); safecall;
    function Get_xsdPOIStatusTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPOIStatusTypeInitFlag(pRetVal: WordBool); safecall;
    function CashHandlingDeviceSize: Integer; safecall;
    function CashHandlingDeviceGetItem(index: Integer): ICashHandlingDeviceType; safecall;
    function CashHandlingDeviceSetItem(index: Integer; const Value: ICashHandlingDeviceType): WordBool; safecall;
    function CashHandlingDeviceAddItem(const Value: ICashHandlingDeviceType): WordBool; safecall;
    function CashHandlingDeviceRemoveItem(index: Integer): WordBool; safecall;
    property CashHandlingDevice: PSafeArray read Get_CashHandlingDevice write Set_CashHandlingDevice;
    property GlobalStatus: WideString read Get_GlobalStatus write Set_GlobalStatus;
    property SecurityOKFlag: WordBool read Get_SecurityOKFlag write Set_SecurityOKFlag;
    property SecurityOKFlagSpecified: WordBool read Get_SecurityOKFlagSpecified write Set_SecurityOKFlagSpecified;
    property PEDOKFlag: WordBool read Get_PEDOKFlag write Set_PEDOKFlag;
    property PEDOKFlagSpecified: WordBool read Get_PEDOKFlagSpecified write Set_PEDOKFlagSpecified;
    property CardReaderOKFlag: WordBool read Get_CardReaderOKFlag write Set_CardReaderOKFlag;
    property CardReaderOKFlagSpecified: WordBool read Get_CardReaderOKFlagSpecified write Set_CardReaderOKFlagSpecified;
    property PrinterStatus: WideString read Get_PrinterStatus write Set_PrinterStatus;
    property CommunicationOKFlag: WordBool read Get_CommunicationOKFlag write Set_CommunicationOKFlag;
    property CommunicationOKFlagSpecified: WordBool read Get_CommunicationOKFlagSpecified write Set_CommunicationOKFlagSpecified;
    property FraudPreventionFlag: WordBool read Get_FraudPreventionFlag write Set_FraudPreventionFlag;
    property FraudPreventionFlagSpecified: WordBool read Get_FraudPreventionFlagSpecified write Set_FraudPreventionFlagSpecified;
    property xsdPOIStatusTypeInitFlag: WordBool read Get_xsdPOIStatusTypeInitFlag write Set_xsdPOIStatusTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPOIStatusTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E3A9F35E-7863-4B50-899A-89A2AAE36BB9}
// *********************************************************************//
  IPOIStatusTypeDisp = dispinterface
    ['{E3A9F35E-7863-4B50-899A-89A2AAE36BB9}']
    property CashHandlingDevice: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property GlobalStatus: WideString dispid 3;
    property SecurityOKFlag: WordBool dispid 5;
    property SecurityOKFlagSpecified: WordBool dispid 7;
    property PEDOKFlag: WordBool dispid 9;
    property PEDOKFlagSpecified: WordBool dispid 11;
    property CardReaderOKFlag: WordBool dispid 13;
    property CardReaderOKFlagSpecified: WordBool dispid 15;
    property PrinterStatus: WideString dispid 17;
    property CommunicationOKFlag: WordBool dispid 19;
    property CommunicationOKFlagSpecified: WordBool dispid 21;
    property FraudPreventionFlag: WordBool dispid 23;
    property FraudPreventionFlagSpecified: WordBool dispid 25;
    property xsdPOIStatusTypeInitFlag: WordBool dispid 27;
    function CashHandlingDeviceSize: Integer; dispid 28;
    function CashHandlingDeviceGetItem(index: Integer): ICashHandlingDeviceType; dispid 29;
    function CashHandlingDeviceSetItem(index: Integer; const Value: ICashHandlingDeviceType): WordBool; dispid 30;
    function CashHandlingDeviceAddItem(const Value: ICashHandlingDeviceType): WordBool; dispid 31;
    function CashHandlingDeviceRemoveItem(index: Integer): WordBool; dispid 32;
  end;

// *********************************************************************//
// Interface :   IHostStatusType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {43B8F13D-2B92-4272-A82D-F646EB9796D3}
// *********************************************************************//
  IHostStatusType = interface(IDispatch)
    ['{43B8F13D-2B92-4272-A82D-F646EB9796D3}']
    function Get_AcquirerID: WideString; safecall;
    procedure Set_AcquirerID(const pRetVal: WideString); safecall;
    function Get_IsReachableFlag: WordBool; safecall;
    procedure Set_IsReachableFlag(pRetVal: WordBool); safecall;
    function Get_xsdHostStatusTypeInitFlag: WordBool; safecall;
    procedure Set_xsdHostStatusTypeInitFlag(pRetVal: WordBool); safecall;
    property AcquirerID: WideString read Get_AcquirerID write Set_AcquirerID;
    property IsReachableFlag: WordBool read Get_IsReachableFlag write Set_IsReachableFlag;
    property xsdHostStatusTypeInitFlag: WordBool read Get_xsdHostStatusTypeInitFlag write Set_xsdHostStatusTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IHostStatusTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {43B8F13D-2B92-4272-A82D-F646EB9796D3}
// *********************************************************************//
  IHostStatusTypeDisp = dispinterface
    ['{43B8F13D-2B92-4272-A82D-F646EB9796D3}']
    property AcquirerID: WideString dispid 2;
    property IsReachableFlag: WordBool dispid 4;
    property xsdHostStatusTypeInitFlag: WordBool dispid 6;
  end;

// *********************************************************************//
// Interface :   IEnableServiceRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2F52478E-7E05-4F9D-AC89-BE00511B9285}
// *********************************************************************//
  IEnableServiceRequestType = interface(IDispatch)
    ['{2F52478E-7E05-4F9D-AC89-BE00511B9285}']
    function Get_ServicesEnabled: WideString; safecall;
    procedure Set_ServicesEnabled(const pRetVal: WideString); safecall;
    function Get_DisplayOutput: IDisplayOutputType; safecall;
    procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
    function Get_TransactionAction: WideString; safecall;
    procedure Set_TransactionAction(const pRetVal: WideString); safecall;
    function Get_xsdEnableServiceRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdEnableServiceRequestTypeInitFlag(pRetVal: WordBool); safecall;
    property ServicesEnabled: WideString read Get_ServicesEnabled write Set_ServicesEnabled;
    property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
    property TransactionAction: WideString read Get_TransactionAction write Set_TransactionAction;
    property xsdEnableServiceRequestTypeInitFlag: WordBool read Get_xsdEnableServiceRequestTypeInitFlag write Set_xsdEnableServiceRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IEnableServiceRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2F52478E-7E05-4F9D-AC89-BE00511B9285}
// *********************************************************************//
  IEnableServiceRequestTypeDisp = dispinterface
    ['{2F52478E-7E05-4F9D-AC89-BE00511B9285}']
    property ServicesEnabled: WideString dispid 1;
    property DisplayOutput: IDisplayOutputType dispid 3;
    property TransactionAction: WideString dispid 5;
    property xsdEnableServiceRequestTypeInitFlag: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface :   IEnableServiceResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {505B7C8B-3A60-46EF-A8D8-3D39F6AC44D4}
// *********************************************************************//
  IEnableServiceResponseType = interface(IDispatch)
    ['{505B7C8B-3A60-46EF-A8D8-3D39F6AC44D4}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_xsdEnableServiceResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdEnableServiceResponseTypeInitFlag(pRetVal: WordBool); safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property xsdEnableServiceResponseTypeInitFlag: WordBool read Get_xsdEnableServiceResponseTypeInitFlag write Set_xsdEnableServiceResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IEnableServiceResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {505B7C8B-3A60-46EF-A8D8-3D39F6AC44D4}
// *********************************************************************//
  IEnableServiceResponseTypeDisp = dispinterface
    ['{505B7C8B-3A60-46EF-A8D8-3D39F6AC44D4}']
    property Response: IResponseType dispid 1;
    property xsdEnableServiceResponseTypeInitFlag: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface :   IEventNotificationType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3605AE73-C9C1-41F3-A108-1CBDBC820F6E}
// *********************************************************************//
  IEventNotificationType = interface(IDispatch)
    ['{3605AE73-C9C1-41F3-A108-1CBDBC820F6E}']
    function Get_EventDetails: WideString; safecall;
    procedure Set_EventDetails(const pRetVal: WideString); safecall;
    function Get_RejectedMessage: PSafeArray; safecall;
    procedure Set_RejectedMessage(pRetVal: PSafeArray); safecall;
    function Get_DisplayOutput: IDisplayOutputType; safecall;
    procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
    function Get_Timestamp: WideString; safecall;
    procedure Set_Timestamp(const pRetVal: WideString); safecall;
    function Get_EventToNotify: WideString; safecall;
    procedure Set_EventToNotify(const pRetVal: WideString); safecall;
    function Get_MaintenanceRequiredFlag: WordBool; safecall;
    procedure Set_MaintenanceRequiredFlag(pRetVal: WordBool); safecall;
    function Get_CustomerLanguage: WideString; safecall;
    procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
    function Get_xsdEventNotificationTypeInitFlag: WordBool; safecall;
    procedure Set_xsdEventNotificationTypeInitFlag(pRetVal: WordBool); safecall;
    function RejectedMessageSize: Integer; safecall;
    function RejectedMessageGetItem(index: Integer): Byte; safecall;
    function RejectedMessageSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function RejectedMessageAddItem(Value: Byte): WordBool; safecall;
    function RejectedMessageRemoveItem(index: Integer): WordBool; safecall;
    property EventDetails: WideString read Get_EventDetails write Set_EventDetails;
    property RejectedMessage: PSafeArray read Get_RejectedMessage write Set_RejectedMessage;
    property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
    property Timestamp: WideString read Get_Timestamp write Set_Timestamp;
    property EventToNotify: WideString read Get_EventToNotify write Set_EventToNotify;
    property MaintenanceRequiredFlag: WordBool read Get_MaintenanceRequiredFlag write Set_MaintenanceRequiredFlag;
    property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
    property xsdEventNotificationTypeInitFlag: WordBool read Get_xsdEventNotificationTypeInitFlag write Set_xsdEventNotificationTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IEventNotificationTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3605AE73-C9C1-41F3-A108-1CBDBC820F6E}
// *********************************************************************//
  IEventNotificationTypeDisp = dispinterface
    ['{3605AE73-C9C1-41F3-A108-1CBDBC820F6E}']
    property EventDetails: WideString dispid 2;
    property RejectedMessage: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property DisplayOutput: IDisplayOutputType dispid 6;
    property Timestamp: WideString dispid 8;
    property EventToNotify: WideString dispid 10;
    property MaintenanceRequiredFlag: WordBool dispid 12;
    property CustomerLanguage: WideString dispid 14;
    property xsdEventNotificationTypeInitFlag: WordBool dispid 16;
    function RejectedMessageSize: Integer; dispid 17;
    function RejectedMessageGetItem(index: Integer): Byte; dispid 18;
    function RejectedMessageSetItem(index: Integer; Value: Byte): WordBool; dispid 19;
    function RejectedMessageAddItem(Value: Byte): WordBool; dispid 20;
    function RejectedMessageRemoveItem(index: Integer): WordBool; dispid 21;
  end;

// *********************************************************************//
// Interface :   IGetTotalsRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1EE364EC-C860-481C-9861-46BBDAB95FA5}
// *********************************************************************//
  IGetTotalsRequestType = interface(IDispatch)
    ['{1EE364EC-C860-481C-9861-46BBDAB95FA5}']
    function Get_TotalDetails: WideString; safecall;
    procedure Set_TotalDetails(const pRetVal: WideString); safecall;
    function Get_TotalFilter: ITotalFilterType; safecall;
    procedure _Set_TotalFilter(const pRetVal: ITotalFilterType); safecall;
    function Get_xsdGetTotalsRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdGetTotalsRequestTypeInitFlag(pRetVal: WordBool); safecall;
    property TotalDetails: WideString read Get_TotalDetails write Set_TotalDetails;
    property TotalFilter: ITotalFilterType read Get_TotalFilter write _Set_TotalFilter;
    property xsdGetTotalsRequestTypeInitFlag: WordBool read Get_xsdGetTotalsRequestTypeInitFlag write Set_xsdGetTotalsRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IGetTotalsRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {1EE364EC-C860-481C-9861-46BBDAB95FA5}
// *********************************************************************//
  IGetTotalsRequestTypeDisp = dispinterface
    ['{1EE364EC-C860-481C-9861-46BBDAB95FA5}']
    property TotalDetails: WideString dispid 1;
    property TotalFilter: ITotalFilterType dispid 3;
    property xsdGetTotalsRequestTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   ITotalFilterType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {FDBEA206-A8C9-4E38-91C3-2AE36FDDA7A5}
// *********************************************************************//
  ITotalFilterType = interface(IDispatch)
    ['{FDBEA206-A8C9-4E38-91C3-2AE36FDDA7A5}']
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_OperatorID: WideString; safecall;
    procedure Set_OperatorID(const pRetVal: WideString); safecall;
    function Get_ShiftNumber: WideString; safecall;
    procedure Set_ShiftNumber(const pRetVal: WideString); safecall;
    function Get_TotalsGroupID: WideString; safecall;
    procedure Set_TotalsGroupID(const pRetVal: WideString); safecall;
    function Get_xsdTotalFilterTypeInitFlag: WordBool; safecall;
    procedure Set_xsdTotalFilterTypeInitFlag(pRetVal: WordBool); safecall;
    property POIID: WideString read Get_POIID write Set_POIID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property OperatorID: WideString read Get_OperatorID write Set_OperatorID;
    property ShiftNumber: WideString read Get_ShiftNumber write Set_ShiftNumber;
    property TotalsGroupID: WideString read Get_TotalsGroupID write Set_TotalsGroupID;
    property xsdTotalFilterTypeInitFlag: WordBool read Get_xsdTotalFilterTypeInitFlag write Set_xsdTotalFilterTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ITotalFilterTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {FDBEA206-A8C9-4E38-91C3-2AE36FDDA7A5}
// *********************************************************************//
  ITotalFilterTypeDisp = dispinterface
    ['{FDBEA206-A8C9-4E38-91C3-2AE36FDDA7A5}']
    property POIID: WideString dispid 1;
    property SaleID: WideString dispid 3;
    property OperatorID: WideString dispid 5;
    property ShiftNumber: WideString dispid 7;
    property TotalsGroupID: WideString dispid 9;
    property xsdTotalFilterTypeInitFlag: WordBool dispid 11;
  end;

// *********************************************************************//
// Interface :   IGetTotalsResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {ACE7ADB5-265A-4976-A8F6-806D5CBF2761}
// *********************************************************************//
  IGetTotalsResponseType = interface(IDispatch)
    ['{ACE7ADB5-265A-4976-A8F6-806D5CBF2761}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_TransactionTotals: PSafeArray; safecall;
    procedure Set_TransactionTotals(pRetVal: PSafeArray); safecall;
    function Get_POIReconciliationID: WideString; safecall;
    procedure Set_POIReconciliationID(const pRetVal: WideString); safecall;
    function Get_xsdGetTotalsResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdGetTotalsResponseTypeInitFlag(pRetVal: WordBool); safecall;
    function TransactionTotalsSize: Integer; safecall;
    function TransactionTotalsGetItem(index: Integer): ITransactionTotalsType; safecall;
    function TransactionTotalsSetItem(index: Integer; const Value: ITransactionTotalsType): WordBool; safecall;
    function TransactionTotalsAddItem(const Value: ITransactionTotalsType): WordBool; safecall;
    function TransactionTotalsRemoveItem(index: Integer): WordBool; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property TransactionTotals: PSafeArray read Get_TransactionTotals write Set_TransactionTotals;
    property POIReconciliationID: WideString read Get_POIReconciliationID write Set_POIReconciliationID;
    property xsdGetTotalsResponseTypeInitFlag: WordBool read Get_xsdGetTotalsResponseTypeInitFlag write Set_xsdGetTotalsResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IGetTotalsResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {ACE7ADB5-265A-4976-A8F6-806D5CBF2761}
// *********************************************************************//
  IGetTotalsResponseTypeDisp = dispinterface
    ['{ACE7ADB5-265A-4976-A8F6-806D5CBF2761}']
    property Response: IResponseType dispid 1;
    property TransactionTotals: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property POIReconciliationID: WideString dispid 5;
    property xsdGetTotalsResponseTypeInitFlag: WordBool dispid 7;
    function TransactionTotalsSize: Integer; dispid 8;
    function TransactionTotalsGetItem(index: Integer): ITransactionTotalsType; dispid 9;
    function TransactionTotalsSetItem(index: Integer; const Value: ITransactionTotalsType): WordBool; dispid 10;
    function TransactionTotalsAddItem(const Value: ITransactionTotalsType): WordBool; dispid 11;
    function TransactionTotalsRemoveItem(index: Integer): WordBool; dispid 12;
  end;

// *********************************************************************//
// Interface :   ITransactionTotalsType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8D67E0C6-31C9-45BB-8C12-EB3E3685298B}
// *********************************************************************//
  ITransactionTotalsType = interface(IDispatch)
    ['{8D67E0C6-31C9-45BB-8C12-EB3E3685298B}']
    function Get_PaymentTotals: PSafeArray; safecall;
    procedure Set_PaymentTotals(pRetVal: PSafeArray); safecall;
    function Get_LoyaltyTotals: PSafeArray; safecall;
    procedure Set_LoyaltyTotals(pRetVal: PSafeArray); safecall;
    function Get_PaymentInstrumentType: WideString; safecall;
    procedure Set_PaymentInstrumentType(const pRetVal: WideString); safecall;
    function Get_AcquirerID: WideString; safecall;
    procedure Set_AcquirerID(const pRetVal: WideString); safecall;
    function Get_ErrorCondition: WideString; safecall;
    procedure Set_ErrorCondition(const pRetVal: WideString); safecall;
    function Get_HostReconciliationID: WideString; safecall;
    procedure Set_HostReconciliationID(const pRetVal: WideString); safecall;
    function Get_CardBrand: WideString; safecall;
    procedure Set_CardBrand(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_OperatorID: WideString; safecall;
    procedure Set_OperatorID(const pRetVal: WideString); safecall;
    function Get_ShiftNumber: WideString; safecall;
    procedure Set_ShiftNumber(const pRetVal: WideString); safecall;
    function Get_TotalsGroupID: WideString; safecall;
    procedure Set_TotalsGroupID(const pRetVal: WideString); safecall;
    function Get_PaymentCurrency: WideString; safecall;
    procedure Set_PaymentCurrency(const pRetVal: WideString); safecall;
    function Get_LoyaltyUnit: WideString; safecall;
    procedure Set_LoyaltyUnit(const pRetVal: WideString); safecall;
    function Get_LoyaltyCurrency: WideString; safecall;
    procedure Set_LoyaltyCurrency(const pRetVal: WideString); safecall;
    function Get_xsdTransactionTotalsTypeInitFlag: WordBool; safecall;
    procedure Set_xsdTransactionTotalsTypeInitFlag(pRetVal: WordBool); safecall;
    function PaymentTotalsSize: Integer; safecall;
    function PaymentTotalsGetItem(index: Integer): IPaymentTotalsType; safecall;
    function PaymentTotalsSetItem(index: Integer; const Value: IPaymentTotalsType): WordBool; safecall;
    function PaymentTotalsAddItem(const Value: IPaymentTotalsType): WordBool; safecall;
    function PaymentTotalsRemoveItem(index: Integer): WordBool; safecall;
    function LoyaltyTotalsSize: Integer; safecall;
    function LoyaltyTotalsGetItem(index: Integer): ILoyaltyTotalsType; safecall;
    function LoyaltyTotalsSetItem(index: Integer; const Value: ILoyaltyTotalsType): WordBool; safecall;
    function LoyaltyTotalsAddItem(const Value: ILoyaltyTotalsType): WordBool; safecall;
    function LoyaltyTotalsRemoveItem(index: Integer): WordBool; safecall;
    property PaymentTotals: PSafeArray read Get_PaymentTotals write Set_PaymentTotals;
    property LoyaltyTotals: PSafeArray read Get_LoyaltyTotals write Set_LoyaltyTotals;
    property PaymentInstrumentType: WideString read Get_PaymentInstrumentType write Set_PaymentInstrumentType;
    property AcquirerID: WideString read Get_AcquirerID write Set_AcquirerID;
    property ErrorCondition: WideString read Get_ErrorCondition write Set_ErrorCondition;
    property HostReconciliationID: WideString read Get_HostReconciliationID write Set_HostReconciliationID;
    property CardBrand: WideString read Get_CardBrand write Set_CardBrand;
    property POIID: WideString read Get_POIID write Set_POIID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property OperatorID: WideString read Get_OperatorID write Set_OperatorID;
    property ShiftNumber: WideString read Get_ShiftNumber write Set_ShiftNumber;
    property TotalsGroupID: WideString read Get_TotalsGroupID write Set_TotalsGroupID;
    property PaymentCurrency: WideString read Get_PaymentCurrency write Set_PaymentCurrency;
    property LoyaltyUnit: WideString read Get_LoyaltyUnit write Set_LoyaltyUnit;
    property LoyaltyCurrency: WideString read Get_LoyaltyCurrency write Set_LoyaltyCurrency;
    property xsdTransactionTotalsTypeInitFlag: WordBool read Get_xsdTransactionTotalsTypeInitFlag write Set_xsdTransactionTotalsTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ITransactionTotalsTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8D67E0C6-31C9-45BB-8C12-EB3E3685298B}
// *********************************************************************//
  ITransactionTotalsTypeDisp = dispinterface
    ['{8D67E0C6-31C9-45BB-8C12-EB3E3685298B}']
    property PaymentTotals: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property LoyaltyTotals: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property PaymentInstrumentType: WideString dispid 6;
    property AcquirerID: WideString dispid 8;
    property ErrorCondition: WideString dispid 10;
    property HostReconciliationID: WideString dispid 12;
    property CardBrand: WideString dispid 14;
    property POIID: WideString dispid 16;
    property SaleID: WideString dispid 18;
    property OperatorID: WideString dispid 20;
    property ShiftNumber: WideString dispid 22;
    property TotalsGroupID: WideString dispid 24;
    property PaymentCurrency: WideString dispid 26;
    property LoyaltyUnit: WideString dispid 28;
    property LoyaltyCurrency: WideString dispid 30;
    property xsdTransactionTotalsTypeInitFlag: WordBool dispid 32;
    function PaymentTotalsSize: Integer; dispid 33;
    function PaymentTotalsGetItem(index: Integer): IPaymentTotalsType; dispid 34;
    function PaymentTotalsSetItem(index: Integer; const Value: IPaymentTotalsType): WordBool; dispid 35;
    function PaymentTotalsAddItem(const Value: IPaymentTotalsType): WordBool; dispid 36;
    function PaymentTotalsRemoveItem(index: Integer): WordBool; dispid 37;
    function LoyaltyTotalsSize: Integer; dispid 38;
    function LoyaltyTotalsGetItem(index: Integer): ILoyaltyTotalsType; dispid 39;
    function LoyaltyTotalsSetItem(index: Integer; const Value: ILoyaltyTotalsType): WordBool; dispid 40;
    function LoyaltyTotalsAddItem(const Value: ILoyaltyTotalsType): WordBool; dispid 41;
    function LoyaltyTotalsRemoveItem(index: Integer): WordBool; dispid 42;
  end;

// *********************************************************************//
// Interface :   IPaymentTotalsType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F00FDBDE-6D9D-4035-BA62-5434C8DCB1C7}
// *********************************************************************//
  IPaymentTotalsType = interface(IDispatch)
    ['{F00FDBDE-6D9D-4035-BA62-5434C8DCB1C7}']
    function Get_TransactionType: WideString; safecall;
    procedure Set_TransactionType(const pRetVal: WideString); safecall;
    function Get_TransactionCount: WideString; safecall;
    procedure Set_TransactionCount(const pRetVal: WideString); safecall;
    function Get_TransactionAmount: TDecimal; safecall;
    procedure Set_TransactionAmount(pRetVal: TDecimal); safecall;
    function Get_xsdPaymentTotalsTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPaymentTotalsTypeInitFlag(pRetVal: WordBool); safecall;
    property TransactionType: WideString read Get_TransactionType write Set_TransactionType;
    property TransactionCount: WideString read Get_TransactionCount write Set_TransactionCount;
    property TransactionAmount: TDecimal read Get_TransactionAmount write Set_TransactionAmount;
    property xsdPaymentTotalsTypeInitFlag: WordBool read Get_xsdPaymentTotalsTypeInitFlag write Set_xsdPaymentTotalsTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPaymentTotalsTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F00FDBDE-6D9D-4035-BA62-5434C8DCB1C7}
// *********************************************************************//
  IPaymentTotalsTypeDisp = dispinterface
    ['{F00FDBDE-6D9D-4035-BA62-5434C8DCB1C7}']
    property TransactionType: WideString dispid 1;
    property TransactionCount: WideString dispid 3;
    property TransactionAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 5;
    property xsdPaymentTotalsTypeInitFlag: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface :   ILoyaltyTotalsType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CF534DB6-4357-4925-AF2A-07FAD27C81B9}
// *********************************************************************//
  ILoyaltyTotalsType = interface(IDispatch)
    ['{CF534DB6-4357-4925-AF2A-07FAD27C81B9}']
    function Get_TransactionType: WideString; safecall;
    procedure Set_TransactionType(const pRetVal: WideString); safecall;
    function Get_TransactionCount: WideString; safecall;
    procedure Set_TransactionCount(const pRetVal: WideString); safecall;
    function Get_TransactionAmount: TDecimal; safecall;
    procedure Set_TransactionAmount(pRetVal: TDecimal); safecall;
    function Get_xsdLoyaltyTotalsTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLoyaltyTotalsTypeInitFlag(pRetVal: WordBool); safecall;
    property TransactionType: WideString read Get_TransactionType write Set_TransactionType;
    property TransactionCount: WideString read Get_TransactionCount write Set_TransactionCount;
    property TransactionAmount: TDecimal read Get_TransactionAmount write Set_TransactionAmount;
    property xsdLoyaltyTotalsTypeInitFlag: WordBool read Get_xsdLoyaltyTotalsTypeInitFlag write Set_xsdLoyaltyTotalsTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyTotalsTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CF534DB6-4357-4925-AF2A-07FAD27C81B9}
// *********************************************************************//
  ILoyaltyTotalsTypeDisp = dispinterface
    ['{CF534DB6-4357-4925-AF2A-07FAD27C81B9}']
    property TransactionType: WideString dispid 1;
    property TransactionCount: WideString dispid 3;
    property TransactionAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 5;
    property xsdLoyaltyTotalsTypeInitFlag: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface :   IInputType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {51063411-D99C-4737-8FEC-B272151EC027}
// *********************************************************************//
  IInputType = interface(IDispatch)
    ['{51063411-D99C-4737-8FEC-B272151EC027}']
    function Get_ConfirmedFlag: WordBool; safecall;
    procedure Set_ConfirmedFlag(pRetVal: WordBool); safecall;
    function Get_ConfirmedFlagSpecified: WordBool; safecall;
    procedure Set_ConfirmedFlagSpecified(pRetVal: WordBool); safecall;
    function Get_FunctionKey: WideString; safecall;
    procedure Set_FunctionKey(const pRetVal: WideString); safecall;
    function Get_TextInput: WideString; safecall;
    procedure Set_TextInput(const pRetVal: WideString); safecall;
    function Get_DigitInput: WideString; safecall;
    procedure Set_DigitInput(const pRetVal: WideString); safecall;
    function Get_Password: IContentInformationType; safecall;
    procedure _Set_Password(const pRetVal: IContentInformationType); safecall;
    function Get_MenuEntryNumber: WideString; safecall;
    procedure Set_MenuEntryNumber(const pRetVal: WideString); safecall;
    function Get_InputCommand: WideString; safecall;
    procedure Set_InputCommand(const pRetVal: WideString); safecall;
    function Get_xsdInputTypeInitFlag: WordBool; safecall;
    procedure Set_xsdInputTypeInitFlag(pRetVal: WordBool); safecall;
    property ConfirmedFlag: WordBool read Get_ConfirmedFlag write Set_ConfirmedFlag;
    property ConfirmedFlagSpecified: WordBool read Get_ConfirmedFlagSpecified write Set_ConfirmedFlagSpecified;
    property FunctionKey: WideString read Get_FunctionKey write Set_FunctionKey;
    property TextInput: WideString read Get_TextInput write Set_TextInput;
    property DigitInput: WideString read Get_DigitInput write Set_DigitInput;
    property Password: IContentInformationType read Get_Password write _Set_Password;
    property MenuEntryNumber: WideString read Get_MenuEntryNumber write Set_MenuEntryNumber;
    property InputCommand: WideString read Get_InputCommand write Set_InputCommand;
    property xsdInputTypeInitFlag: WordBool read Get_xsdInputTypeInitFlag write Set_xsdInputTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IInputTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {51063411-D99C-4737-8FEC-B272151EC027}
// *********************************************************************//
  IInputTypeDisp = dispinterface
    ['{51063411-D99C-4737-8FEC-B272151EC027}']
    property ConfirmedFlag: WordBool dispid 1;
    property ConfirmedFlagSpecified: WordBool dispid 3;
    property FunctionKey: WideString dispid 5;
    property TextInput: WideString dispid 7;
    property DigitInput: WideString dispid 9;
    property Password: IContentInformationType dispid 11;
    property MenuEntryNumber: WideString dispid 13;
    property InputCommand: WideString dispid 15;
    property xsdInputTypeInitFlag: WordBool dispid 17;
  end;

// *********************************************************************//
// Interface :   IInputDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {873E73D2-7DFD-4699-B55E-12CBB192DEE9}
// *********************************************************************//
  IInputDataType = interface(IDispatch)
    ['{873E73D2-7DFD-4699-B55E-12CBB192DEE9}']
    function Get_DefaultInputString: WideString; safecall;
    procedure Set_DefaultInputString(const pRetVal: WideString); safecall;
    function Get_StringMask: WideString; safecall;
    procedure Set_StringMask(const pRetVal: WideString); safecall;
    function Get_Device: WideString; safecall;
    procedure Set_Device(const pRetVal: WideString); safecall;
    function Get_InfoQualify: WideString; safecall;
    procedure Set_InfoQualify(const pRetVal: WideString); safecall;
    function Get_InputCommand: WideString; safecall;
    procedure Set_InputCommand(const pRetVal: WideString); safecall;
    function Get_NotifyCardInputFlag: WordBool; safecall;
    procedure Set_NotifyCardInputFlag(pRetVal: WordBool); safecall;
    function Get_MaxInputTime: WideString; safecall;
    procedure Set_MaxInputTime(const pRetVal: WideString); safecall;
    function Get_ImmediateResponseFlag: WordBool; safecall;
    procedure Set_ImmediateResponseFlag(pRetVal: WordBool); safecall;
    function Get_MinLength: WideString; safecall;
    procedure Set_MinLength(const pRetVal: WideString); safecall;
    function Get_MaxLength: WideString; safecall;
    procedure Set_MaxLength(const pRetVal: WideString); safecall;
    function Get_MaxDecimalLength: WideString; safecall;
    procedure Set_MaxDecimalLength(const pRetVal: WideString); safecall;
    function Get_WaitUserValidationFlag: WordBool; safecall;
    procedure Set_WaitUserValidationFlag(pRetVal: WordBool); safecall;
    function Get_FromRightToLeftFlag: WordBool; safecall;
    procedure Set_FromRightToLeftFlag(pRetVal: WordBool); safecall;
    function Get_MaskCharactersFlag: WordBool; safecall;
    procedure Set_MaskCharactersFlag(pRetVal: WordBool); safecall;
    function Get_BeepKeyFlag: WordBool; safecall;
    procedure Set_BeepKeyFlag(pRetVal: WordBool); safecall;
    function Get_GlobalCorrectionFlag: WordBool; safecall;
    procedure Set_GlobalCorrectionFlag(pRetVal: WordBool); safecall;
    function Get_DisableCancelFlag: WordBool; safecall;
    procedure Set_DisableCancelFlag(pRetVal: WordBool); safecall;
    function Get_DisableCorrectFlag: WordBool; safecall;
    procedure Set_DisableCorrectFlag(pRetVal: WordBool); safecall;
    function Get_DisableValidFlag: WordBool; safecall;
    procedure Set_DisableValidFlag(pRetVal: WordBool); safecall;
    function Get_MenuBackFlag: WordBool; safecall;
    procedure Set_MenuBackFlag(pRetVal: WordBool); safecall;
    function Get_xsdInputDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdInputDataTypeInitFlag(pRetVal: WordBool); safecall;
    property DefaultInputString: WideString read Get_DefaultInputString write Set_DefaultInputString;
    property StringMask: WideString read Get_StringMask write Set_StringMask;
    property Device: WideString read Get_Device write Set_Device;
    property InfoQualify: WideString read Get_InfoQualify write Set_InfoQualify;
    property InputCommand: WideString read Get_InputCommand write Set_InputCommand;
    property NotifyCardInputFlag: WordBool read Get_NotifyCardInputFlag write Set_NotifyCardInputFlag;
    property MaxInputTime: WideString read Get_MaxInputTime write Set_MaxInputTime;
    property ImmediateResponseFlag: WordBool read Get_ImmediateResponseFlag write Set_ImmediateResponseFlag;
    property MinLength: WideString read Get_MinLength write Set_MinLength;
    property MaxLength: WideString read Get_MaxLength write Set_MaxLength;
    property MaxDecimalLength: WideString read Get_MaxDecimalLength write Set_MaxDecimalLength;
    property WaitUserValidationFlag: WordBool read Get_WaitUserValidationFlag write Set_WaitUserValidationFlag;
    property FromRightToLeftFlag: WordBool read Get_FromRightToLeftFlag write Set_FromRightToLeftFlag;
    property MaskCharactersFlag: WordBool read Get_MaskCharactersFlag write Set_MaskCharactersFlag;
    property BeepKeyFlag: WordBool read Get_BeepKeyFlag write Set_BeepKeyFlag;
    property GlobalCorrectionFlag: WordBool read Get_GlobalCorrectionFlag write Set_GlobalCorrectionFlag;
    property DisableCancelFlag: WordBool read Get_DisableCancelFlag write Set_DisableCancelFlag;
    property DisableCorrectFlag: WordBool read Get_DisableCorrectFlag write Set_DisableCorrectFlag;
    property DisableValidFlag: WordBool read Get_DisableValidFlag write Set_DisableValidFlag;
    property MenuBackFlag: WordBool read Get_MenuBackFlag write Set_MenuBackFlag;
    property xsdInputDataTypeInitFlag: WordBool read Get_xsdInputDataTypeInitFlag write Set_xsdInputDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IInputDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {873E73D2-7DFD-4699-B55E-12CBB192DEE9}
// *********************************************************************//
  IInputDataTypeDisp = dispinterface
    ['{873E73D2-7DFD-4699-B55E-12CBB192DEE9}']
    property DefaultInputString: WideString dispid 2;
    property StringMask: WideString dispid 4;
    property Device: WideString dispid 6;
    property InfoQualify: WideString dispid 8;
    property InputCommand: WideString dispid 10;
    property NotifyCardInputFlag: WordBool dispid 12;
    property MaxInputTime: WideString dispid 14;
    property ImmediateResponseFlag: WordBool dispid 16;
    property MinLength: WideString dispid 18;
    property MaxLength: WideString dispid 20;
    property MaxDecimalLength: WideString dispid 22;
    property WaitUserValidationFlag: WordBool dispid 24;
    property FromRightToLeftFlag: WordBool dispid 26;
    property MaskCharactersFlag: WordBool dispid 28;
    property BeepKeyFlag: WordBool dispid 30;
    property GlobalCorrectionFlag: WordBool dispid 32;
    property DisableCancelFlag: WordBool dispid 34;
    property DisableCorrectFlag: WordBool dispid 36;
    property DisableValidFlag: WordBool dispid 38;
    property MenuBackFlag: WordBool dispid 40;
    property xsdInputDataTypeInitFlag: WordBool dispid 42;
  end;

// *********************************************************************//
// Interface :   IInputRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7DA5ADD5-8A6D-4037-9BE7-ACF723B08593}
// *********************************************************************//
  IInputRequestType = interface(IDispatch)
    ['{7DA5ADD5-8A6D-4037-9BE7-ACF723B08593}']
    function Get_DisplayOutput: IDisplayOutputType; safecall;
    procedure _Set_DisplayOutput(const pRetVal: IDisplayOutputType); safecall;
    function Get_InputData: IInputDataType; safecall;
    procedure _Set_InputData(const pRetVal: IInputDataType); safecall;
    function Get_xsdInputRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdInputRequestTypeInitFlag(pRetVal: WordBool); safecall;
    property DisplayOutput: IDisplayOutputType read Get_DisplayOutput write _Set_DisplayOutput;
    property InputData: IInputDataType read Get_InputData write _Set_InputData;
    property xsdInputRequestTypeInitFlag: WordBool read Get_xsdInputRequestTypeInitFlag write Set_xsdInputRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IInputRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7DA5ADD5-8A6D-4037-9BE7-ACF723B08593}
// *********************************************************************//
  IInputRequestTypeDisp = dispinterface
    ['{7DA5ADD5-8A6D-4037-9BE7-ACF723B08593}']
    property DisplayOutput: IDisplayOutputType dispid 1;
    property InputData: IInputDataType dispid 3;
    property xsdInputRequestTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IInputResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2E1B9FF4-E6C9-48CD-8684-32BB47D2000F}
// *********************************************************************//
  IInputResponseType = interface(IDispatch)
    ['{2E1B9FF4-E6C9-48CD-8684-32BB47D2000F}']
    function Get_OutputResult: IOutputResultType; safecall;
    procedure _Set_OutputResult(const pRetVal: IOutputResultType); safecall;
    function Get_InputResult: IInputResultType; safecall;
    procedure _Set_InputResult(const pRetVal: IInputResultType); safecall;
    function Get_xsdInputResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdInputResponseTypeInitFlag(pRetVal: WordBool); safecall;
    property OutputResult: IOutputResultType read Get_OutputResult write _Set_OutputResult;
    property InputResult: IInputResultType read Get_InputResult write _Set_InputResult;
    property xsdInputResponseTypeInitFlag: WordBool read Get_xsdInputResponseTypeInitFlag write Set_xsdInputResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IInputResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2E1B9FF4-E6C9-48CD-8684-32BB47D2000F}
// *********************************************************************//
  IInputResponseTypeDisp = dispinterface
    ['{2E1B9FF4-E6C9-48CD-8684-32BB47D2000F}']
    property OutputResult: IOutputResultType dispid 1;
    property InputResult: IInputResultType dispid 3;
    property xsdInputResponseTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IInputResultType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {FF4C9285-57AB-40EE-8FA3-86B0A416401B}
// *********************************************************************//
  IInputResultType = interface(IDispatch)
    ['{FF4C9285-57AB-40EE-8FA3-86B0A416401B}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_Input: IInputType; safecall;
    procedure _Set_Input(const pRetVal: IInputType); safecall;
    function Get_Device: WideString; safecall;
    procedure Set_Device(const pRetVal: WideString); safecall;
    function Get_InfoQualify: WideString; safecall;
    procedure Set_InfoQualify(const pRetVal: WideString); safecall;
    function Get_xsdInputResultTypeInitFlag: WordBool; safecall;
    procedure Set_xsdInputResultTypeInitFlag(pRetVal: WordBool); safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property Input: IInputType read Get_Input write _Set_Input;
    property Device: WideString read Get_Device write Set_Device;
    property InfoQualify: WideString read Get_InfoQualify write Set_InfoQualify;
    property xsdInputResultTypeInitFlag: WordBool read Get_xsdInputResultTypeInitFlag write Set_xsdInputResultTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IInputResultTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {FF4C9285-57AB-40EE-8FA3-86B0A416401B}
// *********************************************************************//
  IInputResultTypeDisp = dispinterface
    ['{FF4C9285-57AB-40EE-8FA3-86B0A416401B}']
    property Response: IResponseType dispid 1;
    property Input: IInputType dispid 3;
    property Device: WideString dispid 5;
    property InfoQualify: WideString dispid 7;
    property xsdInputResultTypeInitFlag: WordBool dispid 9;
  end;

// *********************************************************************//
// Interface :   IInputUpdateType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3FE11797-D866-4041-87F7-6A669A7C6A60}
// *********************************************************************//
  IInputUpdateType = interface(IDispatch)
    ['{3FE11797-D866-4041-87F7-6A669A7C6A60}']
    function Get_MessageReference: IMessageReferenceType; safecall;
    procedure _Set_MessageReference(const pRetVal: IMessageReferenceType); safecall;
    function Get_OutputContent: IOutputContentType; safecall;
    procedure _Set_OutputContent(const pRetVal: IOutputContentType); safecall;
    function Get_MenuEntry: PSafeArray; safecall;
    procedure Set_MenuEntry(pRetVal: PSafeArray); safecall;
    function Get_OutputSignature: PSafeArray; safecall;
    procedure Set_OutputSignature(pRetVal: PSafeArray); safecall;
    function Get_MinLength: WideString; safecall;
    procedure Set_MinLength(const pRetVal: WideString); safecall;
    function Get_MaxLength: WideString; safecall;
    procedure Set_MaxLength(const pRetVal: WideString); safecall;
    function Get_MaxDecimalLength: WideString; safecall;
    procedure Set_MaxDecimalLength(const pRetVal: WideString); safecall;
    function Get_xsdInputUpdateTypeInitFlag: WordBool; safecall;
    procedure Set_xsdInputUpdateTypeInitFlag(pRetVal: WordBool); safecall;
    function MenuEntrySize: Integer; safecall;
    function MenuEntryGetItem(index: Integer): IMenuEntryType; safecall;
    function MenuEntrySetItem(index: Integer; const Value: IMenuEntryType): WordBool; safecall;
    function MenuEntryAddItem(const Value: IMenuEntryType): WordBool; safecall;
    function MenuEntryRemoveItem(index: Integer): WordBool; safecall;
    function OutputSignatureSize: Integer; safecall;
    function OutputSignatureGetItem(index: Integer): Byte; safecall;
    function OutputSignatureSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function OutputSignatureAddItem(Value: Byte): WordBool; safecall;
    function OutputSignatureRemoveItem(index: Integer): WordBool; safecall;
    property MessageReference: IMessageReferenceType read Get_MessageReference write _Set_MessageReference;
    property OutputContent: IOutputContentType read Get_OutputContent write _Set_OutputContent;
    property MenuEntry: PSafeArray read Get_MenuEntry write Set_MenuEntry;
    property OutputSignature: PSafeArray read Get_OutputSignature write Set_OutputSignature;
    property MinLength: WideString read Get_MinLength write Set_MinLength;
    property MaxLength: WideString read Get_MaxLength write Set_MaxLength;
    property MaxDecimalLength: WideString read Get_MaxDecimalLength write Set_MaxDecimalLength;
    property xsdInputUpdateTypeInitFlag: WordBool read Get_xsdInputUpdateTypeInitFlag write Set_xsdInputUpdateTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IInputUpdateTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3FE11797-D866-4041-87F7-6A669A7C6A60}
// *********************************************************************//
  IInputUpdateTypeDisp = dispinterface
    ['{3FE11797-D866-4041-87F7-6A669A7C6A60}']
    property MessageReference: IMessageReferenceType dispid 1;
    property OutputContent: IOutputContentType dispid 3;
    property MenuEntry: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 5;
    property OutputSignature: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 7;
    property MinLength: WideString dispid 9;
    property MaxLength: WideString dispid 11;
    property MaxDecimalLength: WideString dispid 13;
    property xsdInputUpdateTypeInitFlag: WordBool dispid 15;
    function MenuEntrySize: Integer; dispid 16;
    function MenuEntryGetItem(index: Integer): IMenuEntryType; dispid 17;
    function MenuEntrySetItem(index: Integer; const Value: IMenuEntryType): WordBool; dispid 18;
    function MenuEntryAddItem(const Value: IMenuEntryType): WordBool; dispid 19;
    function MenuEntryRemoveItem(index: Integer): WordBool; dispid 20;
    function OutputSignatureSize: Integer; dispid 21;
    function OutputSignatureGetItem(index: Integer): Byte; dispid 22;
    function OutputSignatureSetItem(index: Integer; Value: Byte): WordBool; dispid 23;
    function OutputSignatureAddItem(Value: Byte): WordBool; dispid 24;
    function OutputSignatureRemoveItem(index: Integer): WordBool; dispid 25;
  end;

// *********************************************************************//
// Interface :   ILoginRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {27170823-F199-492D-B033-EEBBE9A4A3AA}
// *********************************************************************//
  ILoginRequestType = interface(IDispatch)
    ['{27170823-F199-492D-B033-EEBBE9A4A3AA}']
    function Get_DateTime: WideString; safecall;
    procedure Set_DateTime(const pRetVal: WideString); safecall;
    function Get_SaleSoftware: ISaleSoftwareType; safecall;
    procedure _Set_SaleSoftware(const pRetVal: ISaleSoftwareType); safecall;
    function Get_SaleTerminalData: ISaleTerminalDataType; safecall;
    procedure _Set_SaleTerminalData(const pRetVal: ISaleTerminalDataType); safecall;
    function Get_TrainingModeFlag: WordBool; safecall;
    procedure Set_TrainingModeFlag(pRetVal: WordBool); safecall;
    function Get_OperatorLanguage: WideString; safecall;
    procedure Set_OperatorLanguage(const pRetVal: WideString); safecall;
    function Get_OperatorID: WideString; safecall;
    procedure Set_OperatorID(const pRetVal: WideString); safecall;
    function Get_ShiftNumber: WideString; safecall;
    procedure Set_ShiftNumber(const pRetVal: WideString); safecall;
    function Get_TokenRequestedType: WideString; safecall;
    procedure Set_TokenRequestedType(const pRetVal: WideString); safecall;
    function Get_CustomerOrderReq: PSafeArray; safecall;
    procedure Set_CustomerOrderReq(pRetVal: PSafeArray); safecall;
    function Get_POISerialNumber: WideString; safecall;
    procedure Set_POISerialNumber(const pRetVal: WideString); safecall;
    function Get_xsdLoginRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLoginRequestTypeInitFlag(pRetVal: WordBool); safecall;
    function CustomerOrderReqSize: Integer; safecall;
    function CustomerOrderReqGetItem(index: Integer): WideString; safecall;
    function CustomerOrderReqSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function CustomerOrderReqAddItem(const Value: WideString): WordBool; safecall;
    function CustomerOrderReqRemoveItem(index: Integer): WordBool; safecall;
    property DateTime: WideString read Get_DateTime write Set_DateTime;
    property SaleSoftware: ISaleSoftwareType read Get_SaleSoftware write _Set_SaleSoftware;
    property SaleTerminalData: ISaleTerminalDataType read Get_SaleTerminalData write _Set_SaleTerminalData;
    property TrainingModeFlag: WordBool read Get_TrainingModeFlag write Set_TrainingModeFlag;
    property OperatorLanguage: WideString read Get_OperatorLanguage write Set_OperatorLanguage;
    property OperatorID: WideString read Get_OperatorID write Set_OperatorID;
    property ShiftNumber: WideString read Get_ShiftNumber write Set_ShiftNumber;
    property TokenRequestedType: WideString read Get_TokenRequestedType write Set_TokenRequestedType;
    property CustomerOrderReq: PSafeArray read Get_CustomerOrderReq write Set_CustomerOrderReq;
    property POISerialNumber: WideString read Get_POISerialNumber write Set_POISerialNumber;
    property xsdLoginRequestTypeInitFlag: WordBool read Get_xsdLoginRequestTypeInitFlag write Set_xsdLoginRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILoginRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {27170823-F199-492D-B033-EEBBE9A4A3AA}
// *********************************************************************//
  ILoginRequestTypeDisp = dispinterface
    ['{27170823-F199-492D-B033-EEBBE9A4A3AA}']
    property DateTime: WideString dispid 2;
    property SaleSoftware: ISaleSoftwareType dispid 4;
    property SaleTerminalData: ISaleTerminalDataType dispid 6;
    property TrainingModeFlag: WordBool dispid 8;
    property OperatorLanguage: WideString dispid 10;
    property OperatorID: WideString dispid 12;
    property ShiftNumber: WideString dispid 14;
    property TokenRequestedType: WideString dispid 16;
    property CustomerOrderReq: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 18;
    property POISerialNumber: WideString dispid 20;
    property xsdLoginRequestTypeInitFlag: WordBool dispid 22;
    function CustomerOrderReqSize: Integer; dispid 23;
    function CustomerOrderReqGetItem(index: Integer): WideString; dispid 24;
    function CustomerOrderReqSetItem(index: Integer; const Value: WideString): WordBool; dispid 25;
    function CustomerOrderReqAddItem(const Value: WideString): WordBool; dispid 26;
    function CustomerOrderReqRemoveItem(index: Integer): WordBool; dispid 27;
  end;

// *********************************************************************//
// Interface :   ISaleSoftwareType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D652B10A-044D-4CEB-A85F-0A2B1440D800}
// *********************************************************************//
  ISaleSoftwareType = interface(IDispatch)
    ['{D652B10A-044D-4CEB-A85F-0A2B1440D800}']
    function Get_ManufacturerID: WideString; safecall;
    procedure Set_ManufacturerID(const pRetVal: WideString); safecall;
    function Get_ApplicationName: WideString; safecall;
    procedure Set_ApplicationName(const pRetVal: WideString); safecall;
    function Get_SoftwareVersion: WideString; safecall;
    procedure Set_SoftwareVersion(const pRetVal: WideString); safecall;
    function Get_CertificationCode: WideString; safecall;
    procedure Set_CertificationCode(const pRetVal: WideString); safecall;
    function Get_xsdSaleSoftwareTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSaleSoftwareTypeInitFlag(pRetVal: WordBool); safecall;
    property ManufacturerID: WideString read Get_ManufacturerID write Set_ManufacturerID;
    property ApplicationName: WideString read Get_ApplicationName write Set_ApplicationName;
    property SoftwareVersion: WideString read Get_SoftwareVersion write Set_SoftwareVersion;
    property CertificationCode: WideString read Get_CertificationCode write Set_CertificationCode;
    property xsdSaleSoftwareTypeInitFlag: WordBool read Get_xsdSaleSoftwareTypeInitFlag write Set_xsdSaleSoftwareTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISaleSoftwareTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D652B10A-044D-4CEB-A85F-0A2B1440D800}
// *********************************************************************//
  ISaleSoftwareTypeDisp = dispinterface
    ['{D652B10A-044D-4CEB-A85F-0A2B1440D800}']
    property ManufacturerID: WideString dispid 1;
    property ApplicationName: WideString dispid 3;
    property SoftwareVersion: WideString dispid 5;
    property CertificationCode: WideString dispid 7;
    property xsdSaleSoftwareTypeInitFlag: WordBool dispid 9;
  end;

// *********************************************************************//
// Interface :   ILoginResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4A612C00-B5B1-4D50-B9D9-30115E469945}
// *********************************************************************//
  ILoginResponseType = interface(IDispatch)
    ['{4A612C00-B5B1-4D50-B9D9-30115E469945}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_POISystemData: IPOISystemDataType; safecall;
    procedure _Set_POISystemData(const pRetVal: IPOISystemDataType); safecall;
    function Get_xsdLoginResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLoginResponseTypeInitFlag(pRetVal: WordBool); safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property POISystemData: IPOISystemDataType read Get_POISystemData write _Set_POISystemData;
    property xsdLoginResponseTypeInitFlag: WordBool read Get_xsdLoginResponseTypeInitFlag write Set_xsdLoginResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILoginResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4A612C00-B5B1-4D50-B9D9-30115E469945}
// *********************************************************************//
  ILoginResponseTypeDisp = dispinterface
    ['{4A612C00-B5B1-4D50-B9D9-30115E469945}']
    property Response: IResponseType dispid 1;
    property POISystemData: IPOISystemDataType dispid 3;
    property xsdLoginResponseTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IPOISystemDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {81EB8A7B-AF1A-4D02-9743-FADA008FD65E}
// *********************************************************************//
  IPOISystemDataType = interface(IDispatch)
    ['{81EB8A7B-AF1A-4D02-9743-FADA008FD65E}']
    function Get_DateTime: WideString; safecall;
    procedure Set_DateTime(const pRetVal: WideString); safecall;
    function Get_POISoftware: IPOISoftwareType; safecall;
    procedure _Set_POISoftware(const pRetVal: IPOISoftwareType); safecall;
    function Get_POITerminalData: IPOITerminalDataType; safecall;
    procedure _Set_POITerminalData(const pRetVal: IPOITerminalDataType); safecall;
    function Get_POIStatus: IPOIStatusType; safecall;
    procedure _Set_POIStatus(const pRetVal: IPOIStatusType); safecall;
    function Get_xsdPOISystemDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPOISystemDataTypeInitFlag(pRetVal: WordBool); safecall;
    property DateTime: WideString read Get_DateTime write Set_DateTime;
    property POISoftware: IPOISoftwareType read Get_POISoftware write _Set_POISoftware;
    property POITerminalData: IPOITerminalDataType read Get_POITerminalData write _Set_POITerminalData;
    property POIStatus: IPOIStatusType read Get_POIStatus write _Set_POIStatus;
    property xsdPOISystemDataTypeInitFlag: WordBool read Get_xsdPOISystemDataTypeInitFlag write Set_xsdPOISystemDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPOISystemDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {81EB8A7B-AF1A-4D02-9743-FADA008FD65E}
// *********************************************************************//
  IPOISystemDataTypeDisp = dispinterface
    ['{81EB8A7B-AF1A-4D02-9743-FADA008FD65E}']
    property DateTime: WideString dispid 1;
    property POISoftware: IPOISoftwareType dispid 3;
    property POITerminalData: IPOITerminalDataType dispid 5;
    property POIStatus: IPOIStatusType dispid 7;
    property xsdPOISystemDataTypeInitFlag: WordBool dispid 9;
  end;

// *********************************************************************//
// Interface :   IPOISoftwareType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {806651D2-BDAF-414A-96F7-FCEA88C9CE9E}
// *********************************************************************//
  IPOISoftwareType = interface(IDispatch)
    ['{806651D2-BDAF-414A-96F7-FCEA88C9CE9E}']
    function Get_ManufacturerID: WideString; safecall;
    procedure Set_ManufacturerID(const pRetVal: WideString); safecall;
    function Get_ApplicationName: WideString; safecall;
    procedure Set_ApplicationName(const pRetVal: WideString); safecall;
    function Get_SoftwareVersion: WideString; safecall;
    procedure Set_SoftwareVersion(const pRetVal: WideString); safecall;
    function Get_CertificationCode: WideString; safecall;
    procedure Set_CertificationCode(const pRetVal: WideString); safecall;
    function Get_xsdPOISoftwareTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPOISoftwareTypeInitFlag(pRetVal: WordBool); safecall;
    property ManufacturerID: WideString read Get_ManufacturerID write Set_ManufacturerID;
    property ApplicationName: WideString read Get_ApplicationName write Set_ApplicationName;
    property SoftwareVersion: WideString read Get_SoftwareVersion write Set_SoftwareVersion;
    property CertificationCode: WideString read Get_CertificationCode write Set_CertificationCode;
    property xsdPOISoftwareTypeInitFlag: WordBool read Get_xsdPOISoftwareTypeInitFlag write Set_xsdPOISoftwareTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPOISoftwareTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {806651D2-BDAF-414A-96F7-FCEA88C9CE9E}
// *********************************************************************//
  IPOISoftwareTypeDisp = dispinterface
    ['{806651D2-BDAF-414A-96F7-FCEA88C9CE9E}']
    property ManufacturerID: WideString dispid 1;
    property ApplicationName: WideString dispid 3;
    property SoftwareVersion: WideString dispid 5;
    property CertificationCode: WideString dispid 7;
    property xsdPOISoftwareTypeInitFlag: WordBool dispid 9;
  end;

// *********************************************************************//
// Interface :   IPOITerminalDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {02B5C159-590B-46A3-8A89-2E5069D0D48B}
// *********************************************************************//
  IPOITerminalDataType = interface(IDispatch)
    ['{02B5C159-590B-46A3-8A89-2E5069D0D48B}']
    function Get_POICapabilities: WideString; safecall;
    procedure Set_POICapabilities(const pRetVal: WideString); safecall;
    function Get_POIProfile: IPOIProfileType; safecall;
    procedure _Set_POIProfile(const pRetVal: IPOIProfileType); safecall;
    function Get_TerminalEnvironment: WideString; safecall;
    procedure Set_TerminalEnvironment(const pRetVal: WideString); safecall;
    function Get_POISerialNumber: WideString; safecall;
    procedure Set_POISerialNumber(const pRetVal: WideString); safecall;
    function Get_xsdPOITerminalDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPOITerminalDataTypeInitFlag(pRetVal: WordBool); safecall;
    property POICapabilities: WideString read Get_POICapabilities write Set_POICapabilities;
    property POIProfile: IPOIProfileType read Get_POIProfile write _Set_POIProfile;
    property TerminalEnvironment: WideString read Get_TerminalEnvironment write Set_TerminalEnvironment;
    property POISerialNumber: WideString read Get_POISerialNumber write Set_POISerialNumber;
    property xsdPOITerminalDataTypeInitFlag: WordBool read Get_xsdPOITerminalDataTypeInitFlag write Set_xsdPOITerminalDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPOITerminalDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {02B5C159-590B-46A3-8A89-2E5069D0D48B}
// *********************************************************************//
  IPOITerminalDataTypeDisp = dispinterface
    ['{02B5C159-590B-46A3-8A89-2E5069D0D48B}']
    property POICapabilities: WideString dispid 1;
    property POIProfile: IPOIProfileType dispid 3;
    property TerminalEnvironment: WideString dispid 5;
    property POISerialNumber: WideString dispid 7;
    property xsdPOITerminalDataTypeInitFlag: WordBool dispid 9;
  end;

// *********************************************************************//
// Interface :   IPOIProfileType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E066BCF9-4311-4A54-A0E3-D78D3C858738}
// *********************************************************************//
  IPOIProfileType = interface(IDispatch)
    ['{E066BCF9-4311-4A54-A0E3-D78D3C858738}']
    function Get_ServiceProfiles: WideString; safecall;
    procedure Set_ServiceProfiles(const pRetVal: WideString); safecall;
    function Get_GenericProfile: WideString; safecall;
    procedure Set_GenericProfile(const pRetVal: WideString); safecall;
    function Get_xsdPOIProfileTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPOIProfileTypeInitFlag(pRetVal: WordBool); safecall;
    property ServiceProfiles: WideString read Get_ServiceProfiles write Set_ServiceProfiles;
    property GenericProfile: WideString read Get_GenericProfile write Set_GenericProfile;
    property xsdPOIProfileTypeInitFlag: WordBool read Get_xsdPOIProfileTypeInitFlag write Set_xsdPOIProfileTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPOIProfileTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {E066BCF9-4311-4A54-A0E3-D78D3C858738}
// *********************************************************************//
  IPOIProfileTypeDisp = dispinterface
    ['{E066BCF9-4311-4A54-A0E3-D78D3C858738}']
    property ServiceProfiles: WideString dispid 2;
    property GenericProfile: WideString dispid 4;
    property xsdPOIProfileTypeInitFlag: WordBool dispid 6;
  end;

// *********************************************************************//
// Interface :   ILogoutRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2C14937E-5284-4E0A-8087-2DF0F89018CE}
// *********************************************************************//
  ILogoutRequestType = interface(IDispatch)
    ['{2C14937E-5284-4E0A-8087-2DF0F89018CE}']
    function Get_MaintenanceAllowed: WordBool; safecall;
    procedure Set_MaintenanceAllowed(pRetVal: WordBool); safecall;
    function Get_xsdLogoutRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLogoutRequestTypeInitFlag(pRetVal: WordBool); safecall;
    property MaintenanceAllowed: WordBool read Get_MaintenanceAllowed write Set_MaintenanceAllowed;
    property xsdLogoutRequestTypeInitFlag: WordBool read Get_xsdLogoutRequestTypeInitFlag write Set_xsdLogoutRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILogoutRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2C14937E-5284-4E0A-8087-2DF0F89018CE}
// *********************************************************************//
  ILogoutRequestTypeDisp = dispinterface
    ['{2C14937E-5284-4E0A-8087-2DF0F89018CE}']
    property MaintenanceAllowed: WordBool dispid 2;
    property xsdLogoutRequestTypeInitFlag: WordBool dispid 4;
  end;

// *********************************************************************//
// Interface :   ILogoutResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8521A31F-FBD7-430B-B162-D34C6ABE911E}
// *********************************************************************//
  ILogoutResponseType = interface(IDispatch)
    ['{8521A31F-FBD7-430B-B162-D34C6ABE911E}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_xsdLogoutResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLogoutResponseTypeInitFlag(pRetVal: WordBool); safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property xsdLogoutResponseTypeInitFlag: WordBool read Get_xsdLogoutResponseTypeInitFlag write Set_xsdLogoutResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILogoutResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8521A31F-FBD7-430B-B162-D34C6ABE911E}
// *********************************************************************//
  ILogoutResponseTypeDisp = dispinterface
    ['{8521A31F-FBD7-430B-B162-D34C6ABE911E}']
    property Response: IResponseType dispid 1;
    property xsdLogoutResponseTypeInitFlag: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface :   ILoyaltyResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {99FE1ABA-45D7-4DD3-BB95-3A5010921427}
// *********************************************************************//
  ILoyaltyResponseType = interface(IDispatch)
    ['{99FE1ABA-45D7-4DD3-BB95-3A5010921427}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_POIData: IPOIDataType; safecall;
    procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
    function Get_LoyaltyResult: PSafeArray; safecall;
    procedure Set_LoyaltyResult(pRetVal: PSafeArray); safecall;
    function Get_PaymentReceipt: PSafeArray; safecall;
    procedure Set_PaymentReceipt(pRetVal: PSafeArray); safecall;
    function Get_xsdLoyaltyResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdLoyaltyResponseTypeInitFlag(pRetVal: WordBool); safecall;
    function LoyaltyResultSize: Integer; safecall;
    function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; safecall;
    function LoyaltyResultSetItem(index: Integer; const Value: ILoyaltyResultType): WordBool; safecall;
    function LoyaltyResultAddItem(const Value: ILoyaltyResultType): WordBool; safecall;
    function LoyaltyResultRemoveItem(index: Integer): WordBool; safecall;
    function PaymentReceiptSize: Integer; safecall;
    function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; safecall;
    function PaymentReceiptSetItem(index: Integer; const Value: IPaymentReceiptType): WordBool; safecall;
    function PaymentReceiptAddItem(const Value: IPaymentReceiptType): WordBool; safecall;
    function PaymentReceiptRemoveItem(index: Integer): WordBool; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property POIData: IPOIDataType read Get_POIData write _Set_POIData;
    property LoyaltyResult: PSafeArray read Get_LoyaltyResult write Set_LoyaltyResult;
    property PaymentReceipt: PSafeArray read Get_PaymentReceipt write Set_PaymentReceipt;
    property xsdLoyaltyResponseTypeInitFlag: WordBool read Get_xsdLoyaltyResponseTypeInitFlag write Set_xsdLoyaltyResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ILoyaltyResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {99FE1ABA-45D7-4DD3-BB95-3A5010921427}
// *********************************************************************//
  ILoyaltyResponseTypeDisp = dispinterface
    ['{99FE1ABA-45D7-4DD3-BB95-3A5010921427}']
    property Response: IResponseType dispid 1;
    property SaleData: ISaleDataType dispid 3;
    property POIData: IPOIDataType dispid 5;
    property LoyaltyResult: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 7;
    property PaymentReceipt: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 9;
    property xsdLoyaltyResponseTypeInitFlag: WordBool dispid 11;
    function LoyaltyResultSize: Integer; dispid 12;
    function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; dispid 13;
    function LoyaltyResultSetItem(index: Integer; const Value: ILoyaltyResultType): WordBool; dispid 14;
    function LoyaltyResultAddItem(const Value: ILoyaltyResultType): WordBool; dispid 15;
    function LoyaltyResultRemoveItem(index: Integer): WordBool; dispid 16;
    function PaymentReceiptSize: Integer; dispid 17;
    function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; dispid 18;
    function PaymentReceiptSetItem(index: Integer; const Value: IPaymentReceiptType): WordBool; dispid 19;
    function PaymentReceiptAddItem(const Value: IPaymentReceiptType): WordBool; dispid 20;
    function PaymentReceiptRemoveItem(index: Integer): WordBool; dispid 21;
  end;

// *********************************************************************//
// Interface :   IPaymentReceiptType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {724B169E-CEEA-4EEA-8643-0D03BDB4A1B2}
// *********************************************************************//
  IPaymentReceiptType = interface(IDispatch)
    ['{724B169E-CEEA-4EEA-8643-0D03BDB4A1B2}']
    function Get_OutputContent: IOutputContentType; safecall;
    procedure _Set_OutputContent(const pRetVal: IOutputContentType); safecall;
    function Get_DocumentQualifier: WideString; safecall;
    procedure Set_DocumentQualifier(const pRetVal: WideString); safecall;
    function Get_IntegratedPrintFlag: WordBool; safecall;
    procedure Set_IntegratedPrintFlag(pRetVal: WordBool); safecall;
    function Get_RequiredSignatureFlag: WordBool; safecall;
    procedure Set_RequiredSignatureFlag(pRetVal: WordBool); safecall;
    function Get_xsdPaymentReceiptTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPaymentReceiptTypeInitFlag(pRetVal: WordBool); safecall;
    property OutputContent: IOutputContentType read Get_OutputContent write _Set_OutputContent;
    property DocumentQualifier: WideString read Get_DocumentQualifier write Set_DocumentQualifier;
    property IntegratedPrintFlag: WordBool read Get_IntegratedPrintFlag write Set_IntegratedPrintFlag;
    property RequiredSignatureFlag: WordBool read Get_RequiredSignatureFlag write Set_RequiredSignatureFlag;
    property xsdPaymentReceiptTypeInitFlag: WordBool read Get_xsdPaymentReceiptTypeInitFlag write Set_xsdPaymentReceiptTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPaymentReceiptTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {724B169E-CEEA-4EEA-8643-0D03BDB4A1B2}
// *********************************************************************//
  IPaymentReceiptTypeDisp = dispinterface
    ['{724B169E-CEEA-4EEA-8643-0D03BDB4A1B2}']
    property OutputContent: IOutputContentType dispid 2;
    property DocumentQualifier: WideString dispid 4;
    property IntegratedPrintFlag: WordBool dispid 6;
    property RequiredSignatureFlag: WordBool dispid 8;
    property xsdPaymentReceiptTypeInitFlag: WordBool dispid 10;
  end;

// *********************************************************************//
// Interface :   IMessageHeaderType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BCA2B06B-DC30-4E93-843B-3D0EA9FA335C}
// *********************************************************************//
  IMessageHeaderType = interface(IDispatch)
    ['{BCA2B06B-DC30-4E93-843B-3D0EA9FA335C}']
    function Get_ProtocolVersion: WideString; safecall;
    procedure Set_ProtocolVersion(const pRetVal: WideString); safecall;
    function Get_MessageClass: WideString; safecall;
    procedure Set_MessageClass(const pRetVal: WideString); safecall;
    function Get_MessageCategory: WideString; safecall;
    procedure Set_MessageCategory(const pRetVal: WideString); safecall;
    function Get_MessageType: WideString; safecall;
    procedure Set_MessageType(const pRetVal: WideString); safecall;
    function Get_ServiceID: WideString; safecall;
    procedure Set_ServiceID(const pRetVal: WideString); safecall;
    function Get_DeviceID: WideString; safecall;
    procedure Set_DeviceID(const pRetVal: WideString); safecall;
    function Get_SaleID: WideString; safecall;
    procedure Set_SaleID(const pRetVal: WideString); safecall;
    function Get_POIID: WideString; safecall;
    procedure Set_POIID(const pRetVal: WideString); safecall;
    function Get_xsdMessageHeaderTypeInitFlag: WordBool; safecall;
    procedure Set_xsdMessageHeaderTypeInitFlag(pRetVal: WordBool); safecall;
    property ProtocolVersion: WideString read Get_ProtocolVersion write Set_ProtocolVersion;
    property MessageClass: WideString read Get_MessageClass write Set_MessageClass;
    property MessageCategory: WideString read Get_MessageCategory write Set_MessageCategory;
    property MessageType: WideString read Get_MessageType write Set_MessageType;
    property ServiceID: WideString read Get_ServiceID write Set_ServiceID;
    property DeviceID: WideString read Get_DeviceID write Set_DeviceID;
    property SaleID: WideString read Get_SaleID write Set_SaleID;
    property POIID: WideString read Get_POIID write Set_POIID;
    property xsdMessageHeaderTypeInitFlag: WordBool read Get_xsdMessageHeaderTypeInitFlag write Set_xsdMessageHeaderTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IMessageHeaderTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BCA2B06B-DC30-4E93-843B-3D0EA9FA335C}
// *********************************************************************//
  IMessageHeaderTypeDisp = dispinterface
    ['{BCA2B06B-DC30-4E93-843B-3D0EA9FA335C}']
    property ProtocolVersion: WideString dispid 1;
    property MessageClass: WideString dispid 3;
    property MessageCategory: WideString dispid 5;
    property MessageType: WideString dispid 7;
    property ServiceID: WideString dispid 9;
    property DeviceID: WideString dispid 11;
    property SaleID: WideString dispid 13;
    property POIID: WideString dispid 15;
    property xsdMessageHeaderTypeInitFlag: WordBool dispid 17;
  end;

// *********************************************************************//
// Interface :   IPaymentResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7E85E231-B401-4DF8-AAA8-396A83014F48}
// *********************************************************************//
  IPaymentResponseType = interface(IDispatch)
    ['{7E85E231-B401-4DF8-AAA8-396A83014F48}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_POIData: IPOIDataType; safecall;
    procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
    function Get_PaymentResult: IPaymentResultType; safecall;
    procedure _Set_PaymentResult(const pRetVal: IPaymentResultType); safecall;
    function Get_LoyaltyResult: PSafeArray; safecall;
    procedure Set_LoyaltyResult(pRetVal: PSafeArray); safecall;
    function Get_PaymentReceipt: PSafeArray; safecall;
    procedure Set_PaymentReceipt(pRetVal: PSafeArray); safecall;
    function Get_CustomerOrder: PSafeArray; safecall;
    procedure Set_CustomerOrder(pRetVal: PSafeArray); safecall;
    function Get_xsdPaymentResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPaymentResponseTypeInitFlag(pRetVal: WordBool); safecall;
    function LoyaltyResultSize: Integer; safecall;
    function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; safecall;
    function LoyaltyResultSetItem(index: Integer; const Value: ILoyaltyResultType): WordBool; safecall;
    function LoyaltyResultAddItem(const Value: ILoyaltyResultType): WordBool; safecall;
    function LoyaltyResultRemoveItem(index: Integer): WordBool; safecall;
    function PaymentReceiptSize: Integer; safecall;
    function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; safecall;
    function PaymentReceiptSetItem(index: Integer; const Value: IPaymentReceiptType): WordBool; safecall;
    function PaymentReceiptAddItem(const Value: IPaymentReceiptType): WordBool; safecall;
    function PaymentReceiptRemoveItem(index: Integer): WordBool; safecall;
    function CustomerOrderSize: Integer; safecall;
    function CustomerOrderGetItem(index: Integer): ICustomerOrderType; safecall;
    function CustomerOrderSetItem(index: Integer; const Value: ICustomerOrderType): WordBool; safecall;
    function CustomerOrderAddItem(const Value: ICustomerOrderType): WordBool; safecall;
    function CustomerOrderRemoveItem(index: Integer): WordBool; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property POIData: IPOIDataType read Get_POIData write _Set_POIData;
    property PaymentResult: IPaymentResultType read Get_PaymentResult write _Set_PaymentResult;
    property LoyaltyResult: PSafeArray read Get_LoyaltyResult write Set_LoyaltyResult;
    property PaymentReceipt: PSafeArray read Get_PaymentReceipt write Set_PaymentReceipt;
    property CustomerOrder: PSafeArray read Get_CustomerOrder write Set_CustomerOrder;
    property xsdPaymentResponseTypeInitFlag: WordBool read Get_xsdPaymentResponseTypeInitFlag write Set_xsdPaymentResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPaymentResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7E85E231-B401-4DF8-AAA8-396A83014F48}
// *********************************************************************//
  IPaymentResponseTypeDisp = dispinterface
    ['{7E85E231-B401-4DF8-AAA8-396A83014F48}']
    property Response: IResponseType dispid 1;
    property SaleData: ISaleDataType dispid 3;
    property POIData: IPOIDataType dispid 5;
    property PaymentResult: IPaymentResultType dispid 7;
    property LoyaltyResult: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 9;
    property PaymentReceipt: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 11;
    property CustomerOrder: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 13;
    property xsdPaymentResponseTypeInitFlag: WordBool dispid 15;
    function LoyaltyResultSize: Integer; dispid 16;
    function LoyaltyResultGetItem(index: Integer): ILoyaltyResultType; dispid 17;
    function LoyaltyResultSetItem(index: Integer; const Value: ILoyaltyResultType): WordBool; dispid 18;
    function LoyaltyResultAddItem(const Value: ILoyaltyResultType): WordBool; dispid 19;
    function LoyaltyResultRemoveItem(index: Integer): WordBool; dispid 20;
    function PaymentReceiptSize: Integer; dispid 21;
    function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; dispid 22;
    function PaymentReceiptSetItem(index: Integer; const Value: IPaymentReceiptType): WordBool; dispid 23;
    function PaymentReceiptAddItem(const Value: IPaymentReceiptType): WordBool; dispid 24;
    function PaymentReceiptRemoveItem(index: Integer): WordBool; dispid 25;
    function CustomerOrderSize: Integer; dispid 26;
    function CustomerOrderGetItem(index: Integer): ICustomerOrderType; dispid 27;
    function CustomerOrderSetItem(index: Integer; const Value: ICustomerOrderType): WordBool; dispid 28;
    function CustomerOrderAddItem(const Value: ICustomerOrderType): WordBool; dispid 29;
    function CustomerOrderRemoveItem(index: Integer): WordBool; dispid 30;
  end;

// *********************************************************************//
// Interface :   IPINRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AEDF269C-CC5A-434E-B8A5-91D6C3DC517D}
// *********************************************************************//
  IPINRequestType = interface(IDispatch)
    ['{AEDF269C-CC5A-434E-B8A5-91D6C3DC517D}']
    function Get_CardholderPIN: ICardholderPINType; safecall;
    procedure _Set_CardholderPIN(const pRetVal: ICardholderPINType); safecall;
    function Get_PINRequestType1: WideString; safecall;
    procedure Set_PINRequestType1(const pRetVal: WideString); safecall;
    function Get_PINVerifMethod: WideString; safecall;
    procedure Set_PINVerifMethod(const pRetVal: WideString); safecall;
    function Get_AdditionalInput: WideString; safecall;
    procedure Set_AdditionalInput(const pRetVal: WideString); safecall;
    function Get_PINEncAlgorithm: WideString; safecall;
    procedure Set_PINEncAlgorithm(const pRetVal: WideString); safecall;
    function Get_PINFormat: WideString; safecall;
    procedure Set_PINFormat(const pRetVal: WideString); safecall;
    function Get_KeyReference: WideString; safecall;
    procedure Set_KeyReference(const pRetVal: WideString); safecall;
    function Get_MaxWaitingTime: WideString; safecall;
    procedure Set_MaxWaitingTime(const pRetVal: WideString); safecall;
    function Get_xsdPINRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPINRequestTypeInitFlag(pRetVal: WordBool); safecall;
    property CardholderPIN: ICardholderPINType read Get_CardholderPIN write _Set_CardholderPIN;
    property PINRequestType1: WideString read Get_PINRequestType1 write Set_PINRequestType1;
    property PINVerifMethod: WideString read Get_PINVerifMethod write Set_PINVerifMethod;
    property AdditionalInput: WideString read Get_AdditionalInput write Set_AdditionalInput;
    property PINEncAlgorithm: WideString read Get_PINEncAlgorithm write Set_PINEncAlgorithm;
    property PINFormat: WideString read Get_PINFormat write Set_PINFormat;
    property KeyReference: WideString read Get_KeyReference write Set_KeyReference;
    property MaxWaitingTime: WideString read Get_MaxWaitingTime write Set_MaxWaitingTime;
    property xsdPINRequestTypeInitFlag: WordBool read Get_xsdPINRequestTypeInitFlag write Set_xsdPINRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPINRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {AEDF269C-CC5A-434E-B8A5-91D6C3DC517D}
// *********************************************************************//
  IPINRequestTypeDisp = dispinterface
    ['{AEDF269C-CC5A-434E-B8A5-91D6C3DC517D}']
    property CardholderPIN: ICardholderPINType dispid 1;
    property PINRequestType1: WideString dispid 3;
    property PINVerifMethod: WideString dispid 5;
    property AdditionalInput: WideString dispid 7;
    property PINEncAlgorithm: WideString dispid 9;
    property PINFormat: WideString dispid 11;
    property KeyReference: WideString dispid 13;
    property MaxWaitingTime: WideString dispid 15;
    property xsdPINRequestTypeInitFlag: WordBool dispid 17;
  end;

// *********************************************************************//
// Interface :   IPINResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3654AF9D-7402-4E44-84E8-4216F32EE6F0}
// *********************************************************************//
  IPINResponseType = interface(IDispatch)
    ['{3654AF9D-7402-4E44-84E8-4216F32EE6F0}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_CardholderPIN: ICardholderPINType; safecall;
    procedure _Set_CardholderPIN(const pRetVal: ICardholderPINType); safecall;
    function Get_xsdPINResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPINResponseTypeInitFlag(pRetVal: WordBool); safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property CardholderPIN: ICardholderPINType read Get_CardholderPIN write _Set_CardholderPIN;
    property xsdPINResponseTypeInitFlag: WordBool read Get_xsdPINResponseTypeInitFlag write Set_xsdPINResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPINResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3654AF9D-7402-4E44-84E8-4216F32EE6F0}
// *********************************************************************//
  IPINResponseTypeDisp = dispinterface
    ['{3654AF9D-7402-4E44-84E8-4216F32EE6F0}']
    property Response: IResponseType dispid 1;
    property CardholderPIN: ICardholderPINType dispid 3;
    property xsdPINResponseTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IPrintOutputType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9802AA7C-D56A-4A10-B4F0-2E25D92394CB}
// *********************************************************************//
  IPrintOutputType = interface(IDispatch)
    ['{9802AA7C-D56A-4A10-B4F0-2E25D92394CB}']
    function Get_OutputContent: IOutputContentType; safecall;
    procedure _Set_OutputContent(const pRetVal: IOutputContentType); safecall;
    function Get_OutputSignature: PSafeArray; safecall;
    procedure Set_OutputSignature(pRetVal: PSafeArray); safecall;
    function Get_DocumentQualifier: WideString; safecall;
    procedure Set_DocumentQualifier(const pRetVal: WideString); safecall;
    function Get_ResponseMode: WideString; safecall;
    procedure Set_ResponseMode(const pRetVal: WideString); safecall;
    function Get_IntegratedPrintFlag: WordBool; safecall;
    procedure Set_IntegratedPrintFlag(pRetVal: WordBool); safecall;
    function Get_RequiredSignatureFlag: WordBool; safecall;
    procedure Set_RequiredSignatureFlag(pRetVal: WordBool); safecall;
    function Get_xsdPrintOutputTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPrintOutputTypeInitFlag(pRetVal: WordBool); safecall;
    function OutputSignatureSize: Integer; safecall;
    function OutputSignatureGetItem(index: Integer): Byte; safecall;
    function OutputSignatureSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function OutputSignatureAddItem(Value: Byte): WordBool; safecall;
    function OutputSignatureRemoveItem(index: Integer): WordBool; safecall;
    property OutputContent: IOutputContentType read Get_OutputContent write _Set_OutputContent;
    property OutputSignature: PSafeArray read Get_OutputSignature write Set_OutputSignature;
    property DocumentQualifier: WideString read Get_DocumentQualifier write Set_DocumentQualifier;
    property ResponseMode: WideString read Get_ResponseMode write Set_ResponseMode;
    property IntegratedPrintFlag: WordBool read Get_IntegratedPrintFlag write Set_IntegratedPrintFlag;
    property RequiredSignatureFlag: WordBool read Get_RequiredSignatureFlag write Set_RequiredSignatureFlag;
    property xsdPrintOutputTypeInitFlag: WordBool read Get_xsdPrintOutputTypeInitFlag write Set_xsdPrintOutputTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPrintOutputTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {9802AA7C-D56A-4A10-B4F0-2E25D92394CB}
// *********************************************************************//
  IPrintOutputTypeDisp = dispinterface
    ['{9802AA7C-D56A-4A10-B4F0-2E25D92394CB}']
    property OutputContent: IOutputContentType dispid 2;
    property OutputSignature: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property DocumentQualifier: WideString dispid 6;
    property ResponseMode: WideString dispid 8;
    property IntegratedPrintFlag: WordBool dispid 10;
    property RequiredSignatureFlag: WordBool dispid 12;
    property xsdPrintOutputTypeInitFlag: WordBool dispid 14;
    function OutputSignatureSize: Integer; dispid 15;
    function OutputSignatureGetItem(index: Integer): Byte; dispid 16;
    function OutputSignatureSetItem(index: Integer; Value: Byte): WordBool; dispid 17;
    function OutputSignatureAddItem(Value: Byte): WordBool; dispid 18;
    function OutputSignatureRemoveItem(index: Integer): WordBool; dispid 19;
  end;

// *********************************************************************//
// Interface :   IPrintRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {511148A0-1939-418D-B78B-470D072CA940}
// *********************************************************************//
  IPrintRequestType = interface(IDispatch)
    ['{511148A0-1939-418D-B78B-470D072CA940}']
    function Get_PrintOutput: IPrintOutputType; safecall;
    procedure _Set_PrintOutput(const pRetVal: IPrintOutputType); safecall;
    function Get_xsdPrintRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPrintRequestTypeInitFlag(pRetVal: WordBool); safecall;
    property PrintOutput: IPrintOutputType read Get_PrintOutput write _Set_PrintOutput;
    property xsdPrintRequestTypeInitFlag: WordBool read Get_xsdPrintRequestTypeInitFlag write Set_xsdPrintRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPrintRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {511148A0-1939-418D-B78B-470D072CA940}
// *********************************************************************//
  IPrintRequestTypeDisp = dispinterface
    ['{511148A0-1939-418D-B78B-470D072CA940}']
    property PrintOutput: IPrintOutputType dispid 1;
    property xsdPrintRequestTypeInitFlag: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface :   IPrintResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {95D0CCA6-3A81-4004-B84B-99E222771031}
// *********************************************************************//
  IPrintResponseType = interface(IDispatch)
    ['{95D0CCA6-3A81-4004-B84B-99E222771031}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_DocumentQualifier: WideString; safecall;
    procedure Set_DocumentQualifier(const pRetVal: WideString); safecall;
    function Get_xsdPrintResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdPrintResponseTypeInitFlag(pRetVal: WordBool); safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property DocumentQualifier: WideString read Get_DocumentQualifier write Set_DocumentQualifier;
    property xsdPrintResponseTypeInitFlag: WordBool read Get_xsdPrintResponseTypeInitFlag write Set_xsdPrintResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IPrintResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {95D0CCA6-3A81-4004-B84B-99E222771031}
// *********************************************************************//
  IPrintResponseTypeDisp = dispinterface
    ['{95D0CCA6-3A81-4004-B84B-99E222771031}']
    property Response: IResponseType dispid 1;
    property DocumentQualifier: WideString dispid 3;
    property xsdPrintResponseTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IReconciliationRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7F104E13-0B7E-4A78-8821-0F13A42B1C71}
// *********************************************************************//
  IReconciliationRequestType = interface(IDispatch)
    ['{7F104E13-0B7E-4A78-8821-0F13A42B1C71}']
    function Get_AcquirerID: PSafeArray; safecall;
    procedure Set_AcquirerID(pRetVal: PSafeArray); safecall;
    function Get_ReconciliationType: WideString; safecall;
    procedure Set_ReconciliationType(const pRetVal: WideString); safecall;
    function Get_POIReconciliationID: WideString; safecall;
    procedure Set_POIReconciliationID(const pRetVal: WideString); safecall;
    function Get_xsdReconciliationRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdReconciliationRequestTypeInitFlag(pRetVal: WordBool); safecall;
    function AcquirerIDSize: Integer; safecall;
    function AcquirerIDGetItem(index: Integer): WideString; safecall;
    function AcquirerIDSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function AcquirerIDAddItem(const Value: WideString): WordBool; safecall;
    function AcquirerIDRemoveItem(index: Integer): WordBool; safecall;
    property AcquirerID: PSafeArray read Get_AcquirerID write Set_AcquirerID;
    property ReconciliationType: WideString read Get_ReconciliationType write Set_ReconciliationType;
    property POIReconciliationID: WideString read Get_POIReconciliationID write Set_POIReconciliationID;
    property xsdReconciliationRequestTypeInitFlag: WordBool read Get_xsdReconciliationRequestTypeInitFlag write Set_xsdReconciliationRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IReconciliationRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {7F104E13-0B7E-4A78-8821-0F13A42B1C71}
// *********************************************************************//
  IReconciliationRequestTypeDisp = dispinterface
    ['{7F104E13-0B7E-4A78-8821-0F13A42B1C71}']
    property AcquirerID: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property ReconciliationType: WideString dispid 3;
    property POIReconciliationID: WideString dispid 5;
    property xsdReconciliationRequestTypeInitFlag: WordBool dispid 7;
    function AcquirerIDSize: Integer; dispid 8;
    function AcquirerIDGetItem(index: Integer): WideString; dispid 9;
    function AcquirerIDSetItem(index: Integer; const Value: WideString): WordBool; dispid 10;
    function AcquirerIDAddItem(const Value: WideString): WordBool; dispid 11;
    function AcquirerIDRemoveItem(index: Integer): WordBool; dispid 12;
  end;

// *********************************************************************//
// Interface :   IReconciliationResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B6F261D4-F01E-4F31-814F-DCB84F0A3CAA}
// *********************************************************************//
  IReconciliationResponseType = interface(IDispatch)
    ['{B6F261D4-F01E-4F31-814F-DCB84F0A3CAA}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_TransactionTotals: PSafeArray; safecall;
    procedure Set_TransactionTotals(pRetVal: PSafeArray); safecall;
    function Get_ReconciliationType: WideString; safecall;
    procedure Set_ReconciliationType(const pRetVal: WideString); safecall;
    function Get_POIReconciliationID: WideString; safecall;
    procedure Set_POIReconciliationID(const pRetVal: WideString); safecall;
    function Get_xsdReconciliationResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdReconciliationResponseTypeInitFlag(pRetVal: WordBool); safecall;
    function TransactionTotalsSize: Integer; safecall;
    function TransactionTotalsGetItem(index: Integer): ITransactionTotalsType; safecall;
    function TransactionTotalsSetItem(index: Integer; const Value: ITransactionTotalsType): WordBool; safecall;
    function TransactionTotalsAddItem(const Value: ITransactionTotalsType): WordBool; safecall;
    function TransactionTotalsRemoveItem(index: Integer): WordBool; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property TransactionTotals: PSafeArray read Get_TransactionTotals write Set_TransactionTotals;
    property ReconciliationType: WideString read Get_ReconciliationType write Set_ReconciliationType;
    property POIReconciliationID: WideString read Get_POIReconciliationID write Set_POIReconciliationID;
    property xsdReconciliationResponseTypeInitFlag: WordBool read Get_xsdReconciliationResponseTypeInitFlag write Set_xsdReconciliationResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IReconciliationResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B6F261D4-F01E-4F31-814F-DCB84F0A3CAA}
// *********************************************************************//
  IReconciliationResponseTypeDisp = dispinterface
    ['{B6F261D4-F01E-4F31-814F-DCB84F0A3CAA}']
    property Response: IResponseType dispid 1;
    property TransactionTotals: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property ReconciliationType: WideString dispid 5;
    property POIReconciliationID: WideString dispid 7;
    property xsdReconciliationResponseTypeInitFlag: WordBool dispid 9;
    function TransactionTotalsSize: Integer; dispid 10;
    function TransactionTotalsGetItem(index: Integer): ITransactionTotalsType; dispid 11;
    function TransactionTotalsSetItem(index: Integer; const Value: ITransactionTotalsType): WordBool; dispid 12;
    function TransactionTotalsAddItem(const Value: ITransactionTotalsType): WordBool; dispid 13;
    function TransactionTotalsRemoveItem(index: Integer): WordBool; dispid 14;
  end;

// *********************************************************************//
// Interface :   IRepeatedMessageResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {446303F8-704B-4771-8334-0A63B2F56B94}
// *********************************************************************//
  IRepeatedMessageResponseType = interface(IDispatch)
    ['{446303F8-704B-4771-8334-0A63B2F56B94}']
    function Get_MessageHeader: IMessageHeaderType; safecall;
    procedure _Set_MessageHeader(const pRetVal: IMessageHeaderType); safecall;
    function Get_Item: OleVariant; safecall;
    procedure _Set_Item(pRetVal: OleVariant); safecall;
    function Get_xsdRepeatedMessageResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdRepeatedMessageResponseTypeInitFlag(pRetVal: WordBool); safecall;
    property MessageHeader: IMessageHeaderType read Get_MessageHeader write _Set_MessageHeader;
    property Item: OleVariant read Get_Item write _Set_Item;
    property xsdRepeatedMessageResponseTypeInitFlag: WordBool read Get_xsdRepeatedMessageResponseTypeInitFlag write Set_xsdRepeatedMessageResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IRepeatedMessageResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {446303F8-704B-4771-8334-0A63B2F56B94}
// *********************************************************************//
  IRepeatedMessageResponseTypeDisp = dispinterface
    ['{446303F8-704B-4771-8334-0A63B2F56B94}']
    property MessageHeader: IMessageHeaderType dispid 1;
    property Item: OleVariant dispid 3;
    property xsdRepeatedMessageResponseTypeInitFlag: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface :   IReversalResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {104CF36C-75DC-457C-9541-32419A4CAEA9}
// *********************************************************************//
  IReversalResponseType = interface(IDispatch)
    ['{104CF36C-75DC-457C-9541-32419A4CAEA9}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_POIData: IPOIDataType; safecall;
    procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
    function Get_OriginalPOITransaction: IOriginalPOITransactionType; safecall;
    procedure _Set_OriginalPOITransaction(const pRetVal: IOriginalPOITransactionType); safecall;
    function Get_PaymentReceipt: PSafeArray; safecall;
    procedure Set_PaymentReceipt(pRetVal: PSafeArray); safecall;
    function Get_ReversedAmount: TDecimal; safecall;
    procedure Set_ReversedAmount(pRetVal: TDecimal); safecall;
    function Get_ReversedAmountSpecified: WordBool; safecall;
    procedure Set_ReversedAmountSpecified(pRetVal: WordBool); safecall;
    function Get_CustomerOrderID: WideString; safecall;
    procedure Set_CustomerOrderID(const pRetVal: WideString); safecall;
    function Get_xsdReversalResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdReversalResponseTypeInitFlag(pRetVal: WordBool); safecall;
    function PaymentReceiptSize: Integer; safecall;
    function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; safecall;
    function PaymentReceiptSetItem(index: Integer; const Value: IPaymentReceiptType): WordBool; safecall;
    function PaymentReceiptAddItem(const Value: IPaymentReceiptType): WordBool; safecall;
    function PaymentReceiptRemoveItem(index: Integer): WordBool; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property POIData: IPOIDataType read Get_POIData write _Set_POIData;
    property OriginalPOITransaction: IOriginalPOITransactionType read Get_OriginalPOITransaction write _Set_OriginalPOITransaction;
    property PaymentReceipt: PSafeArray read Get_PaymentReceipt write Set_PaymentReceipt;
    property ReversedAmount: TDecimal read Get_ReversedAmount write Set_ReversedAmount;
    property ReversedAmountSpecified: WordBool read Get_ReversedAmountSpecified write Set_ReversedAmountSpecified;
    property CustomerOrderID: WideString read Get_CustomerOrderID write Set_CustomerOrderID;
    property xsdReversalResponseTypeInitFlag: WordBool read Get_xsdReversalResponseTypeInitFlag write Set_xsdReversalResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IReversalResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {104CF36C-75DC-457C-9541-32419A4CAEA9}
// *********************************************************************//
  IReversalResponseTypeDisp = dispinterface
    ['{104CF36C-75DC-457C-9541-32419A4CAEA9}']
    property Response: IResponseType dispid 1;
    property POIData: IPOIDataType dispid 3;
    property OriginalPOITransaction: IOriginalPOITransactionType dispid 5;
    property PaymentReceipt: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 7;
    property ReversedAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 9;
    property ReversedAmountSpecified: WordBool dispid 11;
    property CustomerOrderID: WideString dispid 13;
    property xsdReversalResponseTypeInitFlag: WordBool dispid 15;
    function PaymentReceiptSize: Integer; dispid 16;
    function PaymentReceiptGetItem(index: Integer): IPaymentReceiptType; dispid 17;
    function PaymentReceiptSetItem(index: Integer; const Value: IPaymentReceiptType): WordBool; dispid 18;
    function PaymentReceiptAddItem(const Value: IPaymentReceiptType): WordBool; dispid 19;
    function PaymentReceiptRemoveItem(index: Integer): WordBool; dispid 20;
  end;

// *********************************************************************//
// Interface :   IStoredValueResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4E8220CD-095E-4276-AC7A-88C4E9A2FA07}
// *********************************************************************//
  IStoredValueResponseType = interface(IDispatch)
    ['{4E8220CD-095E-4276-AC7A-88C4E9A2FA07}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_POIData: IPOIDataType; safecall;
    procedure _Set_POIData(const pRetVal: IPOIDataType); safecall;
    function Get_StoredValueResult: PSafeArray; safecall;
    procedure Set_StoredValueResult(pRetVal: PSafeArray); safecall;
    function Get_xsdStoredValueResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdStoredValueResponseTypeInitFlag(pRetVal: WordBool); safecall;
    function StoredValueResultSize: Integer; safecall;
    function StoredValueResultGetItem(index: Integer): IStoredValueResultType; safecall;
    function StoredValueResultSetItem(index: Integer; const Value: IStoredValueResultType): WordBool; safecall;
    function StoredValueResultAddItem(const Value: IStoredValueResultType): WordBool; safecall;
    function StoredValueResultRemoveItem(index: Integer): WordBool; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property POIData: IPOIDataType read Get_POIData write _Set_POIData;
    property StoredValueResult: PSafeArray read Get_StoredValueResult write Set_StoredValueResult;
    property xsdStoredValueResponseTypeInitFlag: WordBool read Get_xsdStoredValueResponseTypeInitFlag write Set_xsdStoredValueResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IStoredValueResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {4E8220CD-095E-4276-AC7A-88C4E9A2FA07}
// *********************************************************************//
  IStoredValueResponseTypeDisp = dispinterface
    ['{4E8220CD-095E-4276-AC7A-88C4E9A2FA07}']
    property Response: IResponseType dispid 1;
    property SaleData: ISaleDataType dispid 3;
    property POIData: IPOIDataType dispid 5;
    property StoredValueResult: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 7;
    property xsdStoredValueResponseTypeInitFlag: WordBool dispid 9;
    function StoredValueResultSize: Integer; dispid 10;
    function StoredValueResultGetItem(index: Integer): IStoredValueResultType; dispid 11;
    function StoredValueResultSetItem(index: Integer; const Value: IStoredValueResultType): WordBool; dispid 12;
    function StoredValueResultAddItem(const Value: IStoredValueResultType): WordBool; dispid 13;
    function StoredValueResultRemoveItem(index: Integer): WordBool; dispid 14;
  end;

// *********************************************************************//
// Interface :   IStoredValueResultType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D3089B25-BF71-4F3E-B4C8-2F7A28092F28}
// *********************************************************************//
  IStoredValueResultType = interface(IDispatch)
    ['{D3089B25-BF71-4F3E-B4C8-2F7A28092F28}']
    function Get_StoredValueAccountStatus: IStoredValueAccountStatusType; safecall;
    procedure _Set_StoredValueAccountStatus(const pRetVal: IStoredValueAccountStatusType); safecall;
    function Get_HostTransactionID: ITransactionIdentificationType; safecall;
    procedure _Set_HostTransactionID(const pRetVal: ITransactionIdentificationType); safecall;
    function Get_StoredValueTransactionType: WideString; safecall;
    procedure Set_StoredValueTransactionType(const pRetVal: WideString); safecall;
    function Get_ProductCode: WideString; safecall;
    procedure Set_ProductCode(const pRetVal: WideString); safecall;
    function Get_EanUpc: WideString; safecall;
    procedure Set_EanUpc(const pRetVal: WideString); safecall;
    function Get_ItemAmount: TDecimal; safecall;
    procedure Set_ItemAmount(pRetVal: TDecimal); safecall;
    function Get_currency: WideString; safecall;
    procedure Set_currency(const pRetVal: WideString); safecall;
    function Get_xsdStoredValueResultTypeInitFlag: WordBool; safecall;
    procedure Set_xsdStoredValueResultTypeInitFlag(pRetVal: WordBool); safecall;
    property StoredValueAccountStatus: IStoredValueAccountStatusType read Get_StoredValueAccountStatus write _Set_StoredValueAccountStatus;
    property HostTransactionID: ITransactionIdentificationType read Get_HostTransactionID write _Set_HostTransactionID;
    property StoredValueTransactionType: WideString read Get_StoredValueTransactionType write Set_StoredValueTransactionType;
    property ProductCode: WideString read Get_ProductCode write Set_ProductCode;
    property EanUpc: WideString read Get_EanUpc write Set_EanUpc;
    property ItemAmount: TDecimal read Get_ItemAmount write Set_ItemAmount;
    property currency: WideString read Get_currency write Set_currency;
    property xsdStoredValueResultTypeInitFlag: WordBool read Get_xsdStoredValueResultTypeInitFlag write Set_xsdStoredValueResultTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IStoredValueResultTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {D3089B25-BF71-4F3E-B4C8-2F7A28092F28}
// *********************************************************************//
  IStoredValueResultTypeDisp = dispinterface
    ['{D3089B25-BF71-4F3E-B4C8-2F7A28092F28}']
    property StoredValueAccountStatus: IStoredValueAccountStatusType dispid 1;
    property HostTransactionID: ITransactionIdentificationType dispid 3;
    property StoredValueTransactionType: WideString dispid 5;
    property ProductCode: WideString dispid 7;
    property EanUpc: WideString dispid 9;
    property ItemAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 11;
    property currency: WideString dispid 13;
    property xsdStoredValueResultTypeInitFlag: WordBool dispid 15;
  end;

// *********************************************************************//
// Interface :   IStoredValueAccountStatusType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2BE8655A-337D-428A-AC2A-CB5A5853543A}
// *********************************************************************//
  IStoredValueAccountStatusType = interface(IDispatch)
    ['{2BE8655A-337D-428A-AC2A-CB5A5853543A}']
    function Get_StoredValueAccountID: IStoredValueAccountIDType; safecall;
    procedure _Set_StoredValueAccountID(const pRetVal: IStoredValueAccountIDType); safecall;
    function Get_CurrentBalance: TDecimal; safecall;
    procedure Set_CurrentBalance(pRetVal: TDecimal); safecall;
    function Get_CurrentBalanceSpecified: WordBool; safecall;
    procedure Set_CurrentBalanceSpecified(pRetVal: WordBool); safecall;
    function Get_xsdStoredValueAccountStatusTypeInitFlag: WordBool; safecall;
    procedure Set_xsdStoredValueAccountStatusTypeInitFlag(pRetVal: WordBool); safecall;
    property StoredValueAccountID: IStoredValueAccountIDType read Get_StoredValueAccountID write _Set_StoredValueAccountID;
    property CurrentBalance: TDecimal read Get_CurrentBalance write Set_CurrentBalance;
    property CurrentBalanceSpecified: WordBool read Get_CurrentBalanceSpecified write Set_CurrentBalanceSpecified;
    property xsdStoredValueAccountStatusTypeInitFlag: WordBool read Get_xsdStoredValueAccountStatusTypeInitFlag write Set_xsdStoredValueAccountStatusTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IStoredValueAccountStatusTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {2BE8655A-337D-428A-AC2A-CB5A5853543A}
// *********************************************************************//
  IStoredValueAccountStatusTypeDisp = dispinterface
    ['{2BE8655A-337D-428A-AC2A-CB5A5853543A}']
    property StoredValueAccountID: IStoredValueAccountIDType dispid 1;
    property CurrentBalance: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 3;
    property CurrentBalanceSpecified: WordBool dispid 5;
    property xsdStoredValueAccountStatusTypeInitFlag: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface :   IStoredValueAccountIDType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6FE37195-E139-442C-B500-7BDD917B45EC}
// *********************************************************************//
  IStoredValueAccountIDType = interface(IDispatch)
    ['{6FE37195-E139-442C-B500-7BDD917B45EC}']
    function Get_StoredValueAccountType: WideString; safecall;
    procedure Set_StoredValueAccountType(const pRetVal: WideString); safecall;
    function Get_StoredValueProvider: WideString; safecall;
    procedure Set_StoredValueProvider(const pRetVal: WideString); safecall;
    function Get_OwnerName: WideString; safecall;
    procedure Set_OwnerName(const pRetVal: WideString); safecall;
    function Get_ExpiryDate: WideString; safecall;
    procedure Set_ExpiryDate(const pRetVal: WideString); safecall;
    function Get_EntryMode: PSafeArray; safecall;
    procedure Set_EntryMode(pRetVal: PSafeArray); safecall;
    function Get_IdentificationType: WideString; safecall;
    procedure Set_IdentificationType(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_xsdStoredValueAccountIDTypeInitFlag: WordBool; safecall;
    procedure Set_xsdStoredValueAccountIDTypeInitFlag(pRetVal: WordBool); safecall;
    function EntryModeSize: Integer; safecall;
    function EntryModeGetItem(index: Integer): WideString; safecall;
    function EntryModeSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function EntryModeAddItem(const Value: WideString): WordBool; safecall;
    function EntryModeRemoveItem(index: Integer): WordBool; safecall;
    property StoredValueAccountType: WideString read Get_StoredValueAccountType write Set_StoredValueAccountType;
    property StoredValueProvider: WideString read Get_StoredValueProvider write Set_StoredValueProvider;
    property OwnerName: WideString read Get_OwnerName write Set_OwnerName;
    property ExpiryDate: WideString read Get_ExpiryDate write Set_ExpiryDate;
    property EntryMode: PSafeArray read Get_EntryMode write Set_EntryMode;
    property IdentificationType: WideString read Get_IdentificationType write Set_IdentificationType;
    property Value: WideString read Get_Value write Set_Value;
    property xsdStoredValueAccountIDTypeInitFlag: WordBool read Get_xsdStoredValueAccountIDTypeInitFlag write Set_xsdStoredValueAccountIDTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IStoredValueAccountIDTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6FE37195-E139-442C-B500-7BDD917B45EC}
// *********************************************************************//
  IStoredValueAccountIDTypeDisp = dispinterface
    ['{6FE37195-E139-442C-B500-7BDD917B45EC}']
    property StoredValueAccountType: WideString dispid 1;
    property StoredValueProvider: WideString dispid 3;
    property OwnerName: WideString dispid 5;
    property ExpiryDate: WideString dispid 7;
    property EntryMode: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 9;
    property IdentificationType: WideString dispid 11;
    property Value: WideString dispid 13;
    property xsdStoredValueAccountIDTypeInitFlag: WordBool dispid 15;
    function EntryModeSize: Integer; dispid 16;
    function EntryModeGetItem(index: Integer): WideString; dispid 17;
    function EntryModeSetItem(index: Integer; const Value: WideString): WordBool; dispid 18;
    function EntryModeAddItem(const Value: WideString): WordBool; dispid 19;
    function EntryModeRemoveItem(index: Integer): WordBool; dispid 20;
  end;

// *********************************************************************//
// Interface :   ISoundContentType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {197454E4-5C08-4168-B82E-0895CCE1CCCC}
// *********************************************************************//
  ISoundContentType = interface(IDispatch)
    ['{197454E4-5C08-4168-B82E-0895CCE1CCCC}']
    function Get_SoundFormat: WideString; safecall;
    procedure Set_SoundFormat(const pRetVal: WideString); safecall;
    function Get_Language: WideString; safecall;
    procedure Set_Language(const pRetVal: WideString); safecall;
    function Get_ReferenceID: WideString; safecall;
    procedure Set_ReferenceID(const pRetVal: WideString); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const pRetVal: WideString); safecall;
    function Get_xsdSoundContentTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSoundContentTypeInitFlag(pRetVal: WordBool); safecall;
    property SoundFormat: WideString read Get_SoundFormat write Set_SoundFormat;
    property Language: WideString read Get_Language write Set_Language;
    property ReferenceID: WideString read Get_ReferenceID write Set_ReferenceID;
    property Value: WideString read Get_Value write Set_Value;
    property xsdSoundContentTypeInitFlag: WordBool read Get_xsdSoundContentTypeInitFlag write Set_xsdSoundContentTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISoundContentTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {197454E4-5C08-4168-B82E-0895CCE1CCCC}
// *********************************************************************//
  ISoundContentTypeDisp = dispinterface
    ['{197454E4-5C08-4168-B82E-0895CCE1CCCC}']
    property SoundFormat: WideString dispid 1;
    property Language: WideString dispid 3;
    property ReferenceID: WideString dispid 5;
    property Value: WideString dispid 7;
    property xsdSoundContentTypeInitFlag: WordBool dispid 9;
  end;

// *********************************************************************//
// Interface :   ISoundRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A53937DC-FD06-42F8-8B6B-F242F9F7999B}
// *********************************************************************//
  ISoundRequestType = interface(IDispatch)
    ['{A53937DC-FD06-42F8-8B6B-F242F9F7999B}']
    function Get_SoundContent: ISoundContentType; safecall;
    procedure _Set_SoundContent(const pRetVal: ISoundContentType); safecall;
    function Get_ResponseMode: WideString; safecall;
    procedure Set_ResponseMode(const pRetVal: WideString); safecall;
    function Get_SoundAction: WideString; safecall;
    procedure Set_SoundAction(const pRetVal: WideString); safecall;
    function Get_SoundVolume: WideString; safecall;
    procedure Set_SoundVolume(const pRetVal: WideString); safecall;
    function Get_xsdSoundRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSoundRequestTypeInitFlag(pRetVal: WordBool); safecall;
    property SoundContent: ISoundContentType read Get_SoundContent write _Set_SoundContent;
    property ResponseMode: WideString read Get_ResponseMode write Set_ResponseMode;
    property SoundAction: WideString read Get_SoundAction write Set_SoundAction;
    property SoundVolume: WideString read Get_SoundVolume write Set_SoundVolume;
    property xsdSoundRequestTypeInitFlag: WordBool read Get_xsdSoundRequestTypeInitFlag write Set_xsdSoundRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISoundRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {A53937DC-FD06-42F8-8B6B-F242F9F7999B}
// *********************************************************************//
  ISoundRequestTypeDisp = dispinterface
    ['{A53937DC-FD06-42F8-8B6B-F242F9F7999B}']
    property SoundContent: ISoundContentType dispid 2;
    property ResponseMode: WideString dispid 4;
    property SoundAction: WideString dispid 6;
    property SoundVolume: WideString dispid 8;
    property xsdSoundRequestTypeInitFlag: WordBool dispid 10;
  end;

// *********************************************************************//
// Interface :   ISoundResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B73EF86A-66D4-4E70-B519-49697A607BAF}
// *********************************************************************//
  ISoundResponseType = interface(IDispatch)
    ['{B73EF86A-66D4-4E70-B519-49697A607BAF}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_xsdSoundResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdSoundResponseTypeInitFlag(pRetVal: WordBool); safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property xsdSoundResponseTypeInitFlag: WordBool read Get_xsdSoundResponseTypeInitFlag write Set_xsdSoundResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISoundResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B73EF86A-66D4-4E70-B519-49697A607BAF}
// *********************************************************************//
  ISoundResponseTypeDisp = dispinterface
    ['{B73EF86A-66D4-4E70-B519-49697A607BAF}']
    property Response: IResponseType dispid 1;
    property xsdSoundResponseTypeInitFlag: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface :   IStoredValueDataType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {49531C51-060E-4AFE-9FE8-278DBC2F5418}
// *********************************************************************//
  IStoredValueDataType = interface(IDispatch)
    ['{49531C51-060E-4AFE-9FE8-278DBC2F5418}']
    function Get_StoredValueAccountID: IStoredValueAccountIDType; safecall;
    procedure _Set_StoredValueAccountID(const pRetVal: IStoredValueAccountIDType); safecall;
    function Get_OriginalPOITransaction: IOriginalPOITransactionType; safecall;
    procedure _Set_OriginalPOITransaction(const pRetVal: IOriginalPOITransactionType); safecall;
    function Get_StoredValueProvider: WideString; safecall;
    procedure Set_StoredValueProvider(const pRetVal: WideString); safecall;
    function Get_StoredValueTransactionType: WideString; safecall;
    procedure Set_StoredValueTransactionType(const pRetVal: WideString); safecall;
    function Get_ProductCode: WideString; safecall;
    procedure Set_ProductCode(const pRetVal: WideString); safecall;
    function Get_EanUpc: WideString; safecall;
    procedure Set_EanUpc(const pRetVal: WideString); safecall;
    function Get_ItemAmount: TDecimal; safecall;
    procedure Set_ItemAmount(pRetVal: TDecimal); safecall;
    function Get_currency: WideString; safecall;
    procedure Set_currency(const pRetVal: WideString); safecall;
    function Get_xsdStoredValueDataTypeInitFlag: WordBool; safecall;
    procedure Set_xsdStoredValueDataTypeInitFlag(pRetVal: WordBool); safecall;
    property StoredValueAccountID: IStoredValueAccountIDType read Get_StoredValueAccountID write _Set_StoredValueAccountID;
    property OriginalPOITransaction: IOriginalPOITransactionType read Get_OriginalPOITransaction write _Set_OriginalPOITransaction;
    property StoredValueProvider: WideString read Get_StoredValueProvider write Set_StoredValueProvider;
    property StoredValueTransactionType: WideString read Get_StoredValueTransactionType write Set_StoredValueTransactionType;
    property ProductCode: WideString read Get_ProductCode write Set_ProductCode;
    property EanUpc: WideString read Get_EanUpc write Set_EanUpc;
    property ItemAmount: TDecimal read Get_ItemAmount write Set_ItemAmount;
    property currency: WideString read Get_currency write Set_currency;
    property xsdStoredValueDataTypeInitFlag: WordBool read Get_xsdStoredValueDataTypeInitFlag write Set_xsdStoredValueDataTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IStoredValueDataTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {49531C51-060E-4AFE-9FE8-278DBC2F5418}
// *********************************************************************//
  IStoredValueDataTypeDisp = dispinterface
    ['{49531C51-060E-4AFE-9FE8-278DBC2F5418}']
    property StoredValueAccountID: IStoredValueAccountIDType dispid 1;
    property OriginalPOITransaction: IOriginalPOITransactionType dispid 3;
    property StoredValueProvider: WideString dispid 5;
    property StoredValueTransactionType: WideString dispid 7;
    property ProductCode: WideString dispid 9;
    property EanUpc: WideString dispid 11;
    property ItemAmount: {NOT_OLEAUTO(TDecimal)}OleVariant dispid 13;
    property currency: WideString dispid 15;
    property xsdStoredValueDataTypeInitFlag: WordBool dispid 17;
  end;

// *********************************************************************//
// Interface :   IStoredValueRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B3D0EC44-6825-4C64-9584-8DDA8D573407}
// *********************************************************************//
  IStoredValueRequestType = interface(IDispatch)
    ['{B3D0EC44-6825-4C64-9584-8DDA8D573407}']
    function Get_SaleData: ISaleDataType; safecall;
    procedure _Set_SaleData(const pRetVal: ISaleDataType); safecall;
    function Get_StoredValueData: PSafeArray; safecall;
    procedure Set_StoredValueData(pRetVal: PSafeArray); safecall;
    function Get_CustomerLanguage: WideString; safecall;
    procedure Set_CustomerLanguage(const pRetVal: WideString); safecall;
    function Get_xsdStoredValueRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdStoredValueRequestTypeInitFlag(pRetVal: WordBool); safecall;
    function StoredValueDataSize: Integer; safecall;
    function StoredValueDataGetItem(index: Integer): IStoredValueDataType; safecall;
    function StoredValueDataSetItem(index: Integer; const Value: IStoredValueDataType): WordBool; safecall;
    function StoredValueDataAddItem(const Value: IStoredValueDataType): WordBool; safecall;
    function StoredValueDataRemoveItem(index: Integer): WordBool; safecall;
    property SaleData: ISaleDataType read Get_SaleData write _Set_SaleData;
    property StoredValueData: PSafeArray read Get_StoredValueData write Set_StoredValueData;
    property CustomerLanguage: WideString read Get_CustomerLanguage write Set_CustomerLanguage;
    property xsdStoredValueRequestTypeInitFlag: WordBool read Get_xsdStoredValueRequestTypeInitFlag write Set_xsdStoredValueRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IStoredValueRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {B3D0EC44-6825-4C64-9584-8DDA8D573407}
// *********************************************************************//
  IStoredValueRequestTypeDisp = dispinterface
    ['{B3D0EC44-6825-4C64-9584-8DDA8D573407}']
    property SaleData: ISaleDataType dispid 1;
    property StoredValueData: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property CustomerLanguage: WideString dispid 5;
    property xsdStoredValueRequestTypeInitFlag: WordBool dispid 7;
    function StoredValueDataSize: Integer; dispid 8;
    function StoredValueDataGetItem(index: Integer): IStoredValueDataType; dispid 9;
    function StoredValueDataSetItem(index: Integer; const Value: IStoredValueDataType): WordBool; dispid 10;
    function StoredValueDataAddItem(const Value: IStoredValueDataType): WordBool; dispid 11;
    function StoredValueDataRemoveItem(index: Integer): WordBool; dispid 12;
  end;

// *********************************************************************//
// Interface :   ITransmitRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5FC4EAC2-2E48-4827-B65A-AACF76E1EA9C}
// *********************************************************************//
  ITransmitRequestType = interface(IDispatch)
    ['{5FC4EAC2-2E48-4827-B65A-AACF76E1EA9C}']
    function Get_Message: PSafeArray; safecall;
    procedure Set_Message(pRetVal: PSafeArray); safecall;
    function Get_WaitResponseFlag: WordBool; safecall;
    procedure Set_WaitResponseFlag(pRetVal: WordBool); safecall;
    function Get_MaximumTransmitTime: WideString; safecall;
    procedure Set_MaximumTransmitTime(const pRetVal: WideString); safecall;
    function Get_DestinationAddress: WideString; safecall;
    procedure Set_DestinationAddress(const pRetVal: WideString); safecall;
    function Get_xsdTransmitRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdTransmitRequestTypeInitFlag(pRetVal: WordBool); safecall;
    function MessageSize: Integer; safecall;
    function MessageGetItem(index: Integer): Byte; safecall;
    function MessageSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function MessageAddItem(Value: Byte): WordBool; safecall;
    function MessageRemoveItem(index: Integer): WordBool; safecall;
    property Message: PSafeArray read Get_Message write Set_Message;
    property WaitResponseFlag: WordBool read Get_WaitResponseFlag write Set_WaitResponseFlag;
    property MaximumTransmitTime: WideString read Get_MaximumTransmitTime write Set_MaximumTransmitTime;
    property DestinationAddress: WideString read Get_DestinationAddress write Set_DestinationAddress;
    property xsdTransmitRequestTypeInitFlag: WordBool read Get_xsdTransmitRequestTypeInitFlag write Set_xsdTransmitRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ITransmitRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {5FC4EAC2-2E48-4827-B65A-AACF76E1EA9C}
// *********************************************************************//
  ITransmitRequestTypeDisp = dispinterface
    ['{5FC4EAC2-2E48-4827-B65A-AACF76E1EA9C}']
    property Message: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 2;
    property WaitResponseFlag: WordBool dispid 4;
    property MaximumTransmitTime: WideString dispid 6;
    property DestinationAddress: WideString dispid 8;
    property xsdTransmitRequestTypeInitFlag: WordBool dispid 10;
    function MessageSize: Integer; dispid 11;
    function MessageGetItem(index: Integer): Byte; dispid 12;
    function MessageSetItem(index: Integer; Value: Byte): WordBool; dispid 13;
    function MessageAddItem(Value: Byte): WordBool; dispid 14;
    function MessageRemoveItem(index: Integer): WordBool; dispid 15;
  end;

// *********************************************************************//
// Interface :   ITransmitResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6D8E17BA-78C1-4EB1-8238-E8125B2CE926}
// *********************************************************************//
  ITransmitResponseType = interface(IDispatch)
    ['{6D8E17BA-78C1-4EB1-8238-E8125B2CE926}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_Message: PSafeArray; safecall;
    procedure Set_Message(pRetVal: PSafeArray); safecall;
    function Get_xsdTransmitResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdTransmitResponseTypeInitFlag(pRetVal: WordBool); safecall;
    function MessageSize: Integer; safecall;
    function MessageGetItem(index: Integer): Byte; safecall;
    function MessageSetItem(index: Integer; Value: Byte): WordBool; safecall;
    function MessageAddItem(Value: Byte): WordBool; safecall;
    function MessageRemoveItem(index: Integer): WordBool; safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property Message: PSafeArray read Get_Message write Set_Message;
    property xsdTransmitResponseTypeInitFlag: WordBool read Get_xsdTransmitResponseTypeInitFlag write Set_xsdTransmitResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ITransmitResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {6D8E17BA-78C1-4EB1-8238-E8125B2CE926}
// *********************************************************************//
  ITransmitResponseTypeDisp = dispinterface
    ['{6D8E17BA-78C1-4EB1-8238-E8125B2CE926}']
    property Response: IResponseType dispid 1;
    property Message: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 3;
    property xsdTransmitResponseTypeInitFlag: WordBool dispid 5;
    function MessageSize: Integer; dispid 6;
    function MessageGetItem(index: Integer): Byte; dispid 7;
    function MessageSetItem(index: Integer; Value: Byte): WordBool; dispid 8;
    function MessageAddItem(Value: Byte): WordBool; dispid 9;
    function MessageRemoveItem(index: Integer): WordBool; dispid 10;
  end;

// *********************************************************************//
// Interface :   ITransactionStatusRequestType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {EE426979-76AA-4491-BD87-59A386ACF42F}
// *********************************************************************//
  ITransactionStatusRequestType = interface(IDispatch)
    ['{EE426979-76AA-4491-BD87-59A386ACF42F}']
    function Get_MessageReference: IMessageReferenceType; safecall;
    procedure _Set_MessageReference(const pRetVal: IMessageReferenceType); safecall;
    function Get_DocumentQualifier: PSafeArray; safecall;
    procedure Set_DocumentQualifier(pRetVal: PSafeArray); safecall;
    function Get_ReceiptReprintFlag: WordBool; safecall;
    procedure Set_ReceiptReprintFlag(pRetVal: WordBool); safecall;
    function Get_xsdTransactionStatusRequestTypeInitFlag: WordBool; safecall;
    procedure Set_xsdTransactionStatusRequestTypeInitFlag(pRetVal: WordBool); safecall;
    function DocumentQualifierSize: Integer; safecall;
    function DocumentQualifierGetItem(index: Integer): WideString; safecall;
    function DocumentQualifierSetItem(index: Integer; const Value: WideString): WordBool; safecall;
    function DocumentQualifierAddItem(const Value: WideString): WordBool; safecall;
    function DocumentQualifierRemoveItem(index: Integer): WordBool; safecall;
    property MessageReference: IMessageReferenceType read Get_MessageReference write _Set_MessageReference;
    property DocumentQualifier: PSafeArray read Get_DocumentQualifier write Set_DocumentQualifier;
    property ReceiptReprintFlag: WordBool read Get_ReceiptReprintFlag write Set_ReceiptReprintFlag;
    property xsdTransactionStatusRequestTypeInitFlag: WordBool read Get_xsdTransactionStatusRequestTypeInitFlag write Set_xsdTransactionStatusRequestTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ITransactionStatusRequestTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {EE426979-76AA-4491-BD87-59A386ACF42F}
// *********************************************************************//
  ITransactionStatusRequestTypeDisp = dispinterface
    ['{EE426979-76AA-4491-BD87-59A386ACF42F}']
    property MessageReference: IMessageReferenceType dispid 2;
    property DocumentQualifier: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 4;
    property ReceiptReprintFlag: WordBool dispid 6;
    property xsdTransactionStatusRequestTypeInitFlag: WordBool dispid 8;
    function DocumentQualifierSize: Integer; dispid 9;
    function DocumentQualifierGetItem(index: Integer): WideString; dispid 10;
    function DocumentQualifierSetItem(index: Integer; const Value: WideString): WordBool; dispid 11;
    function DocumentQualifierAddItem(const Value: WideString): WordBool; dispid 12;
    function DocumentQualifierRemoveItem(index: Integer): WordBool; dispid 13;
  end;

// *********************************************************************//
// Interface :   ITransactionStatusResponseType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3AD1D958-B350-4B7E-A29B-B434B7D39163}
// *********************************************************************//
  ITransactionStatusResponseType = interface(IDispatch)
    ['{3AD1D958-B350-4B7E-A29B-B434B7D39163}']
    function Get_Response: IResponseType; safecall;
    procedure _Set_Response(const pRetVal: IResponseType); safecall;
    function Get_MessageReference: IMessageReferenceType; safecall;
    procedure _Set_MessageReference(const pRetVal: IMessageReferenceType); safecall;
    function Get_RepeatedMessageResponse: IRepeatedMessageResponseType; safecall;
    procedure _Set_RepeatedMessageResponse(const pRetVal: IRepeatedMessageResponseType); safecall;
    function Get_xsdTransactionStatusResponseTypeInitFlag: WordBool; safecall;
    procedure Set_xsdTransactionStatusResponseTypeInitFlag(pRetVal: WordBool); safecall;
    property Response: IResponseType read Get_Response write _Set_Response;
    property MessageReference: IMessageReferenceType read Get_MessageReference write _Set_MessageReference;
    property RepeatedMessageResponse: IRepeatedMessageResponseType read Get_RepeatedMessageResponse write _Set_RepeatedMessageResponse;
    property xsdTransactionStatusResponseTypeInitFlag: WordBool read Get_xsdTransactionStatusResponseTypeInitFlag write Set_xsdTransactionStatusResponseTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ITransactionStatusResponseTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {3AD1D958-B350-4B7E-A29B-B434B7D39163}
// *********************************************************************//
  ITransactionStatusResponseTypeDisp = dispinterface
    ['{3AD1D958-B350-4B7E-A29B-B434B7D39163}']
    property Response: IResponseType dispid 1;
    property MessageReference: IMessageReferenceType dispid 3;
    property RepeatedMessageResponse: IRepeatedMessageResponseType dispid 5;
    property xsdTransactionStatusResponseTypeInitFlag: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface :   ISaleToPOIRequest
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {793BCC70-3EB8-4EED-B734-C69E2CD65A6E}
// *********************************************************************//
  ISaleToPOIRequest = interface(IDispatch)
    ['{793BCC70-3EB8-4EED-B734-C69E2CD65A6E}']
    function Get_MessageHeader: IMessageHeaderType; safecall;
    procedure _Set_MessageHeader(const pRetVal: IMessageHeaderType); safecall;
    function Get_Item: OleVariant; safecall;
    procedure _Set_Item(pRetVal: OleVariant); safecall;
    function Get_SecurityTrailer: IContentInformationType; safecall;
    procedure _Set_SecurityTrailer(const pRetVal: IContentInformationType); safecall;
    function Get_xsdSaleToPOIRequestInitFlag: WordBool; safecall;
    procedure Set_xsdSaleToPOIRequestInitFlag(pRetVal: WordBool); safecall;
    property MessageHeader: IMessageHeaderType read Get_MessageHeader write _Set_MessageHeader;
    property Item: OleVariant read Get_Item write _Set_Item;
    property SecurityTrailer: IContentInformationType read Get_SecurityTrailer write _Set_SecurityTrailer;
    property xsdSaleToPOIRequestInitFlag: WordBool read Get_xsdSaleToPOIRequestInitFlag write Set_xsdSaleToPOIRequestInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISaleToPOIRequestDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {793BCC70-3EB8-4EED-B734-C69E2CD65A6E}
// *********************************************************************//
  ISaleToPOIRequestDisp = dispinterface
    ['{793BCC70-3EB8-4EED-B734-C69E2CD65A6E}']
    property MessageHeader: IMessageHeaderType dispid 1;
    property Item: OleVariant dispid 3;
    property SecurityTrailer: IContentInformationType dispid 5;
    property xsdSaleToPOIRequestInitFlag: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface :   ISaleToPOIResponse
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CB565D6A-8B96-498A-9D72-37F2C8800D54}
// *********************************************************************//
  ISaleToPOIResponse = interface(IDispatch)
    ['{CB565D6A-8B96-498A-9D72-37F2C8800D54}']
    function Get_MessageHeader: IMessageHeaderType; safecall;
    procedure _Set_MessageHeader(const pRetVal: IMessageHeaderType); safecall;
    function Get_Item: OleVariant; safecall;
    procedure _Set_Item(pRetVal: OleVariant); safecall;
    function Get_SecurityTrailer: IContentInformationType; safecall;
    procedure _Set_SecurityTrailer(const pRetVal: IContentInformationType); safecall;
    function Get_xsdSaleToPOIResponseInitFlag: WordBool; safecall;
    procedure Set_xsdSaleToPOIResponseInitFlag(pRetVal: WordBool); safecall;
    property MessageHeader: IMessageHeaderType read Get_MessageHeader write _Set_MessageHeader;
    property Item: OleVariant read Get_Item write _Set_Item;
    property SecurityTrailer: IContentInformationType read Get_SecurityTrailer write _Set_SecurityTrailer;
    property xsdSaleToPOIResponseInitFlag: WordBool read Get_xsdSaleToPOIResponseInitFlag write Set_xsdSaleToPOIResponseInitFlag;
  end;

// *********************************************************************//
// DispIntf :    ISaleToPOIResponseDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {CB565D6A-8B96-498A-9D72-37F2C8800D54}
// *********************************************************************//
  ISaleToPOIResponseDisp = dispinterface
    ['{CB565D6A-8B96-498A-9D72-37F2C8800D54}']
    property MessageHeader: IMessageHeaderType dispid 1;
    property Item: OleVariant dispid 3;
    property SecurityTrailer: IContentInformationType dispid 5;
    property xsdSaleToPOIResponseInitFlag: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface :   IIssuerType
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {993CC70B-284B-4BB7-9CF0-3D9E0F395CD1}
// *********************************************************************//
  IIssuerType = interface(IDispatch)
    ['{993CC70B-284B-4BB7-9CF0-3D9E0F395CD1}']
    function Get_RelativeDistinguishedName: PSafeArray; safecall;
    procedure Set_RelativeDistinguishedName(pRetVal: PSafeArray); safecall;
    function Get_xsdIssuerTypeInitFlag: WordBool; safecall;
    procedure Set_xsdIssuerTypeInitFlag(pRetVal: WordBool); safecall;
    function RelativeDistinguishedNameSize: Integer; safecall;
    function RelativeDistinguishedNameGetItem(index: Integer): IRelativeDistinguishedNameType; safecall;
    function RelativeDistinguishedNameSetItem(index: Integer; 
                                              const Value: IRelativeDistinguishedNameType): WordBool; safecall;
    function RelativeDistinguishedNameAddItem(const Value: IRelativeDistinguishedNameType): WordBool; safecall;
    function RelativeDistinguishedNameRemoveItem(index: Integer): WordBool; safecall;
    property RelativeDistinguishedName: PSafeArray read Get_RelativeDistinguishedName write Set_RelativeDistinguishedName;
    property xsdIssuerTypeInitFlag: WordBool read Get_xsdIssuerTypeInitFlag write Set_xsdIssuerTypeInitFlag;
  end;

// *********************************************************************//
// DispIntf :    IIssuerTypeDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {993CC70B-284B-4BB7-9CF0-3D9E0F395CD1}
// *********************************************************************//
  IIssuerTypeDisp = dispinterface
    ['{993CC70B-284B-4BB7-9CF0-3D9E0F395CD1}']
    property RelativeDistinguishedName: {NOT_OLEAUTO(PSafeArray)}OleVariant dispid 1;
    property xsdIssuerTypeInitFlag: WordBool dispid 3;
    function RelativeDistinguishedNameSize: Integer; dispid 4;
    function RelativeDistinguishedNameGetItem(index: Integer): IRelativeDistinguishedNameType; dispid 5;
    function RelativeDistinguishedNameSetItem(index: Integer; 
                                              const Value: IRelativeDistinguishedNameType): WordBool; dispid 6;
    function RelativeDistinguishedNameAddItem(const Value: IRelativeDistinguishedNameType): WordBool; dispid 7;
    function RelativeDistinguishedNameRemoveItem(index: Integer): WordBool; dispid 8;
  end;

// *********************************************************************//
// Interface :   INexoRetailerServerActivity
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F71D22CA-428A-4B19-9412-05F8552EB8F2}
// *********************************************************************//
  INexoRetailerServerActivity = interface(IDispatch)
    ['{F71D22CA-428A-4B19-9412-05F8552EB8F2}']
  end;

// *********************************************************************//
// DispIntf :    INexoRetailerServerActivityDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {F71D22CA-428A-4B19-9412-05F8552EB8F2}
// *********************************************************************//
  INexoRetailerServerActivityDisp = dispinterface
    ['{F71D22CA-428A-4B19-9412-05F8552EB8F2}']
  end;

// *********************************************************************//
// Interface :   _NexoRetailerServerMessageHeaderValidator
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {1B697748-782C-3282-A8CB-142481ADB671}
// *********************************************************************//
  _NexoRetailerServerMessageHeaderValidator = interface(IDispatch)
    ['{1B697748-782C-3282-A8CB-142481ADB671}']
  end;

// *********************************************************************//
// DispIntf :    _NexoRetailerServerMessageHeaderValidatorDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {1B697748-782C-3282-A8CB-142481ADB671}
// *********************************************************************//
  _NexoRetailerServerMessageHeaderValidatorDisp = dispinterface
    ['{1B697748-782C-3282-A8CB-142481ADB671}']
  end;

// *********************************************************************//
// Interface :   INexoRetailerServerSettings
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0D584C15-C13E-4123-B6A6-57D27C7937D1}
// *********************************************************************//
  INexoRetailerServerSettings = interface(IDispatch)
    ['{0D584C15-C13E-4123-B6A6-57D27C7937D1}']
    function Get_IsValid: WordBool; safecall;
    function Get_Parameters: OleVariant; safecall;
    procedure _Set_Parameters(pRetVal: OleVariant); safecall;
    function Get_ThreadData: IThreadData; safecall;
    procedure _Set_ThreadData(const pRetVal: IThreadData); safecall;
    function Get_Settings: IStreamServerSettings; safecall;
    procedure _Set_Settings(const pRetVal: IStreamServerSettings); safecall;
    function Get_OnStart: IUnknown; safecall;
    procedure _Set_OnStart(const pRetVal: IUnknown); safecall;
    function Get_OnReceivedRequest: IUnknown; safecall;
    procedure _Set_OnReceivedRequest(const pRetVal: IUnknown); safecall;
    function Get_OnReceivedReply: IUnknown; safecall;
    procedure _Set_OnReceivedReply(const pRetVal: IUnknown); safecall;
    function Get_OnReceivedNotification: IUnknown; safecall;
    procedure _Set_OnReceivedNotification(const pRetVal: IUnknown); safecall;
    function Get_OnSend: IUnknown; safecall;
    procedure _Set_OnSend(const pRetVal: IUnknown); safecall;
    function Get_OnStop: IUnknown; safecall;
    procedure _Set_OnStop(const pRetVal: IUnknown); safecall;
    property IsValid: WordBool read Get_IsValid;
    property Parameters: OleVariant read Get_Parameters write _Set_Parameters;
    property ThreadData: IThreadData read Get_ThreadData write _Set_ThreadData;
    property Settings: IStreamServerSettings read Get_Settings write _Set_Settings;
    property OnStart: IUnknown read Get_OnStart write _Set_OnStart;
    property OnReceivedRequest: IUnknown read Get_OnReceivedRequest write _Set_OnReceivedRequest;
    property OnReceivedReply: IUnknown read Get_OnReceivedReply write _Set_OnReceivedReply;
    property OnReceivedNotification: IUnknown read Get_OnReceivedNotification write _Set_OnReceivedNotification;
    property OnSend: IUnknown read Get_OnSend write _Set_OnSend;
    property OnStop: IUnknown read Get_OnStop write _Set_OnStop;
  end;

// *********************************************************************//
// DispIntf :    INexoRetailerServerSettingsDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {0D584C15-C13E-4123-B6A6-57D27C7937D1}
// *********************************************************************//
  INexoRetailerServerSettingsDisp = dispinterface
    ['{0D584C15-C13E-4123-B6A6-57D27C7937D1}']
    property IsValid: WordBool readonly dispid 1;
    property Parameters: OleVariant dispid 2;
    property ThreadData: IThreadData dispid 3;
    property Settings: IStreamServerSettings dispid 4;
    property OnStart: IUnknown dispid 10;
    property OnReceivedRequest: IUnknown dispid 11;
    property OnReceivedReply: IUnknown dispid 12;
    property OnReceivedNotification: IUnknown dispid 13;
    property OnSend: IUnknown dispid 14;
    property OnStop: IUnknown dispid 15;
  end;

// *********************************************************************//
// Interface :   INexoRetailerClientHandle
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {006465F7-6122-44C2-BBF1-166B483315E4}
// *********************************************************************//
  INexoRetailerClientHandle = interface(IDispatch)
    ['{006465F7-6122-44C2-BBF1-166B483315E4}']
    function Get_XML: WideString; safecall;
    property XML: WideString read Get_XML;
  end;

// *********************************************************************//
// DispIntf :    INexoRetailerClientHandleDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {006465F7-6122-44C2-BBF1-166B483315E4}
// *********************************************************************//
  INexoRetailerClientHandleDisp = dispinterface
    ['{006465F7-6122-44C2-BBF1-166B483315E4}']
    property XML: WideString readonly dispid 1;
  end;

// *********************************************************************//
// Interface :   INexoRetailerClient
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8B1988DB-F6AC-4B87-B874-62C58ED8E95F}
// *********************************************************************//
  INexoRetailerClient = interface(IDispatch)
    ['{8B1988DB-F6AC-4B87-B874-62C58ED8E95F}']
    function Get_Settings: INexoRetailerClientSettings; safecall;
    function Get_Key: WideString; safecall;
    function Get_KeyClient: WideString; safecall;
    function Get_KeyServer: WideString; safecall;
    function Get_ID: Integer; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const pRetVal: WideString); safecall;
    function Get_Description: WideString; safecall;
    function Get_SaleID: WideString; safecall;
    function Get_POIID: WideString; safecall;
    function Get_Connected: WordBool; safecall;
    function Get_Activity: INexoRetailerClientActivity; safecall;
    function Get_ToString: WideString; safecall;
    function Connect(const Settings: INexoRetailerClientSettings): WordBool; safecall;
    procedure Disconnect; safecall;
    function SendRequest(const msg: INexoObject; timer: Integer; 
                         const Settings: INexoRetailerClientSettings): INexoRetailerClientHandle; safecall;
    function SendRequest_2(const msg: ISaleToPOIRequest; timer: Integer; 
                           const Settings: INexoRetailerClientSettings): INexoRetailerClientHandle; safecall;
    function SendRequestSync(const msg: INexoObject; timer: Integer): WordBool; safecall;
    function SendRequestSync_2(const msg: ISaleToPOIRequest; timer: Integer): WordBool; safecall;
    function SendReply(const msg: INexoObject): WordBool; safecall;
    function SendReply_2(const msg: ISaleToPOIResponse): WordBool; safecall;
    function SendRawRequest(const XML: WideString; timer: Integer): INexoRetailerClientHandle; safecall;
    function SendRawRequestSync(const XML: WideString; timer: Integer): WordBool; safecall;
    function Get_SendWithErrors: WordBool; safecall;
    procedure Set_SendWithErrors(pRetVal: WordBool); safecall;
    function Get_SendWithWarnings: WordBool; safecall;
    procedure Set_SendWithWarnings(pRetVal: WordBool); safecall;
    function Get_NbErrors: Integer; safecall;
    function Get_ContainsErrors: WordBool; safecall;
    function Get_NbWarnings: Integer; safecall;
    function Get_ContainsWarnings: WordBool; safecall;
    function Get_ContainsEvents: WordBool; safecall;
    function Get_BOM: WordBool; safecall;
    procedure Set_BOM(pRetVal: WordBool); safecall;
    function Get_LogSerialisationEvents: WordBool; safecall;
    procedure Set_LogSerialisationEvents(pRetVal: WordBool); safecall;
    function ErrorsList: WideString; safecall;
    function WarningsList: WideString; safecall;
    function EventsList: WideString; safecall;
    property Settings: INexoRetailerClientSettings read Get_Settings;
    property Key: WideString read Get_Key;
    property KeyClient: WideString read Get_KeyClient;
    property KeyServer: WideString read Get_KeyServer;
    property ID: Integer read Get_ID;
    property Name: WideString read Get_Name write Set_Name;
    property Description: WideString read Get_Description;
    property SaleID: WideString read Get_SaleID;
    property POIID: WideString read Get_POIID;
    property Connected: WordBool read Get_Connected;
    property Activity: INexoRetailerClientActivity read Get_Activity;
    property ToString: WideString read Get_ToString;
    property SendWithErrors: WordBool read Get_SendWithErrors write Set_SendWithErrors;
    property SendWithWarnings: WordBool read Get_SendWithWarnings write Set_SendWithWarnings;
    property NbErrors: Integer read Get_NbErrors;
    property ContainsErrors: WordBool read Get_ContainsErrors;
    property NbWarnings: Integer read Get_NbWarnings;
    property ContainsWarnings: WordBool read Get_ContainsWarnings;
    property ContainsEvents: WordBool read Get_ContainsEvents;
    property BOM: WordBool read Get_BOM write Set_BOM;
    property LogSerialisationEvents: WordBool read Get_LogSerialisationEvents write Set_LogSerialisationEvents;
  end;

// *********************************************************************//
// DispIntf :    INexoRetailerClientDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {8B1988DB-F6AC-4B87-B874-62C58ED8E95F}
// *********************************************************************//
  INexoRetailerClientDisp = dispinterface
    ['{8B1988DB-F6AC-4B87-B874-62C58ED8E95F}']
    property Settings: INexoRetailerClientSettings readonly dispid 1;
    property Key: WideString readonly dispid 2;
    property KeyClient: WideString readonly dispid 3;
    property KeyServer: WideString readonly dispid 4;
    property ID: Integer readonly dispid 5;
    property Name: WideString dispid 6;
    property Description: WideString readonly dispid 7;
    property SaleID: WideString readonly dispid 8;
    property POIID: WideString readonly dispid 9;
    property Connected: WordBool readonly dispid 10;
    property Activity: INexoRetailerClientActivity readonly dispid 11;
    property ToString: WideString readonly dispid 100;
    function Connect(const Settings: INexoRetailerClientSettings): WordBool; dispid 101;
    procedure Disconnect; dispid 102;
    function SendRequest(const msg: INexoObject; timer: Integer; 
                         const Settings: INexoRetailerClientSettings): INexoRetailerClientHandle; dispid 110;
    function SendRequest_2(const msg: ISaleToPOIRequest; timer: Integer; 
                           const Settings: INexoRetailerClientSettings): INexoRetailerClientHandle; dispid 111;
    function SendRequestSync(const msg: INexoObject; timer: Integer): WordBool; dispid 120;
    function SendRequestSync_2(const msg: ISaleToPOIRequest; timer: Integer): WordBool; dispid 121;
    function SendReply(const msg: INexoObject): WordBool; dispid 200;
    function SendReply_2(const msg: ISaleToPOIResponse): WordBool; dispid 201;
    function SendRawRequest(const XML: WideString; timer: Integer): INexoRetailerClientHandle; dispid 300;
    function SendRawRequestSync(const XML: WideString; timer: Integer): WordBool; dispid 301;
    property SendWithErrors: WordBool dispid 1000;
    property SendWithWarnings: WordBool dispid 1001;
    property NbErrors: Integer readonly dispid 1002;
    property ContainsErrors: WordBool readonly dispid 1003;
    property NbWarnings: Integer readonly dispid 1004;
    property ContainsWarnings: WordBool readonly dispid 1005;
    property ContainsEvents: WordBool readonly dispid 1006;
    property BOM: WordBool dispid 1007;
    property LogSerialisationEvents: WordBool dispid 1008;
    function ErrorsList: WideString; dispid 1100;
    function WarningsList: WideString; dispid 1102;
    function EventsList: WideString; dispid 1103;
  end;

// *********************************************************************//
// Interface :   INexoRetailerClientSettings
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {96259F3B-053E-45AF-B616-079CBC11690A}
// *********************************************************************//
  INexoRetailerClientSettings = interface(IDispatch)
    ['{96259F3B-053E-45AF-B616-079CBC11690A}']
    function Get_IsValid: WordBool; safecall;
    function Get_StreamClientSettings: IStreamClientSettings; safecall;
    procedure _Set_StreamClientSettings(const pRetVal: IStreamClientSettings); safecall;
    function Get_ThreadData: IThreadData; safecall;
    procedure _Set_ThreadData(const pRetVal: IThreadData); safecall;
    function Get_OnSentRequestStatusChanged: IUnknown; safecall;
    procedure _Set_OnSentRequestStatusChanged(const pRetVal: IUnknown); safecall;
    function Get_OnReceivedRequest: IUnknown; safecall;
    procedure _Set_OnReceivedRequest(const pRetVal: IUnknown); safecall;
    function Get_OnReceivedReply: IUnknown; safecall;
    procedure _Set_OnReceivedReply(const pRetVal: IUnknown); safecall;
    function Get_OnReceivedNotification: IUnknown; safecall;
    procedure _Set_OnReceivedNotification(const pRetVal: IUnknown); safecall;
    function Get_OnSend: IUnknown; safecall;
    procedure _Set_OnSend(const pRetVal: IUnknown); safecall;
    function Get_WMNexoMessage: LongWord; safecall;
    procedure Set_WMNexoMessage(pRetVal: LongWord); safecall;
    function Get_Parameters: OleVariant; safecall;
    procedure _Set_Parameters(pRetVal: OleVariant); safecall;
    property IsValid: WordBool read Get_IsValid;
    property StreamClientSettings: IStreamClientSettings read Get_StreamClientSettings write _Set_StreamClientSettings;
    property ThreadData: IThreadData read Get_ThreadData write _Set_ThreadData;
    property OnSentRequestStatusChanged: IUnknown read Get_OnSentRequestStatusChanged write _Set_OnSentRequestStatusChanged;
    property OnReceivedRequest: IUnknown read Get_OnReceivedRequest write _Set_OnReceivedRequest;
    property OnReceivedReply: IUnknown read Get_OnReceivedReply write _Set_OnReceivedReply;
    property OnReceivedNotification: IUnknown read Get_OnReceivedNotification write _Set_OnReceivedNotification;
    property OnSend: IUnknown read Get_OnSend write _Set_OnSend;
    property WMNexoMessage: LongWord read Get_WMNexoMessage write Set_WMNexoMessage;
    property Parameters: OleVariant read Get_Parameters write _Set_Parameters;
  end;

// *********************************************************************//
// DispIntf :    INexoRetailerClientSettingsDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {96259F3B-053E-45AF-B616-079CBC11690A}
// *********************************************************************//
  INexoRetailerClientSettingsDisp = dispinterface
    ['{96259F3B-053E-45AF-B616-079CBC11690A}']
    property IsValid: WordBool readonly dispid 1;
    property StreamClientSettings: IStreamClientSettings dispid 2;
    property ThreadData: IThreadData dispid 3;
    property OnSentRequestStatusChanged: IUnknown dispid 4;
    property OnReceivedRequest: IUnknown dispid 5;
    property OnReceivedReply: IUnknown dispid 6;
    property OnReceivedNotification: IUnknown dispid 7;
    property OnSend: IUnknown dispid 8;
    property WMNexoMessage: LongWord dispid 9;
    property Parameters: OleVariant dispid 10;
  end;

// *********************************************************************//
// Interface :   INexoRetailerClientActivity
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BC3BD01B-95AA-4D4A-B2A1-3AB16231142D}
// *********************************************************************//
  INexoRetailerClientActivity = interface(IDispatch)
    ['{BC3BD01B-95AA-4D4A-B2A1-3AB16231142D}']
  end;

// *********************************************************************//
// DispIntf :    INexoRetailerClientActivityDisp
// Indicateurs : (4416) Dual OleAutomation Dispatchable
// GUID :        {BC3BD01B-95AA-4D4A-B2A1-3AB16231142D}
// *********************************************************************//
  INexoRetailerClientActivityDisp = dispinterface
    ['{BC3BD01B-95AA-4D4A-B2A1-3AB16231142D}']
  end;

// *********************************************************************//
// Interface :   _NexoResources
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {5E42E58C-8755-3E00-B9AD-7DAF43704E4B}
// *********************************************************************//
  _NexoResources = interface(IDispatch)
    ['{5E42E58C-8755-3E00-B9AD-7DAF43704E4B}']
  end;

// *********************************************************************//
// DispIntf :    _NexoResourcesDisp
// Indicateurs : (4432) Hidden Dual OleAutomation Dispatchable
// GUID :        {5E42E58C-8755-3E00-B9AD-7DAF43704E4B}
// *********************************************************************//
  _NexoResourcesDisp = dispinterface
    ['{5E42E58C-8755-3E00-B9AD-7DAF43704E4B}']
  end;

// *********************************************************************//
// La classe CoNexoActivity fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoActivity exposée
// par la CoClasse NexoActivity. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoActivity = class
    class function Create: INexoActivity;
    class function CreateRemote(const MachineName: string): INexoActivity;
  end;

// *********************************************************************//
// La classe CoNexoDictionaryOfMessages fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoDictionaryOfMessages. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDictionaryOfMessages = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoListOfEndPoints fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoListOfEndPoints. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoListOfEndPoints = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoDictionaryOfEndPoints fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoDictionaryOfEndPoints. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDictionaryOfEndPoints = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoListOfSessions fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoListOfSessions. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoListOfSessions = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoDictionaryOfSessions fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoDictionaryOfSessions. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDictionaryOfSessions = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoListOfNexoKeys fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoListOfNexoKeys. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoListOfNexoKeys = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoDictionaryOfNexoKeys fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoDictionaryOfNexoKeys. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDictionaryOfNexoKeys = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoListOfAnyMessages fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoListOfAnyMessages. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoListOfAnyMessages = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoDictionaryOfAnyMessages fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoDictionaryOfAnyMessages. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDictionaryOfAnyMessages = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoAcceptedCommands fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoAcceptedCommands. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoAcceptedCommands = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoItem fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoItem exposée
// par la CoClasse NexoItem. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoItem = class
    class function Create: INexoItem;
    class function CreateRemote(const MachineName: string): INexoItem;
  end;

// *********************************************************************//
// La classe CoNexoBalanceInquiry fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoBalanceInquiry exposée
// par la CoClasse NexoBalanceInquiry. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoBalanceInquiry = class
    class function Create: INexoBalanceInquiry;
    class function CreateRemote(const MachineName: string): INexoBalanceInquiry;
  end;

// *********************************************************************//
// La classe CoNexoBatch fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoBatch exposée
// par la CoClasse NexoBatch. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoBatch = class
    class function Create: INexoBatch;
    class function CreateRemote(const MachineName: string): INexoBatch;
  end;

// *********************************************************************//
// La classe CoNexoCardAcquisition fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCardAcquisition exposée
// par la CoClasse NexoCardAcquisition. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCardAcquisition = class
    class function Create: INexoCardAcquisition;
    class function CreateRemote(const MachineName: string): INexoCardAcquisition;
  end;

// *********************************************************************//
// La classe CoNexoCardReaderInit fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCardReaderInit exposée
// par la CoClasse NexoCardReaderInit. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCardReaderInit = class
    class function Create: INexoCardReaderInit;
    class function CreateRemote(const MachineName: string): INexoCardReaderInit;
  end;

// *********************************************************************//
// La classe CoNexoCardReaderAPDU fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCardReaderAPDU exposée
// par la CoClasse NexoCardReaderAPDU. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCardReaderAPDU = class
    class function Create: INexoCardReaderAPDU;
    class function CreateRemote(const MachineName: string): INexoCardReaderAPDU;
  end;

// *********************************************************************//
// La classe CoNexoCardReaderPowerOFF fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCardReaderPowerOFF exposée
// par la CoClasse NexoCardReaderPowerOFF. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCardReaderPowerOFF = class
    class function Create: INexoCardReaderPowerOFF;
    class function CreateRemote(const MachineName: string): INexoCardReaderPowerOFF;
  end;

// *********************************************************************//
// La classe CoNexoDeviceDisplay fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDeviceDisplay exposée
// par la CoClasse NexoDeviceDisplay. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDeviceDisplay = class
    class function Create: INexoDeviceDisplay;
    class function CreateRemote(const MachineName: string): INexoDeviceDisplay;
  end;

// *********************************************************************//
// La classe CoNexoDeviceInputUpdate fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDeviceInputUpdate exposée
// par la CoClasse NexoDeviceInputUpdate. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDeviceInputUpdate = class
    class function Create: INexoDeviceInputUpdate;
    class function CreateRemote(const MachineName: string): INexoDeviceInputUpdate;
  end;

// *********************************************************************//
// La classe CoNexoDeviceSound fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDeviceSound exposée
// par la CoClasse NexoDeviceSound. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDeviceSound = class
    class function Create: INexoDeviceSound;
    class function CreateRemote(const MachineName: string): INexoDeviceSound;
  end;

// *********************************************************************//
// La classe CoNexoEnableService fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoEnableService exposée
// par la CoClasse NexoEnableService. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoEnableService = class
    class function Create: INexoEnableService;
    class function CreateRemote(const MachineName: string): INexoEnableService;
  end;

// *********************************************************************//
// La classe CoNexoGetTotals fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoGetTotals exposée
// par la CoClasse NexoGetTotals. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoGetTotals = class
    class function Create: INexoGetTotals;
    class function CreateRemote(const MachineName: string): INexoGetTotals;
  end;

// *********************************************************************//
// La classe CoNexoLoyalty fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoLoyalty exposée
// par la CoClasse NexoLoyalty. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoLoyalty = class
    class function Create: INexoLoyalty;
    class function CreateRemote(const MachineName: string): INexoLoyalty;
  end;

// *********************************************************************//
// La classe CoNexoPIN fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoPIN exposée
// par la CoClasse NexoPIN. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoPIN = class
    class function Create: INexoPIN;
    class function CreateRemote(const MachineName: string): INexoPIN;
  end;

// *********************************************************************//
// La classe CoNexoReconciliation fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoReconciliation exposée
// par la CoClasse NexoReconciliation. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoReconciliation = class
    class function Create: INexoReconciliation;
    class function CreateRemote(const MachineName: string): INexoReconciliation;
  end;

// *********************************************************************//
// La classe CoNexoStoredValue fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoStoredValue exposée
// par la CoClasse NexoStoredValue. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoStoredValue = class
    class function Create: INexoStoredValue;
    class function CreateRemote(const MachineName: string): INexoStoredValue;
  end;

// *********************************************************************//
// La classe CoNexoTransmit fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoTransmit exposée
// par la CoClasse NexoTransmit. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoTransmit = class
    class function Create: INexoTransmit;
    class function CreateRemote(const MachineName: string): INexoTransmit;
  end;

// *********************************************************************//
// La classe CoNexoAbort fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoAbort exposée
// par la CoClasse NexoAbort. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoAbort = class
    class function Create: INexoAbort;
    class function CreateRemote(const MachineName: string): INexoAbort;
  end;

// *********************************************************************//
// La classe CoNexoDiagnosis fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDiagnosis exposée
// par la CoClasse NexoDiagnosis. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDiagnosis = class
    class function Create: INexoDiagnosis;
    class function CreateRemote(const MachineName: string): INexoDiagnosis;
  end;

// *********************************************************************//
// La classe CoNexoEvent fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoEvent exposée
// par la CoClasse NexoEvent. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoEvent = class
    class function Create: INexoEvent;
    class function CreateRemote(const MachineName: string): INexoEvent;
  end;

// *********************************************************************//
// La classe CoNexoTransactionStatus fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoTransactionStatus exposée
// par la CoClasse NexoTransactionStatus. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoTransactionStatus = class
    class function Create: INexoTransactionStatus;
    class function CreateRemote(const MachineName: string): INexoTransactionStatus;
  end;

// *********************************************************************//
// La classe CoNexoDeviceInput fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDeviceInput exposée
// par la CoClasse NexoDeviceInput. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDeviceInput = class
    class function Create: INexoDeviceInput;
    class function CreateRemote(const MachineName: string): INexoDeviceInput;
  end;

// *********************************************************************//
// La classe CoNexoDevicePrint fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDevicePrint exposée
// par la CoClasse NexoDevicePrint. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDevicePrint = class
    class function Create: INexoDevicePrint;
    class function CreateRemote(const MachineName: string): INexoDevicePrint;
  end;

// *********************************************************************//
// La classe CoNexoLogin fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoLogin exposée
// par la CoClasse NexoLogin. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoLogin = class
    class function Create: INexoLogin;
    class function CreateRemote(const MachineName: string): INexoLogin;
  end;

// *********************************************************************//
// La classe CoNexoLogout fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoLogout exposée
// par la CoClasse NexoLogout. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoLogout = class
    class function Create: INexoLogout;
    class function CreateRemote(const MachineName: string): INexoLogout;
  end;

// *********************************************************************//
// La classe CoNexoPayment fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoFinancial exposée
// par la CoClasse NexoPayment. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoPayment = class
    class function Create: INexoFinancial;
    class function CreateRemote(const MachineName: string): INexoFinancial;
  end;

// *********************************************************************//
// La classe CoNexoRefund fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoFinancial exposée
// par la CoClasse NexoRefund. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRefund = class
    class function Create: INexoFinancial;
    class function CreateRemote(const MachineName: string): INexoFinancial;
  end;

// *********************************************************************//
// La classe CoNexoAdmin fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoAdmin exposée
// par la CoClasse NexoAdmin. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoAdmin = class
    class function Create: INexoAdmin;
    class function CreateRemote(const MachineName: string): INexoAdmin;
  end;

// *********************************************************************//
// La classe CoNexoObject fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoObject exposée
// par la CoClasse NexoObject. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoObject = class
    class function Create: INexoObject;
    class function CreateRemote(const MachineName: string): INexoObject;
  end;

// *********************************************************************//
// La classe CoNexoObjectToProcess fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoObjectToProcess exposée
// par la CoClasse NexoObjectToProcess. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoObjectToProcess = class
    class function Create: INexoObjectToProcess;
    class function CreateRemote(const MachineName: string): INexoObjectToProcess;
  end;

// *********************************************************************//
// La classe CoQueueOfNexoObjectToProcess fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse QueueOfNexoObjectToProcess. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoQueueOfNexoObjectToProcess = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoStackOfNexoObjectToProcess fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse StackOfNexoObjectToProcess. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoStackOfNexoObjectToProcess = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoNexoReversal fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoReversal exposée
// par la CoClasse NexoReversal. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoReversal = class
    class function Create: INexoReversal;
    class function CreateRemote(const MachineName: string): INexoReversal;
  end;

// *********************************************************************//
// La classe CoNexoTextString fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoTextString exposée
// par la CoClasse NexoTextString. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoTextString = class
    class function Create: INexoTextString;
    class function CreateRemote(const MachineName: string): INexoTextString;
  end;

// *********************************************************************//
// La classe CoNexoBoolean fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoBooleanType exposée
// par la CoClasse NexoBoolean. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoBoolean = class
    class function Create: INexoBooleanType;
    class function CreateRemote(const MachineName: string): INexoBooleanType;
  end;

// *********************************************************************//
// La classe CoNexoInteger fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoInteger exposée
// par la CoClasse NexoInteger. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoInteger = class
    class function Create: INexoInteger;
    class function CreateRemote(const MachineName: string): INexoInteger;
  end;

// *********************************************************************//
// La classe CoNexoDecimal fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDecimal exposée
// par la CoClasse NexoDecimal. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDecimal = class
    class function Create: INexoDecimal;
    class function CreateRemote(const MachineName: string): INexoDecimal;
  end;

// *********************************************************************//
// La classe CoNexoSimpleAmount fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDecimal exposée
// par la CoClasse NexoSimpleAmount. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoSimpleAmount = class
    class function Create: INexoDecimal;
    class function CreateRemote(const MachineName: string): INexoDecimal;
  end;

// *********************************************************************//
// La classe CoNexoLabel fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoLabel exposée
// par la CoClasse NexoLabel. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoLabel = class
    class function Create: INexoLabel;
    class function CreateRemote(const MachineName: string): INexoLabel;
  end;

// *********************************************************************//
// La classe CoNexoEnumeration fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoEnumeration exposée
// par la CoClasse NexoEnumeration. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoEnumeration = class
    class function Create: INexoEnumeration;
    class function CreateRemote(const MachineName: string): INexoEnumeration;
  end;

// *********************************************************************//
// La classe CoNexoCluster fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCluster exposée
// par la CoClasse NexoCluster. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCluster = class
    class function Create: INexoCluster;
    class function CreateRemote(const MachineName: string): INexoCluster;
  end;

// *********************************************************************//
// La classe CoNexoLengthDrivenTextString fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoLengthDrivenTextString exposée
// par la CoClasse NexoLengthDrivenTextString. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoLengthDrivenTextString = class
    class function Create: INexoLengthDrivenTextString;
    class function CreateRemote(const MachineName: string): INexoLengthDrivenTextString;
  end;

// *********************************************************************//
// La classe CoNexoDigitString fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoDigitString exposée
// par la CoClasse NexoDigitString. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDigitString = class
    class function Create: INexoDigitString;
    class function CreateRemote(const MachineName: string): INexoDigitString;
  end;

// *********************************************************************//
// La classe CoNexoISOCurrency3A fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoISOData exposée
// par la CoClasse NexoISOCurrency3A. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoISOCurrency3A = class
    class function Create: INexoISOData;
    class function CreateRemote(const MachineName: string): INexoISOData;
  end;

// *********************************************************************//
// La classe CoNexoISOCountry3A fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoISOData exposée
// par la CoClasse NexoISOCountry3A. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoISOCountry3A = class
    class function Create: INexoISOData;
    class function CreateRemote(const MachineName: string): INexoISOData;
  end;

// *********************************************************************//
// La classe CoNexoISOLanguage2A fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoISOData exposée
// par la CoClasse NexoISOLanguage2A. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoISOLanguage2A = class
    class function Create: INexoISOData;
    class function CreateRemote(const MachineName: string): INexoISOData;
  end;

// *********************************************************************//
// La classe CoNexoISODateTime fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoISODateTime exposée
// par la CoClasse NexoISODateTime. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoISODateTime = class
    class function Create: INexoISODateTime;
    class function CreateRemote(const MachineName: string): INexoISODateTime;
  end;

// *********************************************************************//
// La classe CoNexoISODate fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoISODate exposée
// par la CoClasse NexoISODate. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoISODate = class
    class function Create: INexoISODate;
    class function CreateRemote(const MachineName: string): INexoISODate;
  end;

// *********************************************************************//
// La classe CoNexoByteSequence fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoNonStringType exposée
// par la CoClasse NexoByteSequence. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoByteSequence = class
    class function Create: INexoNonStringType;
    class function CreateRemote(const MachineName: string): INexoNonStringType;
  end;

// *********************************************************************//
// La classe CoNexoCurrency fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCurrency exposée
// par la CoClasse NexoCurrency. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCurrency = class
    class function Create: INexoCurrency;
    class function CreateRemote(const MachineName: string): INexoCurrency;
  end;

// *********************************************************************//
// La classe CoNexoCurrencyEUR fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCurrency exposée
// par la CoClasse NexoCurrencyEUR. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCurrencyEUR = class
    class function Create: INexoCurrency;
    class function CreateRemote(const MachineName: string): INexoCurrency;
  end;

// *********************************************************************//
// La classe CoNexoCurrencyUSD fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCurrency exposée
// par la CoClasse NexoCurrencyUSD. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCurrencyUSD = class
    class function Create: INexoCurrency;
    class function CreateRemote(const MachineName: string): INexoCurrency;
  end;

// *********************************************************************//
// La classe CoNexoCurrencyGBP fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCurrency exposée
// par la CoClasse NexoCurrencyGBP. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCurrencyGBP = class
    class function Create: INexoCurrency;
    class function CreateRemote(const MachineName: string): INexoCurrency;
  end;

// *********************************************************************//
// La classe CoNexoCurrencyCHF fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoCurrency exposée
// par la CoClasse NexoCurrencyCHF. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCurrencyCHF = class
    class function Create: INexoCurrency;
    class function CreateRemote(const MachineName: string): INexoCurrency;
  end;

// *********************************************************************//
// La classe CoNexoCurrencyAmount fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoAmount exposée
// par la CoClasse NexoCurrencyAmount. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCurrencyAmount = class
    class function Create: INexoAmount;
    class function CreateRemote(const MachineName: string): INexoAmount;
  end;

// *********************************************************************//
// La classe CoNexoSupportedProtocolVersions fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnumerable exposée
// par la CoClasse NexoSupportedProtocolVersions. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoSupportedProtocolVersions = class
    class function Create: IEnumerable;
    class function CreateRemote(const MachineName: string): IEnumerable;
  end;

// *********************************************************************//
// La classe CoAbortRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAbortRequestType exposée
// par la CoClasse AbortRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAbortRequestType = class
    class function Create: IAbortRequestType;
    class function CreateRemote(const MachineName: string): IAbortRequestType;
  end;

// *********************************************************************//
// La classe CoMessageReferenceType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IMessageReferenceType exposée
// par la CoClasse MessageReferenceType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoMessageReferenceType = class
    class function Create: IMessageReferenceType;
    class function CreateRemote(const MachineName: string): IMessageReferenceType;
  end;

// *********************************************************************//
// La classe CoDisplayResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IDisplayResponseType exposée
// par la CoClasse DisplayResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoDisplayResponseType = class
    class function Create: IDisplayResponseType;
    class function CreateRemote(const MachineName: string): IDisplayResponseType;
  end;

// *********************************************************************//
// La classe CoOutputResultType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IOutputResultType exposée
// par la CoClasse OutputResultType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoOutputResultType = class
    class function Create: IOutputResultType;
    class function CreateRemote(const MachineName: string): IOutputResultType;
  end;

// *********************************************************************//
// La classe CoResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IResponseType exposée
// par la CoClasse ResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoResponseType = class
    class function Create: IResponseType;
    class function CreateRemote(const MachineName: string): IResponseType;
  end;

// *********************************************************************//
// La classe CoDisplayRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IDisplayRequestType exposée
// par la CoClasse DisplayRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoDisplayRequestType = class
    class function Create: IDisplayRequestType;
    class function CreateRemote(const MachineName: string): IDisplayRequestType;
  end;

// *********************************************************************//
// La classe CoDisplayOutputType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IDisplayOutputType exposée
// par la CoClasse DisplayOutputType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoDisplayOutputType = class
    class function Create: IDisplayOutputType;
    class function CreateRemote(const MachineName: string): IDisplayOutputType;
  end;

// *********************************************************************//
// La classe CoOutputContentType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IOutputContentType exposée
// par la CoClasse OutputContentType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoOutputContentType = class
    class function Create: IOutputContentType;
    class function CreateRemote(const MachineName: string): IOutputContentType;
  end;

// *********************************************************************//
// La classe CoPredefinedContentType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPredefinedContentType exposée
// par la CoClasse PredefinedContentType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPredefinedContentType = class
    class function Create: IPredefinedContentType;
    class function CreateRemote(const MachineName: string): IPredefinedContentType;
  end;

// *********************************************************************//
// La classe CoOutputTextType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IOutputTextType exposée
// par la CoClasse OutputTextType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoOutputTextType = class
    class function Create: IOutputTextType;
    class function CreateRemote(const MachineName: string): IOutputTextType;
  end;

// *********************************************************************//
// La classe CoOutputBarcodeType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IOutputBarcodeType exposée
// par la CoClasse OutputBarcodeType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoOutputBarcodeType = class
    class function Create: IOutputBarcodeType;
    class function CreateRemote(const MachineName: string): IOutputBarcodeType;
  end;

// *********************************************************************//
// La classe CoMenuEntryType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IMenuEntryType exposée
// par la CoClasse MenuEntryType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoMenuEntryType = class
    class function Create: IMenuEntryType;
    class function CreateRemote(const MachineName: string): IMenuEntryType;
  end;

// *********************************************************************//
// La classe CoAdminRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAdminRequestType exposée
// par la CoClasse AdminRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAdminRequestType = class
    class function Create: IAdminRequestType;
    class function CreateRemote(const MachineName: string): IAdminRequestType;
  end;

// *********************************************************************//
// La classe CoAdminResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAdminResponseType exposée
// par la CoClasse AdminResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAdminResponseType = class
    class function Create: IAdminResponseType;
    class function CreateRemote(const MachineName: string): IAdminResponseType;
  end;

// *********************************************************************//
// La classe CoAllowedProductType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAllowedProductType exposée
// par la CoClasse AllowedProductType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAllowedProductType = class
    class function Create: IAllowedProductType;
    class function CreateRemote(const MachineName: string): IAllowedProductType;
  end;

// *********************************************************************//
// La classe CoAmountsReqType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAmountsReqType exposée
// par la CoClasse AmountsReqType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAmountsReqType = class
    class function Create: IAmountsReqType;
    class function CreateRemote(const MachineName: string): IAmountsReqType;
  end;

// *********************************************************************//
// La classe CoAmountsRespType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAmountsRespType exposée
// par la CoClasse AmountsRespType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAmountsRespType = class
    class function Create: IAmountsRespType;
    class function CreateRemote(const MachineName: string): IAmountsRespType;
  end;

// *********************************************************************//
// La classe CoAreaSizeType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAreaSizeType exposée
// par la CoClasse AreaSizeType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAreaSizeType = class
    class function Create: IAreaSizeType;
    class function CreateRemote(const MachineName: string): IAreaSizeType;
  end;

// *********************************************************************//
// La classe CoBalanceInquiryRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IBalanceInquiryRequestType exposée
// par la CoClasse BalanceInquiryRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoBalanceInquiryRequestType = class
    class function Create: IBalanceInquiryRequestType;
    class function CreateRemote(const MachineName: string): IBalanceInquiryRequestType;
  end;

// *********************************************************************//
// La classe CoPaymentAccountReqType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentAccountReqType exposée
// par la CoClasse PaymentAccountReqType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentAccountReqType = class
    class function Create: IPaymentAccountReqType;
    class function CreateRemote(const MachineName: string): IPaymentAccountReqType;
  end;

// *********************************************************************//
// La classe CoTransactionIdentificationType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransactionIdentificationType exposée
// par la CoClasse TransactionIdentificationType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransactionIdentificationType = class
    class function Create: ITransactionIdentificationType;
    class function CreateRemote(const MachineName: string): ITransactionIdentificationType;
  end;

// *********************************************************************//
// La classe CoPaymentInstrumentDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentInstrumentDataType exposée
// par la CoClasse PaymentInstrumentDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentInstrumentDataType = class
    class function Create: IPaymentInstrumentDataType;
    class function CreateRemote(const MachineName: string): IPaymentInstrumentDataType;
  end;

// *********************************************************************//
// La classe CoCardDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardDataType exposée
// par la CoClasse CardDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardDataType = class
    class function Create: ICardDataType;
    class function CreateRemote(const MachineName: string): ICardDataType;
  end;

// *********************************************************************//
// La classe CoContentInformationType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IContentInformationType exposée
// par la CoClasse ContentInformationType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoContentInformationType = class
    class function Create: IContentInformationType;
    class function CreateRemote(const MachineName: string): IContentInformationType;
  end;

// *********************************************************************//
// La classe CoAuthenticatedDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAuthenticatedDataType exposée
// par la CoClasse AuthenticatedDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAuthenticatedDataType = class
    class function Create: IAuthenticatedDataType;
    class function CreateRemote(const MachineName: string): IAuthenticatedDataType;
  end;

// *********************************************************************//
// La classe CoKEKType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IKEKType exposée
// par la CoClasse KEKType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoKEKType = class
    class function Create: IKEKType;
    class function CreateRemote(const MachineName: string): IKEKType;
  end;

// *********************************************************************//
// La classe CoKEKIdentifierType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IKEKIdentifierType exposée
// par la CoClasse KEKIdentifierType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoKEKIdentifierType = class
    class function Create: IKEKIdentifierType;
    class function CreateRemote(const MachineName: string): IKEKIdentifierType;
  end;

// *********************************************************************//
// La classe CoAlgorithmIdentifier fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAlgorithmIdentifier exposée
// par la CoClasse AlgorithmIdentifier. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAlgorithmIdentifier = class
    class function Create: IAlgorithmIdentifier;
    class function CreateRemote(const MachineName: string): IAlgorithmIdentifier;
  end;

// *********************************************************************//
// La classe CoParameterType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IParameterType exposée
// par la CoClasse ParameterType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoParameterType = class
    class function Create: IParameterType;
    class function CreateRemote(const MachineName: string): IParameterType;
  end;

// *********************************************************************//
// La classe CoKeyTransportType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IKeyTransportType exposée
// par la CoClasse KeyTransportType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoKeyTransportType = class
    class function Create: IKeyTransportType;
    class function CreateRemote(const MachineName: string): IKeyTransportType;
  end;

// *********************************************************************//
// La classe CoRecipientIdentifierType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IRecipientIdentifierType exposée
// par la CoClasse RecipientIdentifierType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoRecipientIdentifierType = class
    class function Create: IRecipientIdentifierType;
    class function CreateRemote(const MachineName: string): IRecipientIdentifierType;
  end;

// *********************************************************************//
// La classe CoIssuerAndSerialNumberType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IIssuerAndSerialNumberType exposée
// par la CoClasse IssuerAndSerialNumberType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoIssuerAndSerialNumberType = class
    class function Create: IIssuerAndSerialNumberType;
    class function CreateRemote(const MachineName: string): IIssuerAndSerialNumberType;
  end;

// *********************************************************************//
// La classe CoRelativeDistinguishedNameType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IRelativeDistinguishedNameType exposée
// par la CoClasse RelativeDistinguishedNameType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoRelativeDistinguishedNameType = class
    class function Create: IRelativeDistinguishedNameType;
    class function CreateRemote(const MachineName: string): IRelativeDistinguishedNameType;
  end;

// *********************************************************************//
// La classe CoEncapsulatedContentType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEncapsulatedContentType exposée
// par la CoClasse EncapsulatedContentType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoEncapsulatedContentType = class
    class function Create: IEncapsulatedContentType;
    class function CreateRemote(const MachineName: string): IEncapsulatedContentType;
  end;

// *********************************************************************//
// La classe CoDigestedDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IDigestedDataType exposée
// par la CoClasse DigestedDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoDigestedDataType = class
    class function Create: IDigestedDataType;
    class function CreateRemote(const MachineName: string): IDigestedDataType;
  end;

// *********************************************************************//
// La classe CoEnvelopedDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnvelopedDataType exposée
// par la CoClasse EnvelopedDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoEnvelopedDataType = class
    class function Create: IEnvelopedDataType;
    class function CreateRemote(const MachineName: string): IEnvelopedDataType;
  end;

// *********************************************************************//
// La classe CoEncryptedContentType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEncryptedContentType exposée
// par la CoClasse EncryptedContentType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoEncryptedContentType = class
    class function Create: IEncryptedContentType;
    class function CreateRemote(const MachineName: string): IEncryptedContentType;
  end;

// *********************************************************************//
// La classe CoNamedKeyEncryptedDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INamedKeyEncryptedDataType exposée
// par la CoClasse NamedKeyEncryptedDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNamedKeyEncryptedDataType = class
    class function Create: INamedKeyEncryptedDataType;
    class function CreateRemote(const MachineName: string): INamedKeyEncryptedDataType;
  end;

// *********************************************************************//
// La classe CoSignedDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISignedDataType exposée
// par la CoClasse SignedDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSignedDataType = class
    class function Create: ISignedDataType;
    class function CreateRemote(const MachineName: string): ISignedDataType;
  end;

// *********************************************************************//
// La classe CoSignerType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISignerType exposée
// par la CoClasse SignerType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSignerType = class
    class function Create: ISignerType;
    class function CreateRemote(const MachineName: string): ISignerType;
  end;

// *********************************************************************//
// La classe CoSignerIdentifierType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISignerIdentifierType exposée
// par la CoClasse SignerIdentifierType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSignerIdentifierType = class
    class function Create: ISignerIdentifierType;
    class function CreateRemote(const MachineName: string): ISignerIdentifierType;
  end;

// *********************************************************************//
// La classe CoSensitiveCardDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISensitiveCardDataType exposée
// par la CoClasse SensitiveCardDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSensitiveCardDataType = class
    class function Create: ISensitiveCardDataType;
    class function CreateRemote(const MachineName: string): ISensitiveCardDataType;
  end;

// *********************************************************************//
// La classe CoTrackDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITrackDataType exposée
// par la CoClasse TrackDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTrackDataType = class
    class function Create: ITrackDataType;
    class function CreateRemote(const MachineName: string): ITrackDataType;
  end;

// *********************************************************************//
// La classe CoPaymentTokenType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentTokenType exposée
// par la CoClasse PaymentTokenType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentTokenType = class
    class function Create: IPaymentTokenType;
    class function CreateRemote(const MachineName: string): IPaymentTokenType;
  end;

// *********************************************************************//
// La classe CoCustomerOrderType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICustomerOrderType exposée
// par la CoClasse CustomerOrderType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCustomerOrderType = class
    class function Create: ICustomerOrderType;
    class function CreateRemote(const MachineName: string): ICustomerOrderType;
  end;

// *********************************************************************//
// La classe CoCheckDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICheckDataType exposée
// par la CoClasse CheckDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCheckDataType = class
    class function Create: ICheckDataType;
    class function CreateRemote(const MachineName: string): ICheckDataType;
  end;

// *********************************************************************//
// La classe CoMobileDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IMobileDataType exposée
// par la CoClasse MobileDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoMobileDataType = class
    class function Create: IMobileDataType;
    class function CreateRemote(const MachineName: string): IMobileDataType;
  end;

// *********************************************************************//
// La classe CoGeolocationType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IGeolocationType exposée
// par la CoClasse GeolocationType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoGeolocationType = class
    class function Create: IGeolocationType;
    class function CreateRemote(const MachineName: string): IGeolocationType;
  end;

// *********************************************************************//
// La classe CoGeographicCoordinatesType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IGeographicCoordinatesType exposée
// par la CoClasse GeographicCoordinatesType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoGeographicCoordinatesType = class
    class function Create: IGeographicCoordinatesType;
    class function CreateRemote(const MachineName: string): IGeographicCoordinatesType;
  end;

// *********************************************************************//
// La classe CoUTMCoordinatesType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IUTMCoordinatesType exposée
// par la CoClasse UTMCoordinatesType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoUTMCoordinatesType = class
    class function Create: IUTMCoordinatesType;
    class function CreateRemote(const MachineName: string): IUTMCoordinatesType;
  end;

// *********************************************************************//
// La classe CoSensitiveMobileDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISensitiveMobileDataType exposée
// par la CoClasse SensitiveMobileDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSensitiveMobileDataType = class
    class function Create: ISensitiveMobileDataType;
    class function CreateRemote(const MachineName: string): ISensitiveMobileDataType;
  end;

// *********************************************************************//
// La classe CoLoyaltyAccountReqType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyAccountReqType exposée
// par la CoClasse LoyaltyAccountReqType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyAccountReqType = class
    class function Create: ILoyaltyAccountReqType;
    class function CreateRemote(const MachineName: string): ILoyaltyAccountReqType;
  end;

// *********************************************************************//
// La classe CoLoyaltyAccountIDType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyAccountIDType exposée
// par la CoClasse LoyaltyAccountIDType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyAccountIDType = class
    class function Create: ILoyaltyAccountIDType;
    class function CreateRemote(const MachineName: string): ILoyaltyAccountIDType;
  end;

// *********************************************************************//
// La classe CoBalanceInquiryResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IBalanceInquiryResponseType exposée
// par la CoClasse BalanceInquiryResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoBalanceInquiryResponseType = class
    class function Create: IBalanceInquiryResponseType;
    class function CreateRemote(const MachineName: string): IBalanceInquiryResponseType;
  end;

// *********************************************************************//
// La classe CoPaymentAccountStatusType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentAccountStatusType exposée
// par la CoClasse PaymentAccountStatusType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentAccountStatusType = class
    class function Create: IPaymentAccountStatusType;
    class function CreateRemote(const MachineName: string): IPaymentAccountStatusType;
  end;

// *********************************************************************//
// La classe CoPaymentAcquirerDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentAcquirerDataType exposée
// par la CoClasse PaymentAcquirerDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentAcquirerDataType = class
    class function Create: IPaymentAcquirerDataType;
    class function CreateRemote(const MachineName: string): IPaymentAcquirerDataType;
  end;

// *********************************************************************//
// La classe CoLoyaltyAccountStatusType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyAccountStatusType exposée
// par la CoClasse LoyaltyAccountStatusType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyAccountStatusType = class
    class function Create: ILoyaltyAccountStatusType;
    class function CreateRemote(const MachineName: string): ILoyaltyAccountStatusType;
  end;

// *********************************************************************//
// La classe CoLoyaltyAccountType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyAccountType exposée
// par la CoClasse LoyaltyAccountType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyAccountType = class
    class function Create: ILoyaltyAccountType;
    class function CreateRemote(const MachineName: string): ILoyaltyAccountType;
  end;

// *********************************************************************//
// La classe CoBatchRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IBatchRequestType exposée
// par la CoClasse BatchRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoBatchRequestType = class
    class function Create: IBatchRequestType;
    class function CreateRemote(const MachineName: string): IBatchRequestType;
  end;

// *********************************************************************//
// La classe CoTransactionToPerformType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransactionToPerformType exposée
// par la CoClasse TransactionToPerformType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransactionToPerformType = class
    class function Create: ITransactionToPerformType;
    class function CreateRemote(const MachineName: string): ITransactionToPerformType;
  end;

// *********************************************************************//
// La classe CoLoyaltyRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyRequestType exposée
// par la CoClasse LoyaltyRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyRequestType = class
    class function Create: ILoyaltyRequestType;
    class function CreateRemote(const MachineName: string): ILoyaltyRequestType;
  end;

// *********************************************************************//
// La classe CoSaleDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleDataType exposée
// par la CoClasse SaleDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleDataType = class
    class function Create: ISaleDataType;
    class function CreateRemote(const MachineName: string): ISaleDataType;
  end;

// *********************************************************************//
// La classe CoSaleTerminalDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleTerminalDataType exposée
// par la CoClasse SaleTerminalDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleTerminalDataType = class
    class function Create: ISaleTerminalDataType;
    class function CreateRemote(const MachineName: string): ISaleTerminalDataType;
  end;

// *********************************************************************//
// La classe CoSaleProfileType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleProfileType exposée
// par la CoClasse SaleProfileType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleProfileType = class
    class function Create: ISaleProfileType;
    class function CreateRemote(const MachineName: string): ISaleProfileType;
  end;

// *********************************************************************//
// La classe CoSponsoredMerchantType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISponsoredMerchantType exposée
// par la CoClasse SponsoredMerchantType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSponsoredMerchantType = class
    class function Create: ISponsoredMerchantType;
    class function CreateRemote(const MachineName: string): ISponsoredMerchantType;
  end;

// *********************************************************************//
// La classe CoSaleToIssuerDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleToIssuerDataType exposée
// par la CoClasse SaleToIssuerDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleToIssuerDataType = class
    class function Create: ISaleToIssuerDataType;
    class function CreateRemote(const MachineName: string): ISaleToIssuerDataType;
  end;

// *********************************************************************//
// La classe CoLoyaltyTransactionType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyTransactionType exposée
// par la CoClasse LoyaltyTransactionType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyTransactionType = class
    class function Create: ILoyaltyTransactionType;
    class function CreateRemote(const MachineName: string): ILoyaltyTransactionType;
  end;

// *********************************************************************//
// La classe CoOriginalPOITransactionType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IOriginalPOITransactionType exposée
// par la CoClasse OriginalPOITransactionType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoOriginalPOITransactionType = class
    class function Create: IOriginalPOITransactionType;
    class function CreateRemote(const MachineName: string): IOriginalPOITransactionType;
  end;

// *********************************************************************//
// La classe CoTransactionConditionsType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransactionConditionsType exposée
// par la CoClasse TransactionConditionsType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransactionConditionsType = class
    class function Create: ITransactionConditionsType;
    class function CreateRemote(const MachineName: string): ITransactionConditionsType;
  end;

// *********************************************************************//
// La classe CoSaleItemType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleItemType exposée
// par la CoClasse SaleItemType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleItemType = class
    class function Create: ISaleItemType;
    class function CreateRemote(const MachineName: string): ISaleItemType;
  end;

// *********************************************************************//
// La classe CoLoyaltyDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyDataType exposée
// par la CoClasse LoyaltyDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyDataType = class
    class function Create: ILoyaltyDataType;
    class function CreateRemote(const MachineName: string): ILoyaltyDataType;
  end;

// *********************************************************************//
// La classe CoLoyaltyAmountType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyAmountType exposée
// par la CoClasse LoyaltyAmountType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyAmountType = class
    class function Create: ILoyaltyAmountType;
    class function CreateRemote(const MachineName: string): ILoyaltyAmountType;
  end;

// *********************************************************************//
// La classe CoPaymentRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentRequestType exposée
// par la CoClasse PaymentRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentRequestType = class
    class function Create: IPaymentRequestType;
    class function CreateRemote(const MachineName: string): IPaymentRequestType;
  end;

// *********************************************************************//
// La classe CoPaymentTransactionType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentTransactionType exposée
// par la CoClasse PaymentTransactionType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentTransactionType = class
    class function Create: IPaymentTransactionType;
    class function CreateRemote(const MachineName: string): IPaymentTransactionType;
  end;

// *********************************************************************//
// La classe CoPaymentDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentDataType exposée
// par la CoClasse PaymentDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentDataType = class
    class function Create: IPaymentDataType;
    class function CreateRemote(const MachineName: string): IPaymentDataType;
  end;

// *********************************************************************//
// La classe CoInstalmentType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IInstalmentType exposée
// par la CoClasse InstalmentType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoInstalmentType = class
    class function Create: IInstalmentType;
    class function CreateRemote(const MachineName: string): IInstalmentType;
  end;

// *********************************************************************//
// La classe CoReversalRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IReversalRequestType exposée
// par la CoClasse ReversalRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoReversalRequestType = class
    class function Create: IReversalRequestType;
    class function CreateRemote(const MachineName: string): IReversalRequestType;
  end;

// *********************************************************************//
// La classe CoBatchResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IBatchResponseType exposée
// par la CoClasse BatchResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoBatchResponseType = class
    class function Create: IBatchResponseType;
    class function CreateRemote(const MachineName: string): IBatchResponseType;
  end;

// *********************************************************************//
// La classe CoPerformedTransactionType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPerformedTransactionType exposée
// par la CoClasse PerformedTransactionType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPerformedTransactionType = class
    class function Create: IPerformedTransactionType;
    class function CreateRemote(const MachineName: string): IPerformedTransactionType;
  end;

// *********************************************************************//
// La classe CoPOIDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPOIDataType exposée
// par la CoClasse POIDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPOIDataType = class
    class function Create: IPOIDataType;
    class function CreateRemote(const MachineName: string): IPOIDataType;
  end;

// *********************************************************************//
// La classe CoPaymentResultType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentResultType exposée
// par la CoClasse PaymentResultType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentResultType = class
    class function Create: IPaymentResultType;
    class function CreateRemote(const MachineName: string): IPaymentResultType;
  end;

// *********************************************************************//
// La classe CoCurrencyConversionType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICurrencyConversionType exposée
// par la CoClasse CurrencyConversionType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCurrencyConversionType = class
    class function Create: ICurrencyConversionType;
    class function CreateRemote(const MachineName: string): ICurrencyConversionType;
  end;

// *********************************************************************//
// La classe CoAmountType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IAmountType exposée
// par la CoClasse AmountType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoAmountType = class
    class function Create: IAmountType;
    class function CreateRemote(const MachineName: string): IAmountType;
  end;

// *********************************************************************//
// La classe CoCapturedSignatureType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICapturedSignatureType exposée
// par la CoClasse CapturedSignatureType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCapturedSignatureType = class
    class function Create: ICapturedSignatureType;
    class function CreateRemote(const MachineName: string): ICapturedSignatureType;
  end;

// *********************************************************************//
// La classe CoSignaturePointType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISignaturePointType exposée
// par la CoClasse SignaturePointType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSignaturePointType = class
    class function Create: ISignaturePointType;
    class function CreateRemote(const MachineName: string): ISignaturePointType;
  end;

// *********************************************************************//
// La classe CoLoyaltyResultType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyResultType exposée
// par la CoClasse LoyaltyResultType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyResultType = class
    class function Create: ILoyaltyResultType;
    class function CreateRemote(const MachineName: string): ILoyaltyResultType;
  end;

// *********************************************************************//
// La classe CoLoyaltyAcquirerDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyAcquirerDataType exposée
// par la CoClasse LoyaltyAcquirerDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyAcquirerDataType = class
    class function Create: ILoyaltyAcquirerDataType;
    class function CreateRemote(const MachineName: string): ILoyaltyAcquirerDataType;
  end;

// *********************************************************************//
// La classe CoRebatesType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IRebatesType exposée
// par la CoClasse RebatesType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoRebatesType = class
    class function Create: IRebatesType;
    class function CreateRemote(const MachineName: string): IRebatesType;
  end;

// *********************************************************************//
// La classe CoSaleItemRebateType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleItemRebateType exposée
// par la CoClasse SaleItemRebateType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleItemRebateType = class
    class function Create: ISaleItemRebateType;
    class function CreateRemote(const MachineName: string): ISaleItemRebateType;
  end;

// *********************************************************************//
// La classe CoCardAcquisitionRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardAcquisitionRequestType exposée
// par la CoClasse CardAcquisitionRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardAcquisitionRequestType = class
    class function Create: ICardAcquisitionRequestType;
    class function CreateRemote(const MachineName: string): ICardAcquisitionRequestType;
  end;

// *********************************************************************//
// La classe CoCardAcquisitionTransactionType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardAcquisitionTransactionType exposée
// par la CoClasse CardAcquisitionTransactionType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardAcquisitionTransactionType = class
    class function Create: ICardAcquisitionTransactionType;
    class function CreateRemote(const MachineName: string): ICardAcquisitionTransactionType;
  end;

// *********************************************************************//
// La classe CoCardAcquisitionResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardAcquisitionResponseType exposée
// par la CoClasse CardAcquisitionResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardAcquisitionResponseType = class
    class function Create: ICardAcquisitionResponseType;
    class function CreateRemote(const MachineName: string): ICardAcquisitionResponseType;
  end;

// *********************************************************************//
// La classe CoCardholderPINType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardholderPINType exposée
// par la CoClasse CardholderPINType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardholderPINType = class
    class function Create: ICardholderPINType;
    class function CreateRemote(const MachineName: string): ICardholderPINType;
  end;

// *********************************************************************//
// La classe CoCardReaderAPDURequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardReaderAPDURequestType exposée
// par la CoClasse CardReaderAPDURequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardReaderAPDURequestType = class
    class function Create: ICardReaderAPDURequestType;
    class function CreateRemote(const MachineName: string): ICardReaderAPDURequestType;
  end;

// *********************************************************************//
// La classe CoCardReaderAPDUResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardReaderAPDUResponseType exposée
// par la CoClasse CardReaderAPDUResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardReaderAPDUResponseType = class
    class function Create: ICardReaderAPDUResponseType;
    class function CreateRemote(const MachineName: string): ICardReaderAPDUResponseType;
  end;

// *********************************************************************//
// La classe CoCardReaderInitRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardReaderInitRequestType exposée
// par la CoClasse CardReaderInitRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardReaderInitRequestType = class
    class function Create: ICardReaderInitRequestType;
    class function CreateRemote(const MachineName: string): ICardReaderInitRequestType;
  end;

// *********************************************************************//
// La classe CoCardReaderInitResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardReaderInitResponseType exposée
// par la CoClasse CardReaderInitResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardReaderInitResponseType = class
    class function Create: ICardReaderInitResponseType;
    class function CreateRemote(const MachineName: string): ICardReaderInitResponseType;
  end;

// *********************************************************************//
// La classe CoICCResetDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IICCResetDataType exposée
// par la CoClasse ICCResetDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoICCResetDataType = class
    class function Create: IICCResetDataType;
    class function CreateRemote(const MachineName: string): IICCResetDataType;
  end;

// *********************************************************************//
// La classe CoCardReaderPowerOffRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardReaderPowerOffRequestType exposée
// par la CoClasse CardReaderPowerOffRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardReaderPowerOffRequestType = class
    class function Create: ICardReaderPowerOffRequestType;
    class function CreateRemote(const MachineName: string): ICardReaderPowerOffRequestType;
  end;

// *********************************************************************//
// La classe CoCardReaderPowerOffResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICardReaderPowerOffResponseType exposée
// par la CoClasse CardReaderPowerOffResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCardReaderPowerOffResponseType = class
    class function Create: ICardReaderPowerOffResponseType;
    class function CreateRemote(const MachineName: string): ICardReaderPowerOffResponseType;
  end;

// *********************************************************************//
// La classe CoCashHandlingDeviceType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICashHandlingDeviceType exposée
// par la CoClasse CashHandlingDeviceType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCashHandlingDeviceType = class
    class function Create: ICashHandlingDeviceType;
    class function CreateRemote(const MachineName: string): ICashHandlingDeviceType;
  end;

// *********************************************************************//
// La classe CoCoinsOrBillsType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ICoinsOrBillsType exposée
// par la CoClasse CoinsOrBillsType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoCoinsOrBillsType = class
    class function Create: ICoinsOrBillsType;
    class function CreateRemote(const MachineName: string): ICoinsOrBillsType;
  end;

// *********************************************************************//
// La classe CoDiagnosisRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IDiagnosisRequestType exposée
// par la CoClasse DiagnosisRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoDiagnosisRequestType = class
    class function Create: IDiagnosisRequestType;
    class function CreateRemote(const MachineName: string): IDiagnosisRequestType;
  end;

// *********************************************************************//
// La classe CoDiagnosisResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IDiagnosisResponseType exposée
// par la CoClasse DiagnosisResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoDiagnosisResponseType = class
    class function Create: IDiagnosisResponseType;
    class function CreateRemote(const MachineName: string): IDiagnosisResponseType;
  end;

// *********************************************************************//
// La classe CoPOIStatusType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPOIStatusType exposée
// par la CoClasse POIStatusType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPOIStatusType = class
    class function Create: IPOIStatusType;
    class function CreateRemote(const MachineName: string): IPOIStatusType;
  end;

// *********************************************************************//
// La classe CoHostStatusType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IHostStatusType exposée
// par la CoClasse HostStatusType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoHostStatusType = class
    class function Create: IHostStatusType;
    class function CreateRemote(const MachineName: string): IHostStatusType;
  end;

// *********************************************************************//
// La classe CoEnableServiceRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnableServiceRequestType exposée
// par la CoClasse EnableServiceRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoEnableServiceRequestType = class
    class function Create: IEnableServiceRequestType;
    class function CreateRemote(const MachineName: string): IEnableServiceRequestType;
  end;

// *********************************************************************//
// La classe CoEnableServiceResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEnableServiceResponseType exposée
// par la CoClasse EnableServiceResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoEnableServiceResponseType = class
    class function Create: IEnableServiceResponseType;
    class function CreateRemote(const MachineName: string): IEnableServiceResponseType;
  end;

// *********************************************************************//
// La classe CoEventNotificationType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IEventNotificationType exposée
// par la CoClasse EventNotificationType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoEventNotificationType = class
    class function Create: IEventNotificationType;
    class function CreateRemote(const MachineName: string): IEventNotificationType;
  end;

// *********************************************************************//
// La classe CoGetTotalsRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IGetTotalsRequestType exposée
// par la CoClasse GetTotalsRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoGetTotalsRequestType = class
    class function Create: IGetTotalsRequestType;
    class function CreateRemote(const MachineName: string): IGetTotalsRequestType;
  end;

// *********************************************************************//
// La classe CoTotalFilterType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITotalFilterType exposée
// par la CoClasse TotalFilterType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTotalFilterType = class
    class function Create: ITotalFilterType;
    class function CreateRemote(const MachineName: string): ITotalFilterType;
  end;

// *********************************************************************//
// La classe CoGetTotalsResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IGetTotalsResponseType exposée
// par la CoClasse GetTotalsResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoGetTotalsResponseType = class
    class function Create: IGetTotalsResponseType;
    class function CreateRemote(const MachineName: string): IGetTotalsResponseType;
  end;

// *********************************************************************//
// La classe CoTransactionTotalsType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransactionTotalsType exposée
// par la CoClasse TransactionTotalsType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransactionTotalsType = class
    class function Create: ITransactionTotalsType;
    class function CreateRemote(const MachineName: string): ITransactionTotalsType;
  end;

// *********************************************************************//
// La classe CoPaymentTotalsType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentTotalsType exposée
// par la CoClasse PaymentTotalsType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentTotalsType = class
    class function Create: IPaymentTotalsType;
    class function CreateRemote(const MachineName: string): IPaymentTotalsType;
  end;

// *********************************************************************//
// La classe CoLoyaltyTotalsType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyTotalsType exposée
// par la CoClasse LoyaltyTotalsType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyTotalsType = class
    class function Create: ILoyaltyTotalsType;
    class function CreateRemote(const MachineName: string): ILoyaltyTotalsType;
  end;

// *********************************************************************//
// La classe CoInputType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IInputType exposée
// par la CoClasse InputType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoInputType = class
    class function Create: IInputType;
    class function CreateRemote(const MachineName: string): IInputType;
  end;

// *********************************************************************//
// La classe CoInputDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IInputDataType exposée
// par la CoClasse InputDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoInputDataType = class
    class function Create: IInputDataType;
    class function CreateRemote(const MachineName: string): IInputDataType;
  end;

// *********************************************************************//
// La classe CoInputRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IInputRequestType exposée
// par la CoClasse InputRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoInputRequestType = class
    class function Create: IInputRequestType;
    class function CreateRemote(const MachineName: string): IInputRequestType;
  end;

// *********************************************************************//
// La classe CoInputResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IInputResponseType exposée
// par la CoClasse InputResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoInputResponseType = class
    class function Create: IInputResponseType;
    class function CreateRemote(const MachineName: string): IInputResponseType;
  end;

// *********************************************************************//
// La classe CoInputResultType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IInputResultType exposée
// par la CoClasse InputResultType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoInputResultType = class
    class function Create: IInputResultType;
    class function CreateRemote(const MachineName: string): IInputResultType;
  end;

// *********************************************************************//
// La classe CoInputUpdateType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IInputUpdateType exposée
// par la CoClasse InputUpdateType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoInputUpdateType = class
    class function Create: IInputUpdateType;
    class function CreateRemote(const MachineName: string): IInputUpdateType;
  end;

// *********************************************************************//
// La classe CoLoginRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoginRequestType exposée
// par la CoClasse LoginRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoginRequestType = class
    class function Create: ILoginRequestType;
    class function CreateRemote(const MachineName: string): ILoginRequestType;
  end;

// *********************************************************************//
// La classe CoSaleSoftwareType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleSoftwareType exposée
// par la CoClasse SaleSoftwareType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleSoftwareType = class
    class function Create: ISaleSoftwareType;
    class function CreateRemote(const MachineName: string): ISaleSoftwareType;
  end;

// *********************************************************************//
// La classe CoLoginResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoginResponseType exposée
// par la CoClasse LoginResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoginResponseType = class
    class function Create: ILoginResponseType;
    class function CreateRemote(const MachineName: string): ILoginResponseType;
  end;

// *********************************************************************//
// La classe CoPOISystemDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPOISystemDataType exposée
// par la CoClasse POISystemDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPOISystemDataType = class
    class function Create: IPOISystemDataType;
    class function CreateRemote(const MachineName: string): IPOISystemDataType;
  end;

// *********************************************************************//
// La classe CoPOISoftwareType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPOISoftwareType exposée
// par la CoClasse POISoftwareType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPOISoftwareType = class
    class function Create: IPOISoftwareType;
    class function CreateRemote(const MachineName: string): IPOISoftwareType;
  end;

// *********************************************************************//
// La classe CoPOITerminalDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPOITerminalDataType exposée
// par la CoClasse POITerminalDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPOITerminalDataType = class
    class function Create: IPOITerminalDataType;
    class function CreateRemote(const MachineName: string): IPOITerminalDataType;
  end;

// *********************************************************************//
// La classe CoPOIProfileType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPOIProfileType exposée
// par la CoClasse POIProfileType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPOIProfileType = class
    class function Create: IPOIProfileType;
    class function CreateRemote(const MachineName: string): IPOIProfileType;
  end;

// *********************************************************************//
// La classe CoLogoutRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILogoutRequestType exposée
// par la CoClasse LogoutRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLogoutRequestType = class
    class function Create: ILogoutRequestType;
    class function CreateRemote(const MachineName: string): ILogoutRequestType;
  end;

// *********************************************************************//
// La classe CoLogoutResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILogoutResponseType exposée
// par la CoClasse LogoutResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLogoutResponseType = class
    class function Create: ILogoutResponseType;
    class function CreateRemote(const MachineName: string): ILogoutResponseType;
  end;

// *********************************************************************//
// La classe CoLoyaltyResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ILoyaltyResponseType exposée
// par la CoClasse LoyaltyResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoLoyaltyResponseType = class
    class function Create: ILoyaltyResponseType;
    class function CreateRemote(const MachineName: string): ILoyaltyResponseType;
  end;

// *********************************************************************//
// La classe CoPaymentReceiptType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentReceiptType exposée
// par la CoClasse PaymentReceiptType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentReceiptType = class
    class function Create: IPaymentReceiptType;
    class function CreateRemote(const MachineName: string): IPaymentReceiptType;
  end;

// *********************************************************************//
// La classe CoMessageHeaderType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IMessageHeaderType exposée
// par la CoClasse MessageHeaderType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoMessageHeaderType = class
    class function Create: IMessageHeaderType;
    class function CreateRemote(const MachineName: string): IMessageHeaderType;
  end;

// *********************************************************************//
// La classe CoPaymentResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPaymentResponseType exposée
// par la CoClasse PaymentResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPaymentResponseType = class
    class function Create: IPaymentResponseType;
    class function CreateRemote(const MachineName: string): IPaymentResponseType;
  end;

// *********************************************************************//
// La classe CoPINRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPINRequestType exposée
// par la CoClasse PINRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPINRequestType = class
    class function Create: IPINRequestType;
    class function CreateRemote(const MachineName: string): IPINRequestType;
  end;

// *********************************************************************//
// La classe CoPINResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPINResponseType exposée
// par la CoClasse PINResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPINResponseType = class
    class function Create: IPINResponseType;
    class function CreateRemote(const MachineName: string): IPINResponseType;
  end;

// *********************************************************************//
// La classe CoPrintOutputType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPrintOutputType exposée
// par la CoClasse PrintOutputType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPrintOutputType = class
    class function Create: IPrintOutputType;
    class function CreateRemote(const MachineName: string): IPrintOutputType;
  end;

// *********************************************************************//
// La classe CoPrintRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPrintRequestType exposée
// par la CoClasse PrintRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPrintRequestType = class
    class function Create: IPrintRequestType;
    class function CreateRemote(const MachineName: string): IPrintRequestType;
  end;

// *********************************************************************//
// La classe CoPrintResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IPrintResponseType exposée
// par la CoClasse PrintResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoPrintResponseType = class
    class function Create: IPrintResponseType;
    class function CreateRemote(const MachineName: string): IPrintResponseType;
  end;

// *********************************************************************//
// La classe CoReconciliationRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IReconciliationRequestType exposée
// par la CoClasse ReconciliationRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoReconciliationRequestType = class
    class function Create: IReconciliationRequestType;
    class function CreateRemote(const MachineName: string): IReconciliationRequestType;
  end;

// *********************************************************************//
// La classe CoReconciliationResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IReconciliationResponseType exposée
// par la CoClasse ReconciliationResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoReconciliationResponseType = class
    class function Create: IReconciliationResponseType;
    class function CreateRemote(const MachineName: string): IReconciliationResponseType;
  end;

// *********************************************************************//
// La classe CoRepeatedMessageResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IRepeatedMessageResponseType exposée
// par la CoClasse RepeatedMessageResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoRepeatedMessageResponseType = class
    class function Create: IRepeatedMessageResponseType;
    class function CreateRemote(const MachineName: string): IRepeatedMessageResponseType;
  end;

// *********************************************************************//
// La classe CoReversalResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IReversalResponseType exposée
// par la CoClasse ReversalResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoReversalResponseType = class
    class function Create: IReversalResponseType;
    class function CreateRemote(const MachineName: string): IReversalResponseType;
  end;

// *********************************************************************//
// La classe CoStoredValueResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IStoredValueResponseType exposée
// par la CoClasse StoredValueResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoStoredValueResponseType = class
    class function Create: IStoredValueResponseType;
    class function CreateRemote(const MachineName: string): IStoredValueResponseType;
  end;

// *********************************************************************//
// La classe CoStoredValueResultType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IStoredValueResultType exposée
// par la CoClasse StoredValueResultType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoStoredValueResultType = class
    class function Create: IStoredValueResultType;
    class function CreateRemote(const MachineName: string): IStoredValueResultType;
  end;

// *********************************************************************//
// La classe CoStoredValueAccountStatusType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IStoredValueAccountStatusType exposée
// par la CoClasse StoredValueAccountStatusType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoStoredValueAccountStatusType = class
    class function Create: IStoredValueAccountStatusType;
    class function CreateRemote(const MachineName: string): IStoredValueAccountStatusType;
  end;

// *********************************************************************//
// La classe CoStoredValueAccountIDType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IStoredValueAccountIDType exposée
// par la CoClasse StoredValueAccountIDType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoStoredValueAccountIDType = class
    class function Create: IStoredValueAccountIDType;
    class function CreateRemote(const MachineName: string): IStoredValueAccountIDType;
  end;

// *********************************************************************//
// La classe CoSoundContentType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISoundContentType exposée
// par la CoClasse SoundContentType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSoundContentType = class
    class function Create: ISoundContentType;
    class function CreateRemote(const MachineName: string): ISoundContentType;
  end;

// *********************************************************************//
// La classe CoSoundRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISoundRequestType exposée
// par la CoClasse SoundRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSoundRequestType = class
    class function Create: ISoundRequestType;
    class function CreateRemote(const MachineName: string): ISoundRequestType;
  end;

// *********************************************************************//
// La classe CoSoundResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISoundResponseType exposée
// par la CoClasse SoundResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSoundResponseType = class
    class function Create: ISoundResponseType;
    class function CreateRemote(const MachineName: string): ISoundResponseType;
  end;

// *********************************************************************//
// La classe CoStoredValueDataType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IStoredValueDataType exposée
// par la CoClasse StoredValueDataType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoStoredValueDataType = class
    class function Create: IStoredValueDataType;
    class function CreateRemote(const MachineName: string): IStoredValueDataType;
  end;

// *********************************************************************//
// La classe CoStoredValueRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IStoredValueRequestType exposée
// par la CoClasse StoredValueRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoStoredValueRequestType = class
    class function Create: IStoredValueRequestType;
    class function CreateRemote(const MachineName: string): IStoredValueRequestType;
  end;

// *********************************************************************//
// La classe CoTransmitRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransmitRequestType exposée
// par la CoClasse TransmitRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransmitRequestType = class
    class function Create: ITransmitRequestType;
    class function CreateRemote(const MachineName: string): ITransmitRequestType;
  end;

// *********************************************************************//
// La classe CoTransmitResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransmitResponseType exposée
// par la CoClasse TransmitResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransmitResponseType = class
    class function Create: ITransmitResponseType;
    class function CreateRemote(const MachineName: string): ITransmitResponseType;
  end;

// *********************************************************************//
// La classe CoTransactionStatusRequestType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransactionStatusRequestType exposée
// par la CoClasse TransactionStatusRequestType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransactionStatusRequestType = class
    class function Create: ITransactionStatusRequestType;
    class function CreateRemote(const MachineName: string): ITransactionStatusRequestType;
  end;

// *********************************************************************//
// La classe CoTransactionStatusResponseType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ITransactionStatusResponseType exposée
// par la CoClasse TransactionStatusResponseType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoTransactionStatusResponseType = class
    class function Create: ITransactionStatusResponseType;
    class function CreateRemote(const MachineName: string): ITransactionStatusResponseType;
  end;

// *********************************************************************//
// La classe CoSaleToPOIRequest fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleToPOIRequest exposée
// par la CoClasse SaleToPOIRequest. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleToPOIRequest = class
    class function Create: ISaleToPOIRequest;
    class function CreateRemote(const MachineName: string): ISaleToPOIRequest;
  end;

// *********************************************************************//
// La classe CoSaleToPOIResponse fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut ISaleToPOIResponse exposée
// par la CoClasse SaleToPOIResponse. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoSaleToPOIResponse = class
    class function Create: ISaleToPOIResponse;
    class function CreateRemote(const MachineName: string): ISaleToPOIResponse;
  end;

// *********************************************************************//
// La classe CoIssuerType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut IIssuerType exposée
// par la CoClasse IssuerType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoIssuerType = class
    class function Create: IIssuerType;
    class function CreateRemote(const MachineName: string): IIssuerType;
  end;

// *********************************************************************//
// La classe CoNexoRetailerServerActivity fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoRetailerServerActivity exposée
// par la CoClasse NexoRetailerServerActivity. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerServerActivity = class
    class function Create: INexoRetailerServerActivity;
    class function CreateRemote(const MachineName: string): INexoRetailerServerActivity;
  end;

// *********************************************************************//
// La classe CoNexoRetailerServerSettings fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoRetailerServerSettings exposée
// par la CoClasse NexoRetailerServerSettings. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerServerSettings = class
    class function Create: INexoRetailerServerSettings;
    class function CreateRemote(const MachineName: string): INexoRetailerServerSettings;
  end;

// *********************************************************************//
// La classe CoNexoRetailerClientHandle fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoRetailerClientHandle exposée
// par la CoClasse NexoRetailerClientHandle. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerClientHandle = class
    class function Create: INexoRetailerClientHandle;
    class function CreateRemote(const MachineName: string): INexoRetailerClientHandle;
  end;

// *********************************************************************//
// La classe CoNexoRetailerClient fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoRetailerClient exposée
// par la CoClasse NexoRetailerClient. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerClient = class
    class function Create: INexoRetailerClient;
    class function CreateRemote(const MachineName: string): INexoRetailerClient;
  end;

// *********************************************************************//
// La classe CoNexoRetailerClientSettings fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoRetailerClientSettings exposée
// par la CoClasse NexoRetailerClientSettings. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerClientSettings = class
    class function Create: INexoRetailerClientSettings;
    class function CreateRemote(const MachineName: string): INexoRetailerClientSettings;
  end;

// *********************************************************************//
// La classe CoNexoRetailerClientActivity fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut INexoRetailerClientActivity exposée
// par la CoClasse NexoRetailerClientActivity. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerClientActivity = class
    class function Create: INexoRetailerClientActivity;
    class function CreateRemote(const MachineName: string): INexoRetailerClientActivity;
  end;

// *********************************************************************//
// La classe CoNexoMessage fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoMessage exposée
// par la CoClasse NexoMessage. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoMessage = class
    class function Create: _NexoMessage;
    class function CreateRemote(const MachineName: string): _NexoMessage;
  end;

// *********************************************************************//
// La classe CoNexoPartner fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoPartner exposée
// par la CoClasse NexoPartner. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoPartner = class
    class function Create: _NexoPartner;
    class function CreateRemote(const MachineName: string): _NexoPartner;
  end;

// *********************************************************************//
// La classe CoNexoEndPoint fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoEndPoint exposée
// par la CoClasse NexoEndPoint. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoEndPoint = class
    class function Create: _NexoEndPoint;
    class function CreateRemote(const MachineName: string): _NexoEndPoint;
  end;

// *********************************************************************//
// La classe CoNexoSession fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoSession exposée
// par la CoClasse NexoSession. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoSession = class
    class function Create: _NexoSession;
    class function CreateRemote(const MachineName: string): _NexoSession;
  end;

// *********************************************************************//
// La classe CoNexoDelegates fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoDelegates exposée
// par la CoClasse NexoDelegates. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDelegates = class
    class function Create: _NexoDelegates;
    class function CreateRemote(const MachineName: string): _NexoDelegates;
  end;

// *********************************************************************//
// La classe CoNexoKey fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoKey exposée
// par la CoClasse NexoKey. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoKey = class
    class function Create: _NexoKey;
    class function CreateRemote(const MachineName: string): _NexoKey;
  end;

// *********************************************************************//
// La classe CoNexoMessageHeader fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoMessageHeader exposée
// par la CoClasse NexoMessageHeader. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoMessageHeader = class
    class function Create: _NexoMessageHeader;
    class function CreateRemote(const MachineName: string): _NexoMessageHeader;
  end;

// *********************************************************************//
// La classe CoNexoDefaultCurrency fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoDefaultCurrency exposée
// par la CoClasse NexoDefaultCurrency. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDefaultCurrency = class
    class function Create: _NexoDefaultCurrency;
    class function CreateRemote(const MachineName: string): _NexoDefaultCurrency;
  end;

// *********************************************************************//
// La classe CoNexoMessageType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoMessageType exposée
// par la CoClasse NexoMessageType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoMessageType = class
    class function Create: _NexoMessageType;
    class function CreateRemote(const MachineName: string): _NexoMessageType;
  end;

// *********************************************************************//
// La classe CoNexoMessageClass fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoMessageClass exposée
// par la CoClasse NexoMessageClass. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoMessageClass = class
    class function Create: _NexoMessageClass;
    class function CreateRemote(const MachineName: string): _NexoMessageClass;
  end;

// *********************************************************************//
// La classe CoNexoMessageCategory fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoMessageCategory exposée
// par la CoClasse NexoMessageCategory. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoMessageCategory = class
    class function Create: _NexoMessageCategory;
    class function CreateRemote(const MachineName: string): _NexoMessageCategory;
  end;

// *********************************************************************//
// La classe CoNexoTerminalEnvironment fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoTerminalEnvironment exposée
// par la CoClasse NexoTerminalEnvironment. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoTerminalEnvironment = class
    class function Create: _NexoTerminalEnvironment;
    class function CreateRemote(const MachineName: string): _NexoTerminalEnvironment;
  end;

// *********************************************************************//
// La classe CoNexoSaleCapabilities fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoSaleCapabilities exposée
// par la CoClasse NexoSaleCapabilities. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoSaleCapabilities = class
    class function Create: _NexoSaleCapabilities;
    class function CreateRemote(const MachineName: string): _NexoSaleCapabilities;
  end;

// *********************************************************************//
// La classe CoNexoProtocolVersion fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoProtocolVersion exposée
// par la CoClasse NexoProtocolVersion. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoProtocolVersion = class
    class function Create: _NexoProtocolVersion;
    class function CreateRemote(const MachineName: string): _NexoProtocolVersion;
  end;

// *********************************************************************//
// La classe CoNexoID fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoID exposée
// par la CoClasse NexoID. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoID = class
    class function Create: _NexoID;
    class function CreateRemote(const MachineName: string): _NexoID;
  end;

// *********************************************************************//
// La classe CoNexoServiceID fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoServiceID exposée
// par la CoClasse NexoServiceID. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoServiceID = class
    class function Create: _NexoServiceID;
    class function CreateRemote(const MachineName: string): _NexoServiceID;
  end;

// *********************************************************************//
// La classe CoNexoDeviceID fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoDeviceID exposée
// par la CoClasse NexoDeviceID. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDeviceID = class
    class function Create: _NexoDeviceID;
    class function CreateRemote(const MachineName: string): _NexoDeviceID;
  end;

// *********************************************************************//
// La classe CoNexoPOIID fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoPOIID exposée
// par la CoClasse NexoPOIID. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoPOIID = class
    class function Create: _NexoPOIID;
    class function CreateRemote(const MachineName: string): _NexoPOIID;
  end;

// *********************************************************************//
// La classe CoNexoSaleID fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoSaleID exposée
// par la CoClasse NexoSaleID. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoSaleID = class
    class function Create: _NexoSaleID;
    class function CreateRemote(const MachineName: string): _NexoSaleID;
  end;

// *********************************************************************//
// La classe CoNexoOperatorLanguage fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoOperatorLanguage exposée
// par la CoClasse NexoOperatorLanguage. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoOperatorLanguage = class
    class function Create: _NexoOperatorLanguage;
    class function CreateRemote(const MachineName: string): _NexoOperatorLanguage;
  end;

// *********************************************************************//
// La classe CoNexoResult fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoResult exposée
// par la CoClasse NexoResult. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoResult = class
    class function Create: _NexoResult;
    class function CreateRemote(const MachineName: string): _NexoResult;
  end;

// *********************************************************************//
// La classe CoNexoErrorCondition fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoErrorCondition exposée
// par la CoClasse NexoErrorCondition. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoErrorCondition = class
    class function Create: _NexoErrorCondition;
    class function CreateRemote(const MachineName: string): _NexoErrorCondition;
  end;

// *********************************************************************//
// La classe CoNexoAdditionalResponse fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoAdditionalResponse exposée
// par la CoClasse NexoAdditionalResponse. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoAdditionalResponse = class
    class function Create: _NexoAdditionalResponse;
    class function CreateRemote(const MachineName: string): _NexoAdditionalResponse;
  end;

// *********************************************************************//
// La classe CoNexoGlobalStatus fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoGlobalStatus exposée
// par la CoClasse NexoGlobalStatus. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoGlobalStatus = class
    class function Create: _NexoGlobalStatus;
    class function CreateRemote(const MachineName: string): _NexoGlobalStatus;
  end;

// *********************************************************************//
// La classe CoNexoCertificationCode fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoCertificationCode exposée
// par la CoClasse NexoCertificationCode. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoCertificationCode = class
    class function Create: _NexoCertificationCode;
    class function CreateRemote(const MachineName: string): _NexoCertificationCode;
  end;

// *********************************************************************//
// La classe CoNexoSoftwareVersion fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoSoftwareVersion exposée
// par la CoClasse NexoSoftwareVersion. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoSoftwareVersion = class
    class function Create: _NexoSoftwareVersion;
    class function CreateRemote(const MachineName: string): _NexoSoftwareVersion;
  end;

// *********************************************************************//
// La classe CoNexoApplicationName fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoApplicationName exposée
// par la CoClasse NexoApplicationName. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoApplicationName = class
    class function Create: _NexoApplicationName;
    class function CreateRemote(const MachineName: string): _NexoApplicationName;
  end;

// *********************************************************************//
// La classe CoNexoManufacturerID fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoManufacturerID exposée
// par la CoClasse NexoManufacturerID. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoManufacturerID = class
    class function Create: _NexoManufacturerID;
    class function CreateRemote(const MachineName: string): _NexoManufacturerID;
  end;

// *********************************************************************//
// La classe CoNexoPOISerialNumber fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoPOISerialNumber exposée
// par la CoClasse NexoPOISerialNumber. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoPOISerialNumber = class
    class function Create: _NexoPOISerialNumber;
    class function CreateRemote(const MachineName: string): _NexoPOISerialNumber;
  end;

// *********************************************************************//
// La classe CoNexoOperatorID fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoOperatorID exposée
// par la CoClasse NexoOperatorID. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoOperatorID = class
    class function Create: _NexoOperatorID;
    class function CreateRemote(const MachineName: string): _NexoOperatorID;
  end;

// *********************************************************************//
// La classe CoNexoDateTime fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoDateTime exposée
// par la CoClasse NexoDateTime. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoDateTime = class
    class function Create: _NexoDateTime;
    class function CreateRemote(const MachineName: string): _NexoDateTime;
  end;

// *********************************************************************//
// La classe CoNexoInputCommand fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoInputCommand exposée
// par la CoClasse NexoInputCommand. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoInputCommand = class
    class function Create: _NexoInputCommand;
    class function CreateRemote(const MachineName: string): _NexoInputCommand;
  end;

// *********************************************************************//
// La classe CoNexoEventToNotify fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoEventToNotify exposée
// par la CoClasse NexoEventToNotify. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoEventToNotify = class
    class function Create: _NexoEventToNotify;
    class function CreateRemote(const MachineName: string): _NexoEventToNotify;
  end;

// *********************************************************************//
// La classe CoNexoPaymentIntrumentType fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoPaymentIntrumentType exposée
// par la CoClasse NexoPaymentIntrumentType. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoPaymentIntrumentType = class
    class function Create: _NexoPaymentIntrumentType;
    class function CreateRemote(const MachineName: string): _NexoPaymentIntrumentType;
  end;

// *********************************************************************//
// La classe CoNexoRetailerServerMessageHeaderValidator fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoRetailerServerMessageHeaderValidator exposée
// par la CoClasse NexoRetailerServerMessageHeaderValidator. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoRetailerServerMessageHeaderValidator = class
    class function Create: _NexoRetailerServerMessageHeaderValidator;
    class function CreateRemote(const MachineName: string): _NexoRetailerServerMessageHeaderValidator;
  end;

// *********************************************************************//
// La classe CoNexoResources fournit une méthode Create et CreateRemote pour
// créer des instances de l'interface par défaut _NexoResources exposée
// par la CoClasse NexoResources. Les fonctions sont destinées à être utilisées par
// les clients désirant automatiser les objets CoClasse exposés par
// le serveur de cette bibliothèque de types.
// *********************************************************************//
  CoNexoResources = class
    class function Create: _NexoResources;
    class function CreateRemote(const MachineName: string): _NexoResources;
  end;

implementation

uses System.Win.ComObj;

class function CoNexoActivity.Create: INexoActivity;
begin
  Result := CreateComObject(CLASS_NexoActivity) as INexoActivity;
end;

class function CoNexoActivity.CreateRemote(const MachineName: string): INexoActivity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoActivity) as INexoActivity;
end;

class function CoNexoDictionaryOfMessages.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoDictionaryOfMessages) as IEnumerable;
end;

class function CoNexoDictionaryOfMessages.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDictionaryOfMessages) as IEnumerable;
end;

class function CoNexoListOfEndPoints.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoListOfEndPoints) as IEnumerable;
end;

class function CoNexoListOfEndPoints.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoListOfEndPoints) as IEnumerable;
end;

class function CoNexoDictionaryOfEndPoints.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoDictionaryOfEndPoints) as IEnumerable;
end;

class function CoNexoDictionaryOfEndPoints.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDictionaryOfEndPoints) as IEnumerable;
end;

class function CoNexoListOfSessions.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoListOfSessions) as IEnumerable;
end;

class function CoNexoListOfSessions.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoListOfSessions) as IEnumerable;
end;

class function CoNexoDictionaryOfSessions.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoDictionaryOfSessions) as IEnumerable;
end;

class function CoNexoDictionaryOfSessions.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDictionaryOfSessions) as IEnumerable;
end;

class function CoNexoListOfNexoKeys.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoListOfNexoKeys) as IEnumerable;
end;

class function CoNexoListOfNexoKeys.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoListOfNexoKeys) as IEnumerable;
end;

class function CoNexoDictionaryOfNexoKeys.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoDictionaryOfNexoKeys) as IEnumerable;
end;

class function CoNexoDictionaryOfNexoKeys.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDictionaryOfNexoKeys) as IEnumerable;
end;

class function CoNexoListOfAnyMessages.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoListOfAnyMessages) as IEnumerable;
end;

class function CoNexoListOfAnyMessages.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoListOfAnyMessages) as IEnumerable;
end;

class function CoNexoDictionaryOfAnyMessages.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoDictionaryOfAnyMessages) as IEnumerable;
end;

class function CoNexoDictionaryOfAnyMessages.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDictionaryOfAnyMessages) as IEnumerable;
end;

class function CoNexoAcceptedCommands.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoAcceptedCommands) as IEnumerable;
end;

class function CoNexoAcceptedCommands.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoAcceptedCommands) as IEnumerable;
end;

class function CoNexoItem.Create: INexoItem;
begin
  Result := CreateComObject(CLASS_NexoItem) as INexoItem;
end;

class function CoNexoItem.CreateRemote(const MachineName: string): INexoItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoItem) as INexoItem;
end;

class function CoNexoBalanceInquiry.Create: INexoBalanceInquiry;
begin
  Result := CreateComObject(CLASS_NexoBalanceInquiry) as INexoBalanceInquiry;
end;

class function CoNexoBalanceInquiry.CreateRemote(const MachineName: string): INexoBalanceInquiry;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoBalanceInquiry) as INexoBalanceInquiry;
end;

class function CoNexoBatch.Create: INexoBatch;
begin
  Result := CreateComObject(CLASS_NexoBatch) as INexoBatch;
end;

class function CoNexoBatch.CreateRemote(const MachineName: string): INexoBatch;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoBatch) as INexoBatch;
end;

class function CoNexoCardAcquisition.Create: INexoCardAcquisition;
begin
  Result := CreateComObject(CLASS_NexoCardAcquisition) as INexoCardAcquisition;
end;

class function CoNexoCardAcquisition.CreateRemote(const MachineName: string): INexoCardAcquisition;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCardAcquisition) as INexoCardAcquisition;
end;

class function CoNexoCardReaderInit.Create: INexoCardReaderInit;
begin
  Result := CreateComObject(CLASS_NexoCardReaderInit) as INexoCardReaderInit;
end;

class function CoNexoCardReaderInit.CreateRemote(const MachineName: string): INexoCardReaderInit;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCardReaderInit) as INexoCardReaderInit;
end;

class function CoNexoCardReaderAPDU.Create: INexoCardReaderAPDU;
begin
  Result := CreateComObject(CLASS_NexoCardReaderAPDU) as INexoCardReaderAPDU;
end;

class function CoNexoCardReaderAPDU.CreateRemote(const MachineName: string): INexoCardReaderAPDU;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCardReaderAPDU) as INexoCardReaderAPDU;
end;

class function CoNexoCardReaderPowerOFF.Create: INexoCardReaderPowerOFF;
begin
  Result := CreateComObject(CLASS_NexoCardReaderPowerOFF) as INexoCardReaderPowerOFF;
end;

class function CoNexoCardReaderPowerOFF.CreateRemote(const MachineName: string): INexoCardReaderPowerOFF;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCardReaderPowerOFF) as INexoCardReaderPowerOFF;
end;

class function CoNexoDeviceDisplay.Create: INexoDeviceDisplay;
begin
  Result := CreateComObject(CLASS_NexoDeviceDisplay) as INexoDeviceDisplay;
end;

class function CoNexoDeviceDisplay.CreateRemote(const MachineName: string): INexoDeviceDisplay;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDeviceDisplay) as INexoDeviceDisplay;
end;

class function CoNexoDeviceInputUpdate.Create: INexoDeviceInputUpdate;
begin
  Result := CreateComObject(CLASS_NexoDeviceInputUpdate) as INexoDeviceInputUpdate;
end;

class function CoNexoDeviceInputUpdate.CreateRemote(const MachineName: string): INexoDeviceInputUpdate;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDeviceInputUpdate) as INexoDeviceInputUpdate;
end;

class function CoNexoDeviceSound.Create: INexoDeviceSound;
begin
  Result := CreateComObject(CLASS_NexoDeviceSound) as INexoDeviceSound;
end;

class function CoNexoDeviceSound.CreateRemote(const MachineName: string): INexoDeviceSound;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDeviceSound) as INexoDeviceSound;
end;

class function CoNexoEnableService.Create: INexoEnableService;
begin
  Result := CreateComObject(CLASS_NexoEnableService) as INexoEnableService;
end;

class function CoNexoEnableService.CreateRemote(const MachineName: string): INexoEnableService;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoEnableService) as INexoEnableService;
end;

class function CoNexoGetTotals.Create: INexoGetTotals;
begin
  Result := CreateComObject(CLASS_NexoGetTotals) as INexoGetTotals;
end;

class function CoNexoGetTotals.CreateRemote(const MachineName: string): INexoGetTotals;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoGetTotals) as INexoGetTotals;
end;

class function CoNexoLoyalty.Create: INexoLoyalty;
begin
  Result := CreateComObject(CLASS_NexoLoyalty) as INexoLoyalty;
end;

class function CoNexoLoyalty.CreateRemote(const MachineName: string): INexoLoyalty;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoLoyalty) as INexoLoyalty;
end;

class function CoNexoPIN.Create: INexoPIN;
begin
  Result := CreateComObject(CLASS_NexoPIN) as INexoPIN;
end;

class function CoNexoPIN.CreateRemote(const MachineName: string): INexoPIN;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoPIN) as INexoPIN;
end;

class function CoNexoReconciliation.Create: INexoReconciliation;
begin
  Result := CreateComObject(CLASS_NexoReconciliation) as INexoReconciliation;
end;

class function CoNexoReconciliation.CreateRemote(const MachineName: string): INexoReconciliation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoReconciliation) as INexoReconciliation;
end;

class function CoNexoStoredValue.Create: INexoStoredValue;
begin
  Result := CreateComObject(CLASS_NexoStoredValue) as INexoStoredValue;
end;

class function CoNexoStoredValue.CreateRemote(const MachineName: string): INexoStoredValue;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoStoredValue) as INexoStoredValue;
end;

class function CoNexoTransmit.Create: INexoTransmit;
begin
  Result := CreateComObject(CLASS_NexoTransmit) as INexoTransmit;
end;

class function CoNexoTransmit.CreateRemote(const MachineName: string): INexoTransmit;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoTransmit) as INexoTransmit;
end;

class function CoNexoAbort.Create: INexoAbort;
begin
  Result := CreateComObject(CLASS_NexoAbort) as INexoAbort;
end;

class function CoNexoAbort.CreateRemote(const MachineName: string): INexoAbort;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoAbort) as INexoAbort;
end;

class function CoNexoDiagnosis.Create: INexoDiagnosis;
begin
  Result := CreateComObject(CLASS_NexoDiagnosis) as INexoDiagnosis;
end;

class function CoNexoDiagnosis.CreateRemote(const MachineName: string): INexoDiagnosis;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDiagnosis) as INexoDiagnosis;
end;

class function CoNexoEvent.Create: INexoEvent;
begin
  Result := CreateComObject(CLASS_NexoEvent) as INexoEvent;
end;

class function CoNexoEvent.CreateRemote(const MachineName: string): INexoEvent;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoEvent) as INexoEvent;
end;

class function CoNexoTransactionStatus.Create: INexoTransactionStatus;
begin
  Result := CreateComObject(CLASS_NexoTransactionStatus) as INexoTransactionStatus;
end;

class function CoNexoTransactionStatus.CreateRemote(const MachineName: string): INexoTransactionStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoTransactionStatus) as INexoTransactionStatus;
end;

class function CoNexoDeviceInput.Create: INexoDeviceInput;
begin
  Result := CreateComObject(CLASS_NexoDeviceInput) as INexoDeviceInput;
end;

class function CoNexoDeviceInput.CreateRemote(const MachineName: string): INexoDeviceInput;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDeviceInput) as INexoDeviceInput;
end;

class function CoNexoDevicePrint.Create: INexoDevicePrint;
begin
  Result := CreateComObject(CLASS_NexoDevicePrint) as INexoDevicePrint;
end;

class function CoNexoDevicePrint.CreateRemote(const MachineName: string): INexoDevicePrint;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDevicePrint) as INexoDevicePrint;
end;

class function CoNexoLogin.Create: INexoLogin;
begin
  Result := CreateComObject(CLASS_NexoLogin) as INexoLogin;
end;

class function CoNexoLogin.CreateRemote(const MachineName: string): INexoLogin;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoLogin) as INexoLogin;
end;

class function CoNexoLogout.Create: INexoLogout;
begin
  Result := CreateComObject(CLASS_NexoLogout) as INexoLogout;
end;

class function CoNexoLogout.CreateRemote(const MachineName: string): INexoLogout;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoLogout) as INexoLogout;
end;

class function CoNexoPayment.Create: INexoFinancial;
begin
  Result := CreateComObject(CLASS_NexoPayment) as INexoFinancial;
end;

class function CoNexoPayment.CreateRemote(const MachineName: string): INexoFinancial;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoPayment) as INexoFinancial;
end;

class function CoNexoRefund.Create: INexoFinancial;
begin
  Result := CreateComObject(CLASS_NexoRefund) as INexoFinancial;
end;

class function CoNexoRefund.CreateRemote(const MachineName: string): INexoFinancial;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRefund) as INexoFinancial;
end;

class function CoNexoAdmin.Create: INexoAdmin;
begin
  Result := CreateComObject(CLASS_NexoAdmin) as INexoAdmin;
end;

class function CoNexoAdmin.CreateRemote(const MachineName: string): INexoAdmin;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoAdmin) as INexoAdmin;
end;

class function CoNexoObject.Create: INexoObject;
begin
  Result := CreateComObject(CLASS_NexoObject) as INexoObject;
end;

class function CoNexoObject.CreateRemote(const MachineName: string): INexoObject;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoObject) as INexoObject;
end;

class function CoNexoObjectToProcess.Create: INexoObjectToProcess;
begin
  Result := CreateComObject(CLASS_NexoObjectToProcess) as INexoObjectToProcess;
end;

class function CoNexoObjectToProcess.CreateRemote(const MachineName: string): INexoObjectToProcess;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoObjectToProcess) as INexoObjectToProcess;
end;

class function CoQueueOfNexoObjectToProcess.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_QueueOfNexoObjectToProcess) as IEnumerable;
end;

class function CoQueueOfNexoObjectToProcess.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_QueueOfNexoObjectToProcess) as IEnumerable;
end;

class function CoStackOfNexoObjectToProcess.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_StackOfNexoObjectToProcess) as IEnumerable;
end;

class function CoStackOfNexoObjectToProcess.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StackOfNexoObjectToProcess) as IEnumerable;
end;

class function CoNexoReversal.Create: INexoReversal;
begin
  Result := CreateComObject(CLASS_NexoReversal) as INexoReversal;
end;

class function CoNexoReversal.CreateRemote(const MachineName: string): INexoReversal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoReversal) as INexoReversal;
end;

class function CoNexoTextString.Create: INexoTextString;
begin
  Result := CreateComObject(CLASS_NexoTextString) as INexoTextString;
end;

class function CoNexoTextString.CreateRemote(const MachineName: string): INexoTextString;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoTextString) as INexoTextString;
end;

class function CoNexoBoolean.Create: INexoBooleanType;
begin
  Result := CreateComObject(CLASS_NexoBoolean) as INexoBooleanType;
end;

class function CoNexoBoolean.CreateRemote(const MachineName: string): INexoBooleanType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoBoolean) as INexoBooleanType;
end;

class function CoNexoInteger.Create: INexoInteger;
begin
  Result := CreateComObject(CLASS_NexoInteger) as INexoInteger;
end;

class function CoNexoInteger.CreateRemote(const MachineName: string): INexoInteger;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoInteger) as INexoInteger;
end;

class function CoNexoDecimal.Create: INexoDecimal;
begin
  Result := CreateComObject(CLASS_NexoDecimal) as INexoDecimal;
end;

class function CoNexoDecimal.CreateRemote(const MachineName: string): INexoDecimal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDecimal) as INexoDecimal;
end;

class function CoNexoSimpleAmount.Create: INexoDecimal;
begin
  Result := CreateComObject(CLASS_NexoSimpleAmount) as INexoDecimal;
end;

class function CoNexoSimpleAmount.CreateRemote(const MachineName: string): INexoDecimal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoSimpleAmount) as INexoDecimal;
end;

class function CoNexoLabel.Create: INexoLabel;
begin
  Result := CreateComObject(CLASS_NexoLabel) as INexoLabel;
end;

class function CoNexoLabel.CreateRemote(const MachineName: string): INexoLabel;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoLabel) as INexoLabel;
end;

class function CoNexoEnumeration.Create: INexoEnumeration;
begin
  Result := CreateComObject(CLASS_NexoEnumeration) as INexoEnumeration;
end;

class function CoNexoEnumeration.CreateRemote(const MachineName: string): INexoEnumeration;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoEnumeration) as INexoEnumeration;
end;

class function CoNexoCluster.Create: INexoCluster;
begin
  Result := CreateComObject(CLASS_NexoCluster) as INexoCluster;
end;

class function CoNexoCluster.CreateRemote(const MachineName: string): INexoCluster;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCluster) as INexoCluster;
end;

class function CoNexoLengthDrivenTextString.Create: INexoLengthDrivenTextString;
begin
  Result := CreateComObject(CLASS_NexoLengthDrivenTextString) as INexoLengthDrivenTextString;
end;

class function CoNexoLengthDrivenTextString.CreateRemote(const MachineName: string): INexoLengthDrivenTextString;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoLengthDrivenTextString) as INexoLengthDrivenTextString;
end;

class function CoNexoDigitString.Create: INexoDigitString;
begin
  Result := CreateComObject(CLASS_NexoDigitString) as INexoDigitString;
end;

class function CoNexoDigitString.CreateRemote(const MachineName: string): INexoDigitString;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDigitString) as INexoDigitString;
end;

class function CoNexoISOCurrency3A.Create: INexoISOData;
begin
  Result := CreateComObject(CLASS_NexoISOCurrency3A) as INexoISOData;
end;

class function CoNexoISOCurrency3A.CreateRemote(const MachineName: string): INexoISOData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoISOCurrency3A) as INexoISOData;
end;

class function CoNexoISOCountry3A.Create: INexoISOData;
begin
  Result := CreateComObject(CLASS_NexoISOCountry3A) as INexoISOData;
end;

class function CoNexoISOCountry3A.CreateRemote(const MachineName: string): INexoISOData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoISOCountry3A) as INexoISOData;
end;

class function CoNexoISOLanguage2A.Create: INexoISOData;
begin
  Result := CreateComObject(CLASS_NexoISOLanguage2A) as INexoISOData;
end;

class function CoNexoISOLanguage2A.CreateRemote(const MachineName: string): INexoISOData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoISOLanguage2A) as INexoISOData;
end;

class function CoNexoISODateTime.Create: INexoISODateTime;
begin
  Result := CreateComObject(CLASS_NexoISODateTime) as INexoISODateTime;
end;

class function CoNexoISODateTime.CreateRemote(const MachineName: string): INexoISODateTime;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoISODateTime) as INexoISODateTime;
end;

class function CoNexoISODate.Create: INexoISODate;
begin
  Result := CreateComObject(CLASS_NexoISODate) as INexoISODate;
end;

class function CoNexoISODate.CreateRemote(const MachineName: string): INexoISODate;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoISODate) as INexoISODate;
end;

class function CoNexoByteSequence.Create: INexoNonStringType;
begin
  Result := CreateComObject(CLASS_NexoByteSequence) as INexoNonStringType;
end;

class function CoNexoByteSequence.CreateRemote(const MachineName: string): INexoNonStringType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoByteSequence) as INexoNonStringType;
end;

class function CoNexoCurrency.Create: INexoCurrency;
begin
  Result := CreateComObject(CLASS_NexoCurrency) as INexoCurrency;
end;

class function CoNexoCurrency.CreateRemote(const MachineName: string): INexoCurrency;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrency) as INexoCurrency;
end;

class function CoNexoCurrencyEUR.Create: INexoCurrency;
begin
  Result := CreateComObject(CLASS_NexoCurrencyEUR) as INexoCurrency;
end;

class function CoNexoCurrencyEUR.CreateRemote(const MachineName: string): INexoCurrency;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrencyEUR) as INexoCurrency;
end;

class function CoNexoCurrencyUSD.Create: INexoCurrency;
begin
  Result := CreateComObject(CLASS_NexoCurrencyUSD) as INexoCurrency;
end;

class function CoNexoCurrencyUSD.CreateRemote(const MachineName: string): INexoCurrency;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrencyUSD) as INexoCurrency;
end;

class function CoNexoCurrencyGBP.Create: INexoCurrency;
begin
  Result := CreateComObject(CLASS_NexoCurrencyGBP) as INexoCurrency;
end;

class function CoNexoCurrencyGBP.CreateRemote(const MachineName: string): INexoCurrency;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrencyGBP) as INexoCurrency;
end;

class function CoNexoCurrencyCHF.Create: INexoCurrency;
begin
  Result := CreateComObject(CLASS_NexoCurrencyCHF) as INexoCurrency;
end;

class function CoNexoCurrencyCHF.CreateRemote(const MachineName: string): INexoCurrency;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrencyCHF) as INexoCurrency;
end;

class function CoNexoCurrencyAmount.Create: INexoAmount;
begin
  Result := CreateComObject(CLASS_NexoCurrencyAmount) as INexoAmount;
end;

class function CoNexoCurrencyAmount.CreateRemote(const MachineName: string): INexoAmount;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCurrencyAmount) as INexoAmount;
end;

class function CoNexoSupportedProtocolVersions.Create: IEnumerable;
begin
  Result := CreateComObject(CLASS_NexoSupportedProtocolVersions) as IEnumerable;
end;

class function CoNexoSupportedProtocolVersions.CreateRemote(const MachineName: string): IEnumerable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoSupportedProtocolVersions) as IEnumerable;
end;

class function CoAbortRequestType.Create: IAbortRequestType;
begin
  Result := CreateComObject(CLASS_AbortRequestType) as IAbortRequestType;
end;

class function CoAbortRequestType.CreateRemote(const MachineName: string): IAbortRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AbortRequestType) as IAbortRequestType;
end;

class function CoMessageReferenceType.Create: IMessageReferenceType;
begin
  Result := CreateComObject(CLASS_MessageReferenceType) as IMessageReferenceType;
end;

class function CoMessageReferenceType.CreateRemote(const MachineName: string): IMessageReferenceType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MessageReferenceType) as IMessageReferenceType;
end;

class function CoDisplayResponseType.Create: IDisplayResponseType;
begin
  Result := CreateComObject(CLASS_DisplayResponseType) as IDisplayResponseType;
end;

class function CoDisplayResponseType.CreateRemote(const MachineName: string): IDisplayResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DisplayResponseType) as IDisplayResponseType;
end;

class function CoOutputResultType.Create: IOutputResultType;
begin
  Result := CreateComObject(CLASS_OutputResultType) as IOutputResultType;
end;

class function CoOutputResultType.CreateRemote(const MachineName: string): IOutputResultType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OutputResultType) as IOutputResultType;
end;

class function CoResponseType.Create: IResponseType;
begin
  Result := CreateComObject(CLASS_ResponseType) as IResponseType;
end;

class function CoResponseType.CreateRemote(const MachineName: string): IResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ResponseType) as IResponseType;
end;

class function CoDisplayRequestType.Create: IDisplayRequestType;
begin
  Result := CreateComObject(CLASS_DisplayRequestType) as IDisplayRequestType;
end;

class function CoDisplayRequestType.CreateRemote(const MachineName: string): IDisplayRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DisplayRequestType) as IDisplayRequestType;
end;

class function CoDisplayOutputType.Create: IDisplayOutputType;
begin
  Result := CreateComObject(CLASS_DisplayOutputType) as IDisplayOutputType;
end;

class function CoDisplayOutputType.CreateRemote(const MachineName: string): IDisplayOutputType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DisplayOutputType) as IDisplayOutputType;
end;

class function CoOutputContentType.Create: IOutputContentType;
begin
  Result := CreateComObject(CLASS_OutputContentType) as IOutputContentType;
end;

class function CoOutputContentType.CreateRemote(const MachineName: string): IOutputContentType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OutputContentType) as IOutputContentType;
end;

class function CoPredefinedContentType.Create: IPredefinedContentType;
begin
  Result := CreateComObject(CLASS_PredefinedContentType) as IPredefinedContentType;
end;

class function CoPredefinedContentType.CreateRemote(const MachineName: string): IPredefinedContentType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PredefinedContentType) as IPredefinedContentType;
end;

class function CoOutputTextType.Create: IOutputTextType;
begin
  Result := CreateComObject(CLASS_OutputTextType) as IOutputTextType;
end;

class function CoOutputTextType.CreateRemote(const MachineName: string): IOutputTextType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OutputTextType) as IOutputTextType;
end;

class function CoOutputBarcodeType.Create: IOutputBarcodeType;
begin
  Result := CreateComObject(CLASS_OutputBarcodeType) as IOutputBarcodeType;
end;

class function CoOutputBarcodeType.CreateRemote(const MachineName: string): IOutputBarcodeType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OutputBarcodeType) as IOutputBarcodeType;
end;

class function CoMenuEntryType.Create: IMenuEntryType;
begin
  Result := CreateComObject(CLASS_MenuEntryType) as IMenuEntryType;
end;

class function CoMenuEntryType.CreateRemote(const MachineName: string): IMenuEntryType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MenuEntryType) as IMenuEntryType;
end;

class function CoAdminRequestType.Create: IAdminRequestType;
begin
  Result := CreateComObject(CLASS_AdminRequestType) as IAdminRequestType;
end;

class function CoAdminRequestType.CreateRemote(const MachineName: string): IAdminRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AdminRequestType) as IAdminRequestType;
end;

class function CoAdminResponseType.Create: IAdminResponseType;
begin
  Result := CreateComObject(CLASS_AdminResponseType) as IAdminResponseType;
end;

class function CoAdminResponseType.CreateRemote(const MachineName: string): IAdminResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AdminResponseType) as IAdminResponseType;
end;

class function CoAllowedProductType.Create: IAllowedProductType;
begin
  Result := CreateComObject(CLASS_AllowedProductType) as IAllowedProductType;
end;

class function CoAllowedProductType.CreateRemote(const MachineName: string): IAllowedProductType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AllowedProductType) as IAllowedProductType;
end;

class function CoAmountsReqType.Create: IAmountsReqType;
begin
  Result := CreateComObject(CLASS_AmountsReqType) as IAmountsReqType;
end;

class function CoAmountsReqType.CreateRemote(const MachineName: string): IAmountsReqType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AmountsReqType) as IAmountsReqType;
end;

class function CoAmountsRespType.Create: IAmountsRespType;
begin
  Result := CreateComObject(CLASS_AmountsRespType) as IAmountsRespType;
end;

class function CoAmountsRespType.CreateRemote(const MachineName: string): IAmountsRespType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AmountsRespType) as IAmountsRespType;
end;

class function CoAreaSizeType.Create: IAreaSizeType;
begin
  Result := CreateComObject(CLASS_AreaSizeType) as IAreaSizeType;
end;

class function CoAreaSizeType.CreateRemote(const MachineName: string): IAreaSizeType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AreaSizeType) as IAreaSizeType;
end;

class function CoBalanceInquiryRequestType.Create: IBalanceInquiryRequestType;
begin
  Result := CreateComObject(CLASS_BalanceInquiryRequestType) as IBalanceInquiryRequestType;
end;

class function CoBalanceInquiryRequestType.CreateRemote(const MachineName: string): IBalanceInquiryRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BalanceInquiryRequestType) as IBalanceInquiryRequestType;
end;

class function CoPaymentAccountReqType.Create: IPaymentAccountReqType;
begin
  Result := CreateComObject(CLASS_PaymentAccountReqType) as IPaymentAccountReqType;
end;

class function CoPaymentAccountReqType.CreateRemote(const MachineName: string): IPaymentAccountReqType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentAccountReqType) as IPaymentAccountReqType;
end;

class function CoTransactionIdentificationType.Create: ITransactionIdentificationType;
begin
  Result := CreateComObject(CLASS_TransactionIdentificationType) as ITransactionIdentificationType;
end;

class function CoTransactionIdentificationType.CreateRemote(const MachineName: string): ITransactionIdentificationType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransactionIdentificationType) as ITransactionIdentificationType;
end;

class function CoPaymentInstrumentDataType.Create: IPaymentInstrumentDataType;
begin
  Result := CreateComObject(CLASS_PaymentInstrumentDataType) as IPaymentInstrumentDataType;
end;

class function CoPaymentInstrumentDataType.CreateRemote(const MachineName: string): IPaymentInstrumentDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentInstrumentDataType) as IPaymentInstrumentDataType;
end;

class function CoCardDataType.Create: ICardDataType;
begin
  Result := CreateComObject(CLASS_CardDataType) as ICardDataType;
end;

class function CoCardDataType.CreateRemote(const MachineName: string): ICardDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardDataType) as ICardDataType;
end;

class function CoContentInformationType.Create: IContentInformationType;
begin
  Result := CreateComObject(CLASS_ContentInformationType) as IContentInformationType;
end;

class function CoContentInformationType.CreateRemote(const MachineName: string): IContentInformationType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ContentInformationType) as IContentInformationType;
end;

class function CoAuthenticatedDataType.Create: IAuthenticatedDataType;
begin
  Result := CreateComObject(CLASS_AuthenticatedDataType) as IAuthenticatedDataType;
end;

class function CoAuthenticatedDataType.CreateRemote(const MachineName: string): IAuthenticatedDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AuthenticatedDataType) as IAuthenticatedDataType;
end;

class function CoKEKType.Create: IKEKType;
begin
  Result := CreateComObject(CLASS_KEKType) as IKEKType;
end;

class function CoKEKType.CreateRemote(const MachineName: string): IKEKType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_KEKType) as IKEKType;
end;

class function CoKEKIdentifierType.Create: IKEKIdentifierType;
begin
  Result := CreateComObject(CLASS_KEKIdentifierType) as IKEKIdentifierType;
end;

class function CoKEKIdentifierType.CreateRemote(const MachineName: string): IKEKIdentifierType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_KEKIdentifierType) as IKEKIdentifierType;
end;

class function CoAlgorithmIdentifier.Create: IAlgorithmIdentifier;
begin
  Result := CreateComObject(CLASS_AlgorithmIdentifier) as IAlgorithmIdentifier;
end;

class function CoAlgorithmIdentifier.CreateRemote(const MachineName: string): IAlgorithmIdentifier;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AlgorithmIdentifier) as IAlgorithmIdentifier;
end;

class function CoParameterType.Create: IParameterType;
begin
  Result := CreateComObject(CLASS_ParameterType) as IParameterType;
end;

class function CoParameterType.CreateRemote(const MachineName: string): IParameterType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ParameterType) as IParameterType;
end;

class function CoKeyTransportType.Create: IKeyTransportType;
begin
  Result := CreateComObject(CLASS_KeyTransportType) as IKeyTransportType;
end;

class function CoKeyTransportType.CreateRemote(const MachineName: string): IKeyTransportType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_KeyTransportType) as IKeyTransportType;
end;

class function CoRecipientIdentifierType.Create: IRecipientIdentifierType;
begin
  Result := CreateComObject(CLASS_RecipientIdentifierType) as IRecipientIdentifierType;
end;

class function CoRecipientIdentifierType.CreateRemote(const MachineName: string): IRecipientIdentifierType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RecipientIdentifierType) as IRecipientIdentifierType;
end;

class function CoIssuerAndSerialNumberType.Create: IIssuerAndSerialNumberType;
begin
  Result := CreateComObject(CLASS_IssuerAndSerialNumberType) as IIssuerAndSerialNumberType;
end;

class function CoIssuerAndSerialNumberType.CreateRemote(const MachineName: string): IIssuerAndSerialNumberType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_IssuerAndSerialNumberType) as IIssuerAndSerialNumberType;
end;

class function CoRelativeDistinguishedNameType.Create: IRelativeDistinguishedNameType;
begin
  Result := CreateComObject(CLASS_RelativeDistinguishedNameType) as IRelativeDistinguishedNameType;
end;

class function CoRelativeDistinguishedNameType.CreateRemote(const MachineName: string): IRelativeDistinguishedNameType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RelativeDistinguishedNameType) as IRelativeDistinguishedNameType;
end;

class function CoEncapsulatedContentType.Create: IEncapsulatedContentType;
begin
  Result := CreateComObject(CLASS_EncapsulatedContentType) as IEncapsulatedContentType;
end;

class function CoEncapsulatedContentType.CreateRemote(const MachineName: string): IEncapsulatedContentType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EncapsulatedContentType) as IEncapsulatedContentType;
end;

class function CoDigestedDataType.Create: IDigestedDataType;
begin
  Result := CreateComObject(CLASS_DigestedDataType) as IDigestedDataType;
end;

class function CoDigestedDataType.CreateRemote(const MachineName: string): IDigestedDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DigestedDataType) as IDigestedDataType;
end;

class function CoEnvelopedDataType.Create: IEnvelopedDataType;
begin
  Result := CreateComObject(CLASS_EnvelopedDataType) as IEnvelopedDataType;
end;

class function CoEnvelopedDataType.CreateRemote(const MachineName: string): IEnvelopedDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnvelopedDataType) as IEnvelopedDataType;
end;

class function CoEncryptedContentType.Create: IEncryptedContentType;
begin
  Result := CreateComObject(CLASS_EncryptedContentType) as IEncryptedContentType;
end;

class function CoEncryptedContentType.CreateRemote(const MachineName: string): IEncryptedContentType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EncryptedContentType) as IEncryptedContentType;
end;

class function CoNamedKeyEncryptedDataType.Create: INamedKeyEncryptedDataType;
begin
  Result := CreateComObject(CLASS_NamedKeyEncryptedDataType) as INamedKeyEncryptedDataType;
end;

class function CoNamedKeyEncryptedDataType.CreateRemote(const MachineName: string): INamedKeyEncryptedDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NamedKeyEncryptedDataType) as INamedKeyEncryptedDataType;
end;

class function CoSignedDataType.Create: ISignedDataType;
begin
  Result := CreateComObject(CLASS_SignedDataType) as ISignedDataType;
end;

class function CoSignedDataType.CreateRemote(const MachineName: string): ISignedDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SignedDataType) as ISignedDataType;
end;

class function CoSignerType.Create: ISignerType;
begin
  Result := CreateComObject(CLASS_SignerType) as ISignerType;
end;

class function CoSignerType.CreateRemote(const MachineName: string): ISignerType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SignerType) as ISignerType;
end;

class function CoSignerIdentifierType.Create: ISignerIdentifierType;
begin
  Result := CreateComObject(CLASS_SignerIdentifierType) as ISignerIdentifierType;
end;

class function CoSignerIdentifierType.CreateRemote(const MachineName: string): ISignerIdentifierType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SignerIdentifierType) as ISignerIdentifierType;
end;

class function CoSensitiveCardDataType.Create: ISensitiveCardDataType;
begin
  Result := CreateComObject(CLASS_SensitiveCardDataType) as ISensitiveCardDataType;
end;

class function CoSensitiveCardDataType.CreateRemote(const MachineName: string): ISensitiveCardDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SensitiveCardDataType) as ISensitiveCardDataType;
end;

class function CoTrackDataType.Create: ITrackDataType;
begin
  Result := CreateComObject(CLASS_TrackDataType) as ITrackDataType;
end;

class function CoTrackDataType.CreateRemote(const MachineName: string): ITrackDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TrackDataType) as ITrackDataType;
end;

class function CoPaymentTokenType.Create: IPaymentTokenType;
begin
  Result := CreateComObject(CLASS_PaymentTokenType) as IPaymentTokenType;
end;

class function CoPaymentTokenType.CreateRemote(const MachineName: string): IPaymentTokenType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentTokenType) as IPaymentTokenType;
end;

class function CoCustomerOrderType.Create: ICustomerOrderType;
begin
  Result := CreateComObject(CLASS_CustomerOrderType) as ICustomerOrderType;
end;

class function CoCustomerOrderType.CreateRemote(const MachineName: string): ICustomerOrderType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomerOrderType) as ICustomerOrderType;
end;

class function CoCheckDataType.Create: ICheckDataType;
begin
  Result := CreateComObject(CLASS_CheckDataType) as ICheckDataType;
end;

class function CoCheckDataType.CreateRemote(const MachineName: string): ICheckDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CheckDataType) as ICheckDataType;
end;

class function CoMobileDataType.Create: IMobileDataType;
begin
  Result := CreateComObject(CLASS_MobileDataType) as IMobileDataType;
end;

class function CoMobileDataType.CreateRemote(const MachineName: string): IMobileDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MobileDataType) as IMobileDataType;
end;

class function CoGeolocationType.Create: IGeolocationType;
begin
  Result := CreateComObject(CLASS_GeolocationType) as IGeolocationType;
end;

class function CoGeolocationType.CreateRemote(const MachineName: string): IGeolocationType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GeolocationType) as IGeolocationType;
end;

class function CoGeographicCoordinatesType.Create: IGeographicCoordinatesType;
begin
  Result := CreateComObject(CLASS_GeographicCoordinatesType) as IGeographicCoordinatesType;
end;

class function CoGeographicCoordinatesType.CreateRemote(const MachineName: string): IGeographicCoordinatesType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GeographicCoordinatesType) as IGeographicCoordinatesType;
end;

class function CoUTMCoordinatesType.Create: IUTMCoordinatesType;
begin
  Result := CreateComObject(CLASS_UTMCoordinatesType) as IUTMCoordinatesType;
end;

class function CoUTMCoordinatesType.CreateRemote(const MachineName: string): IUTMCoordinatesType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UTMCoordinatesType) as IUTMCoordinatesType;
end;

class function CoSensitiveMobileDataType.Create: ISensitiveMobileDataType;
begin
  Result := CreateComObject(CLASS_SensitiveMobileDataType) as ISensitiveMobileDataType;
end;

class function CoSensitiveMobileDataType.CreateRemote(const MachineName: string): ISensitiveMobileDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SensitiveMobileDataType) as ISensitiveMobileDataType;
end;

class function CoLoyaltyAccountReqType.Create: ILoyaltyAccountReqType;
begin
  Result := CreateComObject(CLASS_LoyaltyAccountReqType) as ILoyaltyAccountReqType;
end;

class function CoLoyaltyAccountReqType.CreateRemote(const MachineName: string): ILoyaltyAccountReqType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAccountReqType) as ILoyaltyAccountReqType;
end;

class function CoLoyaltyAccountIDType.Create: ILoyaltyAccountIDType;
begin
  Result := CreateComObject(CLASS_LoyaltyAccountIDType) as ILoyaltyAccountIDType;
end;

class function CoLoyaltyAccountIDType.CreateRemote(const MachineName: string): ILoyaltyAccountIDType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAccountIDType) as ILoyaltyAccountIDType;
end;

class function CoBalanceInquiryResponseType.Create: IBalanceInquiryResponseType;
begin
  Result := CreateComObject(CLASS_BalanceInquiryResponseType) as IBalanceInquiryResponseType;
end;

class function CoBalanceInquiryResponseType.CreateRemote(const MachineName: string): IBalanceInquiryResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BalanceInquiryResponseType) as IBalanceInquiryResponseType;
end;

class function CoPaymentAccountStatusType.Create: IPaymentAccountStatusType;
begin
  Result := CreateComObject(CLASS_PaymentAccountStatusType) as IPaymentAccountStatusType;
end;

class function CoPaymentAccountStatusType.CreateRemote(const MachineName: string): IPaymentAccountStatusType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentAccountStatusType) as IPaymentAccountStatusType;
end;

class function CoPaymentAcquirerDataType.Create: IPaymentAcquirerDataType;
begin
  Result := CreateComObject(CLASS_PaymentAcquirerDataType) as IPaymentAcquirerDataType;
end;

class function CoPaymentAcquirerDataType.CreateRemote(const MachineName: string): IPaymentAcquirerDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentAcquirerDataType) as IPaymentAcquirerDataType;
end;

class function CoLoyaltyAccountStatusType.Create: ILoyaltyAccountStatusType;
begin
  Result := CreateComObject(CLASS_LoyaltyAccountStatusType) as ILoyaltyAccountStatusType;
end;

class function CoLoyaltyAccountStatusType.CreateRemote(const MachineName: string): ILoyaltyAccountStatusType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAccountStatusType) as ILoyaltyAccountStatusType;
end;

class function CoLoyaltyAccountType.Create: ILoyaltyAccountType;
begin
  Result := CreateComObject(CLASS_LoyaltyAccountType) as ILoyaltyAccountType;
end;

class function CoLoyaltyAccountType.CreateRemote(const MachineName: string): ILoyaltyAccountType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAccountType) as ILoyaltyAccountType;
end;

class function CoBatchRequestType.Create: IBatchRequestType;
begin
  Result := CreateComObject(CLASS_BatchRequestType) as IBatchRequestType;
end;

class function CoBatchRequestType.CreateRemote(const MachineName: string): IBatchRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BatchRequestType) as IBatchRequestType;
end;

class function CoTransactionToPerformType.Create: ITransactionToPerformType;
begin
  Result := CreateComObject(CLASS_TransactionToPerformType) as ITransactionToPerformType;
end;

class function CoTransactionToPerformType.CreateRemote(const MachineName: string): ITransactionToPerformType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransactionToPerformType) as ITransactionToPerformType;
end;

class function CoLoyaltyRequestType.Create: ILoyaltyRequestType;
begin
  Result := CreateComObject(CLASS_LoyaltyRequestType) as ILoyaltyRequestType;
end;

class function CoLoyaltyRequestType.CreateRemote(const MachineName: string): ILoyaltyRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyRequestType) as ILoyaltyRequestType;
end;

class function CoSaleDataType.Create: ISaleDataType;
begin
  Result := CreateComObject(CLASS_SaleDataType) as ISaleDataType;
end;

class function CoSaleDataType.CreateRemote(const MachineName: string): ISaleDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleDataType) as ISaleDataType;
end;

class function CoSaleTerminalDataType.Create: ISaleTerminalDataType;
begin
  Result := CreateComObject(CLASS_SaleTerminalDataType) as ISaleTerminalDataType;
end;

class function CoSaleTerminalDataType.CreateRemote(const MachineName: string): ISaleTerminalDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleTerminalDataType) as ISaleTerminalDataType;
end;

class function CoSaleProfileType.Create: ISaleProfileType;
begin
  Result := CreateComObject(CLASS_SaleProfileType) as ISaleProfileType;
end;

class function CoSaleProfileType.CreateRemote(const MachineName: string): ISaleProfileType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleProfileType) as ISaleProfileType;
end;

class function CoSponsoredMerchantType.Create: ISponsoredMerchantType;
begin
  Result := CreateComObject(CLASS_SponsoredMerchantType) as ISponsoredMerchantType;
end;

class function CoSponsoredMerchantType.CreateRemote(const MachineName: string): ISponsoredMerchantType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SponsoredMerchantType) as ISponsoredMerchantType;
end;

class function CoSaleToIssuerDataType.Create: ISaleToIssuerDataType;
begin
  Result := CreateComObject(CLASS_SaleToIssuerDataType) as ISaleToIssuerDataType;
end;

class function CoSaleToIssuerDataType.CreateRemote(const MachineName: string): ISaleToIssuerDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleToIssuerDataType) as ISaleToIssuerDataType;
end;

class function CoLoyaltyTransactionType.Create: ILoyaltyTransactionType;
begin
  Result := CreateComObject(CLASS_LoyaltyTransactionType) as ILoyaltyTransactionType;
end;

class function CoLoyaltyTransactionType.CreateRemote(const MachineName: string): ILoyaltyTransactionType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyTransactionType) as ILoyaltyTransactionType;
end;

class function CoOriginalPOITransactionType.Create: IOriginalPOITransactionType;
begin
  Result := CreateComObject(CLASS_OriginalPOITransactionType) as IOriginalPOITransactionType;
end;

class function CoOriginalPOITransactionType.CreateRemote(const MachineName: string): IOriginalPOITransactionType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OriginalPOITransactionType) as IOriginalPOITransactionType;
end;

class function CoTransactionConditionsType.Create: ITransactionConditionsType;
begin
  Result := CreateComObject(CLASS_TransactionConditionsType) as ITransactionConditionsType;
end;

class function CoTransactionConditionsType.CreateRemote(const MachineName: string): ITransactionConditionsType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransactionConditionsType) as ITransactionConditionsType;
end;

class function CoSaleItemType.Create: ISaleItemType;
begin
  Result := CreateComObject(CLASS_SaleItemType) as ISaleItemType;
end;

class function CoSaleItemType.CreateRemote(const MachineName: string): ISaleItemType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleItemType) as ISaleItemType;
end;

class function CoLoyaltyDataType.Create: ILoyaltyDataType;
begin
  Result := CreateComObject(CLASS_LoyaltyDataType) as ILoyaltyDataType;
end;

class function CoLoyaltyDataType.CreateRemote(const MachineName: string): ILoyaltyDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyDataType) as ILoyaltyDataType;
end;

class function CoLoyaltyAmountType.Create: ILoyaltyAmountType;
begin
  Result := CreateComObject(CLASS_LoyaltyAmountType) as ILoyaltyAmountType;
end;

class function CoLoyaltyAmountType.CreateRemote(const MachineName: string): ILoyaltyAmountType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAmountType) as ILoyaltyAmountType;
end;

class function CoPaymentRequestType.Create: IPaymentRequestType;
begin
  Result := CreateComObject(CLASS_PaymentRequestType) as IPaymentRequestType;
end;

class function CoPaymentRequestType.CreateRemote(const MachineName: string): IPaymentRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentRequestType) as IPaymentRequestType;
end;

class function CoPaymentTransactionType.Create: IPaymentTransactionType;
begin
  Result := CreateComObject(CLASS_PaymentTransactionType) as IPaymentTransactionType;
end;

class function CoPaymentTransactionType.CreateRemote(const MachineName: string): IPaymentTransactionType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentTransactionType) as IPaymentTransactionType;
end;

class function CoPaymentDataType.Create: IPaymentDataType;
begin
  Result := CreateComObject(CLASS_PaymentDataType) as IPaymentDataType;
end;

class function CoPaymentDataType.CreateRemote(const MachineName: string): IPaymentDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentDataType) as IPaymentDataType;
end;

class function CoInstalmentType.Create: IInstalmentType;
begin
  Result := CreateComObject(CLASS_InstalmentType) as IInstalmentType;
end;

class function CoInstalmentType.CreateRemote(const MachineName: string): IInstalmentType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InstalmentType) as IInstalmentType;
end;

class function CoReversalRequestType.Create: IReversalRequestType;
begin
  Result := CreateComObject(CLASS_ReversalRequestType) as IReversalRequestType;
end;

class function CoReversalRequestType.CreateRemote(const MachineName: string): IReversalRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReversalRequestType) as IReversalRequestType;
end;

class function CoBatchResponseType.Create: IBatchResponseType;
begin
  Result := CreateComObject(CLASS_BatchResponseType) as IBatchResponseType;
end;

class function CoBatchResponseType.CreateRemote(const MachineName: string): IBatchResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BatchResponseType) as IBatchResponseType;
end;

class function CoPerformedTransactionType.Create: IPerformedTransactionType;
begin
  Result := CreateComObject(CLASS_PerformedTransactionType) as IPerformedTransactionType;
end;

class function CoPerformedTransactionType.CreateRemote(const MachineName: string): IPerformedTransactionType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PerformedTransactionType) as IPerformedTransactionType;
end;

class function CoPOIDataType.Create: IPOIDataType;
begin
  Result := CreateComObject(CLASS_POIDataType) as IPOIDataType;
end;

class function CoPOIDataType.CreateRemote(const MachineName: string): IPOIDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_POIDataType) as IPOIDataType;
end;

class function CoPaymentResultType.Create: IPaymentResultType;
begin
  Result := CreateComObject(CLASS_PaymentResultType) as IPaymentResultType;
end;

class function CoPaymentResultType.CreateRemote(const MachineName: string): IPaymentResultType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentResultType) as IPaymentResultType;
end;

class function CoCurrencyConversionType.Create: ICurrencyConversionType;
begin
  Result := CreateComObject(CLASS_CurrencyConversionType) as ICurrencyConversionType;
end;

class function CoCurrencyConversionType.CreateRemote(const MachineName: string): ICurrencyConversionType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CurrencyConversionType) as ICurrencyConversionType;
end;

class function CoAmountType.Create: IAmountType;
begin
  Result := CreateComObject(CLASS_AmountType) as IAmountType;
end;

class function CoAmountType.CreateRemote(const MachineName: string): IAmountType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AmountType) as IAmountType;
end;

class function CoCapturedSignatureType.Create: ICapturedSignatureType;
begin
  Result := CreateComObject(CLASS_CapturedSignatureType) as ICapturedSignatureType;
end;

class function CoCapturedSignatureType.CreateRemote(const MachineName: string): ICapturedSignatureType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CapturedSignatureType) as ICapturedSignatureType;
end;

class function CoSignaturePointType.Create: ISignaturePointType;
begin
  Result := CreateComObject(CLASS_SignaturePointType) as ISignaturePointType;
end;

class function CoSignaturePointType.CreateRemote(const MachineName: string): ISignaturePointType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SignaturePointType) as ISignaturePointType;
end;

class function CoLoyaltyResultType.Create: ILoyaltyResultType;
begin
  Result := CreateComObject(CLASS_LoyaltyResultType) as ILoyaltyResultType;
end;

class function CoLoyaltyResultType.CreateRemote(const MachineName: string): ILoyaltyResultType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyResultType) as ILoyaltyResultType;
end;

class function CoLoyaltyAcquirerDataType.Create: ILoyaltyAcquirerDataType;
begin
  Result := CreateComObject(CLASS_LoyaltyAcquirerDataType) as ILoyaltyAcquirerDataType;
end;

class function CoLoyaltyAcquirerDataType.CreateRemote(const MachineName: string): ILoyaltyAcquirerDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyAcquirerDataType) as ILoyaltyAcquirerDataType;
end;

class function CoRebatesType.Create: IRebatesType;
begin
  Result := CreateComObject(CLASS_RebatesType) as IRebatesType;
end;

class function CoRebatesType.CreateRemote(const MachineName: string): IRebatesType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RebatesType) as IRebatesType;
end;

class function CoSaleItemRebateType.Create: ISaleItemRebateType;
begin
  Result := CreateComObject(CLASS_SaleItemRebateType) as ISaleItemRebateType;
end;

class function CoSaleItemRebateType.CreateRemote(const MachineName: string): ISaleItemRebateType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleItemRebateType) as ISaleItemRebateType;
end;

class function CoCardAcquisitionRequestType.Create: ICardAcquisitionRequestType;
begin
  Result := CreateComObject(CLASS_CardAcquisitionRequestType) as ICardAcquisitionRequestType;
end;

class function CoCardAcquisitionRequestType.CreateRemote(const MachineName: string): ICardAcquisitionRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardAcquisitionRequestType) as ICardAcquisitionRequestType;
end;

class function CoCardAcquisitionTransactionType.Create: ICardAcquisitionTransactionType;
begin
  Result := CreateComObject(CLASS_CardAcquisitionTransactionType) as ICardAcquisitionTransactionType;
end;

class function CoCardAcquisitionTransactionType.CreateRemote(const MachineName: string): ICardAcquisitionTransactionType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardAcquisitionTransactionType) as ICardAcquisitionTransactionType;
end;

class function CoCardAcquisitionResponseType.Create: ICardAcquisitionResponseType;
begin
  Result := CreateComObject(CLASS_CardAcquisitionResponseType) as ICardAcquisitionResponseType;
end;

class function CoCardAcquisitionResponseType.CreateRemote(const MachineName: string): ICardAcquisitionResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardAcquisitionResponseType) as ICardAcquisitionResponseType;
end;

class function CoCardholderPINType.Create: ICardholderPINType;
begin
  Result := CreateComObject(CLASS_CardholderPINType) as ICardholderPINType;
end;

class function CoCardholderPINType.CreateRemote(const MachineName: string): ICardholderPINType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardholderPINType) as ICardholderPINType;
end;

class function CoCardReaderAPDURequestType.Create: ICardReaderAPDURequestType;
begin
  Result := CreateComObject(CLASS_CardReaderAPDURequestType) as ICardReaderAPDURequestType;
end;

class function CoCardReaderAPDURequestType.CreateRemote(const MachineName: string): ICardReaderAPDURequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardReaderAPDURequestType) as ICardReaderAPDURequestType;
end;

class function CoCardReaderAPDUResponseType.Create: ICardReaderAPDUResponseType;
begin
  Result := CreateComObject(CLASS_CardReaderAPDUResponseType) as ICardReaderAPDUResponseType;
end;

class function CoCardReaderAPDUResponseType.CreateRemote(const MachineName: string): ICardReaderAPDUResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardReaderAPDUResponseType) as ICardReaderAPDUResponseType;
end;

class function CoCardReaderInitRequestType.Create: ICardReaderInitRequestType;
begin
  Result := CreateComObject(CLASS_CardReaderInitRequestType) as ICardReaderInitRequestType;
end;

class function CoCardReaderInitRequestType.CreateRemote(const MachineName: string): ICardReaderInitRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardReaderInitRequestType) as ICardReaderInitRequestType;
end;

class function CoCardReaderInitResponseType.Create: ICardReaderInitResponseType;
begin
  Result := CreateComObject(CLASS_CardReaderInitResponseType) as ICardReaderInitResponseType;
end;

class function CoCardReaderInitResponseType.CreateRemote(const MachineName: string): ICardReaderInitResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardReaderInitResponseType) as ICardReaderInitResponseType;
end;

class function CoICCResetDataType.Create: IICCResetDataType;
begin
  Result := CreateComObject(CLASS_ICCResetDataType) as IICCResetDataType;
end;

class function CoICCResetDataType.CreateRemote(const MachineName: string): IICCResetDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ICCResetDataType) as IICCResetDataType;
end;

class function CoCardReaderPowerOffRequestType.Create: ICardReaderPowerOffRequestType;
begin
  Result := CreateComObject(CLASS_CardReaderPowerOffRequestType) as ICardReaderPowerOffRequestType;
end;

class function CoCardReaderPowerOffRequestType.CreateRemote(const MachineName: string): ICardReaderPowerOffRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardReaderPowerOffRequestType) as ICardReaderPowerOffRequestType;
end;

class function CoCardReaderPowerOffResponseType.Create: ICardReaderPowerOffResponseType;
begin
  Result := CreateComObject(CLASS_CardReaderPowerOffResponseType) as ICardReaderPowerOffResponseType;
end;

class function CoCardReaderPowerOffResponseType.CreateRemote(const MachineName: string): ICardReaderPowerOffResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CardReaderPowerOffResponseType) as ICardReaderPowerOffResponseType;
end;

class function CoCashHandlingDeviceType.Create: ICashHandlingDeviceType;
begin
  Result := CreateComObject(CLASS_CashHandlingDeviceType) as ICashHandlingDeviceType;
end;

class function CoCashHandlingDeviceType.CreateRemote(const MachineName: string): ICashHandlingDeviceType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CashHandlingDeviceType) as ICashHandlingDeviceType;
end;

class function CoCoinsOrBillsType.Create: ICoinsOrBillsType;
begin
  Result := CreateComObject(CLASS_CoinsOrBillsType) as ICoinsOrBillsType;
end;

class function CoCoinsOrBillsType.CreateRemote(const MachineName: string): ICoinsOrBillsType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CoinsOrBillsType) as ICoinsOrBillsType;
end;

class function CoDiagnosisRequestType.Create: IDiagnosisRequestType;
begin
  Result := CreateComObject(CLASS_DiagnosisRequestType) as IDiagnosisRequestType;
end;

class function CoDiagnosisRequestType.CreateRemote(const MachineName: string): IDiagnosisRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DiagnosisRequestType) as IDiagnosisRequestType;
end;

class function CoDiagnosisResponseType.Create: IDiagnosisResponseType;
begin
  Result := CreateComObject(CLASS_DiagnosisResponseType) as IDiagnosisResponseType;
end;

class function CoDiagnosisResponseType.CreateRemote(const MachineName: string): IDiagnosisResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DiagnosisResponseType) as IDiagnosisResponseType;
end;

class function CoPOIStatusType.Create: IPOIStatusType;
begin
  Result := CreateComObject(CLASS_POIStatusType) as IPOIStatusType;
end;

class function CoPOIStatusType.CreateRemote(const MachineName: string): IPOIStatusType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_POIStatusType) as IPOIStatusType;
end;

class function CoHostStatusType.Create: IHostStatusType;
begin
  Result := CreateComObject(CLASS_HostStatusType) as IHostStatusType;
end;

class function CoHostStatusType.CreateRemote(const MachineName: string): IHostStatusType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HostStatusType) as IHostStatusType;
end;

class function CoEnableServiceRequestType.Create: IEnableServiceRequestType;
begin
  Result := CreateComObject(CLASS_EnableServiceRequestType) as IEnableServiceRequestType;
end;

class function CoEnableServiceRequestType.CreateRemote(const MachineName: string): IEnableServiceRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnableServiceRequestType) as IEnableServiceRequestType;
end;

class function CoEnableServiceResponseType.Create: IEnableServiceResponseType;
begin
  Result := CreateComObject(CLASS_EnableServiceResponseType) as IEnableServiceResponseType;
end;

class function CoEnableServiceResponseType.CreateRemote(const MachineName: string): IEnableServiceResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnableServiceResponseType) as IEnableServiceResponseType;
end;

class function CoEventNotificationType.Create: IEventNotificationType;
begin
  Result := CreateComObject(CLASS_EventNotificationType) as IEventNotificationType;
end;

class function CoEventNotificationType.CreateRemote(const MachineName: string): IEventNotificationType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EventNotificationType) as IEventNotificationType;
end;

class function CoGetTotalsRequestType.Create: IGetTotalsRequestType;
begin
  Result := CreateComObject(CLASS_GetTotalsRequestType) as IGetTotalsRequestType;
end;

class function CoGetTotalsRequestType.CreateRemote(const MachineName: string): IGetTotalsRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GetTotalsRequestType) as IGetTotalsRequestType;
end;

class function CoTotalFilterType.Create: ITotalFilterType;
begin
  Result := CreateComObject(CLASS_TotalFilterType) as ITotalFilterType;
end;

class function CoTotalFilterType.CreateRemote(const MachineName: string): ITotalFilterType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TotalFilterType) as ITotalFilterType;
end;

class function CoGetTotalsResponseType.Create: IGetTotalsResponseType;
begin
  Result := CreateComObject(CLASS_GetTotalsResponseType) as IGetTotalsResponseType;
end;

class function CoGetTotalsResponseType.CreateRemote(const MachineName: string): IGetTotalsResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GetTotalsResponseType) as IGetTotalsResponseType;
end;

class function CoTransactionTotalsType.Create: ITransactionTotalsType;
begin
  Result := CreateComObject(CLASS_TransactionTotalsType) as ITransactionTotalsType;
end;

class function CoTransactionTotalsType.CreateRemote(const MachineName: string): ITransactionTotalsType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransactionTotalsType) as ITransactionTotalsType;
end;

class function CoPaymentTotalsType.Create: IPaymentTotalsType;
begin
  Result := CreateComObject(CLASS_PaymentTotalsType) as IPaymentTotalsType;
end;

class function CoPaymentTotalsType.CreateRemote(const MachineName: string): IPaymentTotalsType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentTotalsType) as IPaymentTotalsType;
end;

class function CoLoyaltyTotalsType.Create: ILoyaltyTotalsType;
begin
  Result := CreateComObject(CLASS_LoyaltyTotalsType) as ILoyaltyTotalsType;
end;

class function CoLoyaltyTotalsType.CreateRemote(const MachineName: string): ILoyaltyTotalsType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyTotalsType) as ILoyaltyTotalsType;
end;

class function CoInputType.Create: IInputType;
begin
  Result := CreateComObject(CLASS_InputType) as IInputType;
end;

class function CoInputType.CreateRemote(const MachineName: string): IInputType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InputType) as IInputType;
end;

class function CoInputDataType.Create: IInputDataType;
begin
  Result := CreateComObject(CLASS_InputDataType) as IInputDataType;
end;

class function CoInputDataType.CreateRemote(const MachineName: string): IInputDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InputDataType) as IInputDataType;
end;

class function CoInputRequestType.Create: IInputRequestType;
begin
  Result := CreateComObject(CLASS_InputRequestType) as IInputRequestType;
end;

class function CoInputRequestType.CreateRemote(const MachineName: string): IInputRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InputRequestType) as IInputRequestType;
end;

class function CoInputResponseType.Create: IInputResponseType;
begin
  Result := CreateComObject(CLASS_InputResponseType) as IInputResponseType;
end;

class function CoInputResponseType.CreateRemote(const MachineName: string): IInputResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InputResponseType) as IInputResponseType;
end;

class function CoInputResultType.Create: IInputResultType;
begin
  Result := CreateComObject(CLASS_InputResultType) as IInputResultType;
end;

class function CoInputResultType.CreateRemote(const MachineName: string): IInputResultType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InputResultType) as IInputResultType;
end;

class function CoInputUpdateType.Create: IInputUpdateType;
begin
  Result := CreateComObject(CLASS_InputUpdateType) as IInputUpdateType;
end;

class function CoInputUpdateType.CreateRemote(const MachineName: string): IInputUpdateType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InputUpdateType) as IInputUpdateType;
end;

class function CoLoginRequestType.Create: ILoginRequestType;
begin
  Result := CreateComObject(CLASS_LoginRequestType) as ILoginRequestType;
end;

class function CoLoginRequestType.CreateRemote(const MachineName: string): ILoginRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoginRequestType) as ILoginRequestType;
end;

class function CoSaleSoftwareType.Create: ISaleSoftwareType;
begin
  Result := CreateComObject(CLASS_SaleSoftwareType) as ISaleSoftwareType;
end;

class function CoSaleSoftwareType.CreateRemote(const MachineName: string): ISaleSoftwareType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleSoftwareType) as ISaleSoftwareType;
end;

class function CoLoginResponseType.Create: ILoginResponseType;
begin
  Result := CreateComObject(CLASS_LoginResponseType) as ILoginResponseType;
end;

class function CoLoginResponseType.CreateRemote(const MachineName: string): ILoginResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoginResponseType) as ILoginResponseType;
end;

class function CoPOISystemDataType.Create: IPOISystemDataType;
begin
  Result := CreateComObject(CLASS_POISystemDataType) as IPOISystemDataType;
end;

class function CoPOISystemDataType.CreateRemote(const MachineName: string): IPOISystemDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_POISystemDataType) as IPOISystemDataType;
end;

class function CoPOISoftwareType.Create: IPOISoftwareType;
begin
  Result := CreateComObject(CLASS_POISoftwareType) as IPOISoftwareType;
end;

class function CoPOISoftwareType.CreateRemote(const MachineName: string): IPOISoftwareType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_POISoftwareType) as IPOISoftwareType;
end;

class function CoPOITerminalDataType.Create: IPOITerminalDataType;
begin
  Result := CreateComObject(CLASS_POITerminalDataType) as IPOITerminalDataType;
end;

class function CoPOITerminalDataType.CreateRemote(const MachineName: string): IPOITerminalDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_POITerminalDataType) as IPOITerminalDataType;
end;

class function CoPOIProfileType.Create: IPOIProfileType;
begin
  Result := CreateComObject(CLASS_POIProfileType) as IPOIProfileType;
end;

class function CoPOIProfileType.CreateRemote(const MachineName: string): IPOIProfileType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_POIProfileType) as IPOIProfileType;
end;

class function CoLogoutRequestType.Create: ILogoutRequestType;
begin
  Result := CreateComObject(CLASS_LogoutRequestType) as ILogoutRequestType;
end;

class function CoLogoutRequestType.CreateRemote(const MachineName: string): ILogoutRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LogoutRequestType) as ILogoutRequestType;
end;

class function CoLogoutResponseType.Create: ILogoutResponseType;
begin
  Result := CreateComObject(CLASS_LogoutResponseType) as ILogoutResponseType;
end;

class function CoLogoutResponseType.CreateRemote(const MachineName: string): ILogoutResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LogoutResponseType) as ILogoutResponseType;
end;

class function CoLoyaltyResponseType.Create: ILoyaltyResponseType;
begin
  Result := CreateComObject(CLASS_LoyaltyResponseType) as ILoyaltyResponseType;
end;

class function CoLoyaltyResponseType.CreateRemote(const MachineName: string): ILoyaltyResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoyaltyResponseType) as ILoyaltyResponseType;
end;

class function CoPaymentReceiptType.Create: IPaymentReceiptType;
begin
  Result := CreateComObject(CLASS_PaymentReceiptType) as IPaymentReceiptType;
end;

class function CoPaymentReceiptType.CreateRemote(const MachineName: string): IPaymentReceiptType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentReceiptType) as IPaymentReceiptType;
end;

class function CoMessageHeaderType.Create: IMessageHeaderType;
begin
  Result := CreateComObject(CLASS_MessageHeaderType) as IMessageHeaderType;
end;

class function CoMessageHeaderType.CreateRemote(const MachineName: string): IMessageHeaderType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MessageHeaderType) as IMessageHeaderType;
end;

class function CoPaymentResponseType.Create: IPaymentResponseType;
begin
  Result := CreateComObject(CLASS_PaymentResponseType) as IPaymentResponseType;
end;

class function CoPaymentResponseType.CreateRemote(const MachineName: string): IPaymentResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PaymentResponseType) as IPaymentResponseType;
end;

class function CoPINRequestType.Create: IPINRequestType;
begin
  Result := CreateComObject(CLASS_PINRequestType) as IPINRequestType;
end;

class function CoPINRequestType.CreateRemote(const MachineName: string): IPINRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PINRequestType) as IPINRequestType;
end;

class function CoPINResponseType.Create: IPINResponseType;
begin
  Result := CreateComObject(CLASS_PINResponseType) as IPINResponseType;
end;

class function CoPINResponseType.CreateRemote(const MachineName: string): IPINResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PINResponseType) as IPINResponseType;
end;

class function CoPrintOutputType.Create: IPrintOutputType;
begin
  Result := CreateComObject(CLASS_PrintOutputType) as IPrintOutputType;
end;

class function CoPrintOutputType.CreateRemote(const MachineName: string): IPrintOutputType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PrintOutputType) as IPrintOutputType;
end;

class function CoPrintRequestType.Create: IPrintRequestType;
begin
  Result := CreateComObject(CLASS_PrintRequestType) as IPrintRequestType;
end;

class function CoPrintRequestType.CreateRemote(const MachineName: string): IPrintRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PrintRequestType) as IPrintRequestType;
end;

class function CoPrintResponseType.Create: IPrintResponseType;
begin
  Result := CreateComObject(CLASS_PrintResponseType) as IPrintResponseType;
end;

class function CoPrintResponseType.CreateRemote(const MachineName: string): IPrintResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PrintResponseType) as IPrintResponseType;
end;

class function CoReconciliationRequestType.Create: IReconciliationRequestType;
begin
  Result := CreateComObject(CLASS_ReconciliationRequestType) as IReconciliationRequestType;
end;

class function CoReconciliationRequestType.CreateRemote(const MachineName: string): IReconciliationRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReconciliationRequestType) as IReconciliationRequestType;
end;

class function CoReconciliationResponseType.Create: IReconciliationResponseType;
begin
  Result := CreateComObject(CLASS_ReconciliationResponseType) as IReconciliationResponseType;
end;

class function CoReconciliationResponseType.CreateRemote(const MachineName: string): IReconciliationResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReconciliationResponseType) as IReconciliationResponseType;
end;

class function CoRepeatedMessageResponseType.Create: IRepeatedMessageResponseType;
begin
  Result := CreateComObject(CLASS_RepeatedMessageResponseType) as IRepeatedMessageResponseType;
end;

class function CoRepeatedMessageResponseType.CreateRemote(const MachineName: string): IRepeatedMessageResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RepeatedMessageResponseType) as IRepeatedMessageResponseType;
end;

class function CoReversalResponseType.Create: IReversalResponseType;
begin
  Result := CreateComObject(CLASS_ReversalResponseType) as IReversalResponseType;
end;

class function CoReversalResponseType.CreateRemote(const MachineName: string): IReversalResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReversalResponseType) as IReversalResponseType;
end;

class function CoStoredValueResponseType.Create: IStoredValueResponseType;
begin
  Result := CreateComObject(CLASS_StoredValueResponseType) as IStoredValueResponseType;
end;

class function CoStoredValueResponseType.CreateRemote(const MachineName: string): IStoredValueResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StoredValueResponseType) as IStoredValueResponseType;
end;

class function CoStoredValueResultType.Create: IStoredValueResultType;
begin
  Result := CreateComObject(CLASS_StoredValueResultType) as IStoredValueResultType;
end;

class function CoStoredValueResultType.CreateRemote(const MachineName: string): IStoredValueResultType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StoredValueResultType) as IStoredValueResultType;
end;

class function CoStoredValueAccountStatusType.Create: IStoredValueAccountStatusType;
begin
  Result := CreateComObject(CLASS_StoredValueAccountStatusType) as IStoredValueAccountStatusType;
end;

class function CoStoredValueAccountStatusType.CreateRemote(const MachineName: string): IStoredValueAccountStatusType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StoredValueAccountStatusType) as IStoredValueAccountStatusType;
end;

class function CoStoredValueAccountIDType.Create: IStoredValueAccountIDType;
begin
  Result := CreateComObject(CLASS_StoredValueAccountIDType) as IStoredValueAccountIDType;
end;

class function CoStoredValueAccountIDType.CreateRemote(const MachineName: string): IStoredValueAccountIDType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StoredValueAccountIDType) as IStoredValueAccountIDType;
end;

class function CoSoundContentType.Create: ISoundContentType;
begin
  Result := CreateComObject(CLASS_SoundContentType) as ISoundContentType;
end;

class function CoSoundContentType.CreateRemote(const MachineName: string): ISoundContentType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SoundContentType) as ISoundContentType;
end;

class function CoSoundRequestType.Create: ISoundRequestType;
begin
  Result := CreateComObject(CLASS_SoundRequestType) as ISoundRequestType;
end;

class function CoSoundRequestType.CreateRemote(const MachineName: string): ISoundRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SoundRequestType) as ISoundRequestType;
end;

class function CoSoundResponseType.Create: ISoundResponseType;
begin
  Result := CreateComObject(CLASS_SoundResponseType) as ISoundResponseType;
end;

class function CoSoundResponseType.CreateRemote(const MachineName: string): ISoundResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SoundResponseType) as ISoundResponseType;
end;

class function CoStoredValueDataType.Create: IStoredValueDataType;
begin
  Result := CreateComObject(CLASS_StoredValueDataType) as IStoredValueDataType;
end;

class function CoStoredValueDataType.CreateRemote(const MachineName: string): IStoredValueDataType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StoredValueDataType) as IStoredValueDataType;
end;

class function CoStoredValueRequestType.Create: IStoredValueRequestType;
begin
  Result := CreateComObject(CLASS_StoredValueRequestType) as IStoredValueRequestType;
end;

class function CoStoredValueRequestType.CreateRemote(const MachineName: string): IStoredValueRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StoredValueRequestType) as IStoredValueRequestType;
end;

class function CoTransmitRequestType.Create: ITransmitRequestType;
begin
  Result := CreateComObject(CLASS_TransmitRequestType) as ITransmitRequestType;
end;

class function CoTransmitRequestType.CreateRemote(const MachineName: string): ITransmitRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransmitRequestType) as ITransmitRequestType;
end;

class function CoTransmitResponseType.Create: ITransmitResponseType;
begin
  Result := CreateComObject(CLASS_TransmitResponseType) as ITransmitResponseType;
end;

class function CoTransmitResponseType.CreateRemote(const MachineName: string): ITransmitResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransmitResponseType) as ITransmitResponseType;
end;

class function CoTransactionStatusRequestType.Create: ITransactionStatusRequestType;
begin
  Result := CreateComObject(CLASS_TransactionStatusRequestType) as ITransactionStatusRequestType;
end;

class function CoTransactionStatusRequestType.CreateRemote(const MachineName: string): ITransactionStatusRequestType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransactionStatusRequestType) as ITransactionStatusRequestType;
end;

class function CoTransactionStatusResponseType.Create: ITransactionStatusResponseType;
begin
  Result := CreateComObject(CLASS_TransactionStatusResponseType) as ITransactionStatusResponseType;
end;

class function CoTransactionStatusResponseType.CreateRemote(const MachineName: string): ITransactionStatusResponseType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TransactionStatusResponseType) as ITransactionStatusResponseType;
end;

class function CoSaleToPOIRequest.Create: ISaleToPOIRequest;
begin
  Result := CreateComObject(CLASS_SaleToPOIRequest) as ISaleToPOIRequest;
end;

class function CoSaleToPOIRequest.CreateRemote(const MachineName: string): ISaleToPOIRequest;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleToPOIRequest) as ISaleToPOIRequest;
end;

class function CoSaleToPOIResponse.Create: ISaleToPOIResponse;
begin
  Result := CreateComObject(CLASS_SaleToPOIResponse) as ISaleToPOIResponse;
end;

class function CoSaleToPOIResponse.CreateRemote(const MachineName: string): ISaleToPOIResponse;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SaleToPOIResponse) as ISaleToPOIResponse;
end;

class function CoIssuerType.Create: IIssuerType;
begin
  Result := CreateComObject(CLASS_IssuerType) as IIssuerType;
end;

class function CoIssuerType.CreateRemote(const MachineName: string): IIssuerType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_IssuerType) as IIssuerType;
end;

class function CoNexoRetailerServerActivity.Create: INexoRetailerServerActivity;
begin
  Result := CreateComObject(CLASS_NexoRetailerServerActivity) as INexoRetailerServerActivity;
end;

class function CoNexoRetailerServerActivity.CreateRemote(const MachineName: string): INexoRetailerServerActivity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerActivity) as INexoRetailerServerActivity;
end;

class function CoNexoRetailerServerSettings.Create: INexoRetailerServerSettings;
begin
  Result := CreateComObject(CLASS_NexoRetailerServerSettings) as INexoRetailerServerSettings;
end;

class function CoNexoRetailerServerSettings.CreateRemote(const MachineName: string): INexoRetailerServerSettings;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerSettings) as INexoRetailerServerSettings;
end;

class function CoNexoRetailerClientHandle.Create: INexoRetailerClientHandle;
begin
  Result := CreateComObject(CLASS_NexoRetailerClientHandle) as INexoRetailerClientHandle;
end;

class function CoNexoRetailerClientHandle.CreateRemote(const MachineName: string): INexoRetailerClientHandle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerClientHandle) as INexoRetailerClientHandle;
end;

class function CoNexoRetailerClient.Create: INexoRetailerClient;
begin
  Result := CreateComObject(CLASS_NexoRetailerClient) as INexoRetailerClient;
end;

class function CoNexoRetailerClient.CreateRemote(const MachineName: string): INexoRetailerClient;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerClient) as INexoRetailerClient;
end;

class function CoNexoRetailerClientSettings.Create: INexoRetailerClientSettings;
begin
  Result := CreateComObject(CLASS_NexoRetailerClientSettings) as INexoRetailerClientSettings;
end;

class function CoNexoRetailerClientSettings.CreateRemote(const MachineName: string): INexoRetailerClientSettings;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerClientSettings) as INexoRetailerClientSettings;
end;

class function CoNexoRetailerClientActivity.Create: INexoRetailerClientActivity;
begin
  Result := CreateComObject(CLASS_NexoRetailerClientActivity) as INexoRetailerClientActivity;
end;

class function CoNexoRetailerClientActivity.CreateRemote(const MachineName: string): INexoRetailerClientActivity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerClientActivity) as INexoRetailerClientActivity;
end;

class function CoNexoMessage.Create: _NexoMessage;
begin
  Result := CreateComObject(CLASS_NexoMessage) as _NexoMessage;
end;

class function CoNexoMessage.CreateRemote(const MachineName: string): _NexoMessage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoMessage) as _NexoMessage;
end;

class function CoNexoPartner.Create: _NexoPartner;
begin
  Result := CreateComObject(CLASS_NexoPartner) as _NexoPartner;
end;

class function CoNexoPartner.CreateRemote(const MachineName: string): _NexoPartner;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoPartner) as _NexoPartner;
end;

class function CoNexoEndPoint.Create: _NexoEndPoint;
begin
  Result := CreateComObject(CLASS_NexoEndPoint) as _NexoEndPoint;
end;

class function CoNexoEndPoint.CreateRemote(const MachineName: string): _NexoEndPoint;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoEndPoint) as _NexoEndPoint;
end;

class function CoNexoSession.Create: _NexoSession;
begin
  Result := CreateComObject(CLASS_NexoSession) as _NexoSession;
end;

class function CoNexoSession.CreateRemote(const MachineName: string): _NexoSession;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoSession) as _NexoSession;
end;

class function CoNexoDelegates.Create: _NexoDelegates;
begin
  Result := CreateComObject(CLASS_NexoDelegates) as _NexoDelegates;
end;

class function CoNexoDelegates.CreateRemote(const MachineName: string): _NexoDelegates;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDelegates) as _NexoDelegates;
end;

class function CoNexoKey.Create: _NexoKey;
begin
  Result := CreateComObject(CLASS_NexoKey) as _NexoKey;
end;

class function CoNexoKey.CreateRemote(const MachineName: string): _NexoKey;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoKey) as _NexoKey;
end;

class function CoNexoMessageHeader.Create: _NexoMessageHeader;
begin
  Result := CreateComObject(CLASS_NexoMessageHeader) as _NexoMessageHeader;
end;

class function CoNexoMessageHeader.CreateRemote(const MachineName: string): _NexoMessageHeader;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoMessageHeader) as _NexoMessageHeader;
end;

class function CoNexoDefaultCurrency.Create: _NexoDefaultCurrency;
begin
  Result := CreateComObject(CLASS_NexoDefaultCurrency) as _NexoDefaultCurrency;
end;

class function CoNexoDefaultCurrency.CreateRemote(const MachineName: string): _NexoDefaultCurrency;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDefaultCurrency) as _NexoDefaultCurrency;
end;

class function CoNexoMessageType.Create: _NexoMessageType;
begin
  Result := CreateComObject(CLASS_NexoMessageType) as _NexoMessageType;
end;

class function CoNexoMessageType.CreateRemote(const MachineName: string): _NexoMessageType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoMessageType) as _NexoMessageType;
end;

class function CoNexoMessageClass.Create: _NexoMessageClass;
begin
  Result := CreateComObject(CLASS_NexoMessageClass) as _NexoMessageClass;
end;

class function CoNexoMessageClass.CreateRemote(const MachineName: string): _NexoMessageClass;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoMessageClass) as _NexoMessageClass;
end;

class function CoNexoMessageCategory.Create: _NexoMessageCategory;
begin
  Result := CreateComObject(CLASS_NexoMessageCategory) as _NexoMessageCategory;
end;

class function CoNexoMessageCategory.CreateRemote(const MachineName: string): _NexoMessageCategory;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoMessageCategory) as _NexoMessageCategory;
end;

class function CoNexoTerminalEnvironment.Create: _NexoTerminalEnvironment;
begin
  Result := CreateComObject(CLASS_NexoTerminalEnvironment) as _NexoTerminalEnvironment;
end;

class function CoNexoTerminalEnvironment.CreateRemote(const MachineName: string): _NexoTerminalEnvironment;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoTerminalEnvironment) as _NexoTerminalEnvironment;
end;

class function CoNexoSaleCapabilities.Create: _NexoSaleCapabilities;
begin
  Result := CreateComObject(CLASS_NexoSaleCapabilities) as _NexoSaleCapabilities;
end;

class function CoNexoSaleCapabilities.CreateRemote(const MachineName: string): _NexoSaleCapabilities;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoSaleCapabilities) as _NexoSaleCapabilities;
end;

class function CoNexoProtocolVersion.Create: _NexoProtocolVersion;
begin
  Result := CreateComObject(CLASS_NexoProtocolVersion) as _NexoProtocolVersion;
end;

class function CoNexoProtocolVersion.CreateRemote(const MachineName: string): _NexoProtocolVersion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoProtocolVersion) as _NexoProtocolVersion;
end;

class function CoNexoID.Create: _NexoID;
begin
  Result := CreateComObject(CLASS_NexoID) as _NexoID;
end;

class function CoNexoID.CreateRemote(const MachineName: string): _NexoID;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoID) as _NexoID;
end;

class function CoNexoServiceID.Create: _NexoServiceID;
begin
  Result := CreateComObject(CLASS_NexoServiceID) as _NexoServiceID;
end;

class function CoNexoServiceID.CreateRemote(const MachineName: string): _NexoServiceID;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoServiceID) as _NexoServiceID;
end;

class function CoNexoDeviceID.Create: _NexoDeviceID;
begin
  Result := CreateComObject(CLASS_NexoDeviceID) as _NexoDeviceID;
end;

class function CoNexoDeviceID.CreateRemote(const MachineName: string): _NexoDeviceID;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDeviceID) as _NexoDeviceID;
end;

class function CoNexoPOIID.Create: _NexoPOIID;
begin
  Result := CreateComObject(CLASS_NexoPOIID) as _NexoPOIID;
end;

class function CoNexoPOIID.CreateRemote(const MachineName: string): _NexoPOIID;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoPOIID) as _NexoPOIID;
end;

class function CoNexoSaleID.Create: _NexoSaleID;
begin
  Result := CreateComObject(CLASS_NexoSaleID) as _NexoSaleID;
end;

class function CoNexoSaleID.CreateRemote(const MachineName: string): _NexoSaleID;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoSaleID) as _NexoSaleID;
end;

class function CoNexoOperatorLanguage.Create: _NexoOperatorLanguage;
begin
  Result := CreateComObject(CLASS_NexoOperatorLanguage) as _NexoOperatorLanguage;
end;

class function CoNexoOperatorLanguage.CreateRemote(const MachineName: string): _NexoOperatorLanguage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoOperatorLanguage) as _NexoOperatorLanguage;
end;

class function CoNexoResult.Create: _NexoResult;
begin
  Result := CreateComObject(CLASS_NexoResult) as _NexoResult;
end;

class function CoNexoResult.CreateRemote(const MachineName: string): _NexoResult;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoResult) as _NexoResult;
end;

class function CoNexoErrorCondition.Create: _NexoErrorCondition;
begin
  Result := CreateComObject(CLASS_NexoErrorCondition) as _NexoErrorCondition;
end;

class function CoNexoErrorCondition.CreateRemote(const MachineName: string): _NexoErrorCondition;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoErrorCondition) as _NexoErrorCondition;
end;

class function CoNexoAdditionalResponse.Create: _NexoAdditionalResponse;
begin
  Result := CreateComObject(CLASS_NexoAdditionalResponse) as _NexoAdditionalResponse;
end;

class function CoNexoAdditionalResponse.CreateRemote(const MachineName: string): _NexoAdditionalResponse;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoAdditionalResponse) as _NexoAdditionalResponse;
end;

class function CoNexoGlobalStatus.Create: _NexoGlobalStatus;
begin
  Result := CreateComObject(CLASS_NexoGlobalStatus) as _NexoGlobalStatus;
end;

class function CoNexoGlobalStatus.CreateRemote(const MachineName: string): _NexoGlobalStatus;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoGlobalStatus) as _NexoGlobalStatus;
end;

class function CoNexoCertificationCode.Create: _NexoCertificationCode;
begin
  Result := CreateComObject(CLASS_NexoCertificationCode) as _NexoCertificationCode;
end;

class function CoNexoCertificationCode.CreateRemote(const MachineName: string): _NexoCertificationCode;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoCertificationCode) as _NexoCertificationCode;
end;

class function CoNexoSoftwareVersion.Create: _NexoSoftwareVersion;
begin
  Result := CreateComObject(CLASS_NexoSoftwareVersion) as _NexoSoftwareVersion;
end;

class function CoNexoSoftwareVersion.CreateRemote(const MachineName: string): _NexoSoftwareVersion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoSoftwareVersion) as _NexoSoftwareVersion;
end;

class function CoNexoApplicationName.Create: _NexoApplicationName;
begin
  Result := CreateComObject(CLASS_NexoApplicationName) as _NexoApplicationName;
end;

class function CoNexoApplicationName.CreateRemote(const MachineName: string): _NexoApplicationName;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoApplicationName) as _NexoApplicationName;
end;

class function CoNexoManufacturerID.Create: _NexoManufacturerID;
begin
  Result := CreateComObject(CLASS_NexoManufacturerID) as _NexoManufacturerID;
end;

class function CoNexoManufacturerID.CreateRemote(const MachineName: string): _NexoManufacturerID;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoManufacturerID) as _NexoManufacturerID;
end;

class function CoNexoPOISerialNumber.Create: _NexoPOISerialNumber;
begin
  Result := CreateComObject(CLASS_NexoPOISerialNumber) as _NexoPOISerialNumber;
end;

class function CoNexoPOISerialNumber.CreateRemote(const MachineName: string): _NexoPOISerialNumber;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoPOISerialNumber) as _NexoPOISerialNumber;
end;

class function CoNexoOperatorID.Create: _NexoOperatorID;
begin
  Result := CreateComObject(CLASS_NexoOperatorID) as _NexoOperatorID;
end;

class function CoNexoOperatorID.CreateRemote(const MachineName: string): _NexoOperatorID;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoOperatorID) as _NexoOperatorID;
end;

class function CoNexoDateTime.Create: _NexoDateTime;
begin
  Result := CreateComObject(CLASS_NexoDateTime) as _NexoDateTime;
end;

class function CoNexoDateTime.CreateRemote(const MachineName: string): _NexoDateTime;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoDateTime) as _NexoDateTime;
end;

class function CoNexoInputCommand.Create: _NexoInputCommand;
begin
  Result := CreateComObject(CLASS_NexoInputCommand) as _NexoInputCommand;
end;

class function CoNexoInputCommand.CreateRemote(const MachineName: string): _NexoInputCommand;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoInputCommand) as _NexoInputCommand;
end;

class function CoNexoEventToNotify.Create: _NexoEventToNotify;
begin
  Result := CreateComObject(CLASS_NexoEventToNotify) as _NexoEventToNotify;
end;

class function CoNexoEventToNotify.CreateRemote(const MachineName: string): _NexoEventToNotify;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoEventToNotify) as _NexoEventToNotify;
end;

class function CoNexoPaymentIntrumentType.Create: _NexoPaymentIntrumentType;
begin
  Result := CreateComObject(CLASS_NexoPaymentIntrumentType) as _NexoPaymentIntrumentType;
end;

class function CoNexoPaymentIntrumentType.CreateRemote(const MachineName: string): _NexoPaymentIntrumentType;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoPaymentIntrumentType) as _NexoPaymentIntrumentType;
end;

class function CoNexoRetailerServerMessageHeaderValidator.Create: _NexoRetailerServerMessageHeaderValidator;
begin
  Result := CreateComObject(CLASS_NexoRetailerServerMessageHeaderValidator) as _NexoRetailerServerMessageHeaderValidator;
end;

class function CoNexoRetailerServerMessageHeaderValidator.CreateRemote(const MachineName: string): _NexoRetailerServerMessageHeaderValidator;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoRetailerServerMessageHeaderValidator) as _NexoRetailerServerMessageHeaderValidator;
end;

class function CoNexoResources.Create: _NexoResources;
begin
  Result := CreateComObject(CLASS_NexoResources) as _NexoResources;
end;

class function CoNexoResources.CreateRemote(const MachineName: string): _NexoResources;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_NexoResources) as _NexoResources;
end;

end.
